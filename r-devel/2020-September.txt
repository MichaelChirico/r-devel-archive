From r|ch@rd@o@dodd @end|ng |rom gm@||@com  Tue Sep  1 14:01:36 2020
From: r|ch@rd@o@dodd @end|ng |rom gm@||@com (Richard Dodd)
Date: Tue, 1 Sep 2020 13:01:36 +0100
Subject: [Rd] Rust bindings to nmath
Message-ID: <20200901120136.GA89453@rdodd-uom-virtualbox.localdomain>

Hello @R-devel

I needed some statistical functions for a project I was working on in
Rust, and I've used the R math library as a standalone solution. I
thought the R developers would be interested in the fact that their work
is being used elsewhere, and I also wanted to say thanks for some code I
do NOT want to have to write myself!

The "crate" (Rust's name for a package) is at 
https://lib.rs/crates/r_stats.

Best wishes
Richard Dodd


From edd @end|ng |rom deb|@n@org  Tue Sep  1 14:56:53 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 1 Sep 2020 07:56:53 -0500
Subject: [Rd] Rust bindings to nmath
In-Reply-To: <20200901120136.GA89453@rdodd-uom-virtualbox.localdomain>
References: <20200901120136.GA89453@rdodd-uom-virtualbox.localdomain>
Message-ID: <24398.17685.713250.941005@rob.eddelbuettel.com>


On 1 September 2020 at 13:01, Richard Dodd wrote:
| I needed some statistical functions for a project I was working on in
| Rust, and I've used the R math library as a standalone solution. I

That's its purpose as far as I can tell. We have provided it as a Debian
package alongside the "normal" R interpreter (and everything else) "for
decades" too.

| thought the R developers would be interested in the fact that their work
| is being used elsewhere, and I also wanted to say thanks for some code I
| do NOT want to have to write myself!
| 
| The "crate" (Rust's name for a package) is at 
| https://lib.rs/crates/r_stats.

Nice.

Any chance you could rename it to a more neutral r_mathlib or something?
As a free-standing C library it has long been wrapped by other languages, but
if it were my project I'd be more careful to not imply "all of stats" here.
FWIW in Debian we call it `r-mathlib`.

Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Sep  1 15:41:47 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 1 Sep 2020 15:41:47 +0200
Subject: [Rd] Rust bindings to nmath
In-Reply-To: <24398.17685.713250.941005@rob.eddelbuettel.com>
References: <20200901120136.GA89453@rdodd-uom-virtualbox.localdomain>
 <24398.17685.713250.941005@rob.eddelbuettel.com>
Message-ID: <24398.20379.992922.453996@stat.math.ethz.ch>

>>>>> Dirk Eddelbuettel 
>>>>>     on Tue, 1 Sep 2020 07:56:53 -0500 writes:

    > On 1 September 2020 at 13:01, Richard Dodd wrote:
    > | I needed some statistical functions for a project I was working on in
    > | Rust, and I've used the R math library as a standalone solution. I

    > That's its purpose as far as I can tell. We have provided it as a Debian
    > package alongside the "normal" R interpreter (and everything else) "for
    > decades" too.

    > | thought the R developers would be interested in the fact that their work
    > | is being used elsewhere, and I also wanted to say thanks for some code I
    > | do NOT want to have to write myself!
    > | 
    > | The "crate" (Rust's name for a package) is at 
    > | https://lib.rs/crates/r_stats.

    > Nice.

Indeed.  Thank you for letting us know!

{BTW: There's been an ambitious project of binding all of
      mathlib *and more out of R*  to a java script library;
 But I think that project has taken the typical course of
 the majority of github projects:  "code rut"}
      
    > Any chance you could rename it to a more neutral r_mathlib or something?
    > As a free-standing C library it has long been wrapped by other languages, but
    > if it were my project I'd be more careful to not imply "all of stats" here.
    > FWIW in Debian we call it `r-mathlib`.

    > Dirk
    > -- 
    > https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org

As one of the main coders or rather tweakers of its source code,
I strongly agree with Dirk  that 'r_stats' is really misleading here.

>From an R point of view,  'math library' has been a good name,
notably because there's a lot of applied math routines in there,
99% related to (applied) probability which is part of math.

If 'Rust' and other re-implementors think they must add
"stat(s)" somewhere --- which is understandable, since the
"applied math" mentioned above is almost exclusively applied to
functions important in probability and statistics ---
I'd propose something like
    " r_stats_math "

Martin M?chler
ETH Zurich  and  R Core team

--
Martin <Maechler at stat.math.ethz.ch>   http://stat.ethz.ch/~maechler
Seminar f?r Statistik, ETH Z?rich     HG G 16       R?mistrasse 101
CH-8092 Zurich, SWITZERLAND           ? +41 44 632 3408        <><


From r|ch@rd@o@dodd @end|ng |rom gm@||@com  Wed Sep  2 10:44:22 2020
From: r|ch@rd@o@dodd @end|ng |rom gm@||@com (Richard Dodd)
Date: Wed, 2 Sep 2020 09:44:22 +0100
Subject: [Rd] Rust bindings to nmath
In-Reply-To: <24398.20379.992922.453996@stat.math.ethz.ch>
References: <20200901120136.GA89453@rdodd-uom-virtualbox.localdomain>
 <24398.17685.713250.941005@rob.eddelbuettel.com>
 <24398.20379.992922.453996@stat.math.ethz.ch>
Message-ID: <20200902084422.GA16558@rdodd-uom-virtualbox.localdomain>

Thanks for the feedback!

> Any chance you could rename it to a more neutral r_mathlib or something?
> As a free-standing C library it has long been wrapped by other languages, but
> if it were my project I'd be more careful to not imply "all of stats" here.
> FWIW in Debian we call it `r-mathlib`.

I will rename it to `r-mathlib`. In addition to a more clear name, it
will aid discoverability for users if it has the same name as the same
thing somewhere else. Thanks for the tip.

Rich


From @nto|ne@|@br| @end|ng |rom gm@||@com  Wed Sep  2 20:29:53 2020
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Antoine Fabri)
Date: Wed, 2 Sep 2020 20:29:53 +0200
Subject: [Rd] sys.call() 's srcref doesn't match the language
Message-ID: <CAEKh8uj_2n00yYaaqqV6wH9th5eNebDzDFXe-yrVE9Hgqt8b2A@mail.gmail.com>

Dear R-devel,

I found this behavior disturbing, if `1 + f()` is called, `sys.call()`
called inside of `f` will return a quoted `f()` with a "srcref" that prints
"1 + f()".

I don't know which one is good but I don't think they can be correct at the
same time.

Here's a reproducible example:

f <- function(){
  sc <- sys.call()
  print(sc)
  attr(sc, "srcref") <- NULL
  print(sc)
  1
}
f2 <- function() {
  1 + f()
}
f()
#> f()
#> f()
#> [1] 1
f2()
#> 1 + f()
#> f()
#> [1] 2

Best,

Antoine

	[[alternative HTML version deleted]]


From ||one| @end|ng |rom r@tud|o@com  Thu Sep  3 00:19:02 2020
From: ||one| @end|ng |rom r@tud|o@com (Lionel Henry)
Date: Thu, 3 Sep 2020 00:19:02 +0200
Subject: [Rd] sys.call() 's srcref doesn't match the language
In-Reply-To: <CAEKh8uj_2n00yYaaqqV6wH9th5eNebDzDFXe-yrVE9Hgqt8b2A@mail.gmail.com>
References: <CAEKh8uj_2n00yYaaqqV6wH9th5eNebDzDFXe-yrVE9Hgqt8b2A@mail.gmail.com>
Message-ID: <CAJf4E3pK1m5W+-OwtvLE-Je11uDhEu2y76PuRB03UxLNvh-kmQ@mail.gmail.com>

Hello,

The source references are useful for debugging tools because they
allow linking to call sites in the source files.

I agree the output can be confusing. Perhaps this could be fixed by
tweaking the print method for calls. If the deparsed call doesn't
match the srcref, both could be displayed along with file:line:column.

```
#> f()
#> <srcref:file.R:2:3>
#> 1 + f()
```

Best,
Lionel


On 9/2/20, Antoine Fabri <antoine.fabri at gmail.com> wrote:
> Dear R-devel,
>
> I found this behavior disturbing, if `1 + f()` is called, `sys.call()`
> called inside of `f` will return a quoted `f()` with a "srcref" that prints
> "1 + f()".
>
> I don't know which one is good but I don't think they can be correct at the
> same time.
>
> Here's a reproducible example:
>
> f <- function(){
>   sc <- sys.call()
>   print(sc)
>   attr(sc, "srcref") <- NULL
>   print(sc)
>   1
> }
> f2 <- function() {
>   1 + f()
> }
> f()
> #> f()
> #> f()
> #> [1] 1
> f2()
> #> 1 + f()
> #> f()
> #> [1] 2
>
> Best,
>
> Antoine
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From @nto|ne@|@br| @end|ng |rom gm@||@com  Thu Sep  3 01:26:30 2020
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Antoine Fabri)
Date: Thu, 3 Sep 2020 01:26:30 +0200
Subject: [Rd] sys.call() 's srcref doesn't match the language
In-Reply-To: <CAJf4E3pK1m5W+-OwtvLE-Je11uDhEu2y76PuRB03UxLNvh-kmQ@mail.gmail.com>
References: <CAEKh8uj_2n00yYaaqqV6wH9th5eNebDzDFXe-yrVE9Hgqt8b2A@mail.gmail.com>
 <CAJf4E3pK1m5W+-OwtvLE-Je11uDhEu2y76PuRB03UxLNvh-kmQ@mail.gmail.com>
Message-ID: <CAEKh8uifua6MVTu=H7vue-CJh7Ok7pKXF1+fx_yqdbphYvKvHQ@mail.gmail.com>

Thanks Lionel,

I now understand what's going on. I like your proposal and I can confirm I
wouldn't have been confused had it be printed this way.

In fact I wouldn't mind the file:line:column to be displayed every time.

Best,

Antoine



Le jeu. 3 sept. 2020 ? 00:19, Lionel Henry <lionel at rstudio.com> a ?crit :

> Hello,
>
> The source references are useful for debugging tools because they
> allow linking to call sites in the source files.
>
> I agree the output can be confusing. Perhaps this could be fixed by
> tweaking the print method for calls. If the deparsed call doesn't
> match the srcref, both could be displayed along with file:line:column.
>
> ```
> #> f()
> #> <srcref:file.R:2:3>
> #> 1 + f()
> ```
>
> Best,
> Lionel
>
>
> On 9/2/20, Antoine Fabri <antoine.fabri at gmail.com> wrote:
> > Dear R-devel,
> >
> > I found this behavior disturbing, if `1 + f()` is called, `sys.call()`
> > called inside of `f` will return a quoted `f()` with a "srcref" that
> prints
> > "1 + f()".
> >
> > I don't know which one is good but I don't think they can be correct at
> the
> > same time.
> >
> > Here's a reproducible example:
> >
> > f <- function(){
> >   sc <- sys.call()
> >   print(sc)
> >   attr(sc, "srcref") <- NULL
> >   print(sc)
> >   1
> > }
> > f2 <- function() {
> >   1 + f()
> > }
> > f()
> > #> f()
> > #> f()
> > #> [1] 1
> > f2()
> > #> 1 + f()
> > #> f()
> > #> [1] 2
> >
> > Best,
> >
> > Antoine
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>

	[[alternative HTML version deleted]]


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Thu Sep  3 01:44:25 2020
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Wed, 2 Sep 2020 23:44:25 +0000 (UTC)
Subject: [Rd] sys.call() 's srcref doesn't match the language
In-Reply-To: <CAJf4E3pK1m5W+-OwtvLE-Je11uDhEu2y76PuRB03UxLNvh-kmQ@mail.gmail.com>
References: <CAEKh8uj_2n00yYaaqqV6wH9th5eNebDzDFXe-yrVE9Hgqt8b2A@mail.gmail.com>
 <CAJf4E3pK1m5W+-OwtvLE-Je11uDhEu2y76PuRB03UxLNvh-kmQ@mail.gmail.com>
Message-ID: <362950017.11753.1599090265663@mail.yahoo.com>

>On Wednesday, September 2, 2020, 6:19:20 PM EDT, Lionel Henry <lionel at rstudio.com> wrote:
>
>Hello,
>
>The source references are useful for debugging tools because they
>allow linking to call sites in the source files.
>
>I agree the output can be confusing. Perhaps this could be fixed by
>tweaking the print method for calls. If the deparsed call doesn't
>match the srcref, both could be displayed along with file:line:column.
>
>```
>#> f()
>#> <srcref:file.R:2:3>
>#> 1 + f()
>```
>
>Best,
>Lionel

Why print the mismatched srcref at all?? I find that confusing.
Just omit the srcref from display. Debugging tools can
still retrieve it and use the information, presumably.

Best,

Brodie.


From henr|k@bengt@@on @end|ng |rom gm@||@com  Thu Sep  3 08:38:07 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Wed, 2 Sep 2020 23:38:07 -0700
Subject: [Rd] Rgui never processes ~/.Renviron
Message-ID: <CAFDcVCRr50sNuc9y0NT4JL2dSe0Gn8=rqGLB_K7NRyzyOVtUUg@mail.gmail.com>

ISSUE:
It looks like Rgui.exe never processes ~/.Renviron - only ./.Renviron.

REPRODUCIBLE EXAMPLE:
On Windows, create the following ~/.Renviron and ~/.Rprofile files:

C:\Users\alice> Rscript -e "cat('FOO=123\n', file='~/.Renviron')"
C:\Users\alice> Rscript -e "cat('print(Sys.getenv(\'FOO\'))',
file='~/.Rprofile')"

and launch Rgui (from a folder other that ~):
C:\Users\alice> Rgui

and you'll see that FOO is reported as "" (empty), whereas with R or
Rscript, it is reported as "123".


TROUBLESHOOTING:
>From code inspection
(<https://github.com/wch/r-source/blob/1658c8491e9cdc6d2fe61603ed23ae56232b6727/src/main/Renviron.c#L298-L301>):

#ifdef Win32
  {
    char buf[1024]; /* MAX_PATH is less than this */
    /* R_USER is not necessarily set yet, so we have to work harder */
    s = getenv("R_USER");
    if(!s) s = getenv("HOME");
    if(!s) return;
    snprintf(buf, 1024, "%s/.Renviron", s);
    s = buf;
  }
#endif

I think it happens because neither R_USER nor HOME is set when the
Rgui startup process calls process_user_Renviron().

WORKAROUND:
Setting R_USER or HOME prior to calling Rgui will cause Rgui to
process ~/.Renviron, e.g.

C:\User\alice> set R_USER=%UserProfile%\Documents
C:\User\alice> Rgui

The background for finding this is R-help thread '[R] tempdir() does
not respect TMPDIR' on 2020-08-29
(https://stat.ethz.ch/pipermail/r-help/2020-August/468573.html).

/Henrik


From edd @end|ng |rom deb|@n@org  Thu Sep  3 16:25:40 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Thu, 3 Sep 2020 09:25:40 -0500
Subject: [Rd] Rgui never processes ~/.Renviron
In-Reply-To: <CAFDcVCRr50sNuc9y0NT4JL2dSe0Gn8=rqGLB_K7NRyzyOVtUUg@mail.gmail.com>
References: <CAFDcVCRr50sNuc9y0NT4JL2dSe0Gn8=rqGLB_K7NRyzyOVtUUg@mail.gmail.com>
Message-ID: <24400.64740.172176.93099@rob.eddelbuettel.com>


On 2 September 2020 at 23:38, Henrik Bengtsson wrote:
| WORKAROUND:
| Setting R_USER or HOME prior to calling Rgui will cause Rgui to
| process ~/.Renviron, e.g.

AFAICR one _always_ had to manually set $HOME on Windows as the convention of
having it comes from the some other OSs and is not native.

In short I don't think this is new. A quick Google search seems to confirm
this with a SuperUser answer from 2013:

https://superuser.com/questions/607105/is-the-home-environment-variable-normally-set-in-windows

Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Sep  6 14:17:56 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 6 Sep 2020 08:17:56 -0400
Subject: [Rd] Error in ?lowess
Message-ID: <20a14d69-3258-aa49-d28d-6c1dd2d02f80@gmail.com>

The lowess() help page refers to documentation in "src/appl/lowess.doc". 
  This was moved to "src/library/stats/src/lowess.doc" in 2007.  This 
patch fixes it:

Index: src/library/stats/man/lowess.Rd
===================================================================
--- src/library/stats/man/lowess.Rd	(revision 79137)
+++ src/library/stats/man/lowess.Rd	(working copy)
@@ -30,7 +30,7 @@
  \details{
    \code{lowess} is defined by a complex algorithm, the Ratfor original
    of which (by W. S. Cleveland) can be found in the \R sources as file
-  \file{src/appl/lowess.doc}.  Normally a local linear polynomial fit is
+  \file{src/library/stats/src/lowess.doc}.  Normally a local linear 
polynomial fit is
    used, but under some circumstances (see the file) a local constant fit
    can be used.  \sQuote{Local} is defined by the distance to the
    \code{floor(f*n)}th nearest neighbour, and tricubic weighting is used


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Mon Sep  7 07:35:17 2020
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Mon, 7 Sep 2020 07:35:17 +0200
Subject: [Rd] Error in ?lowess
In-Reply-To: <20a14d69-3258-aa49-d28d-6c1dd2d02f80@gmail.com>
References: <20a14d69-3258-aa49-d28d-6c1dd2d02f80@gmail.com>
Message-ID: <24405.50837.987572.889538@hornik.net>

>>>>> Duncan Murdoch writes:

Thanks, fixed now.

Best
-k

> The lowess() help page refers to documentation in "src/appl/lowess.doc". 
>   This was moved to "src/library/stats/src/lowess.doc" in 2007.  This 
> patch fixes it:

> Index: src/library/stats/man/lowess.Rd
> ===================================================================
> --- src/library/stats/man/lowess.Rd	(revision 79137)
> +++ src/library/stats/man/lowess.Rd	(working copy)
> @@ -30,7 +30,7 @@
>   \details{
>     \code{lowess} is defined by a complex algorithm, the Ratfor original
>     of which (by W. S. Cleveland) can be found in the \R sources as file
> -  \file{src/appl/lowess.doc}.  Normally a local linear polynomial fit is
> +  \file{src/library/stats/src/lowess.doc}.  Normally a local linear 
> polynomial fit is
>     used, but under some circumstances (see the file) a local constant fit
>     can be used.  \sQuote{Local} is defined by the distance to the
>     \code{floor(f*n)}th nearest neighbour, and tricubic weighting is used

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From d@n+r-deve| @end|ng |rom kort@ch@k@|o  Sun Sep  6 03:44:01 2020
From: d@n+r-deve| @end|ng |rom kort@ch@k@|o (Dan Kortschak)
Date: Sun, 06 Sep 2020 01:44:01 +0000
Subject: [Rd] some questions about R internal SEXP types
In-Reply-To: <8f4d92d753e266a0c8a303b9a354a42a071b24bf.camel@kortschak.io>
References: <8f4d92d753e266a0c8a303b9a354a42a071b24bf.camel@kortschak.io>
Message-ID: <1ec817ab612c4cf782b15f8150364ad4ff3b306b.camel-2274@kortschak.io>


Hello,

I am writing an R/Go interoperability tool[1] that work similarly to
Rcpp; the tool takes packages written in Go and performs the necessary
Go type analysis to wrap the Go code with C and R shims that allow the
Go code to then be called from R. The system is largely complete (with
the exception of having a clean approach to handling generalised
attributes in the easy case[2] - the less hand holding case does handle
these). Testing of some of the code is unfortunately lacking because of
the difficulties of testing across environments.

To make the system flexible I have provided an (intentionally
incomplete) Go API into the R internals which allows reasonably Go
type-safe interaction with SEXP values (Go does not have unions, so
this is uglier than it might be otherwise and unions are faked with Go
interface values). For efficiency reasons I've avoided using R internal
calls where possible (accessors are done with Go code directly, but
allocations are done in R's C code to avoid having to duplicate the
garbage collection mechanics in Go with the obvious risks of error and
possible behaviour skew in the future).

In doing this work I have some questions that I have not been able to
find answers for in the R-ints doc or hadley/r-internals.

   1. In R-ints, the LISTSXP SEXP type CDR is said to hold "usually"
      LISTSXP or NULL. What does the "usually" mean here? Is it possible
      for the CDR to hold values other than LISTSXP or NULL, and is
      this?NULL NILSXP or C NULL? I assume that the CAR can hold any type
      of?SEXP, is this correct?
   2. The LANGSXP and DOTSXP types are lists, but the R-ints comments on
      them do not say whether the CDR of one of these lists is the same at
      the head of the list of devolves to a LISTSXP. Looking through the
      code suggests to me that functions that allocate these two types
      allocate a LISTSXP and then change only the head of the list to be
      the LANGSXP or DOTSXP that's required, meaning that the tail of the
      list is all LISTSXP. Is this correct?

The last question is more a question of interest in design strategy,
and the answer may have been lost to time. In order to reduce the need
to go through Go's interface assertions in a number of cases I have
decided to reinterpret R_NilValue to an untyped Go nil (this is
important for example in list traversal where the CDR can (hopefully)
be only one of two types LISTSXP or NILSXP; in Go this would require a
generalised SEXP return, but by doing this reinterpretation I can
return a *List pointer which may be nil, greatly simplifying the code
and improving the performance). My question her is why a singleton null
value was chosen to be represented as a fully allocated SEXP value
rather than just a C NULL. Also, whether C NULL is used to any great
extent within the internal code. Note that the Go API provides a
mechanism to easily reconvert the nil's used back to a R_NilValue when
returning from a Go function[3].

thanks
Dan Kortschak

[1]https://github.com/rgonomic/rgo
[2]https://github.com/rgonomic/rgo/issues/1
[3]https://pkg.go.dev/github.com/rgonomic/rgo/sexp?tab=doc#Value.Export


From hugh@p@r@on@ge @end|ng |rom gm@||@com  Tue Sep  8 10:08:11 2020
From: hugh@p@r@on@ge @end|ng |rom gm@||@com (Hugh Parsonage)
Date: Tue, 8 Sep 2020 18:08:11 +1000
Subject: [Rd] Operations with long altrep vectors cause segfaults on Windows
Message-ID: <CAJmOi+MjsxpO+i9r57xwb5Ex+GcrECGB17GScy-_w+Y0jK6dmQ@mail.gmail.com>

I can only reproduce on Windows, but reliably (both 4.0.0 and 4.0.2):

$> R --vanilla
x <- c(0L, -2e9:2e9)

# > Segmentation fault

Tried to reproduce on Linux but the above worked as expected. Not an
issue merely with the length of the vector; for example, x <-
rep_len(1:10, 1e10) works, though the altrep vector must be long to
reproduce:

x <- c(0L, -1e9:1e9)  #ok

Segmentation faults occur with the following too:

x <- (-2e9:2e9) + 1L


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Sep  8 10:40:24 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 8 Sep 2020 10:40:24 +0200
Subject: [Rd] 
 Operations with long altrep vectors cause segfaults on Windows
In-Reply-To: <CAJmOi+MjsxpO+i9r57xwb5Ex+GcrECGB17GScy-_w+Y0jK6dmQ@mail.gmail.com>
References: <CAJmOi+MjsxpO+i9r57xwb5Ex+GcrECGB17GScy-_w+Y0jK6dmQ@mail.gmail.com>
Message-ID: <24407.17272.770281.413960@stat.math.ethz.ch>

>>>>> Hugh Parsonage 
>>>>>     on Tue, 8 Sep 2020 18:08:11 +1000 writes:

    > I can only reproduce on Windows, but reliably (both 4.0.0 and 4.0.2):

    > $> R --vanilla
    > x <- c(0L, -2e9:2e9)

    > # > Segmentation fault

    > Tried to reproduce on Linux but the above worked as expected. Not an
    > issue merely with the length of the vector; for example, x <-
    > rep_len(1:10, 1e10) works, though the altrep vector must be long to
    > reproduce:

    > x <- c(0L, -1e9:1e9)  #ok

    > Segmentation faults occur with the following too:

    > x <- (-2e9:2e9) + 1L

Your operation would "need" (not in theory, but in practice)
to go from altrep to regular vectors.
I guess the segfault occurs because of something like this :

 R asks Windows to hand it a huge amount of memory and Windows replies
 "ok, here is the memory pointer"
 and then R tries to write to there, but illegally (because
 Windows should have told R that it does not really have enough
 memory for that ..). 
 
I cannot reproduce the segmentation fault .. but I can confirm
there is a bug there that shows for me on Windows but not on
Linux:

"My" Windows is on a terminalserver not with too many GB of memory
(but then in a version of Windows that recognizes that it cannot
 get so much memory):

------------------------- Here some transcript (thanks to
                          using Emacs w/ ESS also on Windows) ------------------

R Under development (unstable) (2020-08-24 r79074) -- "Unsuffered Consequences"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R ist freie Software und kommt OHNE JEGLICHE GARANTIE.
Sie sind eingeladen, es unter bestimmten Bedingungen weiter zu verbreiten.
Tippen Sie 'license()' or 'licence()' f?r Details dazu.

R ist ein Gemeinschaftsprojekt mit vielen Beitragenden.
Tippen Sie 'contributors()' f?r mehr Information und 'citation()',
um zu erfahren, wie R oder R packages in Publikationen zitiert werden k?nnen.

Tippen Sie 'demo()' f?r einige Demos, 'help()' f?r on-line Hilfe, oder
'help.start()' f?r eine HTML Browserschnittstelle zur Hilfe.
Tippen Sie 'q()', um R zu verlassen.

> x <- (-2e9:2e9) + 1L
Fehler: kann Vektor der Gr??e 14.9 GB nicht allozieren
> y <- c(0L, -2e9:2e9)
Fehler: kann Vektor der Gr??e 14.9 GB nicht allozieren
> Sys.setenv(LANGUAGE="en")
> y <- c(0L, -2e9:2e9)
Error: cannot allocate vector of size 14.9 Gb
> y <- -1e9:4e9
> .Internal(inspect(y))
@0x00000000195a6808 14 REALSXP g0c0 [REF(65535)]  -1000000000 : -294967296 (compact)
> .Machine$integer.max / 1e9
[1] 2.147484
> y <- -1e6:2.2e9
> .Internal(inspect(y))
@0x000000000a11a5d8 14 REALSXP g0c0 [REF(65535)]  -1000000 : -2094967296 (compact)
> y <- -1e6:2e9
> .Internal(inspect(y))
@0x000000000a13adf0 13 INTSXP g0c0 [REF(65535)]  -1000000 : 2000000000 (compact)
> 
------------------------- end of transcript -----------------------------------

So indeed, no seg.fault, R notices that it can't get 15 GB of
memory.

But the bug is bad news:  We have *silent* integer overflow happening
according to what  .Internal(inspect(y)) shows...

 .... less bad new: Probably the bug is only in the 'internal inspect' code
 where a format specifier is used in C's printf() that does not work
 correctly on Windows, at least the way it is currently compiled ..


On (64-bit) Linux, I get

> y <- -1e9:4e9 ; .Internal(inspect(y))
@7d86388 14 REALSXP g0c0 [REF(65535)]  -1000000000 : 4000000000 (compact)

> y <- c(0L, y)
Error: cannot allocate vector of size 37.3 Gb

which seems much better ... until I do find a bug, may again
only in the C code underlying .Internal(inspect(.)) :

> y <- -1e9:2e9 ; .Internal(inspect(y))
@7d86ac0 13 INTSXP g0c0 [REF(65535)] Error: long vectors not supported yet: ../../../R/src/main/altclasses.c:139
>


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Sep  8 10:52:37 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 8 Sep 2020 10:52:37 +0200
Subject: [Rd] 
 Operations with long altrep vectors cause segfaults on Windows
In-Reply-To: <24407.17272.770281.413960@stat.math.ethz.ch>
References: <CAJmOi+MjsxpO+i9r57xwb5Ex+GcrECGB17GScy-_w+Y0jK6dmQ@mail.gmail.com>
 <24407.17272.770281.413960@stat.math.ethz.ch>
Message-ID: <24407.18005.968508.796695@stat.math.ethz.ch>

>>>>> Martin Maechler 
>>>>>     on Tue, 8 Sep 2020 10:40:24 +0200 writes:

>>>>> Hugh Parsonage 
>>>>>     on Tue, 8 Sep 2020 18:08:11 +1000 writes:

    >> I can only reproduce on Windows, but reliably (both 4.0.0 and 4.0.2):

    >> $> R --vanilla
    >> x <- c(0L, -2e9:2e9)

    >> # > Segmentation fault

    >> Tried to reproduce on Linux but the above worked as expected. Not an
    >> issue merely with the length of the vector; for example, x <-
    >> rep_len(1:10, 1e10) works, though the altrep vector must be long to
    >> reproduce:

    >> x <- c(0L, -1e9:1e9)  #ok

    >> Segmentation faults occur with the following too:

    >> x <- (-2e9:2e9) + 1L

    > Your operation would "need" (not in theory, but in practice)
    > to go from altrep to regular vectors.
    > I guess the segfault occurs because of something like this :

    > R asks Windows to hand it a huge amount of memory and Windows replies
    > "ok, here is the memory pointer"
    > and then R tries to write to there, but illegally (because
    > Windows should have told R that it does not really have enough
    > memory for that ..). 
 
    > I cannot reproduce the segmentation fault .. but I can confirm
    > there is a bug there that shows for me on Windows but not on
    > Linux:

    > "My" Windows is on a terminalserver not with too many GB of memory
    > (but then in a version of Windows that recognizes that it cannot
    > get so much memory):

    > ------------------------- Here some transcript (thanks to
    > using Emacs w/ ESS also on Windows) ------------------

    > R Under development (unstable) (2020-08-24 r79074) -- "Unsuffered Consequences"
    > Copyright (C) 2020 The R Foundation for Statistical Computing
    > Platform: x86_64-w64-mingw32/x64 (64-bit)

    > R ist freie Software und kommt OHNE JEGLICHE GARANTIE.
    > Sie sind eingeladen, es unter bestimmten Bedingungen weiter zu verbreiten.
    > Tippen Sie 'license()' or 'licence()' f?r Details dazu.

    > R ist ein Gemeinschaftsprojekt mit vielen Beitragenden.
    > Tippen Sie 'contributors()' f?r mehr Information und 'citation()',
    > um zu erfahren, wie R oder R packages in Publikationen zitiert werden k?nnen.

    > Tippen Sie 'demo()' f?r einige Demos, 'help()' f?r on-line Hilfe, oder
    > 'help.start()' f?r eine HTML Browserschnittstelle zur Hilfe.
    > Tippen Sie 'q()', um R zu verlassen.

    >> x <- (-2e9:2e9) + 1L
    > Fehler: kann Vektor der Gr??e 14.9 GB nicht allozieren
    >> y <- c(0L, -2e9:2e9)
    > Fehler: kann Vektor der Gr??e 14.9 GB nicht allozieren
    >> Sys.setenv(LANGUAGE="en")
    >> y <- c(0L, -2e9:2e9)
    > Error: cannot allocate vector of size 14.9 Gb
    >> y <- -1e9:4e9
    >> .Internal(inspect(y))
    > @0x00000000195a6808 14 REALSXP g0c0 [REF(65535)]  -1000000000 : -294967296 (compact)
    >> .Machine$integer.max / 1e9
    > [1] 2.147484
    >> y <- -1e6:2.2e9
    >> .Internal(inspect(y))
    > @0x000000000a11a5d8 14 REALSXP g0c0 [REF(65535)]  -1000000 : -2094967296 (compact)
    >> y <- -1e6:2e9
    >> .Internal(inspect(y))
    > @0x000000000a13adf0 13 INTSXP g0c0 [REF(65535)]  -1000000 : 2000000000 (compact)
    >> 
    > ------------------------- end of transcript -----------------------------------

    > So indeed, no seg.fault, R notices that it can't get 15 GB of
    > memory.

    > But the bug is bad news:  We have *silent* integer overflow happening
    > according to what  .Internal(inspect(y)) shows...

    > .... less bad new: Probably the bug is only in the 'internal inspect' code
    > where a format specifier is used in C's printf() that does not work
    > correctly on Windows, at least the way it is currently compiled ..


    > On (64-bit) Linux, I get

    >> y <- -1e9:4e9 ; .Internal(inspect(y))
    > @7d86388 14 REALSXP g0c0 [REF(65535)]  -1000000000 : 4000000000 (compact)

    >> y <- c(0L, y)
    > Error: cannot allocate vector of size 37.3 Gb

    > which seems much better ... until I do find a bug, may again
    > only in the C code underlying .Internal(inspect(.)) :

    >> y <- -1e9:2e9 ; .Internal(inspect(y))
    > @7d86ac0 13 INTSXP g0c0 [REF(65535)] Error: long vectors not supported yet: ../../../R/src/main/altclasses.c:139
    >> 

Indeed, the purported "integer overflow" (above) does not
happen.
It is "only" a  'printf' related bug inside .Internal(inspect(.)) on Windows.

*interestingly*, the above bug I've noticed on (64-bit) Linux
does *not* show on Windows (64-bit), at least not for that case:

On Windows, things are fine as long as they remain (compacted
aka 'ALTREP') INTSXP:

  > y <- -1e3:2e9 ;.Internal(inspect(y))
  @0x000000000a285648 13 INTSXP g0c0 [REF(65535)]  -1000 : 2000000000 (compact)
  > y <- -1e3:2.1e9 ;.Internal(inspect(y))
  @0x0000000019925930 13 INTSXP g0c0 [REF(65535)]  -1000 : 2100000000 (compact)

and here, y is correct, just the printing from
.Internal(inspect(y)) is bugous (probably prints the double as an integer):

  > y <- -1e3:2.2e9 ; .Internal(inspect(y))
  @0x00000000195c0178 14 REALSXP g0c0 [REF(65535)]  -1000 : -2094967296 (compact)
  > length(y)
  [1] 2200001001
  > tail(y)
  [1] 2.2e+09 2.2e+09 2.2e+09 2.2e+09 2.2e+09 2.2e+09
  > tail(y) - 2.2e9
  [1] -5 -4 -3 -2 -1  0
  >


From d@n+r-deve| @end|ng |rom kort@ch@k@|o  Tue Sep  8 10:59:40 2020
From: d@n+r-deve| @end|ng |rom kort@ch@k@|o (Dan Kortschak)
Date: Tue, 08 Sep 2020 08:59:40 +0000
Subject: [Rd] some questions about R internal SEXP types
In-Reply-To: <CAOdV3zA-cFvDvyV-pvx6NDpk7EBmOXBDv_w01P6qdHnFQtqLNg@mail.gmail.com>
References: <8f4d92d753e266a0c8a303b9a354a42a071b24bf.camel@kortschak.io>
 <1ec817ab612c4cf782b15f8150364ad4ff3b306b.camel-2274@kortschak.io>
 <CAOdV3zA-cFvDvyV-pvx6NDpk7EBmOXBDv_w01P6qdHnFQtqLNg@mail.gmail.com>
Message-ID: <cd798e24c9fc3b7a8d6adc4d70a73edca6c8ee92.camel@kortschak.io>

Thanks, Alex.

That might be good enough for me for this particular concern; in the
absence of a language specification specifying my behaviour and
referring to precedent seems like a reasonable fall back.

Dan

On Tue, 2020-09-08 at 09:33 +0200, Bertram, Alexander wrote:
> Hi Dan,
> 
> For what it's worth, Renjin requires LISTSXPs to hold either a
> LISTSXP or a NULL, and this appears to be largely the case in
> practice based on running tests for thousands of packages (including
> cross compiled C code). I can only remember it being briefly an issue
> with the rlang package, but Lionel graciously changed it:
> https://github.com/r-lib/rlang/pull/579
> 
> Best,
> Alex


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Sep  8 11:07:39 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 8 Sep 2020 11:07:39 +0200
Subject: [Rd] some questions about R internal SEXP types
In-Reply-To: <1ec817ab612c4cf782b15f8150364ad4ff3b306b.camel-2274@kortschak.io>
References: <8f4d92d753e266a0c8a303b9a354a42a071b24bf.camel@kortschak.io>
 <1ec817ab612c4cf782b15f8150364ad4ff3b306b.camel-2274@kortschak.io>
Message-ID: <f3f345c0-146e-9c0e-7856-9130237b3220@gmail.com>


The general principle is that R packages are only allowed to use what is 
documented in the R help (? command) and in Writing R Extensions. The 
former covers what is allowed from R code in extensions, the latter 
mostly what is allowed from C code in extensions (with some references 
to Fortran).

If you are implementing a Go interface for writing R packages, such Go 
interface should thus only use what is in the R help and in Writing R 
Extensions. Otherwise, packages would not be able to use such interface.

What is described in R Internals is for understanding the internal 
structure of R implementation itself, so for development of R itself, it 
could help indeed also debugging of R itself and in some cases debugging 
or performance analysis of extensions. R Internals can help in giving an 
intuition, but when people are implementing R itself, they also need to 
check the code. R Internals does not describe any interface for external 
code, if it states any constraints about say pairlists, etc, take it as 
an intuition for what has been intended and probably holds or held at 
some level of abstraction, but you need to check the source code for the 
details, anyway (e.g., at some very low level CAR and CDR can be any 
SEXP or R_NilValue, locally in some functions even C NULL). Internally, 
some C code uses C NULL SEXPs, but it is rare and local, and again, only 
the interface described in Writing R Extensions is for external use.

WRE speaks about "R NULL", "R NULL object" or "C NULL" in some cases to 
avoid confusion, e.g. for values types as "void *". SEXPs that packages 
obtain using the interface in WRE should not be C NULL, only R NULL 
(R_NilValue). External pointers can become C NULL and this is documented 
in WRE 5.13.

Best
Tomas

On 9/6/20 3:44 AM, Dan Kortschak via R-devel wrote:
> Hello,
>
> I am writing an R/Go interoperability tool[1] that work similarly to
> Rcpp; the tool takes packages written in Go and performs the necessary
> Go type analysis to wrap the Go code with C and R shims that allow the
> Go code to then be called from R. The system is largely complete (with
> the exception of having a clean approach to handling generalised
> attributes in the easy case[2] - the less hand holding case does handle
> these). Testing of some of the code is unfortunately lacking because of
> the difficulties of testing across environments.
>
> To make the system flexible I have provided an (intentionally
> incomplete) Go API into the R internals which allows reasonably Go
> type-safe interaction with SEXP values (Go does not have unions, so
> this is uglier than it might be otherwise and unions are faked with Go
> interface values). For efficiency reasons I've avoided using R internal
> calls where possible (accessors are done with Go code directly, but
> allocations are done in R's C code to avoid having to duplicate the
> garbage collection mechanics in Go with the obvious risks of error and
> possible behaviour skew in the future).
>
> In doing this work I have some questions that I have not been able to
> find answers for in the R-ints doc or hadley/r-internals.
>
>     1. In R-ints, the LISTSXP SEXP type CDR is said to hold "usually"
>        LISTSXP or NULL. What does the "usually" mean here? Is it possible
>        for the CDR to hold values other than LISTSXP or NULL, and is
>        this?NULL NILSXP or C NULL? I assume that the CAR can hold any type
>        of?SEXP, is this correct?
>     2. The LANGSXP and DOTSXP types are lists, but the R-ints comments on
>        them do not say whether the CDR of one of these lists is the same at
>        the head of the list of devolves to a LISTSXP. Looking through the
>        code suggests to me that functions that allocate these two types
>        allocate a LISTSXP and then change only the head of the list to be
>        the LANGSXP or DOTSXP that's required, meaning that the tail of the
>        list is all LISTSXP. Is this correct?
>
> The last question is more a question of interest in design strategy,
> and the answer may have been lost to time. In order to reduce the need
> to go through Go's interface assertions in a number of cases I have
> decided to reinterpret R_NilValue to an untyped Go nil (this is
> important for example in list traversal where the CDR can (hopefully)
> be only one of two types LISTSXP or NILSXP; in Go this would require a
> generalised SEXP return, but by doing this reinterpretation I can
> return a *List pointer which may be nil, greatly simplifying the code
> and improving the performance). My question her is why a singleton null
> value was chosen to be represented as a fully allocated SEXP value
> rather than just a C NULL. Also, whether C NULL is used to any great
> extent within the internal code. Note that the Go API provides a
> mechanism to easily reconvert the nil's used back to a R_NilValue when
> returning from a Go function[3].
>
> thanks
> Dan Kortschak
>
> [1]https://github.com/rgonomic/rgo
> [2]https://github.com/rgonomic/rgo/issues/1
> [3]https://pkg.go.dev/github.com/rgonomic/rgo/sexp?tab=doc#Value.Export
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From hugh@p@r@on@ge @end|ng |rom gm@||@com  Tue Sep  8 11:15:03 2020
From: hugh@p@r@on@ge @end|ng |rom gm@||@com (Hugh Parsonage)
Date: Tue, 8 Sep 2020 19:15:03 +1000
Subject: [Rd] 
 Operations with long altrep vectors cause segfaults on Windows
In-Reply-To: <24407.18005.968508.796695@stat.math.ethz.ch>
References: <CAJmOi+MjsxpO+i9r57xwb5Ex+GcrECGB17GScy-_w+Y0jK6dmQ@mail.gmail.com>
 <24407.17272.770281.413960@stat.math.ethz.ch>
 <24407.18005.968508.796695@stat.math.ethz.ch>
Message-ID: <CAJmOi+OOVjR5A=tjR+knHqq1Zcd9cJPg_kxsEDGu0enq0U92VA@mail.gmail.com>

Thanks Martin.  On further testing, it seems that the segmentation
fault can only occur when the amount of obtainable memory is
sufficiently high. On my machine (admittedly with other processes
running):

$ R --vanilla --max-mem-size=30G -e "x <- c(0L, -2e9:2e9)"
Segmentation fault

$ R --vanilla --max-mem-size=29G -e "x <- c(0L, -2e9:2e9)"
Error: cannot allocate vector of size 14.9 Gb
Execution halted

On Tue, 8 Sep 2020 at 18:52, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
>
> >>>>> Martin Maechler
> >>>>>     on Tue, 8 Sep 2020 10:40:24 +0200 writes:
>
> >>>>> Hugh Parsonage
> >>>>>     on Tue, 8 Sep 2020 18:08:11 +1000 writes:
>
>     >> I can only reproduce on Windows, but reliably (both 4.0.0 and 4.0.2):
>
>     >> $> R --vanilla
>     >> x <- c(0L, -2e9:2e9)
>
>     >> # > Segmentation fault
>
>     >> Tried to reproduce on Linux but the above worked as expected. Not an
>     >> issue merely with the length of the vector; for example, x <-
>     >> rep_len(1:10, 1e10) works, though the altrep vector must be long to
>     >> reproduce:
>
>     >> x <- c(0L, -1e9:1e9)  #ok
>
>     >> Segmentation faults occur with the following too:
>
>     >> x <- (-2e9:2e9) + 1L
>
>     > Your operation would "need" (not in theory, but in practice)
>     > to go from altrep to regular vectors.
>     > I guess the segfault occurs because of something like this :
>
>     > R asks Windows to hand it a huge amount of memory and Windows replies
>     > "ok, here is the memory pointer"
>     > and then R tries to write to there, but illegally (because
>     > Windows should have told R that it does not really have enough
>     > memory for that ..).
>
>     > I cannot reproduce the segmentation fault .. but I can confirm
>     > there is a bug there that shows for me on Windows but not on
>     > Linux:
>
>     > "My" Windows is on a terminalserver not with too many GB of memory
>     > (but then in a version of Windows that recognizes that it cannot
>     > get so much memory):
>
>     > ------------------------- Here some transcript (thanks to
>     > using Emacs w/ ESS also on Windows) ------------------
>
>     > R Under development (unstable) (2020-08-24 r79074) -- "Unsuffered Consequences"
>     > Copyright (C) 2020 The R Foundation for Statistical Computing
>     > Platform: x86_64-w64-mingw32/x64 (64-bit)
>
>     > R ist freie Software und kommt OHNE JEGLICHE GARANTIE.
>     > Sie sind eingeladen, es unter bestimmten Bedingungen weiter zu verbreiten.
>     > Tippen Sie 'license()' or 'licence()' f?r Details dazu.
>
>     > R ist ein Gemeinschaftsprojekt mit vielen Beitragenden.
>     > Tippen Sie 'contributors()' f?r mehr Information und 'citation()',
>     > um zu erfahren, wie R oder R packages in Publikationen zitiert werden k?nnen.
>
>     > Tippen Sie 'demo()' f?r einige Demos, 'help()' f?r on-line Hilfe, oder
>     > 'help.start()' f?r eine HTML Browserschnittstelle zur Hilfe.
>     > Tippen Sie 'q()', um R zu verlassen.
>
>     >> x <- (-2e9:2e9) + 1L
>     > Fehler: kann Vektor der Gr??e 14.9 GB nicht allozieren
>     >> y <- c(0L, -2e9:2e9)
>     > Fehler: kann Vektor der Gr??e 14.9 GB nicht allozieren
>     >> Sys.setenv(LANGUAGE="en")
>     >> y <- c(0L, -2e9:2e9)
>     > Error: cannot allocate vector of size 14.9 Gb
>     >> y <- -1e9:4e9
>     >> .Internal(inspect(y))
>     > @0x00000000195a6808 14 REALSXP g0c0 [REF(65535)]  -1000000000 : -294967296 (compact)
>     >> .Machine$integer.max / 1e9
>     > [1] 2.147484
>     >> y <- -1e6:2.2e9
>     >> .Internal(inspect(y))
>     > @0x000000000a11a5d8 14 REALSXP g0c0 [REF(65535)]  -1000000 : -2094967296 (compact)
>     >> y <- -1e6:2e9
>     >> .Internal(inspect(y))
>     > @0x000000000a13adf0 13 INTSXP g0c0 [REF(65535)]  -1000000 : 2000000000 (compact)
>     >>
>     > ------------------------- end of transcript -----------------------------------
>
>     > So indeed, no seg.fault, R notices that it can't get 15 GB of
>     > memory.
>
>     > But the bug is bad news:  We have *silent* integer overflow happening
>     > according to what  .Internal(inspect(y)) shows...
>
>     > .... less bad new: Probably the bug is only in the 'internal inspect' code
>     > where a format specifier is used in C's printf() that does not work
>     > correctly on Windows, at least the way it is currently compiled ..
>
>
>     > On (64-bit) Linux, I get
>
>     >> y <- -1e9:4e9 ; .Internal(inspect(y))
>     > @7d86388 14 REALSXP g0c0 [REF(65535)]  -1000000000 : 4000000000 (compact)
>
>     >> y <- c(0L, y)
>     > Error: cannot allocate vector of size 37.3 Gb
>
>     > which seems much better ... until I do find a bug, may again
>     > only in the C code underlying .Internal(inspect(.)) :
>
>     >> y <- -1e9:2e9 ; .Internal(inspect(y))
>     > @7d86ac0 13 INTSXP g0c0 [REF(65535)] Error: long vectors not supported yet: ../../../R/src/main/altclasses.c:139
>     >>
>
> Indeed, the purported "integer overflow" (above) does not
> happen.
> It is "only" a  'printf' related bug inside .Internal(inspect(.)) on Windows.
>
> *interestingly*, the above bug I've noticed on (64-bit) Linux
> does *not* show on Windows (64-bit), at least not for that case:
>
> On Windows, things are fine as long as they remain (compacted
> aka 'ALTREP') INTSXP:
>
>   > y <- -1e3:2e9 ;.Internal(inspect(y))
>   @0x000000000a285648 13 INTSXP g0c0 [REF(65535)]  -1000 : 2000000000 (compact)
>   > y <- -1e3:2.1e9 ;.Internal(inspect(y))
>   @0x0000000019925930 13 INTSXP g0c0 [REF(65535)]  -1000 : 2100000000 (compact)
>
> and here, y is correct, just the printing from
> .Internal(inspect(y)) is bugous (probably prints the double as an integer):
>
>   > y <- -1e3:2.2e9 ; .Internal(inspect(y))
>   @0x00000000195c0178 14 REALSXP g0c0 [REF(65535)]  -1000 : -2094967296 (compact)
>   > length(y)
>   [1] 2200001001
>   > tail(y)
>   [1] 2.2e+09 2.2e+09 2.2e+09 2.2e+09 2.2e+09 2.2e+09
>   > tail(y) - 2.2e9
>   [1] -5 -4 -3 -2 -1  0
>   >
>


From g@bembecker @end|ng |rom gm@||@com  Mon Sep  7 23:38:12 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Mon, 7 Sep 2020 14:38:12 -0700
Subject: [Rd] some questions about R internal SEXP types
In-Reply-To: <1ec817ab612c4cf782b15f8150364ad4ff3b306b.camel-2274@kortschak.io>
References: <8f4d92d753e266a0c8a303b9a354a42a071b24bf.camel@kortschak.io>
 <1ec817ab612c4cf782b15f8150364ad4ff3b306b.camel-2274@kortschak.io>
Message-ID: <CAD4oTHHs0QoJ4FuWB4t_k-8AFiA2ECR2dHRWOO6Phiiio7AMew-3281@mail.gmail.com>

Dan,

Sounds like a cool project! Response to one of your questions inline

On Mon, Sep 7, 2020 at 4:24 AM Dan Kortschak via R-devel <
r-devel at r-project.org> wrote:

>
> The last question is more a question of interest in design strategy,
> and the answer may have been lost to time. In order to reduce the need
> to go through Go's interface assertions in a number of cases I have
> decided to reinterpret R_NilValue to an untyped Go nil (this is
> important for example in list traversal where the CDR can (hopefully)
> be only one of two types LISTSXP or NILSXP; in Go this would require a
> generalised SEXP return, but by doing this reinterpretation I can
> return a *List pointer which may be nil, greatly simplifying the code
> and improving the performance). My question her is why a singleton null
> value was chosen to be represented as a fully allocated SEXP value
> rather than just a C NULL. Also, whether C NULL is used to any great
> extent within the internal code.


I cannot speak to initial intent, perhaps others can. I can say that there
is at least one place where the difference between R_NilValue and NULL is
very important as of right now. The current design of the ALTREP framework
contract expects ALTREP methods that return a SEXP to return C NULL when
they fail (or decline) to do the requested computation and the
non-altclass-specific machinery should be run as a fallback. The places
where ALTREP methods are plugged into the existing, general internals then
check for C-NULL after attempting to fast-path the computation via ALTREP.
Any non-C-NULL SEXP, including R_Nilvalue will be taken as an indication
that the altrep-method succeeded and that SEXP is the resulting value,
causing the fall-back machinery to be skipped.

IIUC the system you described, this means that it would be impossible to
implement (a fully general) ALTREP class in GO using your framework (at
least for the method types that return SEXP and for which R_NilValue is a
valid return value) because your code is unable to distinguish safely
between the two. In practice in most currently existing methods, you
wouldn't ever need to return R_NilValue, I wouldn't think.

The problem that jumps out at me is Extract_subset. Now I'd need to do some
digging to be certain but there, for some types in some situations, it DOES
*seem* like you might need to return the R-NULL and find yourself unable to
do so.

Its also possible more methods will be added to the table in the future
that would be problematic in light of that restrictrion.

In particular, if ALTREP list/environment implementations were to ever be
supported I would expect you to be dead in the water entirely in terms of
building those as you'd find yourself entirely unable to implement the
Basic Single-element getter machinery, I think.

Beyond that, a quick grep of the sources tells me there are definitely a
few times SEXP objects are  tested with <var> == NULL though not
overwhelmingly many. Most such tests are for non-SEXP pointers.

Best,
~G



> Note that the Go API provides a
> mechanism to easily reconvert the nil's used back to a R_NilValue when
> returning from a Go function[3].
>
> thanks
> Dan Kortschak
>
> [1]https://github.com/rgonomic/rgo
> [2]https://github.com/rgonomic/rgo/issues/1
> [3]https://pkg.go.dev/github.com/rgonomic/rgo/sexp?tab=doc#Value.Export
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @|ex @end|ng |rom bed@t@dr|ven@com  Tue Sep  8 09:33:42 2020
From: @|ex @end|ng |rom bed@t@dr|ven@com (Bertram, Alexander)
Date: Tue, 8 Sep 2020 09:33:42 +0200
Subject: [Rd] some questions about R internal SEXP types
In-Reply-To: <1ec817ab612c4cf782b15f8150364ad4ff3b306b.camel-2274@kortschak.io>
References: <8f4d92d753e266a0c8a303b9a354a42a071b24bf.camel@kortschak.io>
 <1ec817ab612c4cf782b15f8150364ad4ff3b306b.camel-2274@kortschak.io>
Message-ID: <CAOdV3zA-cFvDvyV-pvx6NDpk7EBmOXBDv_w01P6qdHnFQtqLNg-3194@mail.gmail.com>

Hi Dan,

For what it's worth, Renjin requires LISTSXPs to hold either a LISTSXP or a
NULL, and this appears to be largely the case in practice based on running
tests for thousands of packages (including cross compiled C code). I can
only remember it being briefly an issue with the rlang package, but Lionel
graciously changed it:
https://github.com/r-lib/rlang/pull/579

Best,
Alex

On Mon, Sep 7, 2020 at 1:24 PM Dan Kortschak via R-devel <
r-devel at r-project.org> wrote:

>
> Hello,
>
> I am writing an R/Go interoperability tool[1] that work similarly to
> Rcpp; the tool takes packages written in Go and performs the necessary
> Go type analysis to wrap the Go code with C and R shims that allow the
> Go code to then be called from R. The system is largely complete (with
> the exception of having a clean approach to handling generalised
> attributes in the easy case[2] - the less hand holding case does handle
> these). Testing of some of the code is unfortunately lacking because of
> the difficulties of testing across environments.
>
> To make the system flexible I have provided an (intentionally
> incomplete) Go API into the R internals which allows reasonably Go
> type-safe interaction with SEXP values (Go does not have unions, so
> this is uglier than it might be otherwise and unions are faked with Go
> interface values). For efficiency reasons I've avoided using R internal
> calls where possible (accessors are done with Go code directly, but
> allocations are done in R's C code to avoid having to duplicate the
> garbage collection mechanics in Go with the obvious risks of error and
> possible behaviour skew in the future).
>
> In doing this work I have some questions that I have not been able to
> find answers for in the R-ints doc or hadley/r-internals.
>
>    1. In R-ints, the LISTSXP SEXP type CDR is said to hold "usually"
>       LISTSXP or NULL. What does the "usually" mean here? Is it possible
>       for the CDR to hold values other than LISTSXP or NULL, and is
>       this NULL NILSXP or C NULL? I assume that the CAR can hold any type
>       of SEXP, is this correct?
>    2. The LANGSXP and DOTSXP types are lists, but the R-ints comments on
>       them do not say whether the CDR of one of these lists is the same at
>       the head of the list of devolves to a LISTSXP. Looking through the
>       code suggests to me that functions that allocate these two types
>       allocate a LISTSXP and then change only the head of the list to be
>       the LANGSXP or DOTSXP that's required, meaning that the tail of the
>       list is all LISTSXP. Is this correct?
>
> The last question is more a question of interest in design strategy,
> and the answer may have been lost to time. In order to reduce the need
> to go through Go's interface assertions in a number of cases I have
> decided to reinterpret R_NilValue to an untyped Go nil (this is
> important for example in list traversal where the CDR can (hopefully)
> be only one of two types LISTSXP or NILSXP; in Go this would require a
> generalised SEXP return, but by doing this reinterpretation I can
> return a *List pointer which may be nil, greatly simplifying the code
> and improving the performance). My question her is why a singleton null
> value was chosen to be represented as a fully allocated SEXP value
> rather than just a C NULL. Also, whether C NULL is used to any great
> extent within the internal code. Note that the Go API provides a
> mechanism to easily reconvert the nil's used back to a R_NilValue when
> returning from a Go function[3].
>
> thanks
> Dan Kortschak
>
> [1]https://github.com/rgonomic/rgo
> [2]https://github.com/rgonomic/rgo/issues/1
> [3]https://pkg.go.dev/github.com/rgonomic/rgo/sexp?tab=doc#Value.Export
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 
Alexander Bertram
Technical Director
*BeDataDriven BV*

Web: http://bedatadriven.com
Email: alex at bedatadriven.com
Tel. Nederlands: +31(0)647205388
Skype: akbertram

	[[alternative HTML version deleted]]


From d@n+r-deve| @end|ng |rom kort@ch@k@|o  Tue Sep  8 11:47:30 2020
From: d@n+r-deve| @end|ng |rom kort@ch@k@|o (Dan Kortschak)
Date: Tue, 08 Sep 2020 09:47:30 +0000
Subject: [Rd] some questions about R internal SEXP types
In-Reply-To: <f3f345c0-146e-9c0e-7856-9130237b3220@gmail.com>
References: <8f4d92d753e266a0c8a303b9a354a42a071b24bf.camel@kortschak.io>
 <1ec817ab612c4cf782b15f8150364ad4ff3b306b.camel-2274@kortschak.io>
 <f3f345c0-146e-9c0e-7856-9130237b3220@gmail.com>
Message-ID: <46aeda9082e7c64c0b4aa0eb056552b3ec39a7c1.camel-8121@kortschak.io>


Thanks, Tomas.

This is unfortunate. Calling between Go and C is not cheap; the gc
implementation of the Go compiler (as opposed to gccgo) uses different
calling conventions from C and there are checks to ensure that Go
allocated memory pointers do not leak into C code. For this reason I
wanted to avoid these if at all possible (I cannot for allocations
since I don't want to keep tracking changes in how R implements its GC
and allocation).

However, if SEXP type behaviour of the standard types, and how
attributes are handled are not highly mobile, I think that what I'm
doing will be OK - at worst the Go code will panic and result in an R
error. The necessary interface to R for allocations is only eight
functions[1].

Note that there is a lot in WRE that's beyond what I want rgo to be
able to do (calling in to R from Go for example). In fact, there's just
a lot in WRE (it's almost 3 times the length of the Go language spec
and memory model reference combined). The issues around weak references
and external pointers are not something that I want to deal with;
working with that kind of object is not idiomatic for Go (in fact
without using C.malloc, R external pointers from Go would be forbidden
by the Go runtime) and I would not expect that they are likely to be
used by people writing extensions for R in Go.

Dan

[1]


https://github.com/rgonomic/rgo/blob/2ce7717c85516bbfb94d0b5c7ef1d9749dd1f817/sexp/r_internal.go#L86-L118

On Tue, 2020-09-08 at 11:07 +0200, Tomas Kalibera wrote:
> The general principle is that R packages are only allowed to use what
> is
> documented in the R help (? command) and in Writing R Extensions. The
> former covers what is allowed from R code in extensions, the latter
> mostly what is allowed from C code in extensions (with some
> references
> to Fortran).
> 
> If you are implementing a Go interface for writing R packages, such
> Go
> interface should thus only use what is in the R help and in Writing R
> Extensions. Otherwise, packages would not be able to use such
> interface.
> 
> What is described in R Internals is for understanding the internal
> structure of R implementation itself, so for development of R itself,
> it
> could help indeed also debugging of R itself and in some cases
> debugging
> or performance analysis of extensions. R Internals can help in giving
> an
> intuition, but when people are implementing R itself, they also need
> to
> check the code. R Internals does not describe any interface for
> external
> code, if it states any constraints about say pairlists, etc, take it
> as
> an intuition for what has been intended and probably holds or held at
> some level of abstraction, but you need to check the source code for
> the
> details, anyway (e.g., at some very low level CAR and CDR can be any
> SEXP or R_NilValue, locally in some functions even C NULL).
> Internally,
> some C code uses C NULL SEXPs, but it is rare and local, and again,
> only
> the interface described in Writing R Extensions is for external use.
> 
> WRE speaks about "R NULL", "R NULL object" or "C NULL" in some cases
> to
> avoid confusion, e.g. for values types as "void *". SEXPs that
> packages
> obtain using the interface in WRE should not be C NULL, only R NULL
> (R_NilValue). External pointers can become C NULL and this is
> documented
> in WRE 5.13.
> 
> Best
> Tomas
> 
> On 9/6/20 3:44 AM, Dan Kortschak via R-devel wrote:
> > Hello,
> > 
> > I am writing an R/Go interoperability tool[1] that work similarly
> > to
> > Rcpp; the tool takes packages written in Go and performs the
> > necessary
> > Go type analysis to wrap the Go code with C and R shims that allow
> > the
> > Go code to then be called from R. The system is largely complete
> > (with
> > the exception of having a clean approach to handling generalised
> > attributes in the easy case[2] - the less hand holding case does
> > handle
> > these). Testing of some of the code is unfortunately lacking
> > because of
> > the difficulties of testing across environments.
> > 
> > To make the system flexible I have provided an (intentionally
> > incomplete) Go API into the R internals which allows reasonably Go
> > type-safe interaction with SEXP values (Go does not have unions, so
> > this is uglier than it might be otherwise and unions are faked with
> > Go
> > interface values). For efficiency reasons I've avoided using R
> > internal
> > calls where possible (accessors are done with Go code directly, but
> > allocations are done in R's C code to avoid having to duplicate the
> > garbage collection mechanics in Go with the obvious risks of error
> > and
> > possible behaviour skew in the future).
> > 
> > In doing this work I have some questions that I have not been able
> > to
> > find answers for in the R-ints doc or hadley/r-internals.
> > 
> >     1. In R-ints, the LISTSXP SEXP type CDR is said to hold
> > "usually"
> >        LISTSXP or NULL. What does the "usually" mean here? Is it
> > possible
> >        for the CDR to hold values other than LISTSXP or NULL, and
> > is
> >        this NULL NILSXP or C NULL? I assume that the CAR can hold
> > any type
> >        of SEXP, is this correct?
> >     2. The LANGSXP and DOTSXP types are lists, but the R-ints
> > comments on
> >        them do not say whether the CDR of one of these lists is the
> > same at
> >        the head of the list of devolves to a LISTSXP. Looking
> > through the
> >        code suggests to me that functions that allocate these two
> > types
> >        allocate a LISTSXP and then change only the head of the list
> > to be
> >        the LANGSXP or DOTSXP that's required, meaning that the tail
> > of the
> >        list is all LISTSXP. Is this correct?
> > 
> > The last question is more a question of interest in design
> > strategy,
> > and the answer may have been lost to time. In order to reduce the
> > need
> > to go through Go's interface assertions in a number of cases I have
> > decided to reinterpret R_NilValue to an untyped Go nil (this is
> > important for example in list traversal where the CDR can
> > (hopefully)
> > be only one of two types LISTSXP or NILSXP; in Go this would
> > require a
> > generalised SEXP return, but by doing this reinterpretation I can
> > return a *List pointer which may be nil, greatly simplifying the
> > code
> > and improving the performance). My question her is why a singleton
> > null
> > value was chosen to be represented as a fully allocated SEXP value
> > rather than just a C NULL. Also, whether C NULL is used to any
> > great
> > extent within the internal code. Note that the Go API provides a
> > mechanism to easily reconvert the nil's used back to a R_NilValue
> > when
> > returning from a Go function[3].
> > 
> > thanks
> > Dan Kortschak
> > 
> > [1]https://github.com/rgonomic/rgo
> > [2]https://github.com/rgonomic/rgo/issues/1
> > [3]
> > 

https://pkg.go.dev/github.com/rgonomic/rgo/sexp?tab=doc#Value.Export
> > 
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 


From d@n+r-deve| @end|ng |rom kort@ch@k@|o  Tue Sep  8 01:31:54 2020
From: d@n+r-deve| @end|ng |rom kort@ch@k@|o (Dan Kortschak)
Date: Mon, 07 Sep 2020 23:31:54 +0000
Subject: [Rd] some questions about R internal SEXP types
In-Reply-To: <CAD4oTHHs0QoJ4FuWB4t_k-8AFiA2ECR2dHRWOO6Phiiio7AMew@mail.gmail.com>
References: <8f4d92d753e266a0c8a303b9a354a42a071b24bf.camel@kortschak.io>
 <1ec817ab612c4cf782b15f8150364ad4ff3b306b.camel-2274@kortschak.io>
 <CAD4oTHHs0QoJ4FuWB4t_k-8AFiA2ECR2dHRWOO6Phiiio7AMew@mail.gmail.com>
Message-ID: <f9bbef0288a54a3ea87d56fd56ffbcf6c56c1e40.camel-8052@kortschak.io>


Thanks, Gabriel.

On Mon, 2020-09-07 at 14:38 -0700, Gabriel Becker wrote:
> I cannot speak to initial intent, perhaps others can. I can say that
> there is at least one place where the difference between R_NilValue
> and NULL is very important as of right now. The current design of the
> ALTREP framework contract expects ALTREP methods that return a SEXP
> to return C NULL when they fail (or decline) to do the requested
> computation and the non-altclass-specific machinery should be run as
> a fallback. The places where ALTREP methods are plugged into the
> existing, general internals then check for C-NULL after attempting to
> fast-path the computation via ALTREP. Any non-C-NULL SEXP, including
> R_Nilvalue will be taken as an indication that the altrep-method
> succeeded and that SEXP is the resulting value, causing the fall-
> back 
> machinery to be skipped.  

This is helpful. Currently this will work in the low level SEXP API,
though not in the hand-holding level (and I think this is probably a
reasonable behavioural distinction); in the low level SEXP API in
rgo/sexp there are two facilitated ways to return values to R, the
Value.Pointer method and the Value.Export method, the first returns
whatever the value of the SEXP is, C NULL, R_NilValue or non-null
result, the second converts C NULL to R_NilValue before returning.
However, in line with the Go philosophy of not doing too much, the user
is free to return a Go nil (equivalent to a C NULL) or anything else if
they want.

The Pointer method is a pure type conversion:

```
func (v *T) Pointer() unsafe.Pointer {
	return unsafe.Pointer(v)
}
```

and the Export method was an addition I made when I accidentally
returned a nil during testing and the R runtime complained at me.

```
func (v *T) Export() unsafe.Pointer {
	if v == nil {
		return NilValue.Pointer()
	}
	return unsafe.Pointer(v)
}
```

These are really just helpers that mean users don't need to use the Go
unsafe package directly for anything other than making their function
signatures valid.

Similarly, the parameter passed in to Go can be C NULL, R_NilValue or a
non-null value. It's a little more work in the case that C NULL needs
to be distinquished from R_NilValue:

```
func UserGoCode(p unsafe.Pointer) unsafe.Pointer {
	if p == nil {
		// We have a C Null.
		// If this condition is omitted, v below will be
		// R_NilValue when p is nil.
	}
	v := (*sexp.Value)(p).Value()
	// We have v as a type that is one of the R TYPE values.
	...
```

> IIUC the system you described, this means that it would be impossible
> to implement (a fully general) ALTREP class in GO using your
> framework (at least for the method types that return SEXP and for
> which R_NilValue is a valid return value) because your code is unable
> to distinguish safely between the two. In practice in most currently
> existing methods, you wouldn't ever need to return R_NilValue, I
> wouldn't think.

This should be OK from what I've said above. What the user won't be
able to do is distinguish between C NULL and R_NilValue in values that
come from. So I guess a better phrasing of my original question is
whether valid SEXP value fields ever hold C NULL. If they do, then I
have a problem. I'm very much hoping that some kind of sanity in the
code prevails and this doesn't ever happen.

> The problem that jumps out at me is Extract_subset. Now I'd need to
> do some digging to be certain but there, for some types in some
> situations, it DOES seem like you might need to return the R-NULL and
> find yourself unable to do so. 

I have not looked at all at ALTREP (though it looks like it would be
valuable given the goal of the project), but as above, I *can* return
the C NULL.

> Its also possible more methods will be added to the table in the
> future that would be problematic in light of that restrictrion.
> 
> In particular, if ALTREP list/environment implementations were to
> ever be supported I would expect you to be dead in the water entirely
> in terms of building those as you'd find yourself entirely unable to
> implement the Basic Single-element getter machinery, I think.

Is this still a concern with my clarifications above?

thanks
Dan


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Sep  8 12:08:57 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 8 Sep 2020 12:08:57 +0200
Subject: [Rd] some questions about R internal SEXP types
In-Reply-To: <46aeda9082e7c64c0b4aa0eb056552b3ec39a7c1.camel@kortschak.io>
References: <8f4d92d753e266a0c8a303b9a354a42a071b24bf.camel@kortschak.io>
 <1ec817ab612c4cf782b15f8150364ad4ff3b306b.camel-2274@kortschak.io>
 <f3f345c0-146e-9c0e-7856-9130237b3220@gmail.com>
 <46aeda9082e7c64c0b4aa0eb056552b3ec39a7c1.camel@kortschak.io>
Message-ID: <dad8e08a-23cf-b716-6d52-76b7cf38f52b@gmail.com>


On 9/8/20 11:47 AM, Dan Kortschak wrote:
> Thanks, Tomas.
>
> This is unfortunate. Calling between Go and C is not cheap; the gc
> implementation of the Go compiler (as opposed to gccgo) uses different
> calling conventions from C and there are checks to ensure that Go
> allocated memory pointers do not leak into C code. For this reason I
> wanted to avoid these if at all possible (I cannot for allocations
> since I don't want to keep tracking changes in how R implements its GC
> and allocation).
>
> However, if SEXP type behaviour of the standard types, and how
> attributes are handled are not highly mobile, I think that what I'm
> doing will be OK - at worst the Go code will panic and result in an R
> error. The necessary interface to R for allocations is only eight
> functions[1].

I am not sure if I understand correctly, but if you were accessing 
directly the memory of SEXPs from Go implementation instead of calling 
through exported access functions documented in WRE, that would be a 
really bad idea. Of course fine for research and experimentation, but 
the internal structure can and does change at any time, otherwise we 
would not be able to develop nor maintain R. Such direct access 
bypassing WRE would likely be a clear case for rejection in CRAN for 
this interface and any packages using it, and I hope in other package 
repositories as well.

However, I believe the overhead of calling the C-level access functions 
R exports should be minimal compared to other overheads. You can't hope, 
anyway, for being able to efficiently call tiny functions frequently 
between Go and R. This can only work for bigger functions, anyway, and 
then the Go-C overhead should not be important.

> Note that there is a lot in WRE that's beyond what I want rgo to be
> able to do (calling in to R from Go for example). In fact, there's just
> a lot in WRE (it's almost 3 times the length of the Go language spec
> and memory model reference combined). The issues around weak references
> and external pointers are not something that I want to deal with;
> working with that kind of object is not idiomatic for Go (in fact
> without using C.malloc, R external pointers from Go would be forbidden
> by the Go runtime) and I would not expect that they are likely to be
> used by people writing extensions for R in Go.

Sure, I think it is perfectly fine to cover only a subset, if that is 
already useful to write some extensions in Go. Maintenance would be 
easiest if Go programs didn't call back into the R runtime at all, so 
fewer calls the better for maintenance.

Best
Tomas

>
> Dan
>
> [1]
>
>
> https://github.com/rgonomic/rgo/blob/2ce7717c85516bbfb94d0b5c7ef1d9749dd1f817/sexp/r_internal.go#L86-L118
>
> On Tue, 2020-09-08 at 11:07 +0200, Tomas Kalibera wrote:
>> The general principle is that R packages are only allowed to use what
>> is
>> documented in the R help (? command) and in Writing R Extensions. The
>> former covers what is allowed from R code in extensions, the latter
>> mostly what is allowed from C code in extensions (with some
>> references
>> to Fortran).
>>
>> If you are implementing a Go interface for writing R packages, such
>> Go
>> interface should thus only use what is in the R help and in Writing R
>> Extensions. Otherwise, packages would not be able to use such
>> interface.
>>
>> What is described in R Internals is for understanding the internal
>> structure of R implementation itself, so for development of R itself,
>> it
>> could help indeed also debugging of R itself and in some cases
>> debugging
>> or performance analysis of extensions. R Internals can help in giving
>> an
>> intuition, but when people are implementing R itself, they also need
>> to
>> check the code. R Internals does not describe any interface for
>> external
>> code, if it states any constraints about say pairlists, etc, take it
>> as
>> an intuition for what has been intended and probably holds or held at
>> some level of abstraction, but you need to check the source code for
>> the
>> details, anyway (e.g., at some very low level CAR and CDR can be any
>> SEXP or R_NilValue, locally in some functions even C NULL).
>> Internally,
>> some C code uses C NULL SEXPs, but it is rare and local, and again,
>> only
>> the interface described in Writing R Extensions is for external use.
>>
>> WRE speaks about "R NULL", "R NULL object" or "C NULL" in some cases
>> to
>> avoid confusion, e.g. for values types as "void *". SEXPs that
>> packages
>> obtain using the interface in WRE should not be C NULL, only R NULL
>> (R_NilValue). External pointers can become C NULL and this is
>> documented
>> in WRE 5.13.
>>
>> Best
>> Tomas
>>
>> On 9/6/20 3:44 AM, Dan Kortschak via R-devel wrote:
>>> Hello,
>>>
>>> I am writing an R/Go interoperability tool[1] that work similarly
>>> to
>>> Rcpp; the tool takes packages written in Go and performs the
>>> necessary
>>> Go type analysis to wrap the Go code with C and R shims that allow
>>> the
>>> Go code to then be called from R. The system is largely complete
>>> (with
>>> the exception of having a clean approach to handling generalised
>>> attributes in the easy case[2] - the less hand holding case does
>>> handle
>>> these). Testing of some of the code is unfortunately lacking
>>> because of
>>> the difficulties of testing across environments.
>>>
>>> To make the system flexible I have provided an (intentionally
>>> incomplete) Go API into the R internals which allows reasonably Go
>>> type-safe interaction with SEXP values (Go does not have unions, so
>>> this is uglier than it might be otherwise and unions are faked with
>>> Go
>>> interface values). For efficiency reasons I've avoided using R
>>> internal
>>> calls where possible (accessors are done with Go code directly, but
>>> allocations are done in R's C code to avoid having to duplicate the
>>> garbage collection mechanics in Go with the obvious risks of error
>>> and
>>> possible behaviour skew in the future).
>>>
>>> In doing this work I have some questions that I have not been able
>>> to
>>> find answers for in the R-ints doc or hadley/r-internals.
>>>
>>>      1. In R-ints, the LISTSXP SEXP type CDR is said to hold
>>> "usually"
>>>         LISTSXP or NULL. What does the "usually" mean here? Is it
>>> possible
>>>         for the CDR to hold values other than LISTSXP or NULL, and
>>> is
>>>         this NULL NILSXP or C NULL? I assume that the CAR can hold
>>> any type
>>>         of SEXP, is this correct?
>>>      2. The LANGSXP and DOTSXP types are lists, but the R-ints
>>> comments on
>>>         them do not say whether the CDR of one of these lists is the
>>> same at
>>>         the head of the list of devolves to a LISTSXP. Looking
>>> through the
>>>         code suggests to me that functions that allocate these two
>>> types
>>>         allocate a LISTSXP and then change only the head of the list
>>> to be
>>>         the LANGSXP or DOTSXP that's required, meaning that the tail
>>> of the
>>>         list is all LISTSXP. Is this correct?
>>>
>>> The last question is more a question of interest in design
>>> strategy,
>>> and the answer may have been lost to time. In order to reduce the
>>> need
>>> to go through Go's interface assertions in a number of cases I have
>>> decided to reinterpret R_NilValue to an untyped Go nil (this is
>>> important for example in list traversal where the CDR can
>>> (hopefully)
>>> be only one of two types LISTSXP or NILSXP; in Go this would
>>> require a
>>> generalised SEXP return, but by doing this reinterpretation I can
>>> return a *List pointer which may be nil, greatly simplifying the
>>> code
>>> and improving the performance). My question her is why a singleton
>>> null
>>> value was chosen to be represented as a fully allocated SEXP value
>>> rather than just a C NULL. Also, whether C NULL is used to any
>>> great
>>> extent within the internal code. Note that the Go API provides a
>>> mechanism to easily reconvert the nil's used back to a R_NilValue
>>> when
>>> returning from a Go function[3].
>>>
>>> thanks
>>> Dan Kortschak
>>>
>>> [1]https://github.com/rgonomic/rgo
>>> [2]https://github.com/rgonomic/rgo/issues/1
>>> [3]
>>>
> https://pkg.go.dev/github.com/rgonomic/rgo/sexp?tab=doc#Value.Export
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>


From d@n+r-deve| @end|ng |rom kort@ch@k@|o  Tue Sep  8 11:47:30 2020
From: d@n+r-deve| @end|ng |rom kort@ch@k@|o (Dan Kortschak)
Date: Tue, 08 Sep 2020 09:47:30 +0000
Subject: [Rd] some questions about R internal SEXP types
In-Reply-To: <f3f345c0-146e-9c0e-7856-9130237b3220@gmail.com>
References: <8f4d92d753e266a0c8a303b9a354a42a071b24bf.camel@kortschak.io>
 <1ec817ab612c4cf782b15f8150364ad4ff3b306b.camel-2274@kortschak.io>
 <f3f345c0-146e-9c0e-7856-9130237b3220@gmail.com>
Message-ID: <46aeda9082e7c64c0b4aa0eb056552b3ec39a7c1.camel-1180@kortschak.io>


Thanks, Tomas.

This is unfortunate. Calling between Go and C is not cheap; the gc
implementation of the Go compiler (as opposed to gccgo) uses different
calling conventions from C and there are checks to ensure that Go
allocated memory pointers do not leak into C code. For this reason I
wanted to avoid these if at all possible (I cannot for allocations
since I don't want to keep tracking changes in how R implements its GC
and allocation).

However, if SEXP type behaviour of the standard types, and how
attributes are handled are not highly mobile, I think that what I'm
doing will be OK - at worst the Go code will panic and result in an R
error. The necessary interface to R for allocations is only eight
functions[1].

Note that there is a lot in WRE that's beyond what I want rgo to be
able to do (calling in to R from Go for example). In fact, there's just
a lot in WRE (it's almost 3 times the length of the Go language spec
and memory model reference combined). The issues around weak references
and external pointers are not something that I want to deal with;
working with that kind of object is not idiomatic for Go (in fact
without using C.malloc, R external pointers from Go would be forbidden
by the Go runtime) and I would not expect that they are likely to be
used by people writing extensions for R in Go.

Dan

[1]


https://github.com/rgonomic/rgo/blob/2ce7717c85516bbfb94d0b5c7ef1d9749dd1f817/sexp/r_internal.go#L86-L118

On Tue, 2020-09-08 at 11:07 +0200, Tomas Kalibera wrote:
> The general principle is that R packages are only allowed to use what
> is
> documented in the R help (? command) and in Writing R Extensions. The
> former covers what is allowed from R code in extensions, the latter
> mostly what is allowed from C code in extensions (with some
> references
> to Fortran).
> 
> If you are implementing a Go interface for writing R packages, such
> Go
> interface should thus only use what is in the R help and in Writing R
> Extensions. Otherwise, packages would not be able to use such
> interface.
> 
> What is described in R Internals is for understanding the internal
> structure of R implementation itself, so for development of R itself,
> it
> could help indeed also debugging of R itself and in some cases
> debugging
> or performance analysis of extensions. R Internals can help in giving
> an
> intuition, but when people are implementing R itself, they also need
> to
> check the code. R Internals does not describe any interface for
> external
> code, if it states any constraints about say pairlists, etc, take it
> as
> an intuition for what has been intended and probably holds or held at
> some level of abstraction, but you need to check the source code for
> the
> details, anyway (e.g., at some very low level CAR and CDR can be any
> SEXP or R_NilValue, locally in some functions even C NULL).
> Internally,
> some C code uses C NULL SEXPs, but it is rare and local, and again,
> only
> the interface described in Writing R Extensions is for external use.
> 
> WRE speaks about "R NULL", "R NULL object" or "C NULL" in some cases
> to
> avoid confusion, e.g. for values types as "void *". SEXPs that
> packages
> obtain using the interface in WRE should not be C NULL, only R NULL
> (R_NilValue). External pointers can become C NULL and this is
> documented
> in WRE 5.13.
> 
> Best
> Tomas
> 
> On 9/6/20 3:44 AM, Dan Kortschak via R-devel wrote:
> > Hello,
> > 
> > I am writing an R/Go interoperability tool[1] that work similarly
> > to
> > Rcpp; the tool takes packages written in Go and performs the
> > necessary
> > Go type analysis to wrap the Go code with C and R shims that allow
> > the
> > Go code to then be called from R. The system is largely complete
> > (with
> > the exception of having a clean approach to handling generalised
> > attributes in the easy case[2] - the less hand holding case does
> > handle
> > these). Testing of some of the code is unfortunately lacking
> > because of
> > the difficulties of testing across environments.
> > 
> > To make the system flexible I have provided an (intentionally
> > incomplete) Go API into the R internals which allows reasonably Go
> > type-safe interaction with SEXP values (Go does not have unions, so
> > this is uglier than it might be otherwise and unions are faked with
> > Go
> > interface values). For efficiency reasons I've avoided using R
> > internal
> > calls where possible (accessors are done with Go code directly, but
> > allocations are done in R's C code to avoid having to duplicate the
> > garbage collection mechanics in Go with the obvious risks of error
> > and
> > possible behaviour skew in the future).
> > 
> > In doing this work I have some questions that I have not been able
> > to
> > find answers for in the R-ints doc or hadley/r-internals.
> > 
> >     1. In R-ints, the LISTSXP SEXP type CDR is said to hold
> > "usually"
> >        LISTSXP or NULL. What does the "usually" mean here? Is it
> > possible
> >        for the CDR to hold values other than LISTSXP or NULL, and
> > is
> >        this NULL NILSXP or C NULL? I assume that the CAR can hold
> > any type
> >        of SEXP, is this correct?
> >     2. The LANGSXP and DOTSXP types are lists, but the R-ints
> > comments on
> >        them do not say whether the CDR of one of these lists is the
> > same at
> >        the head of the list of devolves to a LISTSXP. Looking
> > through the
> >        code suggests to me that functions that allocate these two
> > types
> >        allocate a LISTSXP and then change only the head of the list
> > to be
> >        the LANGSXP or DOTSXP that's required, meaning that the tail
> > of the
> >        list is all LISTSXP. Is this correct?
> > 
> > The last question is more a question of interest in design
> > strategy,
> > and the answer may have been lost to time. In order to reduce the
> > need
> > to go through Go's interface assertions in a number of cases I have
> > decided to reinterpret R_NilValue to an untyped Go nil (this is
> > important for example in list traversal where the CDR can
> > (hopefully)
> > be only one of two types LISTSXP or NILSXP; in Go this would
> > require a
> > generalised SEXP return, but by doing this reinterpretation I can
> > return a *List pointer which may be nil, greatly simplifying the
> > code
> > and improving the performance). My question her is why a singleton
> > null
> > value was chosen to be represented as a fully allocated SEXP value
> > rather than just a C NULL. Also, whether C NULL is used to any
> > great
> > extent within the internal code. Note that the Go API provides a
> > mechanism to easily reconvert the nil's used back to a R_NilValue
> > when
> > returning from a Go function[3].
> > 
> > thanks
> > Dan Kortschak
> > 
> > [1]https://github.com/rgonomic/rgo
> > [2]https://github.com/rgonomic/rgo/issues/1
> > [3]
> > 

https://pkg.go.dev/github.com/rgonomic/rgo/sexp?tab=doc#Value.Export
> > 
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 


From d@n+r-deve| @end|ng |rom kort@ch@k@|o  Tue Sep  8 13:13:10 2020
From: d@n+r-deve| @end|ng |rom kort@ch@k@|o (Dan Kortschak)
Date: Tue, 08 Sep 2020 11:13:10 +0000
Subject: [Rd] some questions about R internal SEXP types
In-Reply-To: <dad8e08a-23cf-b716-6d52-76b7cf38f52b@gmail.com>
References: <8f4d92d753e266a0c8a303b9a354a42a071b24bf.camel@kortschak.io>
 <1ec817ab612c4cf782b15f8150364ad4ff3b306b.camel-2274@kortschak.io>
 <f3f345c0-146e-9c0e-7856-9130237b3220@gmail.com>
 <46aeda9082e7c64c0b4aa0eb056552b3ec39a7c1.camel@kortschak.io>
 <dad8e08a-23cf-b716-6d52-76b7cf38f52b@gmail.com>
Message-ID: <91cf202e18bd1c01a5c88e4a2557a32015dcba4d.camel@kortschak.io>

On Tue, 2020-09-08 at 12:08 +0200, Tomas Kalibera wrote:
> I am not sure if I understand correctly, but if you were accessing
> directly the memory of SEXPs from Go implementation instead of
> calling
> through exported access functions documented in WRE, that would be a
> really bad idea. Of course fine for research and experimentation, but
> the internal structure can and does change at any time, otherwise we
> would not be able to develop nor maintain R. Such direct access
> bypassing WRE would likely be a clear case for rejection in CRAN for
> this interface and any packages using it, and I hope in other package
> repositories as well.

Sorry, I'm coming from a language that has strong backwards
compatibility guarantees and (generally) machine level data types, so
it is surprising to me that basic data types are that fluid.

> However, I believe the overhead of calling the C-level access
> functions
> R exports should be minimal compared to other overheads. You can't
> hope,
> anyway, for being able to efficiently call tiny functions frequently
> between Go and R. This can only work for bigger functions, anyway,
> and
> then the Go-C overhead should not be important.

This really depends on the complexity/structure of the data structures
that are being handed in to Go. The entirety of the tool is there to
allow interchange of data between Go and R, in the case of atomic
vectors, this cost is very cheap with direct access or via Cgo calling,
however each name access or attribute access (both of which are
necessary for struct population - and structs may come in slices) is a
Cgo call; these look ups go from ~nanosecond to ~hundred nanoseconds
per lookup.

> > Note that there is a lot in WRE that's beyond what I want rgo to be
> > able to do (calling in to R from Go for example). In fact, there's
> > just
> > a lot in WRE (it's almost 3 times the length of the Go language
> > spec
> > and memory model reference combined). The issues around weak
> > references
> > and external pointers are not something that I want to deal with;
> > working with that kind of object is not idiomatic for Go (in fact
> > without using C.malloc, R external pointers from Go would be
> > forbidden
> > by the Go runtime) and I would not expect that they are likely to
> > be
> > used by people writing extensions for R in Go.
> 
> Sure, I think it is perfectly fine to cover only a subset, if that is
> already useful to write some extensions in Go. Maintenance would be
> easiest if Go programs didn't call back into the R runtime at all, so
> fewer calls the better for maintenance.

This is apparently unavoidable though from what I read here.

> Best
> Tomas


thanks
Dan


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Sep  8 13:47:11 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 8 Sep 2020 13:47:11 +0200
Subject: [Rd] some questions about R internal SEXP types
In-Reply-To: <91cf202e18bd1c01a5c88e4a2557a32015dcba4d.camel@kortschak.io>
References: <8f4d92d753e266a0c8a303b9a354a42a071b24bf.camel@kortschak.io>
 <1ec817ab612c4cf782b15f8150364ad4ff3b306b.camel-2274@kortschak.io>
 <f3f345c0-146e-9c0e-7856-9130237b3220@gmail.com>
 <46aeda9082e7c64c0b4aa0eb056552b3ec39a7c1.camel@kortschak.io>
 <dad8e08a-23cf-b716-6d52-76b7cf38f52b@gmail.com>
 <91cf202e18bd1c01a5c88e4a2557a32015dcba4d.camel@kortschak.io>
Message-ID: <4fa56dc0-d0b7-059e-1a52-3fb492c4dbbb@gmail.com>

On 9/8/20 1:13 PM, Dan Kortschak wrote:
> On Tue, 2020-09-08 at 12:08 +0200, Tomas Kalibera wrote:
>> I am not sure if I understand correctly, but if you were accessing
>> directly the memory of SEXPs from Go implementation instead of
>> calling
>> through exported access functions documented in WRE, that would be a
>> really bad idea. Of course fine for research and experimentation, but
>> the internal structure can and does change at any time, otherwise we
>> would not be able to develop nor maintain R. Such direct access
>> bypassing WRE would likely be a clear case for rejection in CRAN for
>> this interface and any packages using it, and I hope in other package
>> repositories as well.
> Sorry, I'm coming from a language that has strong backwards
> compatibility guarantees and (generally) machine level data types, so
> it is surprising to me that basic data types are that fluid.

Since R does not allow to do these things, it can change the object 
header without breaking compatibility.

In a managed language, it is certainly not typical to let native code 
extensions to access object headers directly, for safety, for allowing 
optimizations, due to synchronization, etc. In R, a recent optimization 
that would not have been possible otherwise, is the ALTREP framework.

Please don't use this list for advertising on other languages, there may 
be other lists for that.

>> However, I believe the overhead of calling the C-level access
>> functions
>> R exports should be minimal compared to other overheads. You can't
>> hope,
>> anyway, for being able to efficiently call tiny functions frequently
>> between Go and R. This can only work for bigger functions, anyway,
>> and
>> then the Go-C overhead should not be important.
> This really depends on the complexity/structure of the data structures
> that are being handed in to Go. The entirety of the tool is there to
> allow interchange of data between Go and R, in the case of atomic
> vectors, this cost is very cheap with direct access or via Cgo calling,
> however each name access or attribute access (both of which are
> necessary for struct population - and structs may come in slices) is a
> Cgo call; these look ups go from ~nanosecond to ~hundred nanoseconds
> per lookup.

Probably most data in R would be in vectors (as part of data frames), 
anyway. In some cases you may be able to cache the calls (some R objects 
are immutable, see WRE 5.9.10).

Tomas

>
>>> Note that there is a lot in WRE that's beyond what I want rgo to be
>>> able to do (calling in to R from Go for example). In fact, there's
>>> just
>>> a lot in WRE (it's almost 3 times the length of the Go language
>>> spec
>>> and memory model reference combined). The issues around weak
>>> references
>>> and external pointers are not something that I want to deal with;
>>> working with that kind of object is not idiomatic for Go (in fact
>>> without using C.malloc, R external pointers from Go would be
>>> forbidden
>>> by the Go runtime) and I would not expect that they are likely to
>>> be
>>> used by people writing extensions for R in Go.
>> Sure, I think it is perfectly fine to cover only a subset, if that is
>> already useful to write some extensions in Go. Maintenance would be
>> easiest if Go programs didn't call back into the R runtime at all, so
>> fewer calls the better for maintenance.
> This is apparently unavoidable though from what I read here.
>
>> Best
>> Tomas
>
> thanks
> Dan
>
>


From h@w|ckh@m @end|ng |rom gm@||@com  Tue Sep  8 14:25:50 2020
From: h@w|ckh@m @end|ng |rom gm@||@com (Hadley Wickham)
Date: Tue, 8 Sep 2020 07:25:50 -0500
Subject: [Rd] some questions about R internal SEXP types
In-Reply-To: <f3f345c0-146e-9c0e-7856-9130237b3220@gmail.com>
References: <8f4d92d753e266a0c8a303b9a354a42a071b24bf.camel@kortschak.io>
 <1ec817ab612c4cf782b15f8150364ad4ff3b306b.camel-2274@kortschak.io>
 <f3f345c0-146e-9c0e-7856-9130237b3220@gmail.com>
Message-ID: <CABdHhvERn9vONCfWK8gdBcvAspRj9SnBOWWWQ_1bTwfVaEet-w@mail.gmail.com>

On Tue, Sep 8, 2020 at 4:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
>
> The general principle is that R packages are only allowed to use what is
> documented in the R help (? command) and in Writing R Extensions. The
> former covers what is allowed from R code in extensions, the latter
> mostly what is allowed from C code in extensions (with some references
> to Fortran).

Could you clarify what you mean by "documented"? For example,
Rf_allocVector() is mentioned several times in R-exts, but I don't see
anywhere where the inputs and output are precisely described (which is
what I would consider to be documented). Is Rf_allocVector() part of
the API?

Hadley

-- 
http://hadley.nz


From d@n+r-deve| @end|ng |rom kort@ch@k@|o  Tue Sep  8 14:26:09 2020
From: d@n+r-deve| @end|ng |rom kort@ch@k@|o (Dan Kortschak)
Date: Tue, 08 Sep 2020 12:26:09 +0000
Subject: [Rd] some questions about R internal SEXP types
In-Reply-To: <4fa56dc0-d0b7-059e-1a52-3fb492c4dbbb@gmail.com>
References: <8f4d92d753e266a0c8a303b9a354a42a071b24bf.camel@kortschak.io>
 <1ec817ab612c4cf782b15f8150364ad4ff3b306b.camel-2274@kortschak.io>
 <f3f345c0-146e-9c0e-7856-9130237b3220@gmail.com>
 <46aeda9082e7c64c0b4aa0eb056552b3ec39a7c1.camel@kortschak.io>
 <dad8e08a-23cf-b716-6d52-76b7cf38f52b@gmail.com>
 <91cf202e18bd1c01a5c88e4a2557a32015dcba4d.camel@kortschak.io>
 <4fa56dc0-d0b7-059e-1a52-3fb492c4dbbb@gmail.com>
Message-ID: <0e470b645aa512fe35df34df086647721abe23bc.camel@kortschak.io>

I was not. I was explaining why my expectations exist. I honestly
surprised that this would be misinterpreted.

Dan

On Tue, 2020-09-08 at 13:47 +0200, Tomas Kalibera wrote:
> Please don't use this list for advertising on other languages, there
> may be other lists for that.


From iuke-tier@ey m@iii@g oii uiow@@edu  Tue Sep  8 15:22:42 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Tue, 8 Sep 2020 08:22:42 -0500 (CDT)
Subject: [Rd] [External] Re:  some questions about R internal SEXP types
In-Reply-To: <CABdHhvERn9vONCfWK8gdBcvAspRj9SnBOWWWQ_1bTwfVaEet-w@mail.gmail.com>
References: <8f4d92d753e266a0c8a303b9a354a42a071b24bf.camel@kortschak.io>
 <1ec817ab612c4cf782b15f8150364ad4ff3b306b.camel-2274@kortschak.io>
 <f3f345c0-146e-9c0e-7856-9130237b3220@gmail.com>
 <CABdHhvERn9vONCfWK8gdBcvAspRj9SnBOWWWQ_1bTwfVaEet-w@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2009080818410.3141@luke-Latitude-7480>

On Tue, 8 Sep 2020, Hadley Wickham wrote:

> On Tue, Sep 8, 2020 at 4:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>
>>
>> The general principle is that R packages are only allowed to use what is
>> documented in the R help (? command) and in Writing R Extensions. The
>> former covers what is allowed from R code in extensions, the latter
>> mostly what is allowed from C code in extensions (with some references
>> to Fortran).
>
> Could you clarify what you mean by "documented"? For example,
> Rf_allocVector() is mentioned several times in R-exts, but I don't see
> anywhere where the inputs and output are precisely described (which is
> what I would consider to be documented). Is Rf_allocVector() part of
> the API?

For now, documented means mentioned as something extension writers can
use.  Details are in the header files, Rinternals.h for
Rf_allocVector().

Ideally someone would find the time to refactor the header files,
Rinternals.h in particular, so everything in installed headers is
considered in the API and everything else is considered private and
subject to change. Unfortunately that would take a lot of effort, both
technical and political, and I don't see it happening soon. But I'm
happy to be proved wrong.

Best,

luke

>
> Hadley
>
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From iuke-tier@ey m@iii@g oii uiow@@edu  Tue Sep  8 16:32:25 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Tue, 8 Sep 2020 09:32:25 -0500 (CDT)
Subject: [Rd] [External] Re: Operations with long altrep vectors cause
 segfaults on Windows
In-Reply-To: <CAJmOi+OOVjR5A=tjR+knHqq1Zcd9cJPg_kxsEDGu0enq0U92VA@mail.gmail.com>
References: <CAJmOi+MjsxpO+i9r57xwb5Ex+GcrECGB17GScy-_w+Y0jK6dmQ@mail.gmail.com>
 <24407.17272.770281.413960@stat.math.ethz.ch>
 <24407.18005.968508.796695@stat.math.ethz.ch>
 <CAJmOi+OOVjR5A=tjR+knHqq1Zcd9cJPg_kxsEDGu0enq0U92VA@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2009080912190.3141@luke-Latitude-7480>

On Tue, 8 Sep 2020, Hugh Parsonage wrote:

> Thanks Martin.  On further testing, it seems that the segmentation
> fault can only occur when the amount of obtainable memory is
> sufficiently high. On my machine (admittedly with other processes
> running):
>
> $ R --vanilla --max-mem-size=30G -e "x <- c(0L, -2e9:2e9)"
> Segmentation fault
>
> $ R --vanilla --max-mem-size=29G -e "x <- c(0L, -2e9:2e9)"
> Error: cannot allocate vector of size 14.9 Gb
> Execution halted

Unfortunately I don't have access to a Windows machine with enough
memory to get to the point of failure. If you have rtools and gdb
installed can you run in gdb and see where the segfault is happening?

Best,

luke

>
> On Tue, 8 Sep 2020 at 18:52, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
>>
>>>>>>> Martin Maechler
>>>>>>>     on Tue, 8 Sep 2020 10:40:24 +0200 writes:
>>
>>>>>>> Hugh Parsonage
>>>>>>>     on Tue, 8 Sep 2020 18:08:11 +1000 writes:
>>
>>    >> I can only reproduce on Windows, but reliably (both 4.0.0 and 4.0.2):
>>
>>    >> $> R --vanilla
>>    >> x <- c(0L, -2e9:2e9)
>>
>>    >> # > Segmentation fault
>>
>>    >> Tried to reproduce on Linux but the above worked as expected. Not an
>>    >> issue merely with the length of the vector; for example, x <-
>>    >> rep_len(1:10, 1e10) works, though the altrep vector must be long to
>>    >> reproduce:
>>
>>    >> x <- c(0L, -1e9:1e9)  #ok
>>
>>    >> Segmentation faults occur with the following too:
>>
>>    >> x <- (-2e9:2e9) + 1L
>>
>>    > Your operation would "need" (not in theory, but in practice)
>>    > to go from altrep to regular vectors.
>>    > I guess the segfault occurs because of something like this :
>>
>>    > R asks Windows to hand it a huge amount of memory and Windows replies
>>    > "ok, here is the memory pointer"
>>    > and then R tries to write to there, but illegally (because
>>    > Windows should have told R that it does not really have enough
>>    > memory for that ..).
>>
>>    > I cannot reproduce the segmentation fault .. but I can confirm
>>    > there is a bug there that shows for me on Windows but not on
>>    > Linux:
>>
>>    > "My" Windows is on a terminalserver not with too many GB of memory
>>    > (but then in a version of Windows that recognizes that it cannot
>>    > get so much memory):
>>
>>    > ------------------------- Here some transcript (thanks to
>>    > using Emacs w/ ESS also on Windows) ------------------
>>
>>    > R Under development (unstable) (2020-08-24 r79074) -- "Unsuffered Consequences"
>>    > Copyright (C) 2020 The R Foundation for Statistical Computing
>>    > Platform: x86_64-w64-mingw32/x64 (64-bit)
>>
>>    > R ist freie Software und kommt OHNE JEGLICHE GARANTIE.
>>    > Sie sind eingeladen, es unter bestimmten Bedingungen weiter zu verbreiten.
>>    > Tippen Sie 'license()' or 'licence()' f?r Details dazu.
>>
>>    > R ist ein Gemeinschaftsprojekt mit vielen Beitragenden.
>>    > Tippen Sie 'contributors()' f?r mehr Information und 'citation()',
>>    > um zu erfahren, wie R oder R packages in Publikationen zitiert werden k?nnen.
>>
>>    > Tippen Sie 'demo()' f?r einige Demos, 'help()' f?r on-line Hilfe, oder
>>    > 'help.start()' f?r eine HTML Browserschnittstelle zur Hilfe.
>>    > Tippen Sie 'q()', um R zu verlassen.
>>
>>    >> x <- (-2e9:2e9) + 1L
>>    > Fehler: kann Vektor der Gr??e 14.9 GB nicht allozieren
>>    >> y <- c(0L, -2e9:2e9)
>>    > Fehler: kann Vektor der Gr??e 14.9 GB nicht allozieren
>>    >> Sys.setenv(LANGUAGE="en")
>>    >> y <- c(0L, -2e9:2e9)
>>    > Error: cannot allocate vector of size 14.9 Gb
>>    >> y <- -1e9:4e9
>>    >> .Internal(inspect(y))
>>    > @0x00000000195a6808 14 REALSXP g0c0 [REF(65535)]  -1000000000 : -294967296 (compact)
>>    >> .Machine$integer.max / 1e9
>>    > [1] 2.147484
>>    >> y <- -1e6:2.2e9
>>    >> .Internal(inspect(y))
>>    > @0x000000000a11a5d8 14 REALSXP g0c0 [REF(65535)]  -1000000 : -2094967296 (compact)
>>    >> y <- -1e6:2e9
>>    >> .Internal(inspect(y))
>>    > @0x000000000a13adf0 13 INTSXP g0c0 [REF(65535)]  -1000000 : 2000000000 (compact)
>>    >>
>>    > ------------------------- end of transcript -----------------------------------
>>
>>    > So indeed, no seg.fault, R notices that it can't get 15 GB of
>>    > memory.
>>
>>    > But the bug is bad news:  We have *silent* integer overflow happening
>>    > according to what  .Internal(inspect(y)) shows...
>>
>>    > .... less bad new: Probably the bug is only in the 'internal inspect' code
>>    > where a format specifier is used in C's printf() that does not work
>>    > correctly on Windows, at least the way it is currently compiled ..
>>
>>
>>    > On (64-bit) Linux, I get
>>
>>    >> y <- -1e9:4e9 ; .Internal(inspect(y))
>>    > @7d86388 14 REALSXP g0c0 [REF(65535)]  -1000000000 : 4000000000 (compact)
>>
>>    >> y <- c(0L, y)
>>    > Error: cannot allocate vector of size 37.3 Gb
>>
>>    > which seems much better ... until I do find a bug, may again
>>    > only in the C code underlying .Internal(inspect(.)) :
>>
>>    >> y <- -1e9:2e9 ; .Internal(inspect(y))
>>    > @7d86ac0 13 INTSXP g0c0 [REF(65535)] Error: long vectors not supported yet: ../../../R/src/main/altclasses.c:139
>>    >>
>>
>> Indeed, the purported "integer overflow" (above) does not
>> happen.
>> It is "only" a  'printf' related bug inside .Internal(inspect(.)) on Windows.
>>
>> *interestingly*, the above bug I've noticed on (64-bit) Linux
>> does *not* show on Windows (64-bit), at least not for that case:
>>
>> On Windows, things are fine as long as they remain (compacted
>> aka 'ALTREP') INTSXP:
>>
>>  > y <- -1e3:2e9 ;.Internal(inspect(y))
>>   @0x000000000a285648 13 INTSXP g0c0 [REF(65535)]  -1000 : 2000000000 (compact)
>>  > y <- -1e3:2.1e9 ;.Internal(inspect(y))
>>   @0x0000000019925930 13 INTSXP g0c0 [REF(65535)]  -1000 : 2100000000 (compact)
>>
>> and here, y is correct, just the printing from
>> .Internal(inspect(y)) is bugous (probably prints the double as an integer):
>>
>>  > y <- -1e3:2.2e9 ; .Internal(inspect(y))
>>   @0x00000000195c0178 14 REALSXP g0c0 [REF(65535)]  -1000 : -2094967296 (compact)
>>  > length(y)
>>   [1] 2200001001
>>  > tail(y)
>>   [1] 2.2e+09 2.2e+09 2.2e+09 2.2e+09 2.2e+09 2.2e+09
>>  > tail(y) - 2.2e9
>>   [1] -5 -4 -3 -2 -1  0
>>  >
>>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From iuke-tier@ey m@iii@g oii uiow@@edu  Tue Sep  8 16:42:43 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Tue, 8 Sep 2020 09:42:43 -0500 (CDT)
Subject: [Rd] [External] Re: Operations with long altrep vectors cause
 segfaults on Windows
In-Reply-To: <24407.18005.968508.796695@stat.math.ethz.ch>
References: <CAJmOi+MjsxpO+i9r57xwb5Ex+GcrECGB17GScy-_w+Y0jK6dmQ@mail.gmail.com>
 <24407.17272.770281.413960@stat.math.ethz.ch>
 <24407.18005.968508.796695@stat.math.ethz.ch>
Message-ID: <alpine.DEB.2.21.2009080941140.3141@luke-Latitude-7480>

On Tue, 8 Sep 2020, Martin Maechler wrote:

>>>>>> Martin Maechler
>>>>>>     on Tue, 8 Sep 2020 10:40:24 +0200 writes:
>
>>>>>> Hugh Parsonage
>>>>>>     on Tue, 8 Sep 2020 18:08:11 +1000 writes:
>
>    >> I can only reproduce on Windows, but reliably (both 4.0.0 and 4.0.2):
>
>    >> $> R --vanilla
>    >> x <- c(0L, -2e9:2e9)
>
>    >> # > Segmentation fault
>
>    >> Tried to reproduce on Linux but the above worked as expected. Not an
>    >> issue merely with the length of the vector; for example, x <-
>    >> rep_len(1:10, 1e10) works, though the altrep vector must be long to
>    >> reproduce:
>
>    >> x <- c(0L, -1e9:1e9)  #ok
>
>    >> Segmentation faults occur with the following too:
>
>    >> x <- (-2e9:2e9) + 1L
>
>    > Your operation would "need" (not in theory, but in practice)
>    > to go from altrep to regular vectors.
>    > I guess the segfault occurs because of something like this :
>
>    > R asks Windows to hand it a huge amount of memory and Windows replies
>    > "ok, here is the memory pointer"
>    > and then R tries to write to there, but illegally (because
>    > Windows should have told R that it does not really have enough
>    > memory for that ..).
>
>    > I cannot reproduce the segmentation fault .. but I can confirm
>    > there is a bug there that shows for me on Windows but not on
>    > Linux:
>
>    > "My" Windows is on a terminalserver not with too many GB of memory
>    > (but then in a version of Windows that recognizes that it cannot
>    > get so much memory):
>
>    > ------------------------- Here some transcript (thanks to
>    > using Emacs w/ ESS also on Windows) ------------------
>
>    > R Under development (unstable) (2020-08-24 r79074) -- "Unsuffered Consequences"
>    > Copyright (C) 2020 The R Foundation for Statistical Computing
>    > Platform: x86_64-w64-mingw32/x64 (64-bit)
>
>    > R ist freie Software und kommt OHNE JEGLICHE GARANTIE.
>    > Sie sind eingeladen, es unter bestimmten Bedingungen weiter zu verbreiten.
>    > Tippen Sie 'license()' or 'licence()' f?r Details dazu.
>
>    > R ist ein Gemeinschaftsprojekt mit vielen Beitragenden.
>    > Tippen Sie 'contributors()' f?r mehr Information und 'citation()',
>    > um zu erfahren, wie R oder R packages in Publikationen zitiert werden k?nnen.
>
>    > Tippen Sie 'demo()' f?r einige Demos, 'help()' f?r on-line Hilfe, oder
>    > 'help.start()' f?r eine HTML Browserschnittstelle zur Hilfe.
>    > Tippen Sie 'q()', um R zu verlassen.
>
>    >> x <- (-2e9:2e9) + 1L
>    > Fehler: kann Vektor der Gr??e 14.9 GB nicht allozieren
>    >> y <- c(0L, -2e9:2e9)
>    > Fehler: kann Vektor der Gr??e 14.9 GB nicht allozieren
>    >> Sys.setenv(LANGUAGE="en")
>    >> y <- c(0L, -2e9:2e9)
>    > Error: cannot allocate vector of size 14.9 Gb
>    >> y <- -1e9:4e9
>    >> .Internal(inspect(y))
>    > @0x00000000195a6808 14 REALSXP g0c0 [REF(65535)]  -1000000000 : -294967296 (compact)
>    >> .Machine$integer.max / 1e9
>    > [1] 2.147484
>    >> y <- -1e6:2.2e9
>    >> .Internal(inspect(y))
>    > @0x000000000a11a5d8 14 REALSXP g0c0 [REF(65535)]  -1000000 : -2094967296 (compact)
>    >> y <- -1e6:2e9
>    >> .Internal(inspect(y))
>    > @0x000000000a13adf0 13 INTSXP g0c0 [REF(65535)]  -1000000 : 2000000000 (compact)
>    >>
>    > ------------------------- end of transcript -----------------------------------
>
>    > So indeed, no seg.fault, R notices that it can't get 15 GB of
>    > memory.
>
>    > But the bug is bad news:  We have *silent* integer overflow happening
>    > according to what  .Internal(inspect(y)) shows...
>
>    > .... less bad new: Probably the bug is only in the 'internal inspect' code
>    > where a format specifier is used in C's printf() that does not work
>    > correctly on Windows, at least the way it is currently compiled ..
>
>
>    > On (64-bit) Linux, I get
>
>    >> y <- -1e9:4e9 ; .Internal(inspect(y))
>    > @7d86388 14 REALSXP g0c0 [REF(65535)]  -1000000000 : 4000000000 (compact)
>
>    >> y <- c(0L, y)
>    > Error: cannot allocate vector of size 37.3 Gb
>
>    > which seems much better ... until I do find a bug, may again
>    > only in the C code underlying .Internal(inspect(.)) :
>
>    >> y <- -1e9:2e9 ; .Internal(inspect(y))
>    > @7d86ac0 13 INTSXP g0c0 [REF(65535)] Error: long vectors not supported yet: ../../../R/src/main/altclasses.c:139
>    >>
>
> Indeed, the purported "integer overflow" (above) does not
> happen.
> It is "only" a  'printf' related bug inside .Internal(inspect(.)) on Windows.
>
> *interestingly*, the above bug I've noticed on (64-bit) Linux
> does *not* show on Windows (64-bit), at least not for that case:
>
> On Windows, things are fine as long as they remain (compacted
> aka 'ALTREP') INTSXP:
>
>  > y <- -1e3:2e9 ;.Internal(inspect(y))
>  @0x000000000a285648 13 INTSXP g0c0 [REF(65535)]  -1000 : 2000000000 (compact)
>  > y <- -1e3:2.1e9 ;.Internal(inspect(y))
>  @0x0000000019925930 13 INTSXP g0c0 [REF(65535)]  -1000 : 2100000000 (compact)
>
> and here, y is correct, just the printing from
> .Internal(inspect(y)) is bugous (probably prints the double as an integer):

It's a '%ld' that probably needs to be '%lld' for Windows. Will fix
sometime soon.

Best,

luke

>
>  > y <- -1e3:2.2e9 ; .Internal(inspect(y))
>  @0x00000000195c0178 14 REALSXP g0c0 [REF(65535)]  -1000 : -2094967296 (compact)
>  > length(y)
>  [1] 2200001001
>  > tail(y)
>  [1] 2.2e+09 2.2e+09 2.2e+09 2.2e+09 2.2e+09 2.2e+09
>  > tail(y) - 2.2e9
>  [1] -5 -4 -3 -2 -1  0
>  >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From hugh@p@r@on@ge @end|ng |rom gm@||@com  Tue Sep  8 16:48:29 2020
From: hugh@p@r@on@ge @end|ng |rom gm@||@com (Hugh Parsonage)
Date: Wed, 9 Sep 2020 00:48:29 +1000
Subject: [Rd] [External] Re: Operations with long altrep vectors cause
 segfaults on Windows
In-Reply-To: <alpine.DEB.2.21.2009080912190.3141@luke-Latitude-7480>
References: <CAJmOi+MjsxpO+i9r57xwb5Ex+GcrECGB17GScy-_w+Y0jK6dmQ@mail.gmail.com>
 <24407.17272.770281.413960@stat.math.ethz.ch>
 <24407.18005.968508.796695@stat.math.ethz.ch>
 <CAJmOi+OOVjR5A=tjR+knHqq1Zcd9cJPg_kxsEDGu0enq0U92VA@mail.gmail.com>
 <alpine.DEB.2.21.2009080912190.3141@luke-Latitude-7480>
Message-ID: <CAJmOi+PD6QF8hFf8MygN=-VWo+aCX9Av1UUeG9fbk8mbG6BD5w@mail.gmail.com>

Unfortunately I only get

[Thread 21752.0x4aa8 exited with code 3221225477]
[Thread 21752.0x4514 exited with code 3221225477]
[Thread 21752.0x3f10 exited with code 3221225477]
[Inferior 1 (process 21752) exited with code 030000000005]

(I'm guessing I would need to build an instrumented version of R, or
can R be debugged using gdb with an off-the-shelf installation?)

On Wed, 9 Sep 2020 at 00:32, <luke-tierney at uiowa.edu> wrote:
>
> On Tue, 8 Sep 2020, Hugh Parsonage wrote:
>
> > Thanks Martin.  On further testing, it seems that the segmentation
> > fault can only occur when the amount of obtainable memory is
> > sufficiently high. On my machine (admittedly with other processes
> > running):
> >
> > $ R --vanilla --max-mem-size=30G -e "x <- c(0L, -2e9:2e9)"
> > Segmentation fault
> >
> > $ R --vanilla --max-mem-size=29G -e "x <- c(0L, -2e9:2e9)"
> > Error: cannot allocate vector of size 14.9 Gb
> > Execution halted
>
> Unfortunately I don't have access to a Windows machine with enough
> memory to get to the point of failure. If you have rtools and gdb
> installed can you run in gdb and see where the segfault is happening?
>
> Best,
>
> luke
>
> >
> > On Tue, 8 Sep 2020 at 18:52, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
> >>
> >>>>>>> Martin Maechler
> >>>>>>>     on Tue, 8 Sep 2020 10:40:24 +0200 writes:
> >>
> >>>>>>> Hugh Parsonage
> >>>>>>>     on Tue, 8 Sep 2020 18:08:11 +1000 writes:
> >>
> >>    >> I can only reproduce on Windows, but reliably (both 4.0.0 and 4.0.2):
> >>
> >>    >> $> R --vanilla
> >>    >> x <- c(0L, -2e9:2e9)
> >>
> >>    >> # > Segmentation fault
> >>
> >>    >> Tried to reproduce on Linux but the above worked as expected. Not an
> >>    >> issue merely with the length of the vector; for example, x <-
> >>    >> rep_len(1:10, 1e10) works, though the altrep vector must be long to
> >>    >> reproduce:
> >>
> >>    >> x <- c(0L, -1e9:1e9)  #ok
> >>
> >>    >> Segmentation faults occur with the following too:
> >>
> >>    >> x <- (-2e9:2e9) + 1L
> >>
> >>    > Your operation would "need" (not in theory, but in practice)
> >>    > to go from altrep to regular vectors.
> >>    > I guess the segfault occurs because of something like this :
> >>
> >>    > R asks Windows to hand it a huge amount of memory and Windows replies
> >>    > "ok, here is the memory pointer"
> >>    > and then R tries to write to there, but illegally (because
> >>    > Windows should have told R that it does not really have enough
> >>    > memory for that ..).
> >>
> >>    > I cannot reproduce the segmentation fault .. but I can confirm
> >>    > there is a bug there that shows for me on Windows but not on
> >>    > Linux:
> >>
> >>    > "My" Windows is on a terminalserver not with too many GB of memory
> >>    > (but then in a version of Windows that recognizes that it cannot
> >>    > get so much memory):
> >>
> >>    > ------------------------- Here some transcript (thanks to
> >>    > using Emacs w/ ESS also on Windows) ------------------
> >>
> >>    > R Under development (unstable) (2020-08-24 r79074) -- "Unsuffered Consequences"
> >>    > Copyright (C) 2020 The R Foundation for Statistical Computing
> >>    > Platform: x86_64-w64-mingw32/x64 (64-bit)
> >>
> >>    > R ist freie Software und kommt OHNE JEGLICHE GARANTIE.
> >>    > Sie sind eingeladen, es unter bestimmten Bedingungen weiter zu verbreiten.
> >>    > Tippen Sie 'license()' or 'licence()' f?r Details dazu.
> >>
> >>    > R ist ein Gemeinschaftsprojekt mit vielen Beitragenden.
> >>    > Tippen Sie 'contributors()' f?r mehr Information und 'citation()',
> >>    > um zu erfahren, wie R oder R packages in Publikationen zitiert werden k?nnen.
> >>
> >>    > Tippen Sie 'demo()' f?r einige Demos, 'help()' f?r on-line Hilfe, oder
> >>    > 'help.start()' f?r eine HTML Browserschnittstelle zur Hilfe.
> >>    > Tippen Sie 'q()', um R zu verlassen.
> >>
> >>    >> x <- (-2e9:2e9) + 1L
> >>    > Fehler: kann Vektor der Gr??e 14.9 GB nicht allozieren
> >>    >> y <- c(0L, -2e9:2e9)
> >>    > Fehler: kann Vektor der Gr??e 14.9 GB nicht allozieren
> >>    >> Sys.setenv(LANGUAGE="en")
> >>    >> y <- c(0L, -2e9:2e9)
> >>    > Error: cannot allocate vector of size 14.9 Gb
> >>    >> y <- -1e9:4e9
> >>    >> .Internal(inspect(y))
> >>    > @0x00000000195a6808 14 REALSXP g0c0 [REF(65535)]  -1000000000 : -294967296 (compact)
> >>    >> .Machine$integer.max / 1e9
> >>    > [1] 2.147484
> >>    >> y <- -1e6:2.2e9
> >>    >> .Internal(inspect(y))
> >>    > @0x000000000a11a5d8 14 REALSXP g0c0 [REF(65535)]  -1000000 : -2094967296 (compact)
> >>    >> y <- -1e6:2e9
> >>    >> .Internal(inspect(y))
> >>    > @0x000000000a13adf0 13 INTSXP g0c0 [REF(65535)]  -1000000 : 2000000000 (compact)
> >>    >>
> >>    > ------------------------- end of transcript -----------------------------------
> >>
> >>    > So indeed, no seg.fault, R notices that it can't get 15 GB of
> >>    > memory.
> >>
> >>    > But the bug is bad news:  We have *silent* integer overflow happening
> >>    > according to what  .Internal(inspect(y)) shows...
> >>
> >>    > .... less bad new: Probably the bug is only in the 'internal inspect' code
> >>    > where a format specifier is used in C's printf() that does not work
> >>    > correctly on Windows, at least the way it is currently compiled ..
> >>
> >>
> >>    > On (64-bit) Linux, I get
> >>
> >>    >> y <- -1e9:4e9 ; .Internal(inspect(y))
> >>    > @7d86388 14 REALSXP g0c0 [REF(65535)]  -1000000000 : 4000000000 (compact)
> >>
> >>    >> y <- c(0L, y)
> >>    > Error: cannot allocate vector of size 37.3 Gb
> >>
> >>    > which seems much better ... until I do find a bug, may again
> >>    > only in the C code underlying .Internal(inspect(.)) :
> >>
> >>    >> y <- -1e9:2e9 ; .Internal(inspect(y))
> >>    > @7d86ac0 13 INTSXP g0c0 [REF(65535)] Error: long vectors not supported yet: ../../../R/src/main/altclasses.c:139
> >>    >>
> >>
> >> Indeed, the purported "integer overflow" (above) does not
> >> happen.
> >> It is "only" a  'printf' related bug inside .Internal(inspect(.)) on Windows.
> >>
> >> *interestingly*, the above bug I've noticed on (64-bit) Linux
> >> does *not* show on Windows (64-bit), at least not for that case:
> >>
> >> On Windows, things are fine as long as they remain (compacted
> >> aka 'ALTREP') INTSXP:
> >>
> >>  > y <- -1e3:2e9 ;.Internal(inspect(y))
> >>   @0x000000000a285648 13 INTSXP g0c0 [REF(65535)]  -1000 : 2000000000 (compact)
> >>  > y <- -1e3:2.1e9 ;.Internal(inspect(y))
> >>   @0x0000000019925930 13 INTSXP g0c0 [REF(65535)]  -1000 : 2100000000 (compact)
> >>
> >> and here, y is correct, just the printing from
> >> .Internal(inspect(y)) is bugous (probably prints the double as an integer):
> >>
> >>  > y <- -1e3:2.2e9 ; .Internal(inspect(y))
> >>   @0x00000000195c0178 14 REALSXP g0c0 [REF(65535)]  -1000 : -2094967296 (compact)
> >>  > length(y)
> >>   [1] 2200001001
> >>  > tail(y)
> >>   [1] 2.2e+09 2.2e+09 2.2e+09 2.2e+09 2.2e+09 2.2e+09
> >>  > tail(y) - 2.2e9
> >>   [1] -5 -4 -3 -2 -1  0
> >>  >
> >>
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Sep  8 17:19:59 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 8 Sep 2020 17:19:59 +0200
Subject: [Rd] [External] Re: Operations with long altrep vectors cause
 segfaults on Windows
In-Reply-To: <CAJmOi+PD6QF8hFf8MygN=-VWo+aCX9Av1UUeG9fbk8mbG6BD5w@mail.gmail.com>
References: <CAJmOi+MjsxpO+i9r57xwb5Ex+GcrECGB17GScy-_w+Y0jK6dmQ@mail.gmail.com>
 <24407.17272.770281.413960@stat.math.ethz.ch>
 <24407.18005.968508.796695@stat.math.ethz.ch>
 <CAJmOi+OOVjR5A=tjR+knHqq1Zcd9cJPg_kxsEDGu0enq0U92VA@mail.gmail.com>
 <alpine.DEB.2.21.2009080912190.3141@luke-Latitude-7480>
 <CAJmOi+PD6QF8hFf8MygN=-VWo+aCX9Av1UUeG9fbk8mbG6BD5w@mail.gmail.com>
Message-ID: <6e673fc4-1891-3a9f-2bea-da5e89310099@gmail.com>

On 9/8/20 4:48 PM, Hugh Parsonage wrote:
> Unfortunately I only get
>
> [Thread 21752.0x4aa8 exited with code 3221225477]
> [Thread 21752.0x4514 exited with code 3221225477]
> [Thread 21752.0x3f10 exited with code 3221225477]
> [Inferior 1 (process 21752) exited with code 030000000005]
>
> (I'm guessing I would need to build an instrumented version of R, or
> can R be debugged using gdb with an off-the-shelf installation?)

No, the default build lacks debug symbols. You need a build with debug 
symbols, and if you can reproduce in a build without compiler 
optimizations (-O0), the backtrace may be easier to interpret. Some bugs 
however "disappear" when optimizations are disabled. You can build R 
from source (and there may be debug builds provided by someone else 
(Jeroen?)).

Tomas

>
> On Wed, 9 Sep 2020 at 00:32, <luke-tierney at uiowa.edu> wrote:
>> On Tue, 8 Sep 2020, Hugh Parsonage wrote:
>>
>>> Thanks Martin.  On further testing, it seems that the segmentation
>>> fault can only occur when the amount of obtainable memory is
>>> sufficiently high. On my machine (admittedly with other processes
>>> running):
>>>
>>> $ R --vanilla --max-mem-size=30G -e "x <- c(0L, -2e9:2e9)"
>>> Segmentation fault
>>>
>>> $ R --vanilla --max-mem-size=29G -e "x <- c(0L, -2e9:2e9)"
>>> Error: cannot allocate vector of size 14.9 Gb
>>> Execution halted
>> Unfortunately I don't have access to a Windows machine with enough
>> memory to get to the point of failure. If you have rtools and gdb
>> installed can you run in gdb and see where the segfault is happening?
>>
>> Best,
>>
>> luke
>>
>>> On Tue, 8 Sep 2020 at 18:52, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
>>>>>>>>> Martin Maechler
>>>>>>>>>      on Tue, 8 Sep 2020 10:40:24 +0200 writes:
>>>>>>>>> Hugh Parsonage
>>>>>>>>>      on Tue, 8 Sep 2020 18:08:11 +1000 writes:
>>>>     >> I can only reproduce on Windows, but reliably (both 4.0.0 and 4.0.2):
>>>>
>>>>     >> $> R --vanilla
>>>>     >> x <- c(0L, -2e9:2e9)
>>>>
>>>>     >> # > Segmentation fault
>>>>
>>>>     >> Tried to reproduce on Linux but the above worked as expected. Not an
>>>>     >> issue merely with the length of the vector; for example, x <-
>>>>     >> rep_len(1:10, 1e10) works, though the altrep vector must be long to
>>>>     >> reproduce:
>>>>
>>>>     >> x <- c(0L, -1e9:1e9)  #ok
>>>>
>>>>     >> Segmentation faults occur with the following too:
>>>>
>>>>     >> x <- (-2e9:2e9) + 1L
>>>>
>>>>     > Your operation would "need" (not in theory, but in practice)
>>>>     > to go from altrep to regular vectors.
>>>>     > I guess the segfault occurs because of something like this :
>>>>
>>>>     > R asks Windows to hand it a huge amount of memory and Windows replies
>>>>     > "ok, here is the memory pointer"
>>>>     > and then R tries to write to there, but illegally (because
>>>>     > Windows should have told R that it does not really have enough
>>>>     > memory for that ..).
>>>>
>>>>     > I cannot reproduce the segmentation fault .. but I can confirm
>>>>     > there is a bug there that shows for me on Windows but not on
>>>>     > Linux:
>>>>
>>>>     > "My" Windows is on a terminalserver not with too many GB of memory
>>>>     > (but then in a version of Windows that recognizes that it cannot
>>>>     > get so much memory):
>>>>
>>>>     > ------------------------- Here some transcript (thanks to
>>>>     > using Emacs w/ ESS also on Windows) ------------------
>>>>
>>>>     > R Under development (unstable) (2020-08-24 r79074) -- "Unsuffered Consequences"
>>>>     > Copyright (C) 2020 The R Foundation for Statistical Computing
>>>>     > Platform: x86_64-w64-mingw32/x64 (64-bit)
>>>>
>>>>     > R ist freie Software und kommt OHNE JEGLICHE GARANTIE.
>>>>     > Sie sind eingeladen, es unter bestimmten Bedingungen weiter zu verbreiten.
>>>>     > Tippen Sie 'license()' or 'licence()' f?r Details dazu.
>>>>
>>>>     > R ist ein Gemeinschaftsprojekt mit vielen Beitragenden.
>>>>     > Tippen Sie 'contributors()' f?r mehr Information und 'citation()',
>>>>     > um zu erfahren, wie R oder R packages in Publikationen zitiert werden k?nnen.
>>>>
>>>>     > Tippen Sie 'demo()' f?r einige Demos, 'help()' f?r on-line Hilfe, oder
>>>>     > 'help.start()' f?r eine HTML Browserschnittstelle zur Hilfe.
>>>>     > Tippen Sie 'q()', um R zu verlassen.
>>>>
>>>>     >> x <- (-2e9:2e9) + 1L
>>>>     > Fehler: kann Vektor der Gr??e 14.9 GB nicht allozieren
>>>>     >> y <- c(0L, -2e9:2e9)
>>>>     > Fehler: kann Vektor der Gr??e 14.9 GB nicht allozieren
>>>>     >> Sys.setenv(LANGUAGE="en")
>>>>     >> y <- c(0L, -2e9:2e9)
>>>>     > Error: cannot allocate vector of size 14.9 Gb
>>>>     >> y <- -1e9:4e9
>>>>     >> .Internal(inspect(y))
>>>>     > @0x00000000195a6808 14 REALSXP g0c0 [REF(65535)]  -1000000000 : -294967296 (compact)
>>>>     >> .Machine$integer.max / 1e9
>>>>     > [1] 2.147484
>>>>     >> y <- -1e6:2.2e9
>>>>     >> .Internal(inspect(y))
>>>>     > @0x000000000a11a5d8 14 REALSXP g0c0 [REF(65535)]  -1000000 : -2094967296 (compact)
>>>>     >> y <- -1e6:2e9
>>>>     >> .Internal(inspect(y))
>>>>     > @0x000000000a13adf0 13 INTSXP g0c0 [REF(65535)]  -1000000 : 2000000000 (compact)
>>>>     >>
>>>>     > ------------------------- end of transcript -----------------------------------
>>>>
>>>>     > So indeed, no seg.fault, R notices that it can't get 15 GB of
>>>>     > memory.
>>>>
>>>>     > But the bug is bad news:  We have *silent* integer overflow happening
>>>>     > according to what  .Internal(inspect(y)) shows...
>>>>
>>>>     > .... less bad new: Probably the bug is only in the 'internal inspect' code
>>>>     > where a format specifier is used in C's printf() that does not work
>>>>     > correctly on Windows, at least the way it is currently compiled ..
>>>>
>>>>
>>>>     > On (64-bit) Linux, I get
>>>>
>>>>     >> y <- -1e9:4e9 ; .Internal(inspect(y))
>>>>     > @7d86388 14 REALSXP g0c0 [REF(65535)]  -1000000000 : 4000000000 (compact)
>>>>
>>>>     >> y <- c(0L, y)
>>>>     > Error: cannot allocate vector of size 37.3 Gb
>>>>
>>>>     > which seems much better ... until I do find a bug, may again
>>>>     > only in the C code underlying .Internal(inspect(.)) :
>>>>
>>>>     >> y <- -1e9:2e9 ; .Internal(inspect(y))
>>>>     > @7d86ac0 13 INTSXP g0c0 [REF(65535)] Error: long vectors not supported yet: ../../../R/src/main/altclasses.c:139
>>>>     >>
>>>>
>>>> Indeed, the purported "integer overflow" (above) does not
>>>> happen.
>>>> It is "only" a  'printf' related bug inside .Internal(inspect(.)) on Windows.
>>>>
>>>> *interestingly*, the above bug I've noticed on (64-bit) Linux
>>>> does *not* show on Windows (64-bit), at least not for that case:
>>>>
>>>> On Windows, things are fine as long as they remain (compacted
>>>> aka 'ALTREP') INTSXP:
>>>>
>>>>   > y <- -1e3:2e9 ;.Internal(inspect(y))
>>>>    @0x000000000a285648 13 INTSXP g0c0 [REF(65535)]  -1000 : 2000000000 (compact)
>>>>   > y <- -1e3:2.1e9 ;.Internal(inspect(y))
>>>>    @0x0000000019925930 13 INTSXP g0c0 [REF(65535)]  -1000 : 2100000000 (compact)
>>>>
>>>> and here, y is correct, just the printing from
>>>> .Internal(inspect(y)) is bugous (probably prints the double as an integer):
>>>>
>>>>   > y <- -1e3:2.2e9 ; .Internal(inspect(y))
>>>>    @0x00000000195c0178 14 REALSXP g0c0 [REF(65535)]  -1000 : -2094967296 (compact)
>>>>   > length(y)
>>>>    [1] 2200001001
>>>>   > tail(y)
>>>>    [1] 2.2e+09 2.2e+09 2.2e+09 2.2e+09 2.2e+09 2.2e+09
>>>>   > tail(y) - 2.2e9
>>>>    [1] -5 -4 -3 -2 -1  0
>>>>   >
>>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>> --
>> Luke Tierney
>> Ralph E. Wareham Professor of Mathematical Sciences
>> University of Iowa                  Phone:             319-335-3386
>> Department of Statistics and        Fax:               319-335-3017
>>      Actuarial Science
>> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
>> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Sep  8 17:57:22 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 8 Sep 2020 17:57:22 +0200
Subject: [Rd] [External] Re: Operations with long altrep vectors cause
 segfaults on Windows
In-Reply-To: <alpine.DEB.2.21.2009080941140.3141@luke-Latitude-7480>
References: <CAJmOi+MjsxpO+i9r57xwb5Ex+GcrECGB17GScy-_w+Y0jK6dmQ@mail.gmail.com>
 <24407.17272.770281.413960@stat.math.ethz.ch>
 <24407.18005.968508.796695@stat.math.ethz.ch>
 <alpine.DEB.2.21.2009080941140.3141@luke-Latitude-7480>
Message-ID: <24407.43490.412402.251708@stat.math.ethz.ch>

>>>>> luke-tierney  
>>>>>     on Tue, 8 Sep 2020 09:42:43 -0500 (CDT) writes:

    > On Tue, 8 Sep 2020, Martin Maechler wrote:
    >>>>>>> Martin Maechler
    >>>>>>> on Tue, 8 Sep 2020 10:40:24 +0200 writes:
    >> 
    >>>>>>> Hugh Parsonage
    >>>>>>> on Tue, 8 Sep 2020 18:08:11 +1000 writes:
    >> 
    >> >> I can only reproduce on Windows, but reliably (both 4.0.0 and 4.0.2):
    >> 
    >> >> $> R --vanilla
    >> >> x <- c(0L, -2e9:2e9)
    >> 
    >> >> # > Segmentation fault
    >> 
    >> >> Tried to reproduce on Linux but the above worked as expected. Not an
    >> >> issue merely with the length of the vector; for example, x <-
    >> >> rep_len(1:10, 1e10) works, though the altrep vector must be long to
    >> >> reproduce:
    >> 
    >> >> x <- c(0L, -1e9:1e9)  #ok
    >> 
    >> >> Segmentation faults occur with the following too:
    >> 
    >> >> x <- (-2e9:2e9) + 1L
    >> 
    >> > Your operation would "need" (not in theory, but in practice)
    >> > to go from altrep to regular vectors.
    >> > I guess the segfault occurs because of something like this :
    >> 
    >> > R asks Windows to hand it a huge amount of memory and Windows replies
    >> > "ok, here is the memory pointer"
    >> > and then R tries to write to there, but illegally (because
    >> > Windows should have told R that it does not really have enough
    >> > memory for that ..).
    >> 
    >> > I cannot reproduce the segmentation fault .. but I can confirm
    >> > there is a bug there that shows for me on Windows but not on
    >> > Linux:
    >> 
    >> > "My" Windows is on a terminalserver not with too many GB of memory
    >> > (but then in a version of Windows that recognizes that it cannot
    >> > get so much memory):
    >> 
    >> > ------------------------- Here some transcript (thanks to
    >> > using Emacs w/ ESS also on Windows) ------------------
    >> 
    >> > R Under development (unstable) (2020-08-24 r79074) -- "Unsuffered Consequences"
    >> > Copyright (C) 2020 The R Foundation for Statistical Computing
    >> > Platform: x86_64-w64-mingw32/x64 (64-bit)
    >> 
    >> > R ist freie Software und kommt OHNE JEGLICHE GARANTIE.
    >> > Sie sind eingeladen, es unter bestimmten Bedingungen weiter zu verbreiten.
    >> > Tippen Sie 'license()' or 'licence()' f?r Details dazu.
    >> 
    >> > R ist ein Gemeinschaftsprojekt mit vielen Beitragenden.
    >> > Tippen Sie 'contributors()' f?r mehr Information und 'citation()',
    >> > um zu erfahren, wie R oder R packages in Publikationen zitiert werden k?nnen.
    >> 
    >> > Tippen Sie 'demo()' f?r einige Demos, 'help()' f?r on-line Hilfe, oder
    >> > 'help.start()' f?r eine HTML Browserschnittstelle zur Hilfe.
    >> > Tippen Sie 'q()', um R zu verlassen.
    >> 
    >> >> x <- (-2e9:2e9) + 1L
    >> > Fehler: kann Vektor der Gr??e 14.9 GB nicht allozieren
    >> >> y <- c(0L, -2e9:2e9)
    >> > Fehler: kann Vektor der Gr??e 14.9 GB nicht allozieren
    >> >> Sys.setenv(LANGUAGE="en")
    >> >> y <- c(0L, -2e9:2e9)
    >> > Error: cannot allocate vector of size 14.9 Gb
    >> >> y <- -1e9:4e9
    >> >> .Internal(inspect(y))
    >> > @0x00000000195a6808 14 REALSXP g0c0 [REF(65535)]  -1000000000 : -294967296 (compact)
    >> >> .Machine$integer.max / 1e9
    >> > [1] 2.147484
    >> >> y <- -1e6:2.2e9
    >> >> .Internal(inspect(y))
    >> > @0x000000000a11a5d8 14 REALSXP g0c0 [REF(65535)]  -1000000 : -2094967296 (compact)
    >> >> y <- -1e6:2e9
    >> >> .Internal(inspect(y))
    >> > @0x000000000a13adf0 13 INTSXP g0c0 [REF(65535)]  -1000000 : 2000000000 (compact)
    >> >>
    >> > ------------------------- end of transcript -----------------------------------
    >> 
    >> > So indeed, no seg.fault, R notices that it can't get 15 GB of
    >> > memory.
    >> 
    >> > But the bug is bad news:  We have *silent* integer overflow happening
    >> > according to what  .Internal(inspect(y)) shows...
    >> 
    >> > .... less bad new: Probably the bug is only in the 'internal inspect' code
    >> > where a format specifier is used in C's printf() that does not work
    >> > correctly on Windows, at least the way it is currently compiled ..
    >> 
    >> 
    >> > On (64-bit) Linux, I get
    >> 
    >> >> y <- -1e9:4e9 ; .Internal(inspect(y))
    >> > @7d86388 14 REALSXP g0c0 [REF(65535)]  -1000000000 : 4000000000 (compact)
    >> 
    >> >> y <- c(0L, y)
    >> > Error: cannot allocate vector of size 37.3 Gb
    >> 
    >> > which seems much better ... until I do find a bug, may again
    >> > only in the C code underlying .Internal(inspect(.)) :
    >> 
    >> >> y <- -1e9:2e9 ; .Internal(inspect(y))
    >> > @7d86ac0 13 INTSXP g0c0 [REF(65535)] Error: long vectors not supported yet: ../../../R/src/main/altclasses.c:139
    >> >>
    >> 
    >> Indeed, the purported "integer overflow" (above) does not
    >> happen.
    >> It is "only" a  'printf' related bug inside .Internal(inspect(.)) on Windows.
    >> 
    >> *interestingly*, the above bug I've noticed on (64-bit) Linux
    >> does *not* show on Windows (64-bit), at least not for that case:
    >> 
    >> On Windows, things are fine as long as they remain (compacted
    >> aka 'ALTREP') INTSXP:
    >> 
    >> > y <- -1e3:2e9 ;.Internal(inspect(y))
    >> @0x000000000a285648 13 INTSXP g0c0 [REF(65535)]  -1000 : 2000000000 (compact)
    >> > y <- -1e3:2.1e9 ;.Internal(inspect(y))
    >> @0x0000000019925930 13 INTSXP g0c0 [REF(65535)]  -1000 : 2100000000 (compact)
    >> 
    >> and here, y is correct, just the printing from
    >> .Internal(inspect(y)) is bugous (probably prints the double as an integer):

    > It's a '%ld' that probably needs to be '%lld' for Windows. Will fix
    > sometime soon.

    > Best,
    > luke

I had guessed at something like that .. but "interestingly" it
was quite different:

Our code use   int n = LENGTH(.);
and  the error message above was triggered there.

I've committed a fix to both R-devel and R-patched (and added a
regression test),
but I still wonder why the above error had not triggered on Windows...

Martin

    >> 
    >> > y <- -1e3:2.2e9 ; .Internal(inspect(y))
    >> @0x00000000195c0178 14 REALSXP g0c0 [REF(65535)]  -1000 : -2094967296 (compact)
    >> > length(y)
    >> [1] 2200001001
    >> > tail(y)
    >> [1] 2.2e+09 2.2e+09 2.2e+09 2.2e+09 2.2e+09 2.2e+09
    >> > tail(y) - 2.2e9
    >> [1] -5 -4 -3 -2 -1  0
    >> >
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> 

    > -- 
    > Luke Tierney
    > Ralph E. Wareham Professor of Mathematical Sciences
    > University of Iowa                  Phone:             319-335-3386
    > Department of Statistics and        Fax:               319-335-3017
    > Actuarial Science
    > 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
    > Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From iuke-tier@ey m@iii@g oii uiow@@edu  Tue Sep  8 18:37:51 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Tue, 8 Sep 2020 11:37:51 -0500 (CDT)
Subject: [Rd] [External] Re: Operations with long altrep vectors cause
 segfaults on Windows
In-Reply-To: <24407.43490.412402.251708@stat.math.ethz.ch>
References: <CAJmOi+MjsxpO+i9r57xwb5Ex+GcrECGB17GScy-_w+Y0jK6dmQ@mail.gmail.com>
 <24407.17272.770281.413960@stat.math.ethz.ch>
 <24407.18005.968508.796695@stat.math.ethz.ch>
 <alpine.DEB.2.21.2009080941140.3141@luke-Latitude-7480>
 <24407.43490.412402.251708@stat.math.ethz.ch>
Message-ID: <alpine.DEB.2.21.2009081136500.3141@luke-Latitude-7480>

On Tue, 8 Sep 2020, Martin Maechler wrote:

>>>>>> luke-tierney
>>>>>>     on Tue, 8 Sep 2020 09:42:43 -0500 (CDT) writes:
>
>    > On Tue, 8 Sep 2020, Martin Maechler wrote:
>    >>>>>>> Martin Maechler
>    >>>>>>> on Tue, 8 Sep 2020 10:40:24 +0200 writes:
>    >>
>    >>>>>>> Hugh Parsonage
>    >>>>>>> on Tue, 8 Sep 2020 18:08:11 +1000 writes:
>    >>
>    >> >> I can only reproduce on Windows, but reliably (both 4.0.0 and 4.0.2):
>    >>
>    >> >> $> R --vanilla
>    >> >> x <- c(0L, -2e9:2e9)
>    >>
>    >> >> # > Segmentation fault
>    >>
>    >> >> Tried to reproduce on Linux but the above worked as expected. Not an
>    >> >> issue merely with the length of the vector; for example, x <-
>    >> >> rep_len(1:10, 1e10) works, though the altrep vector must be long to
>    >> >> reproduce:
>    >>
>    >> >> x <- c(0L, -1e9:1e9)  #ok
>    >>
>    >> >> Segmentation faults occur with the following too:
>    >>
>    >> >> x <- (-2e9:2e9) + 1L
>    >>
>    >> > Your operation would "need" (not in theory, but in practice)
>    >> > to go from altrep to regular vectors.
>    >> > I guess the segfault occurs because of something like this :
>    >>
>    >> > R asks Windows to hand it a huge amount of memory and Windows replies
>    >> > "ok, here is the memory pointer"
>    >> > and then R tries to write to there, but illegally (because
>    >> > Windows should have told R that it does not really have enough
>    >> > memory for that ..).
>    >>
>    >> > I cannot reproduce the segmentation fault .. but I can confirm
>    >> > there is a bug there that shows for me on Windows but not on
>    >> > Linux:
>    >>
>    >> > "My" Windows is on a terminalserver not with too many GB of memory
>    >> > (but then in a version of Windows that recognizes that it cannot
>    >> > get so much memory):
>    >>
>    >> > ------------------------- Here some transcript (thanks to
>    >> > using Emacs w/ ESS also on Windows) ------------------
>    >>
>    >> > R Under development (unstable) (2020-08-24 r79074) -- "Unsuffered Consequences"
>    >> > Copyright (C) 2020 The R Foundation for Statistical Computing
>    >> > Platform: x86_64-w64-mingw32/x64 (64-bit)
>    >>
>    >> > R ist freie Software und kommt OHNE JEGLICHE GARANTIE.
>    >> > Sie sind eingeladen, es unter bestimmten Bedingungen weiter zu verbreiten.
>    >> > Tippen Sie 'license()' or 'licence()' f?r Details dazu.
>    >>
>    >> > R ist ein Gemeinschaftsprojekt mit vielen Beitragenden.
>    >> > Tippen Sie 'contributors()' f?r mehr Information und 'citation()',
>    >> > um zu erfahren, wie R oder R packages in Publikationen zitiert werden k?nnen.
>    >>
>    >> > Tippen Sie 'demo()' f?r einige Demos, 'help()' f?r on-line Hilfe, oder
>    >> > 'help.start()' f?r eine HTML Browserschnittstelle zur Hilfe.
>    >> > Tippen Sie 'q()', um R zu verlassen.
>    >>
>    >> >> x <- (-2e9:2e9) + 1L
>    >> > Fehler: kann Vektor der Gr??e 14.9 GB nicht allozieren
>    >> >> y <- c(0L, -2e9:2e9)
>    >> > Fehler: kann Vektor der Gr??e 14.9 GB nicht allozieren
>    >> >> Sys.setenv(LANGUAGE="en")
>    >> >> y <- c(0L, -2e9:2e9)
>    >> > Error: cannot allocate vector of size 14.9 Gb
>    >> >> y <- -1e9:4e9
>    >> >> .Internal(inspect(y))
>    >> > @0x00000000195a6808 14 REALSXP g0c0 [REF(65535)]  -1000000000 : -294967296 (compact)
>    >> >> .Machine$integer.max / 1e9
>    >> > [1] 2.147484
>    >> >> y <- -1e6:2.2e9
>    >> >> .Internal(inspect(y))
>    >> > @0x000000000a11a5d8 14 REALSXP g0c0 [REF(65535)]  -1000000 : -2094967296 (compact)
>    >> >> y <- -1e6:2e9
>    >> >> .Internal(inspect(y))
>    >> > @0x000000000a13adf0 13 INTSXP g0c0 [REF(65535)]  -1000000 : 2000000000 (compact)
>    >> >>
>    >> > ------------------------- end of transcript -----------------------------------
>    >>
>    >> > So indeed, no seg.fault, R notices that it can't get 15 GB of
>    >> > memory.
>    >>
>    >> > But the bug is bad news:  We have *silent* integer overflow happening
>    >> > according to what  .Internal(inspect(y)) shows...
>    >>
>    >> > .... less bad new: Probably the bug is only in the 'internal inspect' code
>    >> > where a format specifier is used in C's printf() that does not work
>    >> > correctly on Windows, at least the way it is currently compiled ..
>    >>
>    >>
>    >> > On (64-bit) Linux, I get
>    >>
>    >> >> y <- -1e9:4e9 ; .Internal(inspect(y))
>    >> > @7d86388 14 REALSXP g0c0 [REF(65535)]  -1000000000 : 4000000000 (compact)
>    >>
>    >> >> y <- c(0L, y)
>    >> > Error: cannot allocate vector of size 37.3 Gb
>    >>
>    >> > which seems much better ... until I do find a bug, may again
>    >> > only in the C code underlying .Internal(inspect(.)) :
>    >>
>    >> >> y <- -1e9:2e9 ; .Internal(inspect(y))
>    >> > @7d86ac0 13 INTSXP g0c0 [REF(65535)] Error: long vectors not supported yet: ../../../R/src/main/altclasses.c:139
>    >> >>
>    >>
>    >> Indeed, the purported "integer overflow" (above) does not
>    >> happen.
>    >> It is "only" a  'printf' related bug inside .Internal(inspect(.)) on Windows.
>    >>
>    >> *interestingly*, the above bug I've noticed on (64-bit) Linux
>    >> does *not* show on Windows (64-bit), at least not for that case:
>    >>
>    >> On Windows, things are fine as long as they remain (compacted
>    >> aka 'ALTREP') INTSXP:
>    >>
>    >> > y <- -1e3:2e9 ;.Internal(inspect(y))
>    >> @0x000000000a285648 13 INTSXP g0c0 [REF(65535)]  -1000 : 2000000000 (compact)
>    >> > y <- -1e3:2.1e9 ;.Internal(inspect(y))
>    >> @0x0000000019925930 13 INTSXP g0c0 [REF(65535)]  -1000 : 2100000000 (compact)
>    >>
>    >> and here, y is correct, just the printing from
>    >> .Internal(inspect(y)) is bugous (probably prints the double as an integer):
>
>    > It's a '%ld' that probably needs to be '%lld' for Windows. Will fix
>    > sometime soon.
>
>    > Best,
>    > luke
>
> I had guessed at something like that .. but "interestingly" it
> was quite different:
>
> Our code use   int n = LENGTH(.);
> and  the error message above was triggered there.
>
> I've committed a fix to both R-devel and R-patched (and added a
> regression test),
> but I still wonder why the above error had not triggered on Windows...

It does for me without the fix, so no additional Windows quirk here at
least.

Best,

luke

>
> Martin
>
>    >>
>    >> > y <- -1e3:2.2e9 ; .Internal(inspect(y))
>    >> @0x00000000195c0178 14 REALSXP g0c0 [REF(65535)]  -1000 : -2094967296 (compact)
>    >> > length(y)
>    >> [1] 2200001001
>    >> > tail(y)
>    >> [1] 2.2e+09 2.2e+09 2.2e+09 2.2e+09 2.2e+09 2.2e+09
>    >> > tail(y) - 2.2e9
>    >> [1] -5 -4 -3 -2 -1  0
>    >> >
>    >>
>    >> ______________________________________________
>    >> R-devel at r-project.org mailing list
>    >> https://stat.ethz.ch/mailman/listinfo/r-devel
>    >>
>
>    > --
>    > Luke Tierney
>    > Ralph E. Wareham Professor of Mathematical Sciences
>    > University of Iowa                  Phone:             319-335-3386
>    > Department of Statistics and        Fax:               319-335-3017
>    > Actuarial Science
>    > 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
>    > Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From @p|uque @end|ng |rom gm@||@com  Tue Sep  8 21:34:02 2020
From: @p|uque @end|ng |rom gm@||@com (Sebastian P. Luque)
Date: Tue, 08 Sep 2020 14:34:02 -0500
Subject: [Rd] failing automatic incoming check
Message-ID: <875z8om5at.fsf@otaria.sebmel.org>

Hello,

I got a notification regarding a failure to pass incoming checks
automatically after a CRAN submission.  The details are given here:

https://win-builder.r-project.org/incoming_pretest/diveMove_1.5.0_20200908_191325/

The only visible issue is a NOTE from the macosx build, with the very
terse:

"No Protocol Specified"

My searches suggest this can be ignored, but it would be nice to squash
it.  Any tips welcome.

-- 
Seb


From d@n+r-deve| @end|ng |rom kort@ch@k@|o  Tue Sep  8 22:54:15 2020
From: d@n+r-deve| @end|ng |rom kort@ch@k@|o (Dan Kortschak)
Date: Tue, 08 Sep 2020 20:54:15 +0000
Subject: [Rd] some questions about R internal SEXP types
In-Reply-To: <1ec817ab612c4cf782b15f8150364ad4ff3b306b.camel@kortschak.io>
References: <8f4d92d753e266a0c8a303b9a354a42a071b24bf.camel@kortschak.io>
 <1ec817ab612c4cf782b15f8150364ad4ff3b306b.camel@kortschak.io>
Message-ID: <fe14eac839b15ff817bf2f063e8b76ee0be3806b.camel@kortschak.io>

Thank you everyone who has helped a non-R developer attempt to build a
tool to extend the R ecosystem.

>From what I've read, it looks like I should document the sexp internals
package I provide as a here-be-dragons package, keep the hand-holding
level of the rgo tool using Cgo calls to perform data interchange, and
try to sort out some form of cross language testing to ensure skew
between my understanding of R internals and what actually happens
internally, and as that potentially changes over time.

If anyone has any additional comments that they feel will be helpful in
this thread for me, please make sure that my address is included in the
cc list as I will be unsubscribing.

Again, thanks for the help.

Dan


From jeroenoom@ @end|ng |rom gm@||@com  Tue Sep  8 23:44:09 2020
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Tue, 8 Sep 2020 23:44:09 +0200
Subject: [Rd] [External] Re: Operations with long altrep vectors cause
 segfaults on Windows
In-Reply-To: <6e673fc4-1891-3a9f-2bea-da5e89310099@gmail.com>
References: <CAJmOi+MjsxpO+i9r57xwb5Ex+GcrECGB17GScy-_w+Y0jK6dmQ@mail.gmail.com>
 <24407.17272.770281.413960@stat.math.ethz.ch>
 <24407.18005.968508.796695@stat.math.ethz.ch>
 <CAJmOi+OOVjR5A=tjR+knHqq1Zcd9cJPg_kxsEDGu0enq0U92VA@mail.gmail.com>
 <alpine.DEB.2.21.2009080912190.3141@luke-Latitude-7480>
 <CAJmOi+PD6QF8hFf8MygN=-VWo+aCX9Av1UUeG9fbk8mbG6BD5w@mail.gmail.com>
 <6e673fc4-1891-3a9f-2bea-da5e89310099@gmail.com>
Message-ID: <CABFfbXsZ4H=+rXzukDhUHq0UXSTZ_TCdtbia0W+ouTJ76MzK4A@mail.gmail.com>

On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> On 9/8/20 4:48 PM, Hugh Parsonage wrote:
> > Unfortunately I only get
> >
> > [Thread 21752.0x4aa8 exited with code 3221225477]
> > [Thread 21752.0x4514 exited with code 3221225477]
> > [Thread 21752.0x3f10 exited with code 3221225477]
> > [Inferior 1 (process 21752) exited with code 030000000005]
> >
> > (I'm guessing I would need to build an instrumented version of R, or
> > can R be debugged using gdb with an off-the-shelf installation?)
>
> No, the default build lacks debug symbols. You need a build with debug
> symbols, and if you can reproduce in a build without compiler
> optimizations (-O0), the backtrace may be easier to interpret. Some bugs
> however "disappear" when optimizations are disabled. You can build R
> from source (and there may be debug builds provided by someone else
> (Jeroen?)).

Debug builds for each revision are available from
https://r-devel.github.io . To download the installer you need to
click the github icon in the last column in the table. You need to be
signed in with a (free) Github account in order to download builds
(artifacts) from Github actions. It will show download links for both
the regular installer and installer with debug symbols.

In other news, the https://r-devel.github.io table also shows that the
fix that martin committed is segfaulting on 32-bit.


From jeroenoom@ @end|ng |rom gm@||@com  Tue Sep  8 23:47:39 2020
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Tue, 8 Sep 2020 23:47:39 +0200
Subject: [Rd] [External] Re: Operations with long altrep vectors cause
 segfaults on Windows
In-Reply-To: <CABFfbXsZ4H=+rXzukDhUHq0UXSTZ_TCdtbia0W+ouTJ76MzK4A@mail.gmail.com>
References: <CAJmOi+MjsxpO+i9r57xwb5Ex+GcrECGB17GScy-_w+Y0jK6dmQ@mail.gmail.com>
 <24407.17272.770281.413960@stat.math.ethz.ch>
 <24407.18005.968508.796695@stat.math.ethz.ch>
 <CAJmOi+OOVjR5A=tjR+knHqq1Zcd9cJPg_kxsEDGu0enq0U92VA@mail.gmail.com>
 <alpine.DEB.2.21.2009080912190.3141@luke-Latitude-7480>
 <CAJmOi+PD6QF8hFf8MygN=-VWo+aCX9Av1UUeG9fbk8mbG6BD5w@mail.gmail.com>
 <6e673fc4-1891-3a9f-2bea-da5e89310099@gmail.com>
 <CABFfbXsZ4H=+rXzukDhUHq0UXSTZ_TCdtbia0W+ouTJ76MzK4A@mail.gmail.com>
Message-ID: <CABFfbXs9Tn12anrdtVj4Cd8CReOV+6r40ysm529UrfQoTXKjNw@mail.gmail.com>

On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms <jeroenooms at gmail.com> wrote:
>
> On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >
> > On 9/8/20 4:48 PM, Hugh Parsonage wrote:
> > > Unfortunately I only get
> > >
> > > [Thread 21752.0x4aa8 exited with code 3221225477]
> > > [Thread 21752.0x4514 exited with code 3221225477]
> > > [Thread 21752.0x3f10 exited with code 3221225477]
> > > [Inferior 1 (process 21752) exited with code 030000000005]
> > >
> > > (I'm guessing I would need to build an instrumented version of R, or
> > > can R be debugged using gdb with an off-the-shelf installation?)
> >
> > No, the default build lacks debug symbols. You need a build with debug
> > symbols, and if you can reproduce in a build without compiler
> > optimizations (-O0), the backtrace may be easier to interpret. Some bugs
> > however "disappear" when optimizations are disabled. You can build R
> > from source (and there may be debug builds provided by someone else
> > (Jeroen?)).
>
> Debug builds for each revision are available from
> https://r-devel.github.io . To download the installer you need to
> click the github icon in the last column in the table. You need to be
> signed in with a (free) Github account in order to download builds
> (artifacts) from Github actions. It will show download links for both
> the regular installer and installer with debug symbols.
>
> In other news, the https://r-devel.github.io table also shows that the
> fix that martin committed is segfaulting on 32-bit.

Sorry that was inaccurate, it is not segfaulting at all, but the unit
test is raising an error on 32-bit.


From bbo|ker @end|ng |rom gm@||@com  Wed Sep  9 04:04:44 2020
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Tue, 8 Sep 2020 22:04:44 -0400
Subject: [Rd] more Matrix weirdness
Message-ID: <fbaf45b7-b6d8-e93f-39d9-aa51d6f2c28e@gmail.com>

   Am I being too optimistic in expecting this (mixing and matching 
matrices and Matrices) to work?  If x is a matrix and m is a Matrix, 
replacing a commensurately sized sub-matrix of x with m throws "number 
of items to replace is not a multiple of replacement length" ...

x <- matrix(0,nrow=3,ncol=10, dimnames=list(letters[1:3],LETTERS[1:10]))
rr <- c("a","b","c")
cc <- c("B","C","E")
m <- Matrix(matrix(1:9,3,3))
x[rr,cc] <- m

    cheers
     Ben Bolker


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Wed Sep  9 08:03:47 2020
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Wed, 9 Sep 2020 07:03:47 +0100
Subject: [Rd] more Matrix weirdness
In-Reply-To: <fbaf45b7-b6d8-e93f-39d9-aa51d6f2c28e@gmail.com>
References: <fbaf45b7-b6d8-e93f-39d9-aa51d6f2c28e@gmail.com>
Message-ID: <7037975c-22b6-6eca-d871-743eead534f2@sapo.pt>

Hello,

R 4.0.2 on Ubuntu 20.04, sessionInfo() below.

I can reproduce this, sort of. The error I'm getting is different:


x[rr, cc] <- m
#Error in x[rr, cc] <- m : replacement has length zero

But if I check lengths and dimensions, they are identical().

identical(length(x[rr, cc]), length(m))
#[1] TRUE
identical(dim(x[rr, cc]), dim(m))
#[1] TRUE


What works is


x[rr, cc] <- as.matrix(m)

I ran Ben's code on RStudio 1.3.1073, the following is run with Rscript 
and the error message is the same.


rui at rui:~$ Rscript --vanilla rhelp.R
R version 4.0.2 (2020-06-22)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 20.04.1 LTS

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0

locale:
  [1] LC_CTYPE=pt_PT.UTF-8       LC_NUMERIC=C
  [3] LC_TIME=pt_PT.UTF-8        LC_COLLATE=pt_PT.UTF-8
  [5] LC_MONETARY=pt_PT.UTF-8    LC_MESSAGES=pt_PT.UTF-8
  [7] LC_PAPER=pt_PT.UTF-8       LC_NAME=C
  [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=pt_PT.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

other attached packages:
[1] Matrix_1.2-18

loaded via a namespace (and not attached):
[1] compiler_4.0.2  grid_4.0.2      lattice_0.20-41
Error in x[rr, cc] <- m :
   number of items to replace is not a multiple of replacement length
Execution halted


Hope this helps,

Rui Barradas


?s 03:04 de 09/09/20, Ben Bolker escreveu:
>  ? Am I being too optimistic in expecting this (mixing and matching 
> matrices and Matrices) to work?? If x is a matrix and m is a Matrix, 
> replacing a commensurately sized sub-matrix of x with m throws "number 
> of items to replace is not a multiple of replacement length" ...
> 
> x <- matrix(0,nrow=3,ncol=10, dimnames=list(letters[1:3],LETTERS[1:10]))
> rr <- c("a","b","c")
> cc <- c("B","C","E")
> m <- Matrix(matrix(1:9,3,3))
> x[rr,cc] <- m
> 
>  ?? cheers
>  ??? Ben Bolker
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ||gge@ @end|ng |rom @t@t|@t|k@tu-dortmund@de  Wed Sep  9 08:27:06 2020
From: ||gge@ @end|ng |rom @t@t|@t|k@tu-dortmund@de (Uwe Ligges)
Date: Wed, 9 Sep 2020 08:27:06 +0200
Subject: [Rd] failing automatic incoming check
In-Reply-To: <875z8om5at.fsf@otaria.sebmel.org>
References: <875z8om5at.fsf@otaria.sebmel.org>
Message-ID: <fba137f3-e4c4-316e-47ae-ee11b08bc0c2@statistik.tu-dortmund.de>



On 08.09.2020 21:34, Sebastian P. Luque wrote:
> Hello,
> 
> I got a notification regarding a failure to pass incoming checks
> automatically after a CRAN submission.  The details are given here:
> 
> https://win-builder.r-project.org/incoming_pretest/diveMove_1.5.0_20200908_191325/
> 
> The only visible issue is a NOTE from the macosx build, with the very
> terse:
> 
> "No Protocol Specified"
> 
> My searches suggest this can be ignored, but it would be nice to squash
> it.  Any tips welcome.
> 


For some reason this should hgave undergone manual inpection but got 
auto rejected. Ideally you would reduce the test timing so that the 
overall check time is less than 10 min .

Best,
Uwe Ligges


From hugh@p@r@on@ge @end|ng |rom gm@||@com  Wed Sep  9 08:48:40 2020
From: hugh@p@r@on@ge @end|ng |rom gm@||@com (Hugh Parsonage)
Date: Wed, 9 Sep 2020 16:48:40 +1000
Subject: [Rd] [External] Re: Operations with long altrep vectors cause
 segfaults on Windows
In-Reply-To: <CABFfbXs9Tn12anrdtVj4Cd8CReOV+6r40ysm529UrfQoTXKjNw@mail.gmail.com>
References: <CAJmOi+MjsxpO+i9r57xwb5Ex+GcrECGB17GScy-_w+Y0jK6dmQ@mail.gmail.com>
 <24407.17272.770281.413960@stat.math.ethz.ch>
 <24407.18005.968508.796695@stat.math.ethz.ch>
 <CAJmOi+OOVjR5A=tjR+knHqq1Zcd9cJPg_kxsEDGu0enq0U92VA@mail.gmail.com>
 <alpine.DEB.2.21.2009080912190.3141@luke-Latitude-7480>
 <CAJmOi+PD6QF8hFf8MygN=-VWo+aCX9Av1UUeG9fbk8mbG6BD5w@mail.gmail.com>
 <6e673fc4-1891-3a9f-2bea-da5e89310099@gmail.com>
 <CABFfbXsZ4H=+rXzukDhUHq0UXSTZ_TCdtbia0W+ouTJ76MzK4A@mail.gmail.com>
 <CABFfbXs9Tn12anrdtVj4Cd8CReOV+6r40ysm529UrfQoTXKjNw@mail.gmail.com>
Message-ID: <CAJmOi+PZcdsLRiBca2_r3dj0RmAJcuFT9FCjkMBjJEdFQ98YTQ@mail.gmail.com>

I am unable to set break or use gdb with any success when I use that version.

On linux I would do R -d gdb but this gives "unknown option '-d' "
while gdb R.exe (in the same directory as the debug version) gives the
same output as before.

I'm happy to help but I appreciate this list might not be the best
place to get a tutorial on using gdb on Windows.

On Wed, 9 Sep 2020 at 07:47, Jeroen Ooms <jeroenooms at gmail.com> wrote:
>
> On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms <jeroenooms at gmail.com> wrote:
> >
> > On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> > >
> > > On 9/8/20 4:48 PM, Hugh Parsonage wrote:
> > > > Unfortunately I only get
> > > >
> > > > [Thread 21752.0x4aa8 exited with code 3221225477]
> > > > [Thread 21752.0x4514 exited with code 3221225477]
> > > > [Thread 21752.0x3f10 exited with code 3221225477]
> > > > [Inferior 1 (process 21752) exited with code 030000000005]
> > > >
> > > > (I'm guessing I would need to build an instrumented version of R, or
> > > > can R be debugged using gdb with an off-the-shelf installation?)
> > >
> > > No, the default build lacks debug symbols. You need a build with debug
> > > symbols, and if you can reproduce in a build without compiler
> > > optimizations (-O0), the backtrace may be easier to interpret. Some bugs
> > > however "disappear" when optimizations are disabled. You can build R
> > > from source (and there may be debug builds provided by someone else
> > > (Jeroen?)).
> >
> > Debug builds for each revision are available from
> > https://r-devel.github.io . To download the installer you need to
> > click the github icon in the last column in the table. You need to be
> > signed in with a (free) Github account in order to download builds
> > (artifacts) from Github actions. It will show download links for both
> > the regular installer and installer with debug symbols.
> >
> > In other news, the https://r-devel.github.io table also shows that the
> > fix that martin committed is segfaulting on 32-bit.
>
> Sorry that was inaccurate, it is not segfaulting at all, but the unit
> test is raising an error on 32-bit.


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Sep  9 09:03:05 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 9 Sep 2020 09:03:05 +0200
Subject: [Rd] [External] Re: Operations with long altrep vectors cause
 segfaults on Windows
In-Reply-To: <CAJmOi+PZcdsLRiBca2_r3dj0RmAJcuFT9FCjkMBjJEdFQ98YTQ@mail.gmail.com>
References: <CAJmOi+MjsxpO+i9r57xwb5Ex+GcrECGB17GScy-_w+Y0jK6dmQ@mail.gmail.com>
 <24407.17272.770281.413960@stat.math.ethz.ch>
 <24407.18005.968508.796695@stat.math.ethz.ch>
 <CAJmOi+OOVjR5A=tjR+knHqq1Zcd9cJPg_kxsEDGu0enq0U92VA@mail.gmail.com>
 <alpine.DEB.2.21.2009080912190.3141@luke-Latitude-7480>
 <CAJmOi+PD6QF8hFf8MygN=-VWo+aCX9Av1UUeG9fbk8mbG6BD5w@mail.gmail.com>
 <6e673fc4-1891-3a9f-2bea-da5e89310099@gmail.com>
 <CABFfbXsZ4H=+rXzukDhUHq0UXSTZ_TCdtbia0W+ouTJ76MzK4A@mail.gmail.com>
 <CABFfbXs9Tn12anrdtVj4Cd8CReOV+6r40ysm529UrfQoTXKjNw@mail.gmail.com>
 <CAJmOi+PZcdsLRiBca2_r3dj0RmAJcuFT9FCjkMBjJEdFQ98YTQ@mail.gmail.com>
Message-ID: <3f8e27b4-c6ed-04fe-7878-66d07ddc673f@gmail.com>

On 9/9/20 8:48 AM, Hugh Parsonage wrote:
> I am unable to set break or use gdb with any success when I use that version.
>
> On linux I would do R -d gdb but this gives "unknown option '-d' "
> while gdb R.exe (in the same directory as the debug version) gives the
> same output as before.
>
> I'm happy to help but I appreciate this list might not be the best
> place to get a tutorial on using gdb on Windows.

Essentially, the steps are: build with DEBUG=T (to have debug symbols), 
possibly updating EOPTS in MkRules.local to disable optimizations, then 
run gdb loading RGui, "set solib-search-path", run RGui from gdb. Then 
you can break to debugger from RGui menu, or just run the code that 
segfaults, and you get to gdb and can print the stacktrace, etc. You can 
find some information in rw-FAQ (R for Windows FAQ), but yes, it is 
harder than on Linux. We can take care of this report, but of course in 
the longer term it would help if more people could take their time to 
setup debugging and analyze bugs even on Windows.

Tomas

>
> On Wed, 9 Sep 2020 at 07:47, Jeroen Ooms <jeroenooms at gmail.com> wrote:
>> On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms <jeroenooms at gmail.com> wrote:
>>> On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>> On 9/8/20 4:48 PM, Hugh Parsonage wrote:
>>>>> Unfortunately I only get
>>>>>
>>>>> [Thread 21752.0x4aa8 exited with code 3221225477]
>>>>> [Thread 21752.0x4514 exited with code 3221225477]
>>>>> [Thread 21752.0x3f10 exited with code 3221225477]
>>>>> [Inferior 1 (process 21752) exited with code 030000000005]
>>>>>
>>>>> (I'm guessing I would need to build an instrumented version of R, or
>>>>> can R be debugged using gdb with an off-the-shelf installation?)
>>>> No, the default build lacks debug symbols. You need a build with debug
>>>> symbols, and if you can reproduce in a build without compiler
>>>> optimizations (-O0), the backtrace may be easier to interpret. Some bugs
>>>> however "disappear" when optimizations are disabled. You can build R
>>>> from source (and there may be debug builds provided by someone else
>>>> (Jeroen?)).
>>> Debug builds for each revision are available from
>>> https://r-devel.github.io . To download the installer you need to
>>> click the github icon in the last column in the table. You need to be
>>> signed in with a (free) Github account in order to download builds
>>> (artifacts) from Github actions. It will show download links for both
>>> the regular installer and installer with debug symbols.
>>>
>>> In other news, the https://r-devel.github.io table also shows that the
>>> fix that martin committed is segfaulting on 32-bit.
>> Sorry that was inaccurate, it is not segfaulting at all, but the unit
>> test is raising an error on 32-bit.


From hugh@p@r@on@ge @end|ng |rom gm@||@com  Wed Sep  9 09:30:17 2020
From: hugh@p@r@on@ge @end|ng |rom gm@||@com (Hugh Parsonage)
Date: Wed, 9 Sep 2020 17:30:17 +1000
Subject: [Rd] [External] Re: Operations with long altrep vectors cause
 segfaults on Windows
In-Reply-To: <3f8e27b4-c6ed-04fe-7878-66d07ddc673f@gmail.com>
References: <CAJmOi+MjsxpO+i9r57xwb5Ex+GcrECGB17GScy-_w+Y0jK6dmQ@mail.gmail.com>
 <24407.17272.770281.413960@stat.math.ethz.ch>
 <24407.18005.968508.796695@stat.math.ethz.ch>
 <CAJmOi+OOVjR5A=tjR+knHqq1Zcd9cJPg_kxsEDGu0enq0U92VA@mail.gmail.com>
 <alpine.DEB.2.21.2009080912190.3141@luke-Latitude-7480>
 <CAJmOi+PD6QF8hFf8MygN=-VWo+aCX9Av1UUeG9fbk8mbG6BD5w@mail.gmail.com>
 <6e673fc4-1891-3a9f-2bea-da5e89310099@gmail.com>
 <CABFfbXsZ4H=+rXzukDhUHq0UXSTZ_TCdtbia0W+ouTJ76MzK4A@mail.gmail.com>
 <CABFfbXs9Tn12anrdtVj4Cd8CReOV+6r40ysm529UrfQoTXKjNw@mail.gmail.com>
 <CAJmOi+PZcdsLRiBca2_r3dj0RmAJcuFT9FCjkMBjJEdFQ98YTQ@mail.gmail.com>
 <3f8e27b4-c6ed-04fe-7878-66d07ddc673f@gmail.com>
Message-ID: <CAJmOi+MKW_RbxvVOfPDA58aYPzNz8ViKsVa+30ERsjmsV5Je+A@mail.gmail.com>

Thank you!

I get

Starting program: C:\R\R-devel-20200909\bin\x64\Rgui.exe
[New Thread 19940.0x638c]
[New Thread 19940.0x102c]
[New Thread 19940.0x329c]
[New Thread 19940.0x37dc]
warning: Invalid parameter passed to C runtime function.

Program received signal SIGSEGV, Segmentation fault.
0x000000006c72d206 in compact_intseq_Dataptr (x=0x12783350,
writeable=<optimized out>) at altclasses.c:169
169     altclasses.c: No such file or directory.

On Wed, 9 Sep 2020 at 17:03, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> On 9/9/20 8:48 AM, Hugh Parsonage wrote:
> > I am unable to set break or use gdb with any success when I use that version.
> >
> > On linux I would do R -d gdb but this gives "unknown option '-d' "
> > while gdb R.exe (in the same directory as the debug version) gives the
> > same output as before.
> >
> > I'm happy to help but I appreciate this list might not be the best
> > place to get a tutorial on using gdb on Windows.
>
> Essentially, the steps are: build with DEBUG=T (to have debug symbols),
> possibly updating EOPTS in MkRules.local to disable optimizations, then
> run gdb loading RGui, "set solib-search-path", run RGui from gdb. Then
> you can break to debugger from RGui menu, or just run the code that
> segfaults, and you get to gdb and can print the stacktrace, etc. You can
> find some information in rw-FAQ (R for Windows FAQ), but yes, it is
> harder than on Linux. We can take care of this report, but of course in
> the longer term it would help if more people could take their time to
> setup debugging and analyze bugs even on Windows.
>
> Tomas
>
> >
> > On Wed, 9 Sep 2020 at 07:47, Jeroen Ooms <jeroenooms at gmail.com> wrote:
> >> On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms <jeroenooms at gmail.com> wrote:
> >>> On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>> On 9/8/20 4:48 PM, Hugh Parsonage wrote:
> >>>>> Unfortunately I only get
> >>>>>
> >>>>> [Thread 21752.0x4aa8 exited with code 3221225477]
> >>>>> [Thread 21752.0x4514 exited with code 3221225477]
> >>>>> [Thread 21752.0x3f10 exited with code 3221225477]
> >>>>> [Inferior 1 (process 21752) exited with code 030000000005]
> >>>>>
> >>>>> (I'm guessing I would need to build an instrumented version of R, or
> >>>>> can R be debugged using gdb with an off-the-shelf installation?)
> >>>> No, the default build lacks debug symbols. You need a build with debug
> >>>> symbols, and if you can reproduce in a build without compiler
> >>>> optimizations (-O0), the backtrace may be easier to interpret. Some bugs
> >>>> however "disappear" when optimizations are disabled. You can build R
> >>>> from source (and there may be debug builds provided by someone else
> >>>> (Jeroen?)).
> >>> Debug builds for each revision are available from
> >>> https://r-devel.github.io . To download the installer you need to
> >>> click the github icon in the last column in the table. You need to be
> >>> signed in with a (free) Github account in order to download builds
> >>> (artifacts) from Github actions. It will show download links for both
> >>> the regular installer and installer with debug symbols.
> >>>
> >>> In other news, the https://r-devel.github.io table also shows that the
> >>> fix that martin committed is segfaulting on 32-bit.
> >> Sorry that was inaccurate, it is not segfaulting at all, but the unit
> >> test is raising an error on 32-bit.
>
>


From rkoenker @end|ng |rom ||||no|@@edu  Wed Sep  9 10:00:41 2020
From: rkoenker @end|ng |rom ||||no|@@edu (Koenker, Roger W)
Date: Wed, 9 Sep 2020 08:00:41 +0000
Subject: [Rd] Environmental Messaging
Message-ID: <6C9F497D-5CEA-4A02-B7AB-490AB4022BB6@illinois.edu>

What sort of message is this to send to the younger generation?

> plastic = 1:5
> card = 1:4
> board = 1:4
> plastic/crossprod(card,board)
[1] 0.03333333 0.06666667 0.10000000 0.13333333 0.16666667
Warning message:
In plastic/crossprod(card, board) :
  Recycling array of length 1 in vector-array arithmetic is deprecated.
  Use c() or as.vector() instead.

ok,  I can write c(crossprod()) but it is ugly, and environmentally wasteful.
What?s next?  Warnings for my beloved  outer(card, board) * board

From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Sep  9 10:00:55 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 9 Sep 2020 10:00:55 +0200
Subject: [Rd] [External] Re: Operations with long altrep vectors cause
 segfaults on Windows
In-Reply-To: <CAJmOi+MKW_RbxvVOfPDA58aYPzNz8ViKsVa+30ERsjmsV5Je+A@mail.gmail.com>
References: <CAJmOi+MjsxpO+i9r57xwb5Ex+GcrECGB17GScy-_w+Y0jK6dmQ@mail.gmail.com>
 <24407.17272.770281.413960@stat.math.ethz.ch>
 <24407.18005.968508.796695@stat.math.ethz.ch>
 <CAJmOi+OOVjR5A=tjR+knHqq1Zcd9cJPg_kxsEDGu0enq0U92VA@mail.gmail.com>
 <alpine.DEB.2.21.2009080912190.3141@luke-Latitude-7480>
 <CAJmOi+PD6QF8hFf8MygN=-VWo+aCX9Av1UUeG9fbk8mbG6BD5w@mail.gmail.com>
 <6e673fc4-1891-3a9f-2bea-da5e89310099@gmail.com>
 <CABFfbXsZ4H=+rXzukDhUHq0UXSTZ_TCdtbia0W+ouTJ76MzK4A@mail.gmail.com>
 <CABFfbXs9Tn12anrdtVj4Cd8CReOV+6r40ysm529UrfQoTXKjNw@mail.gmail.com>
 <CAJmOi+PZcdsLRiBca2_r3dj0RmAJcuFT9FCjkMBjJEdFQ98YTQ@mail.gmail.com>
 <3f8e27b4-c6ed-04fe-7878-66d07ddc673f@gmail.com>
 <CAJmOi+MKW_RbxvVOfPDA58aYPzNz8ViKsVa+30ERsjmsV5Je+A@mail.gmail.com>
Message-ID: <8383dabf-9093-41ea-2407-8bd75a1009e2@gmail.com>

On 9/9/20 9:30 AM, Hugh Parsonage wrote:
> Thank you!
>
> I get
>
> Starting program: C:\R\R-devel-20200909\bin\x64\Rgui.exe
> [New Thread 19940.0x638c]
> [New Thread 19940.0x102c]
> [New Thread 19940.0x329c]
> [New Thread 19940.0x37dc]
> warning: Invalid parameter passed to C runtime function.
>
> Program received signal SIGSEGV, Segmentation fault.
> 0x000000006c72d206 in compact_intseq_Dataptr (x=0x12783350,
> writeable=<optimized out>) at altclasses.c:169
> 169     altclasses.c: No such file or directory.

Thanks, would you know which svn version this is?

Tomas

>
> On Wed, 9 Sep 2020 at 17:03, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>> On 9/9/20 8:48 AM, Hugh Parsonage wrote:
>>> I am unable to set break or use gdb with any success when I use that version.
>>>
>>> On linux I would do R -d gdb but this gives "unknown option '-d' "
>>> while gdb R.exe (in the same directory as the debug version) gives the
>>> same output as before.
>>>
>>> I'm happy to help but I appreciate this list might not be the best
>>> place to get a tutorial on using gdb on Windows.
>> Essentially, the steps are: build with DEBUG=T (to have debug symbols),
>> possibly updating EOPTS in MkRules.local to disable optimizations, then
>> run gdb loading RGui, "set solib-search-path", run RGui from gdb. Then
>> you can break to debugger from RGui menu, or just run the code that
>> segfaults, and you get to gdb and can print the stacktrace, etc. You can
>> find some information in rw-FAQ (R for Windows FAQ), but yes, it is
>> harder than on Linux. We can take care of this report, but of course in
>> the longer term it would help if more people could take their time to
>> setup debugging and analyze bugs even on Windows.
>>
>> Tomas
>>
>>> On Wed, 9 Sep 2020 at 07:47, Jeroen Ooms <jeroenooms at gmail.com> wrote:
>>>> On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms <jeroenooms at gmail.com> wrote:
>>>>> On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>> On 9/8/20 4:48 PM, Hugh Parsonage wrote:
>>>>>>> Unfortunately I only get
>>>>>>>
>>>>>>> [Thread 21752.0x4aa8 exited with code 3221225477]
>>>>>>> [Thread 21752.0x4514 exited with code 3221225477]
>>>>>>> [Thread 21752.0x3f10 exited with code 3221225477]
>>>>>>> [Inferior 1 (process 21752) exited with code 030000000005]
>>>>>>>
>>>>>>> (I'm guessing I would need to build an instrumented version of R, or
>>>>>>> can R be debugged using gdb with an off-the-shelf installation?)
>>>>>> No, the default build lacks debug symbols. You need a build with debug
>>>>>> symbols, and if you can reproduce in a build without compiler
>>>>>> optimizations (-O0), the backtrace may be easier to interpret. Some bugs
>>>>>> however "disappear" when optimizations are disabled. You can build R
>>>>>> from source (and there may be debug builds provided by someone else
>>>>>> (Jeroen?)).
>>>>> Debug builds for each revision are available from
>>>>> https://r-devel.github.io . To download the installer you need to
>>>>> click the github icon in the last column in the table. You need to be
>>>>> signed in with a (free) Github account in order to download builds
>>>>> (artifacts) from Github actions. It will show download links for both
>>>>> the regular installer and installer with debug symbols.
>>>>>
>>>>> In other news, the https://r-devel.github.io table also shows that the
>>>>> fix that martin committed is segfaulting on 32-bit.
>>>> Sorry that was inaccurate, it is not segfaulting at all, but the unit
>>>> test is raising an error on 32-bit.
>>


From hugh@p@r@on@ge @end|ng |rom gm@||@com  Wed Sep  9 10:32:58 2020
From: hugh@p@r@on@ge @end|ng |rom gm@||@com (Hugh Parsonage)
Date: Wed, 9 Sep 2020 18:32:58 +1000
Subject: [Rd] [External] Re: Operations with long altrep vectors cause
 segfaults on Windows
In-Reply-To: <8383dabf-9093-41ea-2407-8bd75a1009e2@gmail.com>
References: <CAJmOi+MjsxpO+i9r57xwb5Ex+GcrECGB17GScy-_w+Y0jK6dmQ@mail.gmail.com>
 <24407.17272.770281.413960@stat.math.ethz.ch>
 <24407.18005.968508.796695@stat.math.ethz.ch>
 <CAJmOi+OOVjR5A=tjR+knHqq1Zcd9cJPg_kxsEDGu0enq0U92VA@mail.gmail.com>
 <alpine.DEB.2.21.2009080912190.3141@luke-Latitude-7480>
 <CAJmOi+PD6QF8hFf8MygN=-VWo+aCX9Av1UUeG9fbk8mbG6BD5w@mail.gmail.com>
 <6e673fc4-1891-3a9f-2bea-da5e89310099@gmail.com>
 <CABFfbXsZ4H=+rXzukDhUHq0UXSTZ_TCdtbia0W+ouTJ76MzK4A@mail.gmail.com>
 <CABFfbXs9Tn12anrdtVj4Cd8CReOV+6r40ysm529UrfQoTXKjNw@mail.gmail.com>
 <CAJmOi+PZcdsLRiBca2_r3dj0RmAJcuFT9FCjkMBjJEdFQ98YTQ@mail.gmail.com>
 <3f8e27b4-c6ed-04fe-7878-66d07ddc673f@gmail.com>
 <CAJmOi+MKW_RbxvVOfPDA58aYPzNz8ViKsVa+30ERsjmsV5Je+A@mail.gmail.com>
 <8383dabf-9093-41ea-2407-8bd75a1009e2@gmail.com>
Message-ID: <CAJmOi+MLyn_WcBLFSQdL9ze4iDzazysPcU7QGOQtWryTod44Yg@mail.gmail.com>

R Under development (unstable) (2020-09-08 r79165)

On Wed, 9 Sep 2020 at 18:00, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> On 9/9/20 9:30 AM, Hugh Parsonage wrote:
> > Thank you!
> >
> > I get
> >
> > Starting program: C:\R\R-devel-20200909\bin\x64\Rgui.exe
> > [New Thread 19940.0x638c]
> > [New Thread 19940.0x102c]
> > [New Thread 19940.0x329c]
> > [New Thread 19940.0x37dc]
> > warning: Invalid parameter passed to C runtime function.
> >
> > Program received signal SIGSEGV, Segmentation fault.
> > 0x000000006c72d206 in compact_intseq_Dataptr (x=0x12783350,
> > writeable=<optimized out>) at altclasses.c:169
> > 169     altclasses.c: No such file or directory.
>
> Thanks, would you know which svn version this is?
>
> Tomas
>
> >
> > On Wed, 9 Sep 2020 at 17:03, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >> On 9/9/20 8:48 AM, Hugh Parsonage wrote:
> >>> I am unable to set break or use gdb with any success when I use that version.
> >>>
> >>> On linux I would do R -d gdb but this gives "unknown option '-d' "
> >>> while gdb R.exe (in the same directory as the debug version) gives the
> >>> same output as before.
> >>>
> >>> I'm happy to help but I appreciate this list might not be the best
> >>> place to get a tutorial on using gdb on Windows.
> >> Essentially, the steps are: build with DEBUG=T (to have debug symbols),
> >> possibly updating EOPTS in MkRules.local to disable optimizations, then
> >> run gdb loading RGui, "set solib-search-path", run RGui from gdb. Then
> >> you can break to debugger from RGui menu, or just run the code that
> >> segfaults, and you get to gdb and can print the stacktrace, etc. You can
> >> find some information in rw-FAQ (R for Windows FAQ), but yes, it is
> >> harder than on Linux. We can take care of this report, but of course in
> >> the longer term it would help if more people could take their time to
> >> setup debugging and analyze bugs even on Windows.
> >>
> >> Tomas
> >>
> >>> On Wed, 9 Sep 2020 at 07:47, Jeroen Ooms <jeroenooms at gmail.com> wrote:
> >>>> On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms <jeroenooms at gmail.com> wrote:
> >>>>> On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>>> On 9/8/20 4:48 PM, Hugh Parsonage wrote:
> >>>>>>> Unfortunately I only get
> >>>>>>>
> >>>>>>> [Thread 21752.0x4aa8 exited with code 3221225477]
> >>>>>>> [Thread 21752.0x4514 exited with code 3221225477]
> >>>>>>> [Thread 21752.0x3f10 exited with code 3221225477]
> >>>>>>> [Inferior 1 (process 21752) exited with code 030000000005]
> >>>>>>>
> >>>>>>> (I'm guessing I would need to build an instrumented version of R, or
> >>>>>>> can R be debugged using gdb with an off-the-shelf installation?)
> >>>>>> No, the default build lacks debug symbols. You need a build with debug
> >>>>>> symbols, and if you can reproduce in a build without compiler
> >>>>>> optimizations (-O0), the backtrace may be easier to interpret. Some bugs
> >>>>>> however "disappear" when optimizations are disabled. You can build R
> >>>>>> from source (and there may be debug builds provided by someone else
> >>>>>> (Jeroen?)).
> >>>>> Debug builds for each revision are available from
> >>>>> https://r-devel.github.io . To download the installer you need to
> >>>>> click the github icon in the last column in the table. You need to be
> >>>>> signed in with a (free) Github account in order to download builds
> >>>>> (artifacts) from Github actions. It will show download links for both
> >>>>> the regular installer and installer with debug symbols.
> >>>>>
> >>>>> In other news, the https://r-devel.github.io table also shows that the
> >>>>> fix that martin committed is segfaulting on 32-bit.
> >>>> Sorry that was inaccurate, it is not segfaulting at all, but the unit
> >>>> test is raising an error on 32-bit.
> >>
>


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Sep  9 10:53:18 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 9 Sep 2020 10:53:18 +0200
Subject: [Rd] [External] Re: Operations with long altrep vectors cause
 segfaults on Windows
In-Reply-To: <CAJmOi+MLyn_WcBLFSQdL9ze4iDzazysPcU7QGOQtWryTod44Yg@mail.gmail.com>
References: <CAJmOi+MjsxpO+i9r57xwb5Ex+GcrECGB17GScy-_w+Y0jK6dmQ@mail.gmail.com>
 <24407.17272.770281.413960@stat.math.ethz.ch>
 <24407.18005.968508.796695@stat.math.ethz.ch>
 <CAJmOi+OOVjR5A=tjR+knHqq1Zcd9cJPg_kxsEDGu0enq0U92VA@mail.gmail.com>
 <alpine.DEB.2.21.2009080912190.3141@luke-Latitude-7480>
 <CAJmOi+PD6QF8hFf8MygN=-VWo+aCX9Av1UUeG9fbk8mbG6BD5w@mail.gmail.com>
 <6e673fc4-1891-3a9f-2bea-da5e89310099@gmail.com>
 <CABFfbXsZ4H=+rXzukDhUHq0UXSTZ_TCdtbia0W+ouTJ76MzK4A@mail.gmail.com>
 <CABFfbXs9Tn12anrdtVj4Cd8CReOV+6r40ysm529UrfQoTXKjNw@mail.gmail.com>
 <CAJmOi+PZcdsLRiBca2_r3dj0RmAJcuFT9FCjkMBjJEdFQ98YTQ@mail.gmail.com>
 <3f8e27b4-c6ed-04fe-7878-66d07ddc673f@gmail.com>
 <CAJmOi+MKW_RbxvVOfPDA58aYPzNz8ViKsVa+30ERsjmsV5Je+A@mail.gmail.com>
 <8383dabf-9093-41ea-2407-8bd75a1009e2@gmail.com>
 <CAJmOi+MLyn_WcBLFSQdL9ze4iDzazysPcU7QGOQtWryTod44Yg@mail.gmail.com>
Message-ID: <6b01fb27-ec83-4dea-6478-c344f285083b@gmail.com>

Thanks. Should be now fixed in 79169.
Tomas

On 9/9/20 10:32 AM, Hugh Parsonage wrote:
> R Under development (unstable) (2020-09-08 r79165)
>
> On Wed, 9 Sep 2020 at 18:00, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>> On 9/9/20 9:30 AM, Hugh Parsonage wrote:
>>> Thank you!
>>>
>>> I get
>>>
>>> Starting program: C:\R\R-devel-20200909\bin\x64\Rgui.exe
>>> [New Thread 19940.0x638c]
>>> [New Thread 19940.0x102c]
>>> [New Thread 19940.0x329c]
>>> [New Thread 19940.0x37dc]
>>> warning: Invalid parameter passed to C runtime function.
>>>
>>> Program received signal SIGSEGV, Segmentation fault.
>>> 0x000000006c72d206 in compact_intseq_Dataptr (x=0x12783350,
>>> writeable=<optimized out>) at altclasses.c:169
>>> 169     altclasses.c: No such file or directory.
>> Thanks, would you know which svn version this is?
>>
>> Tomas
>>
>>> On Wed, 9 Sep 2020 at 17:03, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>> On 9/9/20 8:48 AM, Hugh Parsonage wrote:
>>>>> I am unable to set break or use gdb with any success when I use that version.
>>>>>
>>>>> On linux I would do R -d gdb but this gives "unknown option '-d' "
>>>>> while gdb R.exe (in the same directory as the debug version) gives the
>>>>> same output as before.
>>>>>
>>>>> I'm happy to help but I appreciate this list might not be the best
>>>>> place to get a tutorial on using gdb on Windows.
>>>> Essentially, the steps are: build with DEBUG=T (to have debug symbols),
>>>> possibly updating EOPTS in MkRules.local to disable optimizations, then
>>>> run gdb loading RGui, "set solib-search-path", run RGui from gdb. Then
>>>> you can break to debugger from RGui menu, or just run the code that
>>>> segfaults, and you get to gdb and can print the stacktrace, etc. You can
>>>> find some information in rw-FAQ (R for Windows FAQ), but yes, it is
>>>> harder than on Linux. We can take care of this report, but of course in
>>>> the longer term it would help if more people could take their time to
>>>> setup debugging and analyze bugs even on Windows.
>>>>
>>>> Tomas
>>>>
>>>>> On Wed, 9 Sep 2020 at 07:47, Jeroen Ooms <jeroenooms at gmail.com> wrote:
>>>>>> On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms <jeroenooms at gmail.com> wrote:
>>>>>>> On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>>>> On 9/8/20 4:48 PM, Hugh Parsonage wrote:
>>>>>>>>> Unfortunately I only get
>>>>>>>>>
>>>>>>>>> [Thread 21752.0x4aa8 exited with code 3221225477]
>>>>>>>>> [Thread 21752.0x4514 exited with code 3221225477]
>>>>>>>>> [Thread 21752.0x3f10 exited with code 3221225477]
>>>>>>>>> [Inferior 1 (process 21752) exited with code 030000000005]
>>>>>>>>>
>>>>>>>>> (I'm guessing I would need to build an instrumented version of R, or
>>>>>>>>> can R be debugged using gdb with an off-the-shelf installation?)
>>>>>>>> No, the default build lacks debug symbols. You need a build with debug
>>>>>>>> symbols, and if you can reproduce in a build without compiler
>>>>>>>> optimizations (-O0), the backtrace may be easier to interpret. Some bugs
>>>>>>>> however "disappear" when optimizations are disabled. You can build R
>>>>>>>> from source (and there may be debug builds provided by someone else
>>>>>>>> (Jeroen?)).
>>>>>>> Debug builds for each revision are available from
>>>>>>> https://r-devel.github.io . To download the installer you need to
>>>>>>> click the github icon in the last column in the table. You need to be
>>>>>>> signed in with a (free) Github account in order to download builds
>>>>>>> (artifacts) from Github actions. It will show download links for both
>>>>>>> the regular installer and installer with debug symbols.
>>>>>>>
>>>>>>> In other news, the https://r-devel.github.io table also shows that the
>>>>>>> fix that martin committed is segfaulting on 32-bit.
>>>>>> Sorry that was inaccurate, it is not segfaulting at all, but the unit
>>>>>> test is raising an error on 32-bit.


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Sep  9 11:06:12 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 9 Sep 2020 11:06:12 +0200
Subject: [Rd] [External] Re: Operations with long altrep vectors cause
 segfaults on Windows
In-Reply-To: <CABFfbXs9Tn12anrdtVj4Cd8CReOV+6r40ysm529UrfQoTXKjNw@mail.gmail.com>
References: <CAJmOi+MjsxpO+i9r57xwb5Ex+GcrECGB17GScy-_w+Y0jK6dmQ@mail.gmail.com>
 <24407.17272.770281.413960@stat.math.ethz.ch>
 <24407.18005.968508.796695@stat.math.ethz.ch>
 <CAJmOi+OOVjR5A=tjR+knHqq1Zcd9cJPg_kxsEDGu0enq0U92VA@mail.gmail.com>
 <alpine.DEB.2.21.2009080912190.3141@luke-Latitude-7480>
 <CAJmOi+PD6QF8hFf8MygN=-VWo+aCX9Av1UUeG9fbk8mbG6BD5w@mail.gmail.com>
 <6e673fc4-1891-3a9f-2bea-da5e89310099@gmail.com>
 <CABFfbXsZ4H=+rXzukDhUHq0UXSTZ_TCdtbia0W+ouTJ76MzK4A@mail.gmail.com>
 <CABFfbXs9Tn12anrdtVj4Cd8CReOV+6r40ysm529UrfQoTXKjNw@mail.gmail.com>
Message-ID: <5fd517e2-ad46-c343-2a63-cda01ff58acc@gmail.com>

On 9/8/20 11:47 PM, Jeroen Ooms wrote:
> On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms <jeroenooms at gmail.com> wrote:
>> On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>> On 9/8/20 4:48 PM, Hugh Parsonage wrote:
>>>> Unfortunately I only get
>>>>
>>>> [Thread 21752.0x4aa8 exited with code 3221225477]
>>>> [Thread 21752.0x4514 exited with code 3221225477]
>>>> [Thread 21752.0x3f10 exited with code 3221225477]
>>>> [Inferior 1 (process 21752) exited with code 030000000005]
>>>>
>>>> (I'm guessing I would need to build an instrumented version of R, or
>>>> can R be debugged using gdb with an off-the-shelf installation?)
>>> No, the default build lacks debug symbols. You need a build with debug
>>> symbols, and if you can reproduce in a build without compiler
>>> optimizations (-O0), the backtrace may be easier to interpret. Some bugs
>>> however "disappear" when optimizations are disabled. You can build R
>>> from source (and there may be debug builds provided by someone else
>>> (Jeroen?)).
>> Debug builds for each revision are available from
>> https://r-devel.github.io . To download the installer you need to
>> click the github icon in the last column in the table. You need to be
>> signed in with a (free) Github account in order to download builds
>> (artifacts) from Github actions. It will show download links for both
>> the regular installer and installer with debug symbols.
>>
>> In other news, the https://r-devel.github.io table also shows that the
>> fix that martin committed is segfaulting on 32-bit.
> Sorry that was inaccurate, it is not segfaulting at all, but the unit
> test is raising an error on 32-bit.

Now fixed, the test needs to be run only on 64-bit builds where such 
long vectors/sequences are allowed.

Tomas


From georg|@bo@hn@kov @end|ng |rom m@nche@ter@@c@uk  Wed Sep  9 12:48:56 2020
From: georg|@bo@hn@kov @end|ng |rom m@nche@ter@@c@uk (Georgi Boshnakov)
Date: Wed, 9 Sep 2020 10:48:56 +0000
Subject: [Rd] more Matrix weirdness
Message-ID: <AM0PR0102MB3443F1F91F70197C52FE71ADAE260@AM0PR0102MB3443.eurprd01.prod.exchangelabs.com>

I think that this is because `[<-` dispatches on S4 methods only if the first argument is S4.  
?"[<-" says:

"These operators are also implicit S4 generics, but as primitives,
     S4 methods will be dispatched only on S4 objects ?x?."

Georgi Boshnakov

-----Original Message-----


Message: 19
Date: Tue, 8 Sep 2020 22:04:44 -0400
From: Ben Bolker <bbolker at gmail.com>
To: r-devel <r-devel at r-project.org>
Subject: [Rd] more Matrix weirdness
Message-ID: <fbaf45b7-b6d8-e93f-39d9-aa51d6f2c28e at gmail.com>
Content-Type: text/plain; charset="utf-8"; Format="flowed"

   Am I being too optimistic in expecting this (mixing and matching 
matrices and Matrices) to work?  If x is a matrix and m is a Matrix, 
replacing a commensurately sized sub-matrix of x with m throws "number 
of items to replace is not a multiple of replacement length" ...

x <- matrix(0,nrow=3,ncol=10, dimnames=list(letters[1:3],LETTERS[1:10]))
rr <- c("a","b","c")
cc <- c("B","C","E")
m <- Matrix(matrix(1:9,3,3))
x[rr,cc] <- m

    cheers
     Ben Bolker




------------------------------

Message: 20
Date: Wed, 9 Sep 2020 07:03:47 +0100
From: Rui Barradas <ruipbarradas at sapo.pt>
To: Ben Bolker <bbolker at gmail.com>, r-devel <r-devel at r-project.org>
Subject: Re: [Rd] more Matrix weirdness
Message-ID: <7037975c-22b6-6eca-d871-743eead534f2 at sapo.pt>
Content-Type: text/plain; charset="utf-8"; Format="flowed"

Hello,

R 4.0.2 on Ubuntu 20.04, sessionInfo() below.

I can reproduce this, sort of. The error I'm getting is different:


x[rr, cc] <- m
#Error in x[rr, cc] <- m : replacement has length zero

But if I check lengths and dimensions, they are identical().

identical(length(x[rr, cc]), length(m))
#[1] TRUE
identical(dim(x[rr, cc]), dim(m))
#[1] TRUE


What works is


x[rr, cc] <- as.matrix(m)

I ran Ben's code on RStudio 1.3.1073, the following is run with Rscript 
and the error message is the same.


rui at rui:~$ Rscript --vanilla rhelp.R
R version 4.0.2 (2020-06-22)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 20.04.1 LTS

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0

locale:
  [1] LC_CTYPE=pt_PT.UTF-8       LC_NUMERIC=C
  [3] LC_TIME=pt_PT.UTF-8        LC_COLLATE=pt_PT.UTF-8
  [5] LC_MONETARY=pt_PT.UTF-8    LC_MESSAGES=pt_PT.UTF-8
  [7] LC_PAPER=pt_PT.UTF-8       LC_NAME=C
  [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=pt_PT.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

other attached packages:
[1] Matrix_1.2-18

loaded via a namespace (and not attached):
[1] compiler_4.0.2  grid_4.0.2      lattice_0.20-41
Error in x[rr, cc] <- m :
   number of items to replace is not a multiple of replacement length
Execution halted


Hope this helps,

Rui Barradas


?s 03:04 de 09/09/20, Ben Bolker escreveu:
>  ? Am I being too optimistic in expecting this (mixing and matching 
> matrices and Matrices) to work?? If x is a matrix and m is a Matrix, 
> replacing a commensurately sized sub-matrix of x with m throws "number 
> of items to replace is not a multiple of replacement length" ...
> 
> x <- matrix(0,nrow=3,ncol=10, dimnames=list(letters[1:3],LETTERS[1:10]))
> rr <- c("a","b","c")
> cc <- c("B","C","E")
> m <- Matrix(matrix(1:9,3,3))
> x[rr,cc] <- m
> 
>  ?? cheers
>  ??? Ben Bolker
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel




------------------------------

Message: 21
Date: Wed, 9 Sep 2020 08:27:06 +0200
From: Uwe Ligges <ligges at statistik.tu-dortmund.de>
To: r-devel at r-project.org
Subject: Re: [Rd] failing automatic incoming check
Message-ID:
	<fba137f3-e4c4-316e-47ae-ee11b08bc0c2 at statistik.tu-dortmund.de>
Content-Type: text/plain; charset="utf-8"; Format="flowed"



On 08.09.2020 21:34, Sebastian P. Luque wrote:
> Hello,
> 
> I got a notification regarding a failure to pass incoming checks
> automatically after a CRAN submission.  The details are given here:
> 
> https://win-builder.r-project.org/incoming_pretest/diveMove_1.5.0_20200908_191325/
> 
> The only visible issue is a NOTE from the macosx build, with the very
> terse:
> 
> "No Protocol Specified"
> 
> My searches suggest this can be ignored, but it would be nice to squash
> it.  Any tips welcome.
> 


For some reason this should hgave undergone manual inpection but got 
auto rejected. Ideally you would reduce the test timing so that the 
overall check time is less than 10 min .

Best,
Uwe Ligges




------------------------------

Message: 22
Date: Wed, 9 Sep 2020 16:48:40 +1000
From: Hugh Parsonage <hugh.parsonage at gmail.com>
To: Jeroen Ooms <jeroenooms at gmail.com>
Cc: Tomas Kalibera <tomas.kalibera at gmail.com>, Luke Tierney
	<luke-tierney at uiowa.edu>,  R-devel <r-devel at r-project.org>, Martin
	Maechler <maechler at stat.math.ethz.ch>
Subject: Re: [Rd] [External] Re: Operations with long altrep vectors
	cause segfaults on Windows
Message-ID:
	<CAJmOi+PZcdsLRiBca2_r3dj0RmAJcuFT9FCjkMBjJEdFQ98YTQ at mail.gmail.com>
Content-Type: text/plain; charset="utf-8"

I am unable to set break or use gdb with any success when I use that version.

On linux I would do R -d gdb but this gives "unknown option '-d' "
while gdb R.exe (in the same directory as the debug version) gives the
same output as before.

I'm happy to help but I appreciate this list might not be the best
place to get a tutorial on using gdb on Windows.

On Wed, 9 Sep 2020 at 07:47, Jeroen Ooms <jeroenooms at gmail.com> wrote:
>
> On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms <jeroenooms at gmail.com> wrote:
> >
> > On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> > >
> > > On 9/8/20 4:48 PM, Hugh Parsonage wrote:
> > > > Unfortunately I only get
> > > >
> > > > [Thread 21752.0x4aa8 exited with code 3221225477]
> > > > [Thread 21752.0x4514 exited with code 3221225477]
> > > > [Thread 21752.0x3f10 exited with code 3221225477]
> > > > [Inferior 1 (process 21752) exited with code 030000000005]
> > > >
> > > > (I'm guessing I would need to build an instrumented version of R, or
> > > > can R be debugged using gdb with an off-the-shelf installation?)
> > >
> > > No, the default build lacks debug symbols. You need a build with debug
> > > symbols, and if you can reproduce in a build without compiler
> > > optimizations (-O0), the backtrace may be easier to interpret. Some bugs
> > > however "disappear" when optimizations are disabled. You can build R
> > > from source (and there may be debug builds provided by someone else
> > > (Jeroen?)).
> >
> > Debug builds for each revision are available from
> > https://r-devel.github.io . To download the installer you need to
> > click the github icon in the last column in the table. You need to be
> > signed in with a (free) Github account in order to download builds
> > (artifacts) from Github actions. It will show download links for both
> > the regular installer and installer with debug symbols.
> >
> > In other news, the https://r-devel.github.io table also shows that the
> > fix that martin committed is segfaulting on 32-bit.
>
> Sorry that was inaccurate, it is not segfaulting at all, but the unit
> test is raising an error on 32-bit.




------------------------------

Message: 23
Date: Wed, 9 Sep 2020 09:03:05 +0200
From: Tomas Kalibera <tomas.kalibera at gmail.com>
To: Hugh Parsonage <hugh.parsonage at gmail.com>, Jeroen Ooms
	<jeroenooms at gmail.com>
Cc: Luke Tierney <luke-tierney at uiowa.edu>, R-devel
	<r-devel at r-project.org>, Martin Maechler <maechler at stat.math.ethz.ch>
Subject: Re: [Rd] [External] Re: Operations with long altrep vectors
	cause segfaults on Windows
Message-ID: <3f8e27b4-c6ed-04fe-7878-66d07ddc673f at gmail.com>
Content-Type: text/plain; charset="utf-8"; Format="flowed"

On 9/9/20 8:48 AM, Hugh Parsonage wrote:
> I am unable to set break or use gdb with any success when I use that version.
>
> On linux I would do R -d gdb but this gives "unknown option '-d' "
> while gdb R.exe (in the same directory as the debug version) gives the
> same output as before.
>
> I'm happy to help but I appreciate this list might not be the best
> place to get a tutorial on using gdb on Windows.

Essentially, the steps are: build with DEBUG=T (to have debug symbols), 
possibly updating EOPTS in MkRules.local to disable optimizations, then 
run gdb loading RGui, "set solib-search-path", run RGui from gdb. Then 
you can break to debugger from RGui menu, or just run the code that 
segfaults, and you get to gdb and can print the stacktrace, etc. You can 
find some information in rw-FAQ (R for Windows FAQ), but yes, it is 
harder than on Linux. We can take care of this report, but of course in 
the longer term it would help if more people could take their time to 
setup debugging and analyze bugs even on Windows.

Tomas

>
> On Wed, 9 Sep 2020 at 07:47, Jeroen Ooms <jeroenooms at gmail.com> wrote:
>> On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms <jeroenooms at gmail.com> wrote:
>>> On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>> On 9/8/20 4:48 PM, Hugh Parsonage wrote:
>>>>> Unfortunately I only get
>>>>>
>>>>> [Thread 21752.0x4aa8 exited with code 3221225477]
>>>>> [Thread 21752.0x4514 exited with code 3221225477]
>>>>> [Thread 21752.0x3f10 exited with code 3221225477]
>>>>> [Inferior 1 (process 21752) exited with code 030000000005]
>>>>>
>>>>> (I'm guessing I would need to build an instrumented version of R, or
>>>>> can R be debugged using gdb with an off-the-shelf installation?)
>>>> No, the default build lacks debug symbols. You need a build with debug
>>>> symbols, and if you can reproduce in a build without compiler
>>>> optimizations (-O0), the backtrace may be easier to interpret. Some bugs
>>>> however "disappear" when optimizations are disabled. You can build R
>>>> from source (and there may be debug builds provided by someone else
>>>> (Jeroen?)).
>>> Debug builds for each revision are available from
>>> https://r-devel.github.io . To download the installer you need to
>>> click the github icon in the last column in the table. You need to be
>>> signed in with a (free) Github account in order to download builds
>>> (artifacts) from Github actions. It will show download links for both
>>> the regular installer and installer with debug symbols.
>>>
>>> In other news, the https://r-devel.github.io table also shows that the
>>> fix that martin committed is segfaulting on 32-bit.
>> Sorry that was inaccurate, it is not segfaulting at all, but the unit
>> test is raising an error on 32-bit.




------------------------------

Message: 24
Date: Wed, 9 Sep 2020 17:30:17 +1000
From: Hugh Parsonage <hugh.parsonage at gmail.com>
To: Tomas Kalibera <tomas.kalibera at gmail.com>
Cc: Jeroen Ooms <jeroenooms at gmail.com>, Luke Tierney
	<luke-tierney at uiowa.edu>,  R-devel <r-devel at r-project.org>, Martin
	Maechler <maechler at stat.math.ethz.ch>
Subject: Re: [Rd] [External] Re: Operations with long altrep vectors
	cause segfaults on Windows
Message-ID:
	<CAJmOi+MKW_RbxvVOfPDA58aYPzNz8ViKsVa+30ERsjmsV5Je+A at mail.gmail.com>
Content-Type: text/plain; charset="utf-8"

Thank you!

I get

Starting program: C:\R\R-devel-20200909\bin\x64\Rgui.exe
[New Thread 19940.0x638c]
[New Thread 19940.0x102c]
[New Thread 19940.0x329c]
[New Thread 19940.0x37dc]
warning: Invalid parameter passed to C runtime function.

Program received signal SIGSEGV, Segmentation fault.
0x000000006c72d206 in compact_intseq_Dataptr (x=0x12783350,
writeable=<optimized out>) at altclasses.c:169
169     altclasses.c: No such file or directory.

On Wed, 9 Sep 2020 at 17:03, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> On 9/9/20 8:48 AM, Hugh Parsonage wrote:
> > I am unable to set break or use gdb with any success when I use that version.
> >
> > On linux I would do R -d gdb but this gives "unknown option '-d' "
> > while gdb R.exe (in the same directory as the debug version) gives the
> > same output as before.
> >
> > I'm happy to help but I appreciate this list might not be the best
> > place to get a tutorial on using gdb on Windows.
>
> Essentially, the steps are: build with DEBUG=T (to have debug symbols),
> possibly updating EOPTS in MkRules.local to disable optimizations, then
> run gdb loading RGui, "set solib-search-path", run RGui from gdb. Then
> you can break to debugger from RGui menu, or just run the code that
> segfaults, and you get to gdb and can print the stacktrace, etc. You can
> find some information in rw-FAQ (R for Windows FAQ), but yes, it is
> harder than on Linux. We can take care of this report, but of course in
> the longer term it would help if more people could take their time to
> setup debugging and analyze bugs even on Windows.
>
> Tomas
>
> >
> > On Wed, 9 Sep 2020 at 07:47, Jeroen Ooms <jeroenooms at gmail.com> wrote:
> >> On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms <jeroenooms at gmail.com> wrote:
> >>> On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>> On 9/8/20 4:48 PM, Hugh Parsonage wrote:
> >>>>> Unfortunately I only get
> >>>>>
> >>>>> [Thread 21752.0x4aa8 exited with code 3221225477]
> >>>>> [Thread 21752.0x4514 exited with code 3221225477]
> >>>>> [Thread 21752.0x3f10 exited with code 3221225477]
> >>>>> [Inferior 1 (process 21752) exited with code 030000000005]
> >>>>>
> >>>>> (I'm guessing I would need to build an instrumented version of R, or
> >>>>> can R be debugged using gdb with an off-the-shelf installation?)
> >>>> No, the default build lacks debug symbols. You need a build with debug
> >>>> symbols, and if you can reproduce in a build without compiler
> >>>> optimizations (-O0), the backtrace may be easier to interpret. Some bugs
> >>>> however "disappear" when optimizations are disabled. You can build R
> >>>> from source (and there may be debug builds provided by someone else
> >>>> (Jeroen?)).
> >>> Debug builds for each revision are available from
> >>> https://r-devel.github.io . To download the installer you need to
> >>> click the github icon in the last column in the table. You need to be
> >>> signed in with a (free) Github account in order to download builds
> >>> (artifacts) from Github actions. It will show download links for both
> >>> the regular installer and installer with debug symbols.
> >>>
> >>> In other news, the https://r-devel.github.io table also shows that the
> >>> fix that martin committed is segfaulting on 32-bit.
> >> Sorry that was inaccurate, it is not segfaulting at all, but the unit
> >> test is raising an error on 32-bit.
>
>




------------------------------

Message: 25
Date: Wed, 9 Sep 2020 08:00:41 +0000
From: "Koenker, Roger W" <rkoenker at illinois.edu>
To: r-devel <r-devel at r-project.org>
Subject: [Rd] Environmental Messaging
Message-ID: <6C9F497D-5CEA-4A02-B7AB-490AB4022BB6 at illinois.edu>
Content-Type: text/plain; charset="utf-8"

What sort of message is this to send to the younger generation?

> plastic = 1:5
> card = 1:4
> board = 1:4
> plastic/crossprod(card,board)
[1] 0.03333333 0.06666667 0.10000000 0.13333333 0.16666667
Warning message:
In plastic/crossprod(card, board) :
  Recycling array of length 1 in vector-array arithmetic is deprecated.
  Use c() or as.vector() instead.

ok,  I can write c(crossprod()) but it is ugly, and environmentally wasteful.
What?s next?  Warnings for my beloved  outer(card, board) * board

------------------------------

Message: 26
Date: Wed, 9 Sep 2020 10:00:55 +0200
From: Tomas Kalibera <tomas.kalibera at gmail.com>
To: Hugh Parsonage <hugh.parsonage at gmail.com>
Cc: Jeroen Ooms <jeroenooms at gmail.com>, Luke Tierney
	<luke-tierney at uiowa.edu>, R-devel <r-devel at r-project.org>, Martin
	Maechler <maechler at stat.math.ethz.ch>
Subject: Re: [Rd] [External] Re: Operations with long altrep vectors
	cause segfaults on Windows
Message-ID: <8383dabf-9093-41ea-2407-8bd75a1009e2 at gmail.com>
Content-Type: text/plain; charset="utf-8"; Format="flowed"

On 9/9/20 9:30 AM, Hugh Parsonage wrote:
> Thank you!
>
> I get
>
> Starting program: C:\R\R-devel-20200909\bin\x64\Rgui.exe
> [New Thread 19940.0x638c]
> [New Thread 19940.0x102c]
> [New Thread 19940.0x329c]
> [New Thread 19940.0x37dc]
> warning: Invalid parameter passed to C runtime function.
>
> Program received signal SIGSEGV, Segmentation fault.
> 0x000000006c72d206 in compact_intseq_Dataptr (x=0x12783350,
> writeable=<optimized out>) at altclasses.c:169
> 169     altclasses.c: No such file or directory.

Thanks, would you know which svn version this is?

Tomas

>
> On Wed, 9 Sep 2020 at 17:03, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>> On 9/9/20 8:48 AM, Hugh Parsonage wrote:
>>> I am unable to set break or use gdb with any success when I use that version.
>>>
>>> On linux I would do R -d gdb but this gives "unknown option '-d' "
>>> while gdb R.exe (in the same directory as the debug version) gives the
>>> same output as before.
>>>
>>> I'm happy to help but I appreciate this list might not be the best
>>> place to get a tutorial on using gdb on Windows.
>> Essentially, the steps are: build with DEBUG=T (to have debug symbols),
>> possibly updating EOPTS in MkRules.local to disable optimizations, then
>> run gdb loading RGui, "set solib-search-path", run RGui from gdb. Then
>> you can break to debugger from RGui menu, or just run the code that
>> segfaults, and you get to gdb and can print the stacktrace, etc. You can
>> find some information in rw-FAQ (R for Windows FAQ), but yes, it is
>> harder than on Linux. We can take care of this report, but of course in
>> the longer term it would help if more people could take their time to
>> setup debugging and analyze bugs even on Windows.
>>
>> Tomas
>>
>>> On Wed, 9 Sep 2020 at 07:47, Jeroen Ooms <jeroenooms at gmail.com> wrote:
>>>> On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms <jeroenooms at gmail.com> wrote:
>>>>> On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>> On 9/8/20 4:48 PM, Hugh Parsonage wrote:
>>>>>>> Unfortunately I only get
>>>>>>>
>>>>>>> [Thread 21752.0x4aa8 exited with code 3221225477]
>>>>>>> [Thread 21752.0x4514 exited with code 3221225477]
>>>>>>> [Thread 21752.0x3f10 exited with code 3221225477]
>>>>>>> [Inferior 1 (process 21752) exited with code 030000000005]
>>>>>>>
>>>>>>> (I'm guessing I would need to build an instrumented version of R, or
>>>>>>> can R be debugged using gdb with an off-the-shelf installation?)
>>>>>> No, the default build lacks debug symbols. You need a build with debug
>>>>>> symbols, and if you can reproduce in a build without compiler
>>>>>> optimizations (-O0), the backtrace may be easier to interpret. Some bugs
>>>>>> however "disappear" when optimizations are disabled. You can build R
>>>>>> from source (and there may be debug builds provided by someone else
>>>>>> (Jeroen?)).
>>>>> Debug builds for each revision are available from
>>>>> https://r-devel.github.io . To download the installer you need to
>>>>> click the github icon in the last column in the table. You need to be
>>>>> signed in with a (free) Github account in order to download builds
>>>>> (artifacts) from Github actions. It will show download links for both
>>>>> the regular installer and installer with debug symbols.
>>>>>
>>>>> In other news, the https://r-devel.github.io table also shows that the
>>>>> fix that martin committed is segfaulting on 32-bit.
>>>> Sorry that was inaccurate, it is not segfaulting at all, but the unit
>>>> test is raising an error on 32-bit.
>>




------------------------------

Message: 27
Date: Wed, 9 Sep 2020 18:32:58 +1000
From: Hugh Parsonage <hugh.parsonage at gmail.com>
To: Tomas Kalibera <tomas.kalibera at gmail.com>
Cc: Jeroen Ooms <jeroenooms at gmail.com>, Luke Tierney
	<luke-tierney at uiowa.edu>,  R-devel <r-devel at r-project.org>, Martin
	Maechler <maechler at stat.math.ethz.ch>
Subject: Re: [Rd] [External] Re: Operations with long altrep vectors
	cause segfaults on Windows
Message-ID:
	<CAJmOi+MLyn_WcBLFSQdL9ze4iDzazysPcU7QGOQtWryTod44Yg at mail.gmail.com>
Content-Type: text/plain; charset="utf-8"

R Under development (unstable) (2020-09-08 r79165)

On Wed, 9 Sep 2020 at 18:00, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> On 9/9/20 9:30 AM, Hugh Parsonage wrote:
> > Thank you!
> >
> > I get
> >
> > Starting program: C:\R\R-devel-20200909\bin\x64\Rgui.exe
> > [New Thread 19940.0x638c]
> > [New Thread 19940.0x102c]
> > [New Thread 19940.0x329c]
> > [New Thread 19940.0x37dc]
> > warning: Invalid parameter passed to C runtime function.
> >
> > Program received signal SIGSEGV, Segmentation fault.
> > 0x000000006c72d206 in compact_intseq_Dataptr (x=0x12783350,
> > writeable=<optimized out>) at altclasses.c:169
> > 169     altclasses.c: No such file or directory.
>
> Thanks, would you know which svn version this is?
>
> Tomas
>
> >
> > On Wed, 9 Sep 2020 at 17:03, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >> On 9/9/20 8:48 AM, Hugh Parsonage wrote:
> >>> I am unable to set break or use gdb with any success when I use that version.
> >>>
> >>> On linux I would do R -d gdb but this gives "unknown option '-d' "
> >>> while gdb R.exe (in the same directory as the debug version) gives the
> >>> same output as before.
> >>>
> >>> I'm happy to help but I appreciate this list might not be the best
> >>> place to get a tutorial on using gdb on Windows.
> >> Essentially, the steps are: build with DEBUG=T (to have debug symbols),
> >> possibly updating EOPTS in MkRules.local to disable optimizations, then
> >> run gdb loading RGui, "set solib-search-path", run RGui from gdb. Then
> >> you can break to debugger from RGui menu, or just run the code that
> >> segfaults, and you get to gdb and can print the stacktrace, etc. You can
> >> find some information in rw-FAQ (R for Windows FAQ), but yes, it is
> >> harder than on Linux. We can take care of this report, but of course in
> >> the longer term it would help if more people could take their time to
> >> setup debugging and analyze bugs even on Windows.
> >>
> >> Tomas
> >>
> >>> On Wed, 9 Sep 2020 at 07:47, Jeroen Ooms <jeroenooms at gmail.com> wrote:
> >>>> On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms <jeroenooms at gmail.com> wrote:
> >>>>> On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>>> On 9/8/20 4:48 PM, Hugh Parsonage wrote:
> >>>>>>> Unfortunately I only get
> >>>>>>>
> >>>>>>> [Thread 21752.0x4aa8 exited with code 3221225477]
> >>>>>>> [Thread 21752.0x4514 exited with code 3221225477]
> >>>>>>> [Thread 21752.0x3f10 exited with code 3221225477]
> >>>>>>> [Inferior 1 (process 21752) exited with code 030000000005]
> >>>>>>>
> >>>>>>> (I'm guessing I would need to build an instrumented version of R, or
> >>>>>>> can R be debugged using gdb with an off-the-shelf installation?)
> >>>>>> No, the default build lacks debug symbols. You need a build with debug
> >>>>>> symbols, and if you can reproduce in a build without compiler
> >>>>>> optimizations (-O0), the backtrace may be easier to interpret. Some bugs
> >>>>>> however "disappear" when optimizations are disabled. You can build R
> >>>>>> from source (and there may be debug builds provided by someone else
> >>>>>> (Jeroen?)).
> >>>>> Debug builds for each revision are available from
> >>>>> https://r-devel.github.io . To download the installer you need to
> >>>>> click the github icon in the last column in the table. You need to be
> >>>>> signed in with a (free) Github account in order to download builds
> >>>>> (artifacts) from Github actions. It will show download links for both
> >>>>> the regular installer and installer with debug symbols.
> >>>>>
> >>>>> In other news, the https://r-devel.github.io table also shows that the
> >>>>> fix that martin committed is segfaulting on 32-bit.
> >>>> Sorry that was inaccurate, it is not segfaulting at all, but the unit
> >>>> test is raising an error on 32-bit.
> >>
>




------------------------------

Message: 28
Date: Wed, 9 Sep 2020 10:53:18 +0200
From: Tomas Kalibera <tomas.kalibera at gmail.com>
To: Hugh Parsonage <hugh.parsonage at gmail.com>
Cc: Jeroen Ooms <jeroenooms at gmail.com>, Luke Tierney
	<luke-tierney at uiowa.edu>, R-devel <r-devel at r-project.org>, Martin
	Maechler <maechler at stat.math.ethz.ch>
Subject: Re: [Rd] [External] Re: Operations with long altrep vectors
	cause segfaults on Windows
Message-ID: <6b01fb27-ec83-4dea-6478-c344f285083b at gmail.com>
Content-Type: text/plain; charset="utf-8"; Format="flowed"

Thanks. Should be now fixed in 79169.
Tomas

On 9/9/20 10:32 AM, Hugh Parsonage wrote:
> R Under development (unstable) (2020-09-08 r79165)
>
> On Wed, 9 Sep 2020 at 18:00, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>> On 9/9/20 9:30 AM, Hugh Parsonage wrote:
>>> Thank you!
>>>
>>> I get
>>>
>>> Starting program: C:\R\R-devel-20200909\bin\x64\Rgui.exe
>>> [New Thread 19940.0x638c]
>>> [New Thread 19940.0x102c]
>>> [New Thread 19940.0x329c]
>>> [New Thread 19940.0x37dc]
>>> warning: Invalid parameter passed to C runtime function.
>>>
>>> Program received signal SIGSEGV, Segmentation fault.
>>> 0x000000006c72d206 in compact_intseq_Dataptr (x=0x12783350,
>>> writeable=<optimized out>) at altclasses.c:169
>>> 169     altclasses.c: No such file or directory.
>> Thanks, would you know which svn version this is?
>>
>> Tomas
>>
>>> On Wed, 9 Sep 2020 at 17:03, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>> On 9/9/20 8:48 AM, Hugh Parsonage wrote:
>>>>> I am unable to set break or use gdb with any success when I use that version.
>>>>>
>>>>> On linux I would do R -d gdb but this gives "unknown option '-d' "
>>>>> while gdb R.exe (in the same directory as the debug version) gives the
>>>>> same output as before.
>>>>>
>>>>> I'm happy to help but I appreciate this list might not be the best
>>>>> place to get a tutorial on using gdb on Windows.
>>>> Essentially, the steps are: build with DEBUG=T (to have debug symbols),
>>>> possibly updating EOPTS in MkRules.local to disable optimizations, then
>>>> run gdb loading RGui, "set solib-search-path", run RGui from gdb. Then
>>>> you can break to debugger from RGui menu, or just run the code that
>>>> segfaults, and you get to gdb and can print the stacktrace, etc. You can
>>>> find some information in rw-FAQ (R for Windows FAQ), but yes, it is
>>>> harder than on Linux. We can take care of this report, but of course in
>>>> the longer term it would help if more people could take their time to
>>>> setup debugging and analyze bugs even on Windows.
>>>>
>>>> Tomas
>>>>
>>>>> On Wed, 9 Sep 2020 at 07:47, Jeroen Ooms <jeroenooms at gmail.com> wrote:
>>>>>> On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms <jeroenooms at gmail.com> wrote:
>>>>>>> On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>>>> On 9/8/20 4:48 PM, Hugh Parsonage wrote:
>>>>>>>>> Unfortunately I only get
>>>>>>>>>
>>>>>>>>> [Thread 21752.0x4aa8 exited with code 3221225477]
>>>>>>>>> [Thread 21752.0x4514 exited with code 3221225477]
>>>>>>>>> [Thread 21752.0x3f10 exited with code 3221225477]
>>>>>>>>> [Inferior 1 (process 21752) exited with code 030000000005]
>>>>>>>>>
>>>>>>>>> (I'm guessing I would need to build an instrumented version of R, or
>>>>>>>>> can R be debugged using gdb with an off-the-shelf installation?)
>>>>>>>> No, the default build lacks debug symbols. You need a build with debug
>>>>>>>> symbols, and if you can reproduce in a build without compiler
>>>>>>>> optimizations (-O0), the backtrace may be easier to interpret. Some bugs
>>>>>>>> however "disappear" when optimizations are disabled. You can build R
>>>>>>>> from source (and there may be debug builds provided by someone else
>>>>>>>> (Jeroen?)).
>>>>>>> Debug builds for each revision are available from
>>>>>>> https://r-devel.github.io . To download the installer you need to
>>>>>>> click the github icon in the last column in the table. You need to be
>>>>>>> signed in with a (free) Github account in order to download builds
>>>>>>> (artifacts) from Github actions. It will show download links for both
>>>>>>> the regular installer and installer with debug symbols.
>>>>>>>
>>>>>>> In other news, the https://r-devel.github.io table also shows that the
>>>>>>> fix that martin committed is segfaulting on 32-bit.
>>>>>> Sorry that was inaccurate, it is not segfaulting at all, but the unit
>>>>>> test is raising an error on 32-bit.




------------------------------

Message: 29
Date: Wed, 9 Sep 2020 11:06:12 +0200
From: Tomas Kalibera <tomas.kalibera at gmail.com>
To: Jeroen Ooms <jeroenooms at gmail.com>
Cc: Hugh Parsonage <hugh.parsonage at gmail.com>, Luke Tierney
	<luke-tierney at uiowa.edu>, R-devel <r-devel at r-project.org>, Martin
	Maechler <maechler at stat.math.ethz.ch>
Subject: Re: [Rd] [External] Re: Operations with long altrep vectors
	cause segfaults on Windows
Message-ID: <5fd517e2-ad46-c343-2a63-cda01ff58acc at gmail.com>
Content-Type: text/plain; charset="utf-8"; Format="flowed"

On 9/8/20 11:47 PM, Jeroen Ooms wrote:
> On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms <jeroenooms at gmail.com> wrote:
>> On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>> On 9/8/20 4:48 PM, Hugh Parsonage wrote:
>>>> Unfortunately I only get
>>>>
>>>> [Thread 21752.0x4aa8 exited with code 3221225477]
>>>> [Thread 21752.0x4514 exited with code 3221225477]
>>>> [Thread 21752.0x3f10 exited with code 3221225477]
>>>> [Inferior 1 (process 21752) exited with code 030000000005]
>>>>
>>>> (I'm guessing I would need to build an instrumented version of R, or
>>>> can R be debugged using gdb with an off-the-shelf installation?)
>>> No, the default build lacks debug symbols. You need a build with debug
>>> symbols, and if you can reproduce in a build without compiler
>>> optimizations (-O0), the backtrace may be easier to interpret. Some bugs
>>> however "disappear" when optimizations are disabled. You can build R
>>> from source (and there may be debug builds provided by someone else
>>> (Jeroen?)).
>> Debug builds for each revision are available from
>> https://r-devel.github.io . To download the installer you need to
>> click the github icon in the last column in the table. You need to be
>> signed in with a (free) Github account in order to download builds
>> (artifacts) from Github actions. It will show download links for both
>> the regular installer and installer with debug symbols.
>>
>> In other news, the https://r-devel.github.io table also shows that the
>> fix that martin committed is segfaulting on 32-bit.
> Sorry that was inaccurate, it is not segfaulting at all, but the unit
> test is raising an error on 32-bit.

Now fixed, the test needs to be run only on 64-bit builds where such 
long vectors/sequences are allowed.

Tomas




------------------------------

Subject: Digest Footer

_______________________________________________
R-devel at r-project.org mailing list  DIGESTED
https://stat.ethz.ch/mailman/listinfo/r-devel


------------------------------

End of R-devel Digest, Vol 211, Issue 7
***************************************

From hugh@p@r@on@ge @end|ng |rom gm@||@com  Wed Sep  9 14:18:23 2020
From: hugh@p@r@on@ge @end|ng |rom gm@||@com (Hugh Parsonage)
Date: Wed, 9 Sep 2020 22:18:23 +1000
Subject: [Rd] [External] Re: Operations with long altrep vectors cause
 segfaults on Windows
In-Reply-To: <5fd517e2-ad46-c343-2a63-cda01ff58acc@gmail.com>
References: <CAJmOi+MjsxpO+i9r57xwb5Ex+GcrECGB17GScy-_w+Y0jK6dmQ@mail.gmail.com>
 <24407.17272.770281.413960@stat.math.ethz.ch>
 <24407.18005.968508.796695@stat.math.ethz.ch>
 <CAJmOi+OOVjR5A=tjR+knHqq1Zcd9cJPg_kxsEDGu0enq0U92VA@mail.gmail.com>
 <alpine.DEB.2.21.2009080912190.3141@luke-Latitude-7480>
 <CAJmOi+PD6QF8hFf8MygN=-VWo+aCX9Av1UUeG9fbk8mbG6BD5w@mail.gmail.com>
 <6e673fc4-1891-3a9f-2bea-da5e89310099@gmail.com>
 <CABFfbXsZ4H=+rXzukDhUHq0UXSTZ_TCdtbia0W+ouTJ76MzK4A@mail.gmail.com>
 <CABFfbXs9Tn12anrdtVj4Cd8CReOV+6r40ysm529UrfQoTXKjNw@mail.gmail.com>
 <5fd517e2-ad46-c343-2a63-cda01ff58acc@gmail.com>
Message-ID: <CAJmOi+OwT8Ccy+Uh-UyazYw+KThA_ZtnCCBF5iesZQFk-THxjw@mail.gmail.com>

I can confirm the segmentation fault does not occur as of r79170.

On Wed, 9 Sep 2020 at 19:06, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> On 9/8/20 11:47 PM, Jeroen Ooms wrote:
> > On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms <jeroenooms at gmail.com> wrote:
> >> On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>> On 9/8/20 4:48 PM, Hugh Parsonage wrote:
> >>>> Unfortunately I only get
> >>>>
> >>>> [Thread 21752.0x4aa8 exited with code 3221225477]
> >>>> [Thread 21752.0x4514 exited with code 3221225477]
> >>>> [Thread 21752.0x3f10 exited with code 3221225477]
> >>>> [Inferior 1 (process 21752) exited with code 030000000005]
> >>>>
> >>>> (I'm guessing I would need to build an instrumented version of R, or
> >>>> can R be debugged using gdb with an off-the-shelf installation?)
> >>> No, the default build lacks debug symbols. You need a build with debug
> >>> symbols, and if you can reproduce in a build without compiler
> >>> optimizations (-O0), the backtrace may be easier to interpret. Some bugs
> >>> however "disappear" when optimizations are disabled. You can build R
> >>> from source (and there may be debug builds provided by someone else
> >>> (Jeroen?)).
> >> Debug builds for each revision are available from
> >> https://r-devel.github.io . To download the installer you need to
> >> click the github icon in the last column in the table. You need to be
> >> signed in with a (free) Github account in order to download builds
> >> (artifacts) from Github actions. It will show download links for both
> >> the regular installer and installer with debug symbols.
> >>
> >> In other news, the https://r-devel.github.io table also shows that the
> >> fix that martin committed is segfaulting on 32-bit.
> > Sorry that was inaccurate, it is not segfaulting at all, but the unit
> > test is raising an error on 32-bit.
>
> Now fixed, the test needs to be run only on 64-bit builds where such
> long vectors/sequences are allowed.
>
> Tomas
>


From henr|k@bengt@@on @end|ng |rom gm@||@com  Thu Sep 10 03:50:10 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Wed, 9 Sep 2020 18:50:10 -0700
Subject: [Rd] Rgui never processes ~/.Renviron
In-Reply-To: <24400.64740.172176.93099@rob.eddelbuettel.com>
References: <CAFDcVCRr50sNuc9y0NT4JL2dSe0Gn8=rqGLB_K7NRyzyOVtUUg@mail.gmail.com>
 <24400.64740.172176.93099@rob.eddelbuettel.com>
Message-ID: <CAFDcVCTb_GqgcaASt++jO3sR66V_o5000OvLFacvyc=3zdOQsw@mail.gmail.com>

I've "moved" this to
https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17919 to make sure
it's tracked.  /Henrik

On Thu, Sep 3, 2020 at 7:25 AM Dirk Eddelbuettel <edd at debian.org> wrote:
>
>
> On 2 September 2020 at 23:38, Henrik Bengtsson wrote:
> | WORKAROUND:
> | Setting R_USER or HOME prior to calling Rgui will cause Rgui to
> | process ~/.Renviron, e.g.
>
> AFAICR one _always_ had to manually set $HOME on Windows as the convention of
> having it comes from the some other OSs and is not native.
>
> In short I don't think this is new. A quick Google search seems to confirm
> this with a SuperUser answer from 2013:
>
> https://superuser.com/questions/607105/is-the-home-environment-variable-normally-set-in-windows
>
> Dirk
>
> --
> https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Sep 10 14:48:13 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 10 Sep 2020 14:48:13 +0200
Subject: [Rd] more Matrix weirdness
In-Reply-To: <AM0PR0102MB3443F1F91F70197C52FE71ADAE260@AM0PR0102MB3443.eurprd01.prod.exchangelabs.com>
References: <AM0PR0102MB3443F1F91F70197C52FE71ADAE260@AM0PR0102MB3443.eurprd01.prod.exchangelabs.com>
Message-ID: <24410.8333.102266.856181@stat.math.ethz.ch>

>>>>> Georgi Boshnakov 
>>>>>     on Wed, 9 Sep 2020 10:48:56 +0000 writes:

    > I think that this is because `[<-` dispatches on S4
    > methods only if the first argument is S4.  ?"[<-" says:

    > "These operators are also implicit S4 generics, but as
    > primitives, S4 methods will be dispatched only on S4
    > objects ?x?."

    > Georgi Boshnakov

Yes, exactly,  very well found, Georgi!

This is something I would have wanted different for years,
exactly because of several such problems with the Matrix
package of which I'm the maintainer.

Long time ago I had also looked if I saw how to fix this
behavior inside 'methods' (i.e. the S4 infrastructure pkg)
and I think in this case also, inside R's basic C code.

At the time (~ 10 yrs ago) I gave up, but don't remember why.

I'm happy if you create a formal bug report, possibly "wishlist"
as it is documented behavior, for this infelicity...
and then I will probably add the  'HELPWANTED'  keyword.

Martin


    > -----Original Message-----


    > Message: 19 Date: Tue, 8 Sep 2020 22:04:44 -0400 From: Ben
    > Bolker <bbolker at gmail.com> To: r-devel
    > <r-devel at r-project.org> Subject: [Rd] more Matrix
    > weirdness Message-ID:
    > <fbaf45b7-b6d8-e93f-39d9-aa51d6f2c28e at gmail.com>
    > Content-Type: text/plain; charset="utf-8"; Format="flowed"

    >    Am I being too optimistic in expecting this (mixing and
    > matching matrices and Matrices) to work?  If x is a matrix
    > and m is a Matrix, replacing a commensurately sized
    > sub-matrix of x with m throws "number of items to replace
    > is not a multiple of replacement length" ...

    > x <- matrix(0,nrow=3,ncol=10,
    > dimnames=list(letters[1:3],LETTERS[1:10])) rr <-
    > c("a","b","c") cc <- c("B","C","E") m <-
    > Matrix(matrix(1:9,3,3)) x[rr,cc] <- m

    >     cheers Ben Bolker




    > ------------------------------

    > Message: 20 Date: Wed, 9 Sep 2020 07:03:47 +0100 From: Rui
    > Barradas <ruipbarradas at sapo.pt> To: Ben Bolker
    > <bbolker at gmail.com>, r-devel <r-devel at r-project.org>
    > Subject: Re: [Rd] more Matrix weirdness Message-ID:
    > <7037975c-22b6-6eca-d871-743eead534f2 at sapo.pt>
    > Content-Type: text/plain; charset="utf-8"; Format="flowed"

    > Hello,

    > R 4.0.2 on Ubuntu 20.04, sessionInfo() below.

    > I can reproduce this, sort of. The error I'm getting is
    > different:


    > x[rr, cc] <- m #Error in x[rr, cc] <- m : replacement has
    > length zero

    > But if I check lengths and dimensions, they are
    > identical().

    > identical(length(x[rr, cc]), length(m)) #[1] TRUE
    > identical(dim(x[rr, cc]), dim(m)) #[1] TRUE


    > What works is


    > x[rr, cc] <- as.matrix(m)

    > I ran Ben's code on RStudio 1.3.1073, the following is run
    > with Rscript and the error message is the same.


    > rui at rui:~$ Rscript --vanilla rhelp.R R version 4.0.2
    > (2020-06-22) Platform: x86_64-pc-linux-gnu (64-bit)
    > Running under: Ubuntu 20.04.1 LTS

    > Matrix products: default BLAS:
    > /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 LAPACK:
    > /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0

    > locale: [1] LC_CTYPE=pt_PT.UTF-8 LC_NUMERIC=C [3]
    > LC_TIME=pt_PT.UTF-8 LC_COLLATE=pt_PT.UTF-8 [5]
    > LC_MONETARY=pt_PT.UTF-8 LC_MESSAGES=pt_PT.UTF-8 [7]
    > LC_PAPER=pt_PT.UTF-8 LC_NAME=C [9] LC_ADDRESS=C
    > LC_TELEPHONE=C [11] LC_MEASUREMENT=pt_PT.UTF-8
    > LC_IDENTIFICATION=C

    > attached base packages: [1] stats graphics grDevices utils
    > datasets methods base

    > other attached packages: [1] Matrix_1.2-18

    > loaded via a namespace (and not attached): [1]
    > compiler_4.0.2 grid_4.0.2 lattice_0.20-41 Error in x[rr,
    > cc] <- m : number of items to replace is not a multiple of
    > replacement length Execution halted


    > Hope this helps,

    > Rui Barradas


    > ?s 03:04 de 09/09/20, Ben Bolker escreveu:
    >> ? Am I being too optimistic in expecting this (mixing and
    >> matching matrices and Matrices) to work?? If x is a
    >> matrix and m is a Matrix, replacing a commensurately
    >> sized sub-matrix of x with m throws "number of items to
    >> replace is not a multiple of replacement length" ...
    >> 
    >> x <- matrix(0,nrow=3,ncol=10,
    >> dimnames=list(letters[1:3],LETTERS[1:10])) rr <-
    >> c("a","b","c") cc <- c("B","C","E") m <-
    >> Matrix(matrix(1:9,3,3)) x[rr,cc] <- m
    >> 
    >> ?? cheers ??? Ben Bolker
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel




    > ------------------------------

    > Message: 21 Date: Wed, 9 Sep 2020 08:27:06 +0200 From: Uwe
    > Ligges <ligges at statistik.tu-dortmund.de> To:
    > r-devel at r-project.org Subject: Re: [Rd] failing automatic
    > incoming check Message-ID:
    > <fba137f3-e4c4-316e-47ae-ee11b08bc0c2 at statistik.tu-dortmund.de>
    > Content-Type: text/plain; charset="utf-8"; Format="flowed"



    > On 08.09.2020 21:34, Sebastian P. Luque wrote:
    >> Hello,
    >> 
    >> I got a notification regarding a failure to pass incoming
    >> checks automatically after a CRAN submission.  The
    >> details are given here:
    >> 
    >> https://win-builder.r-project.org/incoming_pretest/diveMove_1.5.0_20200908_191325/
    >> 
    >> The only visible issue is a NOTE from the macosx build,
    >> with the very terse:
    >> 
    >> "No Protocol Specified"
    >> 
    >> My searches suggest this can be ignored, but it would be
    >> nice to squash it.  Any tips welcome.
    >> 


    > For some reason this should hgave undergone manual
    > inpection but got auto rejected. Ideally you would reduce
    > the test timing so that the overall check time is less
    > than 10 min .

    > Best, Uwe Ligges




    > ------------------------------

    > Message: 22 Date: Wed, 9 Sep 2020 16:48:40 +1000 From:
    > Hugh Parsonage <hugh.parsonage at gmail.com> To: Jeroen Ooms
    > <jeroenooms at gmail.com> Cc: Tomas Kalibera
    > <tomas.kalibera at gmail.com>, Luke Tierney
    > <luke-tierney at uiowa.edu>, R-devel <r-devel at r-project.org>,
    > Martin Maechler <maechler at stat.math.ethz.ch> Subject: Re:
    > [Rd] [External] Re: Operations with long altrep vectors
    > cause segfaults on Windows Message-ID:
    > <CAJmOi+PZcdsLRiBca2_r3dj0RmAJcuFT9FCjkMBjJEdFQ98YTQ at mail.gmail.com>
    > Content-Type: text/plain; charset="utf-8"

    > I am unable to set break or use gdb with any success when
    > I use that version.

    > On linux I would do R -d gdb but this gives "unknown
    > option '-d' " while gdb R.exe (in the same directory as
    > the debug version) gives the same output as before.

    > I'm happy to help but I appreciate this list might not be
    > the best place to get a tutorial on using gdb on Windows.

    > On Wed, 9 Sep 2020 at 07:47, Jeroen Ooms
    > <jeroenooms at gmail.com> wrote:
    >> 
    >> On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms
    >> <jeroenooms at gmail.com> wrote:
    >> >
    >> > On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera
    >> <tomas.kalibera at gmail.com> wrote:
    >> > >
    >> > > On 9/8/20 4:48 PM, Hugh Parsonage wrote: > > >
    >> Unfortunately I only get
    >> > > >
    >> > > > [Thread 21752.0x4aa8 exited with code 3221225477] >
    >> > > [Thread 21752.0x4514 exited with code 3221225477] > >
    >> > [Thread 21752.0x3f10 exited with code 3221225477] > > >
    >> [Inferior 1 (process 21752) exited with code
    >> 030000000005]
    >> > > >
    >> > > > (I'm guessing I would need to build an instrumented
    >> version of R, or > > > can R be debugged using gdb with
    >> an off-the-shelf installation?)
    >> > >
    >> > > No, the default build lacks debug symbols. You need a
    >> build with debug > > symbols, and if you can reproduce in
    >> a build without compiler > > optimizations (-O0), the
    >> backtrace may be easier to interpret. Some bugs > >
    >> however "disappear" when optimizations are disabled. You
    >> can build R > > from source (and there may be debug
    >> builds provided by someone else > > (Jeroen?)).
    >> >
    >> > Debug builds for each revision are available from >
    >> https://r-devel.github.io . To download the installer you
    >> need to > click the github icon in the last column in the
    >> table. You need to be > signed in with a (free) Github
    >> account in order to download builds > (artifacts) from
    >> Github actions. It will show download links for both >
    >> the regular installer and installer with debug symbols.
    >> >
    >> > In other news, the https://r-devel.github.io table also
    >> shows that the > fix that martin committed is segfaulting
    >> on 32-bit.
    >> 
    >> Sorry that was inaccurate, it is not segfaulting at all,
    >> but the unit test is raising an error on 32-bit.




    > ------------------------------

    > Message: 23 Date: Wed, 9 Sep 2020 09:03:05 +0200 From:
    > Tomas Kalibera <tomas.kalibera at gmail.com> To: Hugh
    > Parsonage <hugh.parsonage at gmail.com>, Jeroen Ooms
    > <jeroenooms at gmail.com> Cc: Luke Tierney
    > <luke-tierney at uiowa.edu>, R-devel <r-devel at r-project.org>,
    > Martin Maechler <maechler at stat.math.ethz.ch> Subject: Re:
    > [Rd] [External] Re: Operations with long altrep vectors
    > cause segfaults on Windows Message-ID:
    > <3f8e27b4-c6ed-04fe-7878-66d07ddc673f at gmail.com>
    > Content-Type: text/plain; charset="utf-8"; Format="flowed"

    > On 9/9/20 8:48 AM, Hugh Parsonage wrote:
    >> I am unable to set break or use gdb with any success when
    >> I use that version.
    >> 
    >> On linux I would do R -d gdb but this gives "unknown
    >> option '-d' " while gdb R.exe (in the same directory as
    >> the debug version) gives the same output as before.
    >> 
    >> I'm happy to help but I appreciate this list might not be
    >> the best place to get a tutorial on using gdb on Windows.

    > Essentially, the steps are: build with DEBUG=T (to have
    > debug symbols), possibly updating EOPTS in MkRules.local
    > to disable optimizations, then run gdb loading RGui, "set
    > solib-search-path", run RGui from gdb. Then you can break
    > to debugger from RGui menu, or just run the code that
    > segfaults, and you get to gdb and can print the
    > stacktrace, etc. You can find some information in rw-FAQ
    > (R for Windows FAQ), but yes, it is harder than on
    > Linux. We can take care of this report, but of course in
    > the longer term it would help if more people could take
    > their time to setup debugging and analyze bugs even on
    > Windows.

    > Tomas

    >> 
    >> On Wed, 9 Sep 2020 at 07:47, Jeroen Ooms
    >> <jeroenooms at gmail.com> wrote:
    >>> On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms
    >>> <jeroenooms at gmail.com> wrote:
    >>>> On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera
    >>>> <tomas.kalibera at gmail.com> wrote:
    >>>>> On 9/8/20 4:48 PM, Hugh Parsonage wrote:
>>>>> Unfortunately I only get
    >>>>>> 
>>>>> [Thread 21752.0x4aa8 exited with code 3221225477]
>>>>> [Thread 21752.0x4514 exited with code 3221225477]
>>>>> [Thread 21752.0x3f10 exited with code 3221225477]
>>>>> [Inferior 1 (process 21752) exited with code 030000000005]
    >>>>>> 
>>>>> (I'm guessing I would need to build an instrumented
    >>>>>> version of R, or
>>>>> can R be debugged using gdb with an off-the-shelf
    >>>>>> installation?)
    >>>>> No, the default build lacks debug symbols. You need a
    >>>>> build with debug symbols, and if you can reproduce in
    >>>>> a build without compiler optimizations (-O0), the
    >>>>> backtrace may be easier to interpret. Some bugs
    >>>>> however "disappear" when optimizations are
    >>>>> disabled. You can build R from source (and there may
    >>>>> be debug builds provided by someone else (Jeroen?)).
    >>>> Debug builds for each revision are available from
    >>>> https://r-devel.github.io . To download the installer
    >>>> you need to click the github icon in the last column in
    >>>> the table. You need to be signed in with a (free)
    >>>> Github account in order to download builds (artifacts)
    >>>> from Github actions. It will show download links for
    >>>> both the regular installer and installer with debug
    >>>> symbols.
    >>>> 
    >>>> In other news, the https://r-devel.github.io table also
    >>>> shows that the fix that martin committed is segfaulting
    >>>> on 32-bit.
    >>> Sorry that was inaccurate, it is not segfaulting at all,
    >>> but the unit test is raising an error on 32-bit.




    > ------------------------------

    > Message: 24 Date: Wed, 9 Sep 2020 17:30:17 +1000 From:
    > Hugh Parsonage <hugh.parsonage at gmail.com> To: Tomas
    > Kalibera <tomas.kalibera at gmail.com> Cc: Jeroen Ooms
    > <jeroenooms at gmail.com>, Luke Tierney
    > <luke-tierney at uiowa.edu>, R-devel <r-devel at r-project.org>,
    > Martin Maechler <maechler at stat.math.ethz.ch> Subject: Re:
    > [Rd] [External] Re: Operations with long altrep vectors
    > cause segfaults on Windows Message-ID:
    > <CAJmOi+MKW_RbxvVOfPDA58aYPzNz8ViKsVa+30ERsjmsV5Je+A at mail.gmail.com>
    > Content-Type: text/plain; charset="utf-8"

    > Thank you!

    > I get

    > Starting program: C:\R\R-devel-20200909\bin\x64\Rgui.exe
    > [New Thread 19940.0x638c] [New Thread 19940.0x102c] [New
    > Thread 19940.0x329c] [New Thread 19940.0x37dc] warning:
    > Invalid parameter passed to C runtime function.

    > Program received signal SIGSEGV, Segmentation fault.
    > 0x000000006c72d206 in compact_intseq_Dataptr
    > (x=0x12783350, writeable=<optimized out>) at
    > altclasses.c:169 169 altclasses.c: No such file or
    > directory.

    > On Wed, 9 Sep 2020 at 17:03, Tomas Kalibera
    > <tomas.kalibera at gmail.com> wrote:
    >> 
    >> On 9/9/20 8:48 AM, Hugh Parsonage wrote: > I am unable to
    >> set break or use gdb with any success when I use that
    >> version.
    >> >
    >> > On linux I would do R -d gdb but this gives "unknown
    >> option '-d' " > while gdb R.exe (in the same directory as
    >> the debug version) gives the > same output as before.
    >> >
    >> > I'm happy to help but I appreciate this list might not
    >> be the best > place to get a tutorial on using gdb on
    >> Windows.
    >> 
    >> Essentially, the steps are: build with DEBUG=T (to have
    >> debug symbols), possibly updating EOPTS in MkRules.local
    >> to disable optimizations, then run gdb loading RGui, "set
    >> solib-search-path", run RGui from gdb. Then you can break
    >> to debugger from RGui menu, or just run the code that
    >> segfaults, and you get to gdb and can print the
    >> stacktrace, etc. You can find some information in rw-FAQ
    >> (R for Windows FAQ), but yes, it is harder than on
    >> Linux. We can take care of this report, but of course in
    >> the longer term it would help if more people could take
    >> their time to setup debugging and analyze bugs even on
    >> Windows.
    >> 
    >> Tomas
    >> 
    >> >
    >> > On Wed, 9 Sep 2020 at 07:47, Jeroen Ooms
    >> <jeroenooms at gmail.com> wrote: >> On Tue, Sep 8, 2020 at
    >> 11:44 PM Jeroen Ooms <jeroenooms at gmail.com> wrote: >>> On
    >> Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera
    >> <tomas.kalibera at gmail.com> wrote: >>>> On 9/8/20 4:48 PM,
    >> Hugh Parsonage wrote: >>>>> Unfortunately I only get
    >> >>>>>
    >> >>>>> [Thread 21752.0x4aa8 exited with code 3221225477]
    >> >>>>> [Thread 21752.0x4514 exited with code 3221225477]
    >> >>>>> [Thread 21752.0x3f10 exited with code 3221225477]
    >> >>>>> [Inferior 1 (process 21752) exited with code
    >> 030000000005]
    >> >>>>>
    >> >>>>> (I'm guessing I would need to build an instrumented
    >> version of R, or >>>>> can R be debugged using gdb with
    >> an off-the-shelf installation?)  >>>> No, the default
    >> build lacks debug symbols. You need a build with debug
    >> >>>> symbols, and if you can reproduce in a build without
    >> compiler >>>> optimizations (-O0), the backtrace may be
    >> easier to interpret. Some bugs >>>> however "disappear"
    >> when optimizations are disabled. You can build R >>>>
    >> from source (and there may be debug builds provided by
    >> someone else >>>> (Jeroen?)).  >>> Debug builds for each
    >> revision are available from >>> https://r-devel.github.io
    >> . To download the installer you need to >>> click the
    >> github icon in the last column in the table. You need to
    >> be >>> signed in with a (free) Github account in order to
    >> download builds >>> (artifacts) from Github actions. It
    >> will show download links for both >>> the regular
    >> installer and installer with debug symbols.
    >> >>>
    >> >>> In other news, the https://r-devel.github.io table
    >> also shows that the >>> fix that martin committed is
    >> segfaulting on 32-bit.  >> Sorry that was inaccurate, it
    >> is not segfaulting at all, but the unit >> test is
    >> raising an error on 32-bit.
    >> 
    >> 




    > ------------------------------

    > Message: 25 Date: Wed, 9 Sep 2020 08:00:41 +0000 From:
    > "Koenker, Roger W" <rkoenker at illinois.edu> To: r-devel
    > <r-devel at r-project.org> Subject: [Rd] Environmental
    > Messaging Message-ID:
    > <6C9F497D-5CEA-4A02-B7AB-490AB4022BB6 at illinois.edu>
    > Content-Type: text/plain; charset="utf-8"

    > What sort of message is this to send to the younger
    > generation?

    >> plastic = 1:5 card = 1:4 board = 1:4
    >> plastic/crossprod(card,board)
    > [1] 0.03333333 0.06666667 0.10000000 0.13333333 0.16666667
    > Warning message: In plastic/crossprod(card, board) :
    > Recycling array of length 1 in vector-array arithmetic is
    > deprecated.  Use c() or as.vector() instead.

    > ok, I can write c(crossprod()) but it is ugly, and
    > environmentally wasteful.  What?s next?  Warnings for my
    > beloved outer(card, board) * board

    > ------------------------------

    > Message: 26 Date: Wed, 9 Sep 2020 10:00:55 +0200 From:
    > Tomas Kalibera <tomas.kalibera at gmail.com> To: Hugh
    > Parsonage <hugh.parsonage at gmail.com> Cc: Jeroen Ooms
    > <jeroenooms at gmail.com>, Luke Tierney
    > <luke-tierney at uiowa.edu>, R-devel <r-devel at r-project.org>,
    > Martin Maechler <maechler at stat.math.ethz.ch> Subject: Re:
    > [Rd] [External] Re: Operations with long altrep vectors
    > cause segfaults on Windows Message-ID:
    > <8383dabf-9093-41ea-2407-8bd75a1009e2 at gmail.com>
    > Content-Type: text/plain; charset="utf-8"; Format="flowed"

    > On 9/9/20 9:30 AM, Hugh Parsonage wrote:
    >> Thank you!
    >> 
    >> I get
    >> 
    >> Starting program: C:\R\R-devel-20200909\bin\x64\Rgui.exe
    >> [New Thread 19940.0x638c] [New Thread 19940.0x102c] [New
    >> Thread 19940.0x329c] [New Thread 19940.0x37dc] warning:
    >> Invalid parameter passed to C runtime function.
    >> 
    >> Program received signal SIGSEGV, Segmentation fault.
    >> 0x000000006c72d206 in compact_intseq_Dataptr
    >> (x=0x12783350, writeable=<optimized out>) at
    >> altclasses.c:169 169 altclasses.c: No such file or
    >> directory.

    > Thanks, would you know which svn version this is?

    > Tomas

    >> 
    >> On Wed, 9 Sep 2020 at 17:03, Tomas Kalibera
    >> <tomas.kalibera at gmail.com> wrote:
    >>> On 9/9/20 8:48 AM, Hugh Parsonage wrote:
    >>>> I am unable to set break or use gdb with any success
    >>>> when I use that version.
    >>>> 
    >>>> On linux I would do R -d gdb but this gives "unknown
    >>>> option '-d' " while gdb R.exe (in the same directory as
    >>>> the debug version) gives the same output as before.
    >>>> 
    >>>> I'm happy to help but I appreciate this list might not
    >>>> be the best place to get a tutorial on using gdb on
    >>>> Windows.
    >>> Essentially, the steps are: build with DEBUG=T (to have
    >>> debug symbols), possibly updating EOPTS in MkRules.local
    >>> to disable optimizations, then run gdb loading RGui,
    >>> "set solib-search-path", run RGui from gdb. Then you can
    >>> break to debugger from RGui menu, or just run the code
    >>> that segfaults, and you get to gdb and can print the
    >>> stacktrace, etc. You can find some information in rw-FAQ
    >>> (R for Windows FAQ), but yes, it is harder than on
    >>> Linux. We can take care of this report, but of course in
    >>> the longer term it would help if more people could take
    >>> their time to setup debugging and analyze bugs even on
    >>> Windows.
    >>> 
    >>> Tomas
    >>> 
    >>>> On Wed, 9 Sep 2020 at 07:47, Jeroen Ooms
    >>>> <jeroenooms at gmail.com> wrote:
    >>>>> On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms
    >>>>> <jeroenooms at gmail.com> wrote:
>>>>> On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera
    >>>>> <tomas.kalibera at gmail.com> wrote:
    >>>>>>> On 9/8/20 4:48 PM, Hugh Parsonage wrote:
    >>>>>>>> Unfortunately I only get
    >>>>>>>> 
    >>>>>>>> [Thread 21752.0x4aa8 exited with code 3221225477]
    >>>>>>>> [Thread 21752.0x4514 exited with code 3221225477]
    >>>>>>>> [Thread 21752.0x3f10 exited with code 3221225477]
    >>>>>>>> [Inferior 1 (process 21752) exited with code
    >>>>>>>> 030000000005]
    >>>>>>>> 
    >>>>>>>> (I'm guessing I would need to build an instrumented
    >>>>>>>> version of R, or can R be debugged using gdb with
    >>>>>>>> an off-the-shelf installation?)
    >>>>>>> No, the default build lacks debug symbols. You need
    >>>>>>> a build with debug symbols, and if you can reproduce
    >>>>>>> in a build without compiler optimizations (-O0), the
    >>>>>>> backtrace may be easier to interpret. Some bugs
    >>>>>>> however "disappear" when optimizations are
    >>>>>>> disabled. You can build R from source (and there may
    >>>>>>> be debug builds provided by someone else (Jeroen?)).
>>>>> Debug builds for each revision are available from
>>>>> https://r-devel.github.io . To download the installer you
    >>>>>>> need to
>>>>> click the github icon in the last column in the table. You
    >>>>>>> need to be
>>>>> signed in with a (free) Github account in order to
    >>>>>>> download builds
>>>>> (artifacts) from Github actions. It will show download
    >>>>>>> links for both
>>>>> the regular installer and installer with debug symbols.
    >>>>>> 
>>>>> In other news, the https://r-devel.github.io table also
    >>>>>> shows that the
>>>>> fix that martin committed is segfaulting on 32-bit.
    >>>>> Sorry that was inaccurate, it is not segfaulting at
    >>>>> all, but the unit test is raising an error on 32-bit.
    >>> 




    > ------------------------------

    > Message: 27 Date: Wed, 9 Sep 2020 18:32:58 +1000 From:
    > Hugh Parsonage <hugh.parsonage at gmail.com> To: Tomas
    > Kalibera <tomas.kalibera at gmail.com> Cc: Jeroen Ooms
    > <jeroenooms at gmail.com>, Luke Tierney
    > <luke-tierney at uiowa.edu>, R-devel <r-devel at r-project.org>,
    > Martin Maechler <maechler at stat.math.ethz.ch> Subject: Re:
    > [Rd] [External] Re: Operations with long altrep vectors
    > cause segfaults on Windows Message-ID:
    > <CAJmOi+MLyn_WcBLFSQdL9ze4iDzazysPcU7QGOQtWryTod44Yg at mail.gmail.com>
    > Content-Type: text/plain; charset="utf-8"

    > R Under development (unstable) (2020-09-08 r79165)

    > On Wed, 9 Sep 2020 at 18:00, Tomas Kalibera
    > <tomas.kalibera at gmail.com> wrote:
    >> 
    >> On 9/9/20 9:30 AM, Hugh Parsonage wrote: > Thank you!
    >> >
    >> > I get
    >> >
    >> > Starting program:
    >> C:\R\R-devel-20200909\bin\x64\Rgui.exe > [New Thread
    >> 19940.0x638c] > [New Thread 19940.0x102c] > [New Thread
    >> 19940.0x329c] > [New Thread 19940.0x37dc] > warning:
    >> Invalid parameter passed to C runtime function.
    >> >
    >> > Program received signal SIGSEGV, Segmentation fault.  >
    >> 0x000000006c72d206 in compact_intseq_Dataptr
    >> (x=0x12783350, > writeable=<optimized out>) at
    >> altclasses.c:169 > 169 altclasses.c: No such file or
    >> directory.
    >> 
    >> Thanks, would you know which svn version this is?
    >> 
    >> Tomas
    >> 
    >> >
    >> > On Wed, 9 Sep 2020 at 17:03, Tomas Kalibera
    >> <tomas.kalibera at gmail.com> wrote: >> On 9/9/20 8:48 AM,
    >> Hugh Parsonage wrote: >>> I am unable to set break or use
    >> gdb with any success when I use that version.
    >> >>>
    >> >>> On linux I would do R -d gdb but this gives "unknown
    >> option '-d' " >>> while gdb R.exe (in the same directory
    >> as the debug version) gives the >>> same output as
    >> before.
    >> >>>
    >> >>> I'm happy to help but I appreciate this list might
    >> not be the best >>> place to get a tutorial on using gdb
    >> on Windows.  >> Essentially, the steps are: build with
    >> DEBUG=T (to have debug symbols), >> possibly updating
    >> EOPTS in MkRules.local to disable optimizations, then >>
    >> run gdb loading RGui, "set solib-search-path", run RGui
    >> from gdb. Then >> you can break to debugger from RGui
    >> menu, or just run the code that >> segfaults, and you get
    >> to gdb and can print the stacktrace, etc. You can >> find
    >> some information in rw-FAQ (R for Windows FAQ), but yes,
    >> it is >> harder than on Linux. We can take care of this
    >> report, but of course in >> the longer term it would help
    >> if more people could take their time to >> setup
    >> debugging and analyze bugs even on Windows.
    >> >>
    >> >> Tomas
    >> >>
    >> >>> On Wed, 9 Sep 2020 at 07:47, Jeroen Ooms
    >> <jeroenooms at gmail.com> wrote: >>>> On Tue, Sep 8, 2020 at
    >> 11:44 PM Jeroen Ooms <jeroenooms at gmail.com> wrote: >>>>>
    >> On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera
    >> <tomas.kalibera at gmail.com> wrote: >>>>>> On 9/8/20 4:48
    >> PM, Hugh Parsonage wrote: >>>>>>> Unfortunately I only
    >> get
    >> >>>>>>>
    >> >>>>>>> [Thread 21752.0x4aa8 exited with code 3221225477]
    >> >>>>>>> [Thread 21752.0x4514 exited with code 3221225477]
    >> >>>>>>> [Thread 21752.0x3f10 exited with code 3221225477]
    >> >>>>>>> [Inferior 1 (process 21752) exited with code
    >> 030000000005]
    >> >>>>>>>
    >> >>>>>>> (I'm guessing I would need to build an
    >> instrumented version of R, or >>>>>>> can R be debugged
    >> using gdb with an off-the-shelf installation?)  >>>>>>
    >> No, the default build lacks debug symbols. You need a
    >> build with debug >>>>>> symbols, and if you can reproduce
    >> in a build without compiler >>>>>> optimizations (-O0),
    >> the backtrace may be easier to interpret. Some bugs
    >> >>>>>> however "disappear" when optimizations are
    >> disabled. You can build R >>>>>> from source (and there
    >> may be debug builds provided by someone else >>>>>>
    >> (Jeroen?)).  >>>>> Debug builds for each revision are
    >> available from >>>>> https://r-devel.github.io . To
    >> download the installer you need to >>>>> click the github
    >> icon in the last column in the table. You need to be
    >> >>>>> signed in with a (free) Github account in order to
    >> download builds >>>>> (artifacts) from Github actions. It
    >> will show download links for both >>>>> the regular
    >> installer and installer with debug symbols.
    >> >>>>>
    >> >>>>> In other news, the https://r-devel.github.io table
    >> also shows that the >>>>> fix that martin committed is
    >> segfaulting on 32-bit.  >>>> Sorry that was inaccurate,
    >> it is not segfaulting at all, but the unit >>>> test is
    >> raising an error on 32-bit.
    >> >>
    >> 




    > ------------------------------

    > Message: 28 Date: Wed, 9 Sep 2020 10:53:18 +0200 From:
    > Tomas Kalibera <tomas.kalibera at gmail.com> To: Hugh
    > Parsonage <hugh.parsonage at gmail.com> Cc: Jeroen Ooms
    > <jeroenooms at gmail.com>, Luke Tierney
    > <luke-tierney at uiowa.edu>, R-devel <r-devel at r-project.org>,
    > Martin Maechler <maechler at stat.math.ethz.ch> Subject: Re:
    > [Rd] [External] Re: Operations with long altrep vectors
    > cause segfaults on Windows Message-ID:
    > <6b01fb27-ec83-4dea-6478-c344f285083b at gmail.com>
    > Content-Type: text/plain; charset="utf-8"; Format="flowed"

    > Thanks. Should be now fixed in 79169.  Tomas

    > On 9/9/20 10:32 AM, Hugh Parsonage wrote:
    >> R Under development (unstable) (2020-09-08 r79165)
    >> 
    >> On Wed, 9 Sep 2020 at 18:00, Tomas Kalibera
    >> <tomas.kalibera at gmail.com> wrote:
    >>> On 9/9/20 9:30 AM, Hugh Parsonage wrote:
    >>>> Thank you!
    >>>> 
    >>>> I get
    >>>> 
    >>>> Starting program:
    >>>> C:\R\R-devel-20200909\bin\x64\Rgui.exe [New Thread
    >>>> 19940.0x638c] [New Thread 19940.0x102c] [New Thread
    >>>> 19940.0x329c] [New Thread 19940.0x37dc] warning:
    >>>> Invalid parameter passed to C runtime function.
    >>>> 
    >>>> Program received signal SIGSEGV, Segmentation fault.
    >>>> 0x000000006c72d206 in compact_intseq_Dataptr
    >>>> (x=0x12783350, writeable=<optimized out>) at
    >>>> altclasses.c:169 169 altclasses.c: No such file or
    >>>> directory.
    >>> Thanks, would you know which svn version this is?
    >>> 
    >>> Tomas
    >>> 
    >>>> On Wed, 9 Sep 2020 at 17:03, Tomas Kalibera
    >>>> <tomas.kalibera at gmail.com> wrote:
    >>>>> On 9/9/20 8:48 AM, Hugh Parsonage wrote:
>>>>> I am unable to set break or use gdb with any success when
    >>>>> I use that version.
    >>>>>> 
>>>>> On linux I would do R -d gdb but this gives "unknown
    >>>>>> option '-d' "
>>>>> while gdb R.exe (in the same directory as the debug
    >>>>>> version) gives the
>>>>> same output as before.
    >>>>>> 
>>>>> I'm happy to help but I appreciate this list might not be
    >>>>>> the best
>>>>> place to get a tutorial on using gdb on Windows.
    >>>>> Essentially, the steps are: build with DEBUG=T (to
    >>>>> have debug symbols), possibly updating EOPTS in
    >>>>> MkRules.local to disable optimizations, then run gdb
    >>>>> loading RGui, "set solib-search-path", run RGui from
    >>>>> gdb. Then you can break to debugger from RGui menu, or
    >>>>> just run the code that segfaults, and you get to gdb
    >>>>> and can print the stacktrace, etc. You can find some
    >>>>> information in rw-FAQ (R for Windows FAQ), but yes, it
    >>>>> is harder than on Linux. We can take care of this
    >>>>> report, but of course in the longer term it would help
    >>>>> if more people could take their time to setup
    >>>>> debugging and analyze bugs even on Windows.
    >>>>> 
    >>>>> Tomas
    >>>>> 
>>>>> On Wed, 9 Sep 2020 at 07:47, Jeroen Ooms
    >>>>> <jeroenooms at gmail.com> wrote:
    >>>>>>> On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms
    >>>>>>> <jeroenooms at gmail.com> wrote:
    >>>>>>>> On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera
    >>>>>>>> <tomas.kalibera at gmail.com> wrote:
    >>>>>>>>> On 9/8/20 4:48 PM, Hugh Parsonage wrote:
    >>>>>>>>>> Unfortunately I only get
    >>>>>>>>>> 
    >>>>>>>>>> [Thread 21752.0x4aa8 exited with code 3221225477]
    >>>>>>>>>> [Thread 21752.0x4514 exited with code 3221225477]
    >>>>>>>>>> [Thread 21752.0x3f10 exited with code 3221225477]
    >>>>>>>>>> [Inferior 1 (process 21752) exited with code
    >>>>>>>>>> 030000000005]
    >>>>>>>>>> 
    >>>>>>>>>> (I'm guessing I would need to build an
    >>>>>>>>>> instrumented version of R, or can R be debugged
    >>>>>>>>>> using gdb with an off-the-shelf installation?)
    >>>>>>>>> No, the default build lacks debug symbols. You
    >>>>>>>>> need a build with debug symbols, and if you can
    >>>>>>>>> reproduce in a build without compiler
    >>>>>>>>> optimizations (-O0), the backtrace may be easier
    >>>>>>>>> to interpret. Some bugs however "disappear" when
    >>>>>>>>> optimizations are disabled. You can build R from
    >>>>>>>>> source (and there may be debug builds provided by
    >>>>>>>>> someone else (Jeroen?)).
    >>>>>>>> Debug builds for each revision are available from
    >>>>>>>> https://r-devel.github.io . To download the
    >>>>>>>> installer you need to click the github icon in the
    >>>>>>>> last column in the table. You need to be signed in
    >>>>>>>> with a (free) Github account in order to download
    >>>>>>>> builds (artifacts) from Github actions. It will
    >>>>>>>> show download links for both the regular installer
    >>>>>>>> and installer with debug symbols.
    >>>>>>>> 
    >>>>>>>> In other news, the https://r-devel.github.io table
    >>>>>>>> also shows that the fix that martin committed is
    >>>>>>>> segfaulting on 32-bit.
    >>>>>>> Sorry that was inaccurate, it is not segfaulting at
    >>>>>>> all, but the unit test is raising an error on
    >>>>>>> 32-bit.




    > ------------------------------

    > Message: 29 Date: Wed, 9 Sep 2020 11:06:12 +0200 From:
    > Tomas Kalibera <tomas.kalibera at gmail.com> To: Jeroen Ooms
    > <jeroenooms at gmail.com> Cc: Hugh Parsonage
    > <hugh.parsonage at gmail.com>, Luke Tierney
    > <luke-tierney at uiowa.edu>, R-devel <r-devel at r-project.org>,
    > Martin Maechler <maechler at stat.math.ethz.ch> Subject: Re:
    > [Rd] [External] Re: Operations with long altrep vectors
    > cause segfaults on Windows Message-ID:
    > <5fd517e2-ad46-c343-2a63-cda01ff58acc at gmail.com>
    > Content-Type: text/plain; charset="utf-8"; Format="flowed"

    > On 9/8/20 11:47 PM, Jeroen Ooms wrote:
    >> On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms
    >> <jeroenooms at gmail.com> wrote:
    >>> On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera
    >>> <tomas.kalibera at gmail.com> wrote:
    >>>> On 9/8/20 4:48 PM, Hugh Parsonage wrote:
    >>>>> Unfortunately I only get
    >>>>> 
    >>>>> [Thread 21752.0x4aa8 exited with code 3221225477]
    >>>>> [Thread 21752.0x4514 exited with code 3221225477]
    >>>>> [Thread 21752.0x3f10 exited with code 3221225477]
    >>>>> [Inferior 1 (process 21752) exited with code
    >>>>> 030000000005]
    >>>>> 
    >>>>> (I'm guessing I would need to build an instrumented
    >>>>> version of R, or can R be debugged using gdb with an
    >>>>> off-the-shelf installation?)
    >>>> No, the default build lacks debug symbols. You need a
    >>>> build with debug symbols, and if you can reproduce in a
    >>>> build without compiler optimizations (-O0), the
    >>>> backtrace may be easier to interpret. Some bugs however
    >>>> "disappear" when optimizations are disabled. You can
    >>>> build R from source (and there may be debug builds
    >>>> provided by someone else (Jeroen?)).
    >>> Debug builds for each revision are available from
    >>> https://r-devel.github.io . To download the installer
    >>> you need to click the github icon in the last column in
    >>> the table. You need to be signed in with a (free) Github
    >>> account in order to download builds (artifacts) from
    >>> Github actions. It will show download links for both the
    >>> regular installer and installer with debug symbols.
    >>> 
    >>> In other news, the https://r-devel.github.io table also
    >>> shows that the fix that martin committed is segfaulting
    >>> on 32-bit.
    >> Sorry that was inaccurate, it is not segfaulting at all,
    >> but the unit test is raising an error on 32-bit.

    > Now fixed, the test needs to be run only on 64-bit builds
    > where such long vectors/sequences are allowed.

    > Tomas




    > ------------------------------

    > Subject: Digest Footer

    > _______________________________________________
    > R-devel at r-project.org mailing list DIGESTED
    > https://stat.ethz.ch/mailman/listinfo/r-devel


    > ------------------------------

    > End of R-devel Digest, Vol 211, Issue 7
    > ***************************************
    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From @purd|e@@ @end|ng |rom gm@||@com  Fri Sep 11 04:02:48 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Fri, 11 Sep 2020 14:02:48 +1200
Subject: [Rd] more Matrix weirdness
In-Reply-To: <24410.8333.102266.856181@stat.math.ethz.ch>
References: <AM0PR0102MB3443F1F91F70197C52FE71ADAE260@AM0PR0102MB3443.eurprd01.prod.exchangelabs.com>
 <24410.8333.102266.856181@stat.math.ethz.ch>
Message-ID: <CAB8pepxxoJV2GJp_CsUee+4gRCw2e=DXb2zfgXbArJ+yxQ6Ahg@mail.gmail.com>

>     > "These operators are also implicit S4 generics, but as
>     > primitives, S4 methods will be dispatched only on S4
>     > objects ?x?."

> Yes, exactly,  very well found, Georgi!

I'm sorry Martin, but I don't understand your point here.

I'm assuming that you want the (S3) matrix, x, to be converted to an
(S4) Matrix.

However, this is not a question of method dispatch, as such.
But rather a question of type conversion (integer to numeric to complex, etc).

Specifically, can/should automatic type conversion, convert an S3 data
type to an S4 data type, even where user-defined data types are
involved?


From georg|@bo@hn@kov @end|ng |rom m@nche@ter@@c@uk  Fri Sep 11 11:06:30 2020
From: georg|@bo@hn@kov @end|ng |rom m@nche@ter@@c@uk (Georgi Boshnakov)
Date: Fri, 11 Sep 2020 09:06:30 +0000
Subject: [Rd] more Matrix weirdness
In-Reply-To: <24410.8333.102266.856181@stat.math.ethz.ch>
References: <AM0PR0102MB3443F1F91F70197C52FE71ADAE260@AM0PR0102MB3443.eurprd01.prod.exchangelabs.com>
 <24410.8333.102266.856181@stat.math.ethz.ch>
Message-ID: <AM0PR0102MB344377DD070F0B8BE8EAB65DAE240@AM0PR0102MB3443.eurprd01.prod.exchangelabs.com>

If the current semantics is to be kept, one approach might be to insert in the internal code of "[<-" something like the equivalent of 

If(isS4(value))
    value <- coreData(value)

with the contract that classes that wish to be treated as equivalent to basic vector classes define suitable method for coreData(). So, a matrix class would return a plain matrix, a vector class - a vector, etc. This is akin to coredata() for time series in package 'zoo' and others. 


Georgi Boshnakov

-----Original Message-----
From: Martin Maechler <maechler at stat.math.ethz.ch> 
Sent: 10 September 2020 13:48
To: Georgi Boshnakov <georgi.boshnakov at manchester.ac.uk>
Cc: r-devel at r-project.org
Subject: Re: [Rd] more Matrix weirdness

>>>>> Georgi Boshnakov 
>>>>>     on Wed, 9 Sep 2020 10:48:56 +0000 writes:

    > I think that this is because `[<-` dispatches on S4
    > methods only if the first argument is S4.  ?"[<-" says:

    > "These operators are also implicit S4 generics, but as
    > primitives, S4 methods will be dispatched only on S4
    > objects ?x?."

    > Georgi Boshnakov

Yes, exactly,  very well found, Georgi!

This is something I would have wanted different for years, exactly because of several such problems with the Matrix package of which I'm the maintainer.

Long time ago I had also looked if I saw how to fix this behavior inside 'methods' (i.e. the S4 infrastructure pkg) and I think in this case also, inside R's basic C code.

At the time (~ 10 yrs ago) I gave up, but don't remember why.

I'm happy if you create a formal bug report, possibly "wishlist"
as it is documented behavior, for this infelicity...
and then I will probably add the  'HELPWANTED'  keyword.

Martin


    > -----Original Message-----


    > Message: 19 Date: Tue, 8 Sep 2020 22:04:44 -0400 From: Ben
    > Bolker <bbolker at gmail.com> To: r-devel
    > <r-devel at r-project.org> Subject: [Rd] more Matrix
    > weirdness Message-ID:
    > <fbaf45b7-b6d8-e93f-39d9-aa51d6f2c28e at gmail.com>
    > Content-Type: text/plain; charset="utf-8"; Format="flowed"

    >    Am I being too optimistic in expecting this (mixing and
    > matching matrices and Matrices) to work?  If x is a matrix
    > and m is a Matrix, replacing a commensurately sized
    > sub-matrix of x with m throws "number of items to replace
    > is not a multiple of replacement length" ...

    > x <- matrix(0,nrow=3,ncol=10,
    > dimnames=list(letters[1:3],LETTERS[1:10])) rr <-
    > c("a","b","c") cc <- c("B","C","E") m <-
    > Matrix(matrix(1:9,3,3)) x[rr,cc] <- m

    >     cheers Ben Bolker




    > ------------------------------

    > Message: 20 Date: Wed, 9 Sep 2020 07:03:47 +0100 From: Rui
    > Barradas <ruipbarradas at sapo.pt> To: Ben Bolker
    > <bbolker at gmail.com>, r-devel <r-devel at r-project.org>
    > Subject: Re: [Rd] more Matrix weirdness Message-ID:
    > <7037975c-22b6-6eca-d871-743eead534f2 at sapo.pt>
    > Content-Type: text/plain; charset="utf-8"; Format="flowed"

    > Hello,

    > R 4.0.2 on Ubuntu 20.04, sessionInfo() below.

    > I can reproduce this, sort of. The error I'm getting is
    > different:


    > x[rr, cc] <- m #Error in x[rr, cc] <- m : replacement has
    > length zero

    > But if I check lengths and dimensions, they are
    > identical().

    > identical(length(x[rr, cc]), length(m)) #[1] TRUE
    > identical(dim(x[rr, cc]), dim(m)) #[1] TRUE


    > What works is


    > x[rr, cc] <- as.matrix(m)

    > I ran Ben's code on RStudio 1.3.1073, the following is run
    > with Rscript and the error message is the same.


    > rui at rui:~$ Rscript --vanilla rhelp.R R version 4.0.2
    > (2020-06-22) Platform: x86_64-pc-linux-gnu (64-bit)
    > Running under: Ubuntu 20.04.1 LTS

    > Matrix products: default BLAS:
    > /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 LAPACK:
    > /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0

    > locale: [1] LC_CTYPE=pt_PT.UTF-8 LC_NUMERIC=C [3]
    > LC_TIME=pt_PT.UTF-8 LC_COLLATE=pt_PT.UTF-8 [5]
    > LC_MONETARY=pt_PT.UTF-8 LC_MESSAGES=pt_PT.UTF-8 [7]
    > LC_PAPER=pt_PT.UTF-8 LC_NAME=C [9] LC_ADDRESS=C
    > LC_TELEPHONE=C [11] LC_MEASUREMENT=pt_PT.UTF-8
    > LC_IDENTIFICATION=C

    > attached base packages: [1] stats graphics grDevices utils
    > datasets methods base

    > other attached packages: [1] Matrix_1.2-18

    > loaded via a namespace (and not attached): [1]
    > compiler_4.0.2 grid_4.0.2 lattice_0.20-41 Error in x[rr,
    > cc] <- m : number of items to replace is not a multiple of
    > replacement length Execution halted


    > Hope this helps,

    > Rui Barradas


    > ?s 03:04 de 09/09/20, Ben Bolker escreveu:
    >> ? Am I being too optimistic in expecting this (mixing and
    >> matching matrices and Matrices) to work?? If x is a
    >> matrix and m is a Matrix, replacing a commensurately
    >> sized sub-matrix of x with m throws "number of items to
    >> replace is not a multiple of replacement length" ...
    >> 
    >> x <- matrix(0,nrow=3,ncol=10,
    >> dimnames=list(letters[1:3],LETTERS[1:10])) rr <-
    >> c("a","b","c") cc <- c("B","C","E") m <-
    >> Matrix(matrix(1:9,3,3)) x[rr,cc] <- m
    >> 
    >> ?? cheers ??? Ben Bolker
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel




    > ------------------------------

    > Message: 21 Date: Wed, 9 Sep 2020 08:27:06 +0200 From: Uwe
    > Ligges <ligges at statistik.tu-dortmund.de> To:
    > r-devel at r-project.org Subject: Re: [Rd] failing automatic
    > incoming check Message-ID:
    > <fba137f3-e4c4-316e-47ae-ee11b08bc0c2 at statistik.tu-dortmund.de>
    > Content-Type: text/plain; charset="utf-8"; Format="flowed"



    > On 08.09.2020 21:34, Sebastian P. Luque wrote:
    >> Hello,
    >> 
    >> I got a notification regarding a failure to pass incoming
    >> checks automatically after a CRAN submission.  The
    >> details are given here:
    >> 
    >> https://win-builder.r-project.org/incoming_pretest/diveMove_1.5.0_20200908_191325/
    >> 
    >> The only visible issue is a NOTE from the macosx build,
    >> with the very terse:
    >> 
    >> "No Protocol Specified"
    >> 
    >> My searches suggest this can be ignored, but it would be
    >> nice to squash it.  Any tips welcome.
    >> 


    > For some reason this should hgave undergone manual
    > inpection but got auto rejected. Ideally you would reduce
    > the test timing so that the overall check time is less
    > than 10 min .

    > Best, Uwe Ligges




    > ------------------------------

    > Message: 22 Date: Wed, 9 Sep 2020 16:48:40 +1000 From:
    > Hugh Parsonage <hugh.parsonage at gmail.com> To: Jeroen Ooms
    > <jeroenooms at gmail.com> Cc: Tomas Kalibera
    > <tomas.kalibera at gmail.com>, Luke Tierney
    > <luke-tierney at uiowa.edu>, R-devel <r-devel at r-project.org>,
    > Martin Maechler <maechler at stat.math.ethz.ch> Subject: Re:
    > [Rd] [External] Re: Operations with long altrep vectors
    > cause segfaults on Windows Message-ID:
    > <CAJmOi+PZcdsLRiBca2_r3dj0RmAJcuFT9FCjkMBjJEdFQ98YTQ at mail.gmail.com>
    > Content-Type: text/plain; charset="utf-8"

    > I am unable to set break or use gdb with any success when
    > I use that version.

    > On linux I would do R -d gdb but this gives "unknown
    > option '-d' " while gdb R.exe (in the same directory as
    > the debug version) gives the same output as before.

    > I'm happy to help but I appreciate this list might not be
    > the best place to get a tutorial on using gdb on Windows.

    > On Wed, 9 Sep 2020 at 07:47, Jeroen Ooms
    > <jeroenooms at gmail.com> wrote:
    >> 
    >> On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms
    >> <jeroenooms at gmail.com> wrote:
    >> >
    >> > On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera
    >> <tomas.kalibera at gmail.com> wrote:
    >> > >
    >> > > On 9/8/20 4:48 PM, Hugh Parsonage wrote: > > >
    >> Unfortunately I only get
    >> > > >
    >> > > > [Thread 21752.0x4aa8 exited with code 3221225477] >
    >> > > [Thread 21752.0x4514 exited with code 3221225477] > >
    >> > [Thread 21752.0x3f10 exited with code 3221225477] > > >
    >> [Inferior 1 (process 21752) exited with code
    >> 030000000005]
    >> > > >
    >> > > > (I'm guessing I would need to build an instrumented
    >> version of R, or > > > can R be debugged using gdb with
    >> an off-the-shelf installation?)
    >> > >
    >> > > No, the default build lacks debug symbols. You need a
    >> build with debug > > symbols, and if you can reproduce in
    >> a build without compiler > > optimizations (-O0), the
    >> backtrace may be easier to interpret. Some bugs > >
    >> however "disappear" when optimizations are disabled. You
    >> can build R > > from source (and there may be debug
    >> builds provided by someone else > > (Jeroen?)).
    >> >
    >> > Debug builds for each revision are available from >
    >> https://r-devel.github.io . To download the installer you
    >> need to > click the github icon in the last column in the
    >> table. You need to be > signed in with a (free) Github
    >> account in order to download builds > (artifacts) from
    >> Github actions. It will show download links for both >
    >> the regular installer and installer with debug symbols.
    >> >
    >> > In other news, the https://r-devel.github.io table also
    >> shows that the > fix that martin committed is segfaulting
    >> on 32-bit.
    >> 
    >> Sorry that was inaccurate, it is not segfaulting at all,
    >> but the unit test is raising an error on 32-bit.




    > ------------------------------

    > Message: 23 Date: Wed, 9 Sep 2020 09:03:05 +0200 From:
    > Tomas Kalibera <tomas.kalibera at gmail.com> To: Hugh
    > Parsonage <hugh.parsonage at gmail.com>, Jeroen Ooms
    > <jeroenooms at gmail.com> Cc: Luke Tierney
    > <luke-tierney at uiowa.edu>, R-devel <r-devel at r-project.org>,
    > Martin Maechler <maechler at stat.math.ethz.ch> Subject: Re:
    > [Rd] [External] Re: Operations with long altrep vectors
    > cause segfaults on Windows Message-ID:
    > <3f8e27b4-c6ed-04fe-7878-66d07ddc673f at gmail.com>
    > Content-Type: text/plain; charset="utf-8"; Format="flowed"

    > On 9/9/20 8:48 AM, Hugh Parsonage wrote:
    >> I am unable to set break or use gdb with any success when
    >> I use that version.
    >> 
    >> On linux I would do R -d gdb but this gives "unknown
    >> option '-d' " while gdb R.exe (in the same directory as
    >> the debug version) gives the same output as before.
    >> 
    >> I'm happy to help but I appreciate this list might not be
    >> the best place to get a tutorial on using gdb on Windows.

    > Essentially, the steps are: build with DEBUG=T (to have
    > debug symbols), possibly updating EOPTS in MkRules.local
    > to disable optimizations, then run gdb loading RGui, "set
    > solib-search-path", run RGui from gdb. Then you can break
    > to debugger from RGui menu, or just run the code that
    > segfaults, and you get to gdb and can print the
    > stacktrace, etc. You can find some information in rw-FAQ
    > (R for Windows FAQ), but yes, it is harder than on
    > Linux. We can take care of this report, but of course in
    > the longer term it would help if more people could take
    > their time to setup debugging and analyze bugs even on
    > Windows.

    > Tomas

    >> 
    >> On Wed, 9 Sep 2020 at 07:47, Jeroen Ooms
    >> <jeroenooms at gmail.com> wrote:
    >>> On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms
    >>> <jeroenooms at gmail.com> wrote:
    >>>> On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera
    >>>> <tomas.kalibera at gmail.com> wrote:
    >>>>> On 9/8/20 4:48 PM, Hugh Parsonage wrote:
>>>>> Unfortunately I only get
    >>>>>> 
>>>>> [Thread 21752.0x4aa8 exited with code 3221225477] [Thread 
>>>>> 21752.0x4514 exited with code 3221225477] [Thread 21752.0x3f10 
>>>>> exited with code 3221225477] [Inferior 1 (process 21752) exited 
>>>>> with code 030000000005]
    >>>>>> 
>>>>> (I'm guessing I would need to build an instrumented
    >>>>>> version of R, or
>>>>> can R be debugged using gdb with an off-the-shelf
    >>>>>> installation?)
    >>>>> No, the default build lacks debug symbols. You need a
    >>>>> build with debug symbols, and if you can reproduce in
    >>>>> a build without compiler optimizations (-O0), the
    >>>>> backtrace may be easier to interpret. Some bugs
    >>>>> however "disappear" when optimizations are
    >>>>> disabled. You can build R from source (and there may
    >>>>> be debug builds provided by someone else (Jeroen?)).
    >>>> Debug builds for each revision are available from
    >>>> https://r-devel.github.io . To download the installer
    >>>> you need to click the github icon in the last column in
    >>>> the table. You need to be signed in with a (free)
    >>>> Github account in order to download builds (artifacts)
    >>>> from Github actions. It will show download links for
    >>>> both the regular installer and installer with debug
    >>>> symbols.
    >>>> 
    >>>> In other news, the https://r-devel.github.io table also
    >>>> shows that the fix that martin committed is segfaulting
    >>>> on 32-bit.
    >>> Sorry that was inaccurate, it is not segfaulting at all,
    >>> but the unit test is raising an error on 32-bit.




    > ------------------------------

    > Message: 24 Date: Wed, 9 Sep 2020 17:30:17 +1000 From:
    > Hugh Parsonage <hugh.parsonage at gmail.com> To: Tomas
    > Kalibera <tomas.kalibera at gmail.com> Cc: Jeroen Ooms
    > <jeroenooms at gmail.com>, Luke Tierney
    > <luke-tierney at uiowa.edu>, R-devel <r-devel at r-project.org>,
    > Martin Maechler <maechler at stat.math.ethz.ch> Subject: Re:
    > [Rd] [External] Re: Operations with long altrep vectors
    > cause segfaults on Windows Message-ID:
    > <CAJmOi+MKW_RbxvVOfPDA58aYPzNz8ViKsVa+30ERsjmsV5Je+A at mail.gmail.com>
    > Content-Type: text/plain; charset="utf-8"

    > Thank you!

    > I get

    > Starting program: C:\R\R-devel-20200909\bin\x64\Rgui.exe
    > [New Thread 19940.0x638c] [New Thread 19940.0x102c] [New
    > Thread 19940.0x329c] [New Thread 19940.0x37dc] warning:
    > Invalid parameter passed to C runtime function.

    > Program received signal SIGSEGV, Segmentation fault.
    > 0x000000006c72d206 in compact_intseq_Dataptr
    > (x=0x12783350, writeable=<optimized out>) at
    > altclasses.c:169 169 altclasses.c: No such file or
    > directory.

    > On Wed, 9 Sep 2020 at 17:03, Tomas Kalibera
    > <tomas.kalibera at gmail.com> wrote:
    >> 
    >> On 9/9/20 8:48 AM, Hugh Parsonage wrote: > I am unable to
    >> set break or use gdb with any success when I use that
    >> version.
    >> >
    >> > On linux I would do R -d gdb but this gives "unknown
    >> option '-d' " > while gdb R.exe (in the same directory as
    >> the debug version) gives the > same output as before.
    >> >
    >> > I'm happy to help but I appreciate this list might not
    >> be the best > place to get a tutorial on using gdb on
    >> Windows.
    >> 
    >> Essentially, the steps are: build with DEBUG=T (to have
    >> debug symbols), possibly updating EOPTS in MkRules.local
    >> to disable optimizations, then run gdb loading RGui, "set
    >> solib-search-path", run RGui from gdb. Then you can break
    >> to debugger from RGui menu, or just run the code that
    >> segfaults, and you get to gdb and can print the
    >> stacktrace, etc. You can find some information in rw-FAQ
    >> (R for Windows FAQ), but yes, it is harder than on
    >> Linux. We can take care of this report, but of course in
    >> the longer term it would help if more people could take
    >> their time to setup debugging and analyze bugs even on
    >> Windows.
    >> 
    >> Tomas
    >> 
    >> >
    >> > On Wed, 9 Sep 2020 at 07:47, Jeroen Ooms
    >> <jeroenooms at gmail.com> wrote: >> On Tue, Sep 8, 2020 at
    >> 11:44 PM Jeroen Ooms <jeroenooms at gmail.com> wrote: >>> On
    >> Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera
    >> <tomas.kalibera at gmail.com> wrote: >>>> On 9/8/20 4:48 PM,
    >> Hugh Parsonage wrote: >>>>> Unfortunately I only get
    >> >>>>>
    >> >>>>> [Thread 21752.0x4aa8 exited with code 3221225477]
    >> >>>>> [Thread 21752.0x4514 exited with code 3221225477]
    >> >>>>> [Thread 21752.0x3f10 exited with code 3221225477]
    >> >>>>> [Inferior 1 (process 21752) exited with code
    >> 030000000005]
    >> >>>>>
    >> >>>>> (I'm guessing I would need to build an instrumented
    >> version of R, or >>>>> can R be debugged using gdb with
    >> an off-the-shelf installation?)  >>>> No, the default
    >> build lacks debug symbols. You need a build with debug
    >> >>>> symbols, and if you can reproduce in a build without
    >> compiler >>>> optimizations (-O0), the backtrace may be
    >> easier to interpret. Some bugs >>>> however "disappear"
    >> when optimizations are disabled. You can build R >>>>
    >> from source (and there may be debug builds provided by
    >> someone else >>>> (Jeroen?)).  >>> Debug builds for each
    >> revision are available from >>> https://r-devel.github.io
    >> . To download the installer you need to >>> click the
    >> github icon in the last column in the table. You need to
    >> be >>> signed in with a (free) Github account in order to
    >> download builds >>> (artifacts) from Github actions. It
    >> will show download links for both >>> the regular
    >> installer and installer with debug symbols.
    >> >>>
    >> >>> In other news, the https://r-devel.github.io table
    >> also shows that the >>> fix that martin committed is
    >> segfaulting on 32-bit.  >> Sorry that was inaccurate, it
    >> is not segfaulting at all, but the unit >> test is
    >> raising an error on 32-bit.
    >> 
    >> 




    > ------------------------------

    > Message: 25 Date: Wed, 9 Sep 2020 08:00:41 +0000 From:
    > "Koenker, Roger W" <rkoenker at illinois.edu> To: r-devel
    > <r-devel at r-project.org> Subject: [Rd] Environmental
    > Messaging Message-ID:
    > <6C9F497D-5CEA-4A02-B7AB-490AB4022BB6 at illinois.edu>
    > Content-Type: text/plain; charset="utf-8"

    > What sort of message is this to send to the younger
    > generation?

    >> plastic = 1:5 card = 1:4 board = 1:4
    >> plastic/crossprod(card,board)
    > [1] 0.03333333 0.06666667 0.10000000 0.13333333 0.16666667
    > Warning message: In plastic/crossprod(card, board) :
    > Recycling array of length 1 in vector-array arithmetic is
    > deprecated.  Use c() or as.vector() instead.

    > ok, I can write c(crossprod()) but it is ugly, and
    > environmentally wasteful.  What?s next?  Warnings for my
    > beloved outer(card, board) * board

    > ------------------------------

    > Message: 26 Date: Wed, 9 Sep 2020 10:00:55 +0200 From:
    > Tomas Kalibera <tomas.kalibera at gmail.com> To: Hugh
    > Parsonage <hugh.parsonage at gmail.com> Cc: Jeroen Ooms
    > <jeroenooms at gmail.com>, Luke Tierney
    > <luke-tierney at uiowa.edu>, R-devel <r-devel at r-project.org>,
    > Martin Maechler <maechler at stat.math.ethz.ch> Subject: Re:
    > [Rd] [External] Re: Operations with long altrep vectors
    > cause segfaults on Windows Message-ID:
    > <8383dabf-9093-41ea-2407-8bd75a1009e2 at gmail.com>
    > Content-Type: text/plain; charset="utf-8"; Format="flowed"

    > On 9/9/20 9:30 AM, Hugh Parsonage wrote:
    >> Thank you!
    >> 
    >> I get
    >> 
    >> Starting program: C:\R\R-devel-20200909\bin\x64\Rgui.exe
    >> [New Thread 19940.0x638c] [New Thread 19940.0x102c] [New
    >> Thread 19940.0x329c] [New Thread 19940.0x37dc] warning:
    >> Invalid parameter passed to C runtime function.
    >> 
    >> Program received signal SIGSEGV, Segmentation fault.
    >> 0x000000006c72d206 in compact_intseq_Dataptr
    >> (x=0x12783350, writeable=<optimized out>) at
    >> altclasses.c:169 169 altclasses.c: No such file or
    >> directory.

    > Thanks, would you know which svn version this is?

    > Tomas

    >> 
    >> On Wed, 9 Sep 2020 at 17:03, Tomas Kalibera
    >> <tomas.kalibera at gmail.com> wrote:
    >>> On 9/9/20 8:48 AM, Hugh Parsonage wrote:
    >>>> I am unable to set break or use gdb with any success
    >>>> when I use that version.
    >>>> 
    >>>> On linux I would do R -d gdb but this gives "unknown
    >>>> option '-d' " while gdb R.exe (in the same directory as
    >>>> the debug version) gives the same output as before.
    >>>> 
    >>>> I'm happy to help but I appreciate this list might not
    >>>> be the best place to get a tutorial on using gdb on
    >>>> Windows.
    >>> Essentially, the steps are: build with DEBUG=T (to have
    >>> debug symbols), possibly updating EOPTS in MkRules.local
    >>> to disable optimizations, then run gdb loading RGui,
    >>> "set solib-search-path", run RGui from gdb. Then you can
    >>> break to debugger from RGui menu, or just run the code
    >>> that segfaults, and you get to gdb and can print the
    >>> stacktrace, etc. You can find some information in rw-FAQ
    >>> (R for Windows FAQ), but yes, it is harder than on
    >>> Linux. We can take care of this report, but of course in
    >>> the longer term it would help if more people could take
    >>> their time to setup debugging and analyze bugs even on
    >>> Windows.
    >>> 
    >>> Tomas
    >>> 
    >>>> On Wed, 9 Sep 2020 at 07:47, Jeroen Ooms
    >>>> <jeroenooms at gmail.com> wrote:
    >>>>> On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms
    >>>>> <jeroenooms at gmail.com> wrote:
>>>>> On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera
    >>>>> <tomas.kalibera at gmail.com> wrote:
    >>>>>>> On 9/8/20 4:48 PM, Hugh Parsonage wrote:
    >>>>>>>> Unfortunately I only get
    >>>>>>>> 
    >>>>>>>> [Thread 21752.0x4aa8 exited with code 3221225477]
    >>>>>>>> [Thread 21752.0x4514 exited with code 3221225477]
    >>>>>>>> [Thread 21752.0x3f10 exited with code 3221225477]
    >>>>>>>> [Inferior 1 (process 21752) exited with code
    >>>>>>>> 030000000005]
    >>>>>>>> 
    >>>>>>>> (I'm guessing I would need to build an instrumented
    >>>>>>>> version of R, or can R be debugged using gdb with
    >>>>>>>> an off-the-shelf installation?)
    >>>>>>> No, the default build lacks debug symbols. You need
    >>>>>>> a build with debug symbols, and if you can reproduce
    >>>>>>> in a build without compiler optimizations (-O0), the
    >>>>>>> backtrace may be easier to interpret. Some bugs
    >>>>>>> however "disappear" when optimizations are
    >>>>>>> disabled. You can build R from source (and there may
    >>>>>>> be debug builds provided by someone else (Jeroen?)).
>>>>> Debug builds for each revision are available from 
>>>>> https://r-devel.github.io . To download the installer you
    >>>>>>> need to
>>>>> click the github icon in the last column in the table. You
    >>>>>>> need to be
>>>>> signed in with a (free) Github account in order to
    >>>>>>> download builds
>>>>> (artifacts) from Github actions. It will show download
    >>>>>>> links for both
>>>>> the regular installer and installer with debug symbols.
    >>>>>> 
>>>>> In other news, the https://r-devel.github.io table also
    >>>>>> shows that the
>>>>> fix that martin committed is segfaulting on 32-bit.
    >>>>> Sorry that was inaccurate, it is not segfaulting at
    >>>>> all, but the unit test is raising an error on 32-bit.
    >>> 




    > ------------------------------

    > Message: 27 Date: Wed, 9 Sep 2020 18:32:58 +1000 From:
    > Hugh Parsonage <hugh.parsonage at gmail.com> To: Tomas
    > Kalibera <tomas.kalibera at gmail.com> Cc: Jeroen Ooms
    > <jeroenooms at gmail.com>, Luke Tierney
    > <luke-tierney at uiowa.edu>, R-devel <r-devel at r-project.org>,
    > Martin Maechler <maechler at stat.math.ethz.ch> Subject: Re:
    > [Rd] [External] Re: Operations with long altrep vectors
    > cause segfaults on Windows Message-ID:
    > <CAJmOi+MLyn_WcBLFSQdL9ze4iDzazysPcU7QGOQtWryTod44Yg at mail.gmail.com>
    > Content-Type: text/plain; charset="utf-8"

    > R Under development (unstable) (2020-09-08 r79165)

    > On Wed, 9 Sep 2020 at 18:00, Tomas Kalibera
    > <tomas.kalibera at gmail.com> wrote:
    >> 
    >> On 9/9/20 9:30 AM, Hugh Parsonage wrote: > Thank you!
    >> >
    >> > I get
    >> >
    >> > Starting program:
    >> C:\R\R-devel-20200909\bin\x64\Rgui.exe > [New Thread
    >> 19940.0x638c] > [New Thread 19940.0x102c] > [New Thread
    >> 19940.0x329c] > [New Thread 19940.0x37dc] > warning:
    >> Invalid parameter passed to C runtime function.
    >> >
    >> > Program received signal SIGSEGV, Segmentation fault.  >
    >> 0x000000006c72d206 in compact_intseq_Dataptr
    >> (x=0x12783350, > writeable=<optimized out>) at
    >> altclasses.c:169 > 169 altclasses.c: No such file or
    >> directory.
    >> 
    >> Thanks, would you know which svn version this is?
    >> 
    >> Tomas
    >> 
    >> >
    >> > On Wed, 9 Sep 2020 at 17:03, Tomas Kalibera
    >> <tomas.kalibera at gmail.com> wrote: >> On 9/9/20 8:48 AM,
    >> Hugh Parsonage wrote: >>> I am unable to set break or use
    >> gdb with any success when I use that version.
    >> >>>
    >> >>> On linux I would do R -d gdb but this gives "unknown
    >> option '-d' " >>> while gdb R.exe (in the same directory
    >> as the debug version) gives the >>> same output as
    >> before.
    >> >>>
    >> >>> I'm happy to help but I appreciate this list might
    >> not be the best >>> place to get a tutorial on using gdb
    >> on Windows.  >> Essentially, the steps are: build with
    >> DEBUG=T (to have debug symbols), >> possibly updating
    >> EOPTS in MkRules.local to disable optimizations, then >>
    >> run gdb loading RGui, "set solib-search-path", run RGui
    >> from gdb. Then >> you can break to debugger from RGui
    >> menu, or just run the code that >> segfaults, and you get
    >> to gdb and can print the stacktrace, etc. You can >> find
    >> some information in rw-FAQ (R for Windows FAQ), but yes,
    >> it is >> harder than on Linux. We can take care of this
    >> report, but of course in >> the longer term it would help
    >> if more people could take their time to >> setup
    >> debugging and analyze bugs even on Windows.
    >> >>
    >> >> Tomas
    >> >>
    >> >>> On Wed, 9 Sep 2020 at 07:47, Jeroen Ooms
    >> <jeroenooms at gmail.com> wrote: >>>> On Tue, Sep 8, 2020 at
    >> 11:44 PM Jeroen Ooms <jeroenooms at gmail.com> wrote: >>>>>
    >> On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera
    >> <tomas.kalibera at gmail.com> wrote: >>>>>> On 9/8/20 4:48
    >> PM, Hugh Parsonage wrote: >>>>>>> Unfortunately I only
    >> get
    >> >>>>>>>
    >> >>>>>>> [Thread 21752.0x4aa8 exited with code 3221225477]
    >> >>>>>>> [Thread 21752.0x4514 exited with code 3221225477]
    >> >>>>>>> [Thread 21752.0x3f10 exited with code 3221225477]
    >> >>>>>>> [Inferior 1 (process 21752) exited with code
    >> 030000000005]
    >> >>>>>>>
    >> >>>>>>> (I'm guessing I would need to build an
    >> instrumented version of R, or >>>>>>> can R be debugged
    >> using gdb with an off-the-shelf installation?)  >>>>>>
    >> No, the default build lacks debug symbols. You need a
    >> build with debug >>>>>> symbols, and if you can reproduce
    >> in a build without compiler >>>>>> optimizations (-O0),
    >> the backtrace may be easier to interpret. Some bugs
    >> >>>>>> however "disappear" when optimizations are
    >> disabled. You can build R >>>>>> from source (and there
    >> may be debug builds provided by someone else >>>>>>
    >> (Jeroen?)).  >>>>> Debug builds for each revision are
    >> available from >>>>> https://r-devel.github.io . To
    >> download the installer you need to >>>>> click the github
    >> icon in the last column in the table. You need to be
    >> >>>>> signed in with a (free) Github account in order to
    >> download builds >>>>> (artifacts) from Github actions. It
    >> will show download links for both >>>>> the regular
    >> installer and installer with debug symbols.
    >> >>>>>
    >> >>>>> In other news, the https://r-devel.github.io table
    >> also shows that the >>>>> fix that martin committed is
    >> segfaulting on 32-bit.  >>>> Sorry that was inaccurate,
    >> it is not segfaulting at all, but the unit >>>> test is
    >> raising an error on 32-bit.
    >> >>
    >> 




    > ------------------------------

    > Message: 28 Date: Wed, 9 Sep 2020 10:53:18 +0200 From:
    > Tomas Kalibera <tomas.kalibera at gmail.com> To: Hugh
    > Parsonage <hugh.parsonage at gmail.com> Cc: Jeroen Ooms
    > <jeroenooms at gmail.com>, Luke Tierney
    > <luke-tierney at uiowa.edu>, R-devel <r-devel at r-project.org>,
    > Martin Maechler <maechler at stat.math.ethz.ch> Subject: Re:
    > [Rd] [External] Re: Operations with long altrep vectors
    > cause segfaults on Windows Message-ID:
    > <6b01fb27-ec83-4dea-6478-c344f285083b at gmail.com>
    > Content-Type: text/plain; charset="utf-8"; Format="flowed"

    > Thanks. Should be now fixed in 79169.  Tomas

    > On 9/9/20 10:32 AM, Hugh Parsonage wrote:
    >> R Under development (unstable) (2020-09-08 r79165)
    >> 
    >> On Wed, 9 Sep 2020 at 18:00, Tomas Kalibera
    >> <tomas.kalibera at gmail.com> wrote:
    >>> On 9/9/20 9:30 AM, Hugh Parsonage wrote:
    >>>> Thank you!
    >>>> 
    >>>> I get
    >>>> 
    >>>> Starting program:
    >>>> C:\R\R-devel-20200909\bin\x64\Rgui.exe [New Thread
    >>>> 19940.0x638c] [New Thread 19940.0x102c] [New Thread
    >>>> 19940.0x329c] [New Thread 19940.0x37dc] warning:
    >>>> Invalid parameter passed to C runtime function.
    >>>> 
    >>>> Program received signal SIGSEGV, Segmentation fault.
    >>>> 0x000000006c72d206 in compact_intseq_Dataptr
    >>>> (x=0x12783350, writeable=<optimized out>) at
    >>>> altclasses.c:169 169 altclasses.c: No such file or
    >>>> directory.
    >>> Thanks, would you know which svn version this is?
    >>> 
    >>> Tomas
    >>> 
    >>>> On Wed, 9 Sep 2020 at 17:03, Tomas Kalibera
    >>>> <tomas.kalibera at gmail.com> wrote:
    >>>>> On 9/9/20 8:48 AM, Hugh Parsonage wrote:
>>>>> I am unable to set break or use gdb with any success when
    >>>>> I use that version.
    >>>>>> 
>>>>> On linux I would do R -d gdb but this gives "unknown
    >>>>>> option '-d' "
>>>>> while gdb R.exe (in the same directory as the debug
    >>>>>> version) gives the
>>>>> same output as before.
    >>>>>> 
>>>>> I'm happy to help but I appreciate this list might not be
    >>>>>> the best
>>>>> place to get a tutorial on using gdb on Windows.
    >>>>> Essentially, the steps are: build with DEBUG=T (to
    >>>>> have debug symbols), possibly updating EOPTS in
    >>>>> MkRules.local to disable optimizations, then run gdb
    >>>>> loading RGui, "set solib-search-path", run RGui from
    >>>>> gdb. Then you can break to debugger from RGui menu, or
    >>>>> just run the code that segfaults, and you get to gdb
    >>>>> and can print the stacktrace, etc. You can find some
    >>>>> information in rw-FAQ (R for Windows FAQ), but yes, it
    >>>>> is harder than on Linux. We can take care of this
    >>>>> report, but of course in the longer term it would help
    >>>>> if more people could take their time to setup
    >>>>> debugging and analyze bugs even on Windows.
    >>>>> 
    >>>>> Tomas
    >>>>> 
>>>>> On Wed, 9 Sep 2020 at 07:47, Jeroen Ooms
    >>>>> <jeroenooms at gmail.com> wrote:
    >>>>>>> On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms
    >>>>>>> <jeroenooms at gmail.com> wrote:
    >>>>>>>> On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera
    >>>>>>>> <tomas.kalibera at gmail.com> wrote:
    >>>>>>>>> On 9/8/20 4:48 PM, Hugh Parsonage wrote:
    >>>>>>>>>> Unfortunately I only get
    >>>>>>>>>> 
    >>>>>>>>>> [Thread 21752.0x4aa8 exited with code 3221225477]
    >>>>>>>>>> [Thread 21752.0x4514 exited with code 3221225477]
    >>>>>>>>>> [Thread 21752.0x3f10 exited with code 3221225477]
    >>>>>>>>>> [Inferior 1 (process 21752) exited with code
    >>>>>>>>>> 030000000005]
    >>>>>>>>>> 
    >>>>>>>>>> (I'm guessing I would need to build an
    >>>>>>>>>> instrumented version of R, or can R be debugged
    >>>>>>>>>> using gdb with an off-the-shelf installation?)
    >>>>>>>>> No, the default build lacks debug symbols. You
    >>>>>>>>> need a build with debug symbols, and if you can
    >>>>>>>>> reproduce in a build without compiler
    >>>>>>>>> optimizations (-O0), the backtrace may be easier
    >>>>>>>>> to interpret. Some bugs however "disappear" when
    >>>>>>>>> optimizations are disabled. You can build R from
    >>>>>>>>> source (and there may be debug builds provided by
    >>>>>>>>> someone else (Jeroen?)).
    >>>>>>>> Debug builds for each revision are available from
    >>>>>>>> https://r-devel.github.io . To download the
    >>>>>>>> installer you need to click the github icon in the
    >>>>>>>> last column in the table. You need to be signed in
    >>>>>>>> with a (free) Github account in order to download
    >>>>>>>> builds (artifacts) from Github actions. It will
    >>>>>>>> show download links for both the regular installer
    >>>>>>>> and installer with debug symbols.
    >>>>>>>> 
    >>>>>>>> In other news, the https://r-devel.github.io table
    >>>>>>>> also shows that the fix that martin committed is
    >>>>>>>> segfaulting on 32-bit.
    >>>>>>> Sorry that was inaccurate, it is not segfaulting at
    >>>>>>> all, but the unit test is raising an error on
    >>>>>>> 32-bit.




    > ------------------------------

    > Message: 29 Date: Wed, 9 Sep 2020 11:06:12 +0200 From:
    > Tomas Kalibera <tomas.kalibera at gmail.com> To: Jeroen Ooms
    > <jeroenooms at gmail.com> Cc: Hugh Parsonage
    > <hugh.parsonage at gmail.com>, Luke Tierney
    > <luke-tierney at uiowa.edu>, R-devel <r-devel at r-project.org>,
    > Martin Maechler <maechler at stat.math.ethz.ch> Subject: Re:
    > [Rd] [External] Re: Operations with long altrep vectors
    > cause segfaults on Windows Message-ID:
    > <5fd517e2-ad46-c343-2a63-cda01ff58acc at gmail.com>
    > Content-Type: text/plain; charset="utf-8"; Format="flowed"

    > On 9/8/20 11:47 PM, Jeroen Ooms wrote:
    >> On Tue, Sep 8, 2020 at 11:44 PM Jeroen Ooms
    >> <jeroenooms at gmail.com> wrote:
    >>> On Tue, Sep 8, 2020 at 5:20 PM Tomas Kalibera
    >>> <tomas.kalibera at gmail.com> wrote:
    >>>> On 9/8/20 4:48 PM, Hugh Parsonage wrote:
    >>>>> Unfortunately I only get
    >>>>> 
    >>>>> [Thread 21752.0x4aa8 exited with code 3221225477]
    >>>>> [Thread 21752.0x4514 exited with code 3221225477]
    >>>>> [Thread 21752.0x3f10 exited with code 3221225477]
    >>>>> [Inferior 1 (process 21752) exited with code
    >>>>> 030000000005]
    >>>>> 
    >>>>> (I'm guessing I would need to build an instrumented
    >>>>> version of R, or can R be debugged using gdb with an
    >>>>> off-the-shelf installation?)
    >>>> No, the default build lacks debug symbols. You need a
    >>>> build with debug symbols, and if you can reproduce in a
    >>>> build without compiler optimizations (-O0), the
    >>>> backtrace may be easier to interpret. Some bugs however
    >>>> "disappear" when optimizations are disabled. You can
    >>>> build R from source (and there may be debug builds
    >>>> provided by someone else (Jeroen?)).
    >>> Debug builds for each revision are available from
    >>> https://r-devel.github.io . To download the installer
    >>> you need to click the github icon in the last column in
    >>> the table. You need to be signed in with a (free) Github
    >>> account in order to download builds (artifacts) from
    >>> Github actions. It will show download links for both the
    >>> regular installer and installer with debug symbols.
    >>> 
    >>> In other news, the https://r-devel.github.io table also
    >>> shows that the fix that martin committed is segfaulting
    >>> on 32-bit.
    >> Sorry that was inaccurate, it is not segfaulting at all,
    >> but the unit test is raising an error on 32-bit.

    > Now fixed, the test needs to be run only on 64-bit builds
    > where such long vectors/sequences are allowed.

    > Tomas




    > ------------------------------

    > Subject: Digest Footer

    > _______________________________________________
    > R-devel at r-project.org mailing list DIGESTED
    > https://stat.ethz.ch/mailman/listinfo/r-devel


    > ------------------------------

    > End of R-devel Digest, Vol 211, Issue 7
    > ***************************************
    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel

From georg|@bo@hn@kov @end|ng |rom m@nche@ter@@c@uk  Fri Sep 11 11:18:54 2020
From: georg|@bo@hn@kov @end|ng |rom m@nche@ter@@c@uk (Georgi Boshnakov)
Date: Fri, 11 Sep 2020 09:18:54 +0000
Subject: [Rd] more Matrix weirdness
In-Reply-To: <CAB8pepxxoJV2GJp_CsUee+4gRCw2e=DXb2zfgXbArJ+yxQ6Ahg@mail.gmail.com>
References: <AM0PR0102MB3443F1F91F70197C52FE71ADAE260@AM0PR0102MB3443.eurprd01.prod.exchangelabs.com>
 <24410.8333.102266.856181@stat.math.ethz.ch>
 <CAB8pepxxoJV2GJp_CsUee+4gRCw2e=DXb2zfgXbArJ+yxQ6Ahg@mail.gmail.com>
Message-ID: <AM0PR0102MB344323F157EA05E0A78846CFAE240@AM0PR0102MB3443.eurprd01.prod.exchangelabs.com>

Abby, my answer was too concise. The thrust is that even if you define a method for 
"[<-" with signature x="matrix" and value ="Matrix", for example, it will never be used since "matrix" is S3. 
If instead x="someS4class" then the S4 method will be invoked.

There may be cases when changing the class of the left-hand side make sense (such as one subclass of "Matrix" to another) but certainly not for the base R vector classes.


Georgi Boshnakov


-----Original Message-----
From: Abby Spurdle <spurdle.a at gmail.com> 
Sent: 11 September 2020 03:03
To: Martin Maechler <maechler at stat.math.ethz.ch>
Cc: Georgi Boshnakov <georgi.boshnakov at manchester.ac.uk>; r-devel at r-project.org
Subject: Re: [Rd] more Matrix weirdness

>     > "These operators are also implicit S4 generics, but as
>     > primitives, S4 methods will be dispatched only on S4
>     > objects ?x?."

> Yes, exactly,  very well found, Georgi!

I'm sorry Martin, but I don't understand your point here.

I'm assuming that you want the (S3) matrix, x, to be converted to an
(S4) Matrix.

However, this is not a question of method dispatch, as such.
But rather a question of type conversion (integer to numeric to complex, etc).

Specifically, can/should automatic type conversion, convert an S3 data type to an S4 data type, even where user-defined data types are involved?

From c@@rd|@g@bor @end|ng |rom gm@||@com  Fri Sep 11 15:03:08 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Fri, 11 Sep 2020 14:03:08 +0100
Subject: [Rd] CRAN metadata broken?
Message-ID: <CABtg=Km14dfgaC69J9GA5UJxdGh=Gbd-68fcaDDaO9MpuMayOw@mail.gmail.com>

E.g. in https://cran.r-project.org/bin/macosx/contrib/4.0/PACKAGES there is

Package: stringi
Version: 1.5.3

but there is no such binary at
https://cran.r-project.org/bin/macosx/contrib/4.0/

FYI, G.


From h@w|ckh@m @end|ng |rom gm@||@com  Sat Sep 12 01:06:19 2020
From: h@w|ckh@m @end|ng |rom gm@||@com (Hadley Wickham)
Date: Fri, 11 Sep 2020 18:06:19 -0500
Subject: [Rd] Including full text of open source licenses in a package
Message-ID: <CABdHhvF+daTK6T1f7W3T+6qXpZt1H140ekSh2F5t+f=20=x1gA@mail.gmail.com>

Hi all,

R-exts currently requests that package authors don't include copies of
standard licenses:

> Whereas you should feel free to include a license file in your source distribution, please do
> not arrange to install yet another copy of the GNU COPYING or COPYING.LIB files but
> refer to the copies on https://www.R-project.org/Licenses/ and included in the R distribution
> (in directory share/licenses). Since files named LICENSE or LICENCE will be installed,
> do not use these names for standard license files.

I'd like to request that this condition be removed because it makes it
overly difficult to ensure that every version of your package (source,
tar.gz, binary, and installed) includes the full text of the license.
This is important because most open source licenses explicitly require
that you include the full text of the license. For example, the GPL
faq (http://www.gnu.org/licenses/gpl-faq.html#WhyMustIInclude) states:

> Why does the GPL require including a copy of the GPL with every copy of the program?
> (#WhyMustIInclude)
>
> Including a copy of the license with the work is vital so that everyone who gets a copy of
> the program can know what their rights are.
>
> It might be tempting to include a URL that refers to the license, instead of the license
> itself. But you cannot be sure that the URL will still be valid, five years or ten years from
> now. Twenty years from now, URLs as we know them today may no longer exist.
>
> The only way to make sure that people who have copies of the program will continue
> to be able to see the license, despite all the changes that will happen in the network,
> is to include a copy of the license in the program.

This analysis by an open source lawyer,
https://writing.kemitchell.com/2016/09/21/MIT-License-Line-by-Line.html#notice-condition,
reinforces the same message for the MIT license.

Currently we've been working around this limitation by putting a
markdown version of the license in LICENSE.md and then adding that to
.Rbuildignore (this ensures that the source version on GitHub includes
the license even if the CRAN version does not). Ideally, as well as
allowing us to include full text of licenses in LICENSE or
LICENSE.txt, a LICENSE.md at the top-level of the package would also
be explicitly permitted.

Hadley

-- 
http://hadley.nz


From rorynoo|@n @end|ng |rom gm@||@com  Sat Sep 12 00:35:13 2020
From: rorynoo|@n @end|ng |rom gm@||@com (Rory Nolan)
Date: Fri, 11 Sep 2020 15:35:13 -0700
Subject: [Rd] Garbage collection of seemingly PROTECTed pairlist
Message-ID: <CAFyhwT9LD8_UTRN1r-KGEQAw_RYODLvhwYCRFPxqjDi5dDaMAg@mail.gmail.com>

I want to write an R function using R's C interface that takes a 2-column
matrix of increasing, non-overlapping integer intervals and returns a list
with those intervals plus some added intervals, such that there are no
gaps. For example, it should take the matrix rbind(c(5L, 6L), c(7L, 10L),
c(20L, 30L)) and return list(c(5L, 6L), c(7L, 10L), c(11L, 19L), c(20L,
30L)). Because the output is of variable length, I use a pairlist (because
it is growable) and then I call Rf_PairToVectorList() at the end to make it
into a regular list.

I'm getting a strange garbage collection error. My PROTECTed pairlist prlst
gets garbage collected away and causes a memory leak error when I try to
access it.

Here's my code.

#include <Rinternals.h>


SEXP C_int_mat_nth_row_nrnc(int *int_mat_int, int nr, int nc, int n) {
  SEXP out = PROTECT(Rf_allocVector(INTSXP, nc));
  int *out_int = INTEGER(out);
  if (n <= 0 | n > nr) {
    for (int i = 0; i != nc; ++i) {
      out_int[i] = NA_INTEGER;
    }
  } else {
    for (int i = 0; i != nr; ++i) {
      out_int[i] = int_mat_int[n - 1 + i * nr];
    }
  }
  UNPROTECT(1);
  return out;}

SEXP C_make_len2_int_vec(int first, int second) {
  SEXP out = PROTECT(Rf_allocVector(INTSXP, 2));
  int *out_int = INTEGER(out);
  out_int[0] = first;
  out_int[1] = second;
  UNPROTECT(1);
  return out;}

SEXP C_fullocate(SEXP int_mat) {
  int nr = Rf_nrows(int_mat), *int_mat_int = INTEGER(int_mat);
  int last, row_num;  // row_num will be 1-indexed
  SEXP prlst0cdr = PROTECT(C_int_mat_nth_row_nrnc(int_mat_int, nr, 2, 1));
  SEXP prlst = PROTECT(Rf_list1(prlst0cdr));
  SEXP prlst_tail = prlst;
  last = INTEGER(prlst0cdr)[1];
  row_num = 2;
  while (row_num <= nr) {
    Rprintf("row_num: %i\n", row_num);
    SEXP row = PROTECT(C_int_mat_nth_row_nrnc(int_mat_int, nr, 2, row_num));
    Rf_PrintValue(prlst);  // This is where the error occurs
    int *row_int = INTEGER(row);
    if (row_int[0] == last + 1) {
      Rprintf("here1");
      SEXP next = PROTECT(Rf_list1(row));
      prlst_tail = SETCDR(prlst_tail, next);
      last = row_int[1];
      UNPROTECT(1);
      ++row_num;
    } else {
      Rprintf("here2");
      SEXP next_car = PROTECT(C_make_len2_int_vec(last + 1, row_int[0] - 1));
      SEXP next = PROTECT(Rf_list1(next_car));
      prlst_tail = SETCDR(prlst_tail, next);
      last = row_int[0] - 1;
      UNPROTECT(2);
    }
    UNPROTECT(1);
  }
  SEXP out = PROTECT(Rf_PairToVectorList(prlst));
  UNPROTECT(3);
  return out;}

As you can see, I have some diagnostic print statements in there. The
offending line is line 40, which I have marked with a comment of // This is
where the error occurs. I have a minimal reproducible package at
https://github.com/rorynolan/testpkg and I have run R CMD CHECK with
valgrind using GitHub actions, the results of which are at
https://github.com/rorynolan/testpkg/runs/1076595757?check_suite_focus=true.
That's where I found out which line is causing the error. This function
works as expected sometimes, and then sometimes this issue appears. This
lends weight to the suspicion that it's a garbage collection issue.

I really want to know what my mistake is. I'm not that interested in
alternative implementations; I want to understand the mistake that I'm
making so that I can avoid making it in future.

I have asked the question on stackoverflow to little avail, but the
discussion there may prove helpful.
https://stackoverflow.com/questions/63759604/garbage-collection-of-seemingly-protected-pairlist.



Thanks,

Rory

	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Sat Sep 12 09:22:14 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Sat, 12 Sep 2020 09:22:14 +0200
Subject: [Rd] Garbage collection of seemingly PROTECTed pairlist
In-Reply-To: <CAFyhwT9LD8_UTRN1r-KGEQAw_RYODLvhwYCRFPxqjDi5dDaMAg@mail.gmail.com>
References: <CAFyhwT9LD8_UTRN1r-KGEQAw_RYODLvhwYCRFPxqjDi5dDaMAg@mail.gmail.com>
Message-ID: <B81F5C47-737E-451E-98CF-94708660795B@gmail.com>

Hm, I'm getting rusty on my C skills, but you repeatedly use a pattern like

>  while (row_num <= nr) {
>    Rprintf("row_num: %i\n", row_num);
>    SEXP row = PROTECT(C_int_mat_nth_row_nrnc(int_mat_int, nr, 2, row_num));

I wonder if there is a subtle difference between assignments and initialized declarations.

I.e. would it help to write it as

>  while (row_num <= nr) {
    SEXP row;
    Rprintf("row_num: %i\n", row_num);
    row = PROTECT(C_int_mat_nth_row_nrnc(int_mat_int, nr, 2, row_num));

?

-pd

> On 12 Sep 2020, at 00:35 , Rory Nolan <rorynoolan at gmail.com> wrote:
> 
> I want to write an R function using R's C interface that takes a 2-column
> matrix of increasing, non-overlapping integer intervals and returns a list
> with those intervals plus some added intervals, such that there are no
> gaps. For example, it should take the matrix rbind(c(5L, 6L), c(7L, 10L),
> c(20L, 30L)) and return list(c(5L, 6L), c(7L, 10L), c(11L, 19L), c(20L,
> 30L)). Because the output is of variable length, I use a pairlist (because
> it is growable) and then I call Rf_PairToVectorList() at the end to make it
> into a regular list.
> 
> I'm getting a strange garbage collection error. My PROTECTed pairlist prlst
> gets garbage collected away and causes a memory leak error when I try to
> access it.
> 
> Here's my code.
> 
> #include <Rinternals.h>
> 
> 
> SEXP C_int_mat_nth_row_nrnc(int *int_mat_int, int nr, int nc, int n) {
>  SEXP out = PROTECT(Rf_allocVector(INTSXP, nc));
>  int *out_int = INTEGER(out);
>  if (n <= 0 | n > nr) {
>    for (int i = 0; i != nc; ++i) {
>      out_int[i] = NA_INTEGER;
>    }
>  } else {
>    for (int i = 0; i != nr; ++i) {
>      out_int[i] = int_mat_int[n - 1 + i * nr];
>    }
>  }
>  UNPROTECT(1);
>  return out;}
> 
> SEXP C_make_len2_int_vec(int first, int second) {
>  SEXP out = PROTECT(Rf_allocVector(INTSXP, 2));
>  int *out_int = INTEGER(out);
>  out_int[0] = first;
>  out_int[1] = second;
>  UNPROTECT(1);
>  return out;}
> 
> SEXP C_fullocate(SEXP int_mat) {
>  int nr = Rf_nrows(int_mat), *int_mat_int = INTEGER(int_mat);
>  int last, row_num;  // row_num will be 1-indexed
>  SEXP prlst0cdr = PROTECT(C_int_mat_nth_row_nrnc(int_mat_int, nr, 2, 1));
>  SEXP prlst = PROTECT(Rf_list1(prlst0cdr));
>  SEXP prlst_tail = prlst;
>  last = INTEGER(prlst0cdr)[1];
>  row_num = 2;
>  while (row_num <= nr) {
>    Rprintf("row_num: %i\n", row_num);
>    SEXP row = PROTECT(C_int_mat_nth_row_nrnc(int_mat_int, nr, 2, row_num));
>    Rf_PrintValue(prlst);  // This is where the error occurs
>    int *row_int = INTEGER(row);
>    if (row_int[0] == last + 1) {
>      Rprintf("here1");
>      SEXP next = PROTECT(Rf_list1(row));
>      prlst_tail = SETCDR(prlst_tail, next);
>      last = row_int[1];
>      UNPROTECT(1);
>      ++row_num;
>    } else {
>      Rprintf("here2");
>      SEXP next_car = PROTECT(C_make_len2_int_vec(last + 1, row_int[0] - 1));
>      SEXP next = PROTECT(Rf_list1(next_car));
>      prlst_tail = SETCDR(prlst_tail, next);
>      last = row_int[0] - 1;
>      UNPROTECT(2);
>    }
>    UNPROTECT(1);
>  }
>  SEXP out = PROTECT(Rf_PairToVectorList(prlst));
>  UNPROTECT(3);
>  return out;}
> 
> As you can see, I have some diagnostic print statements in there. The
> offending line is line 40, which I have marked with a comment of // This is
> where the error occurs. I have a minimal reproducible package at
> https://github.com/rorynolan/testpkg and I have run R CMD CHECK with
> valgrind using GitHub actions, the results of which are at
> https://github.com/rorynolan/testpkg/runs/1076595757?check_suite_focus=true.
> That's where I found out which line is causing the error. This function
> works as expected sometimes, and then sometimes this issue appears. This
> lends weight to the suspicion that it's a garbage collection issue.
> 
> I really want to know what my mistake is. I'm not that interested in
> alternative implementations; I want to understand the mistake that I'm
> making so that I can avoid making it in future.
> 
> I have asked the question on stackoverflow to little avail, but the
> discussion there may prove helpful.
> https://stackoverflow.com/questions/63759604/garbage-collection-of-seemingly-protected-pairlist.
> 
> 
> 
> Thanks,
> 
> Rory
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From @purd|e@@ @end|ng |rom gm@||@com  Sat Sep 12 10:56:12 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Sat, 12 Sep 2020 20:56:12 +1200
Subject: [Rd] Including full text of open source licenses in a package
In-Reply-To: <CABdHhvF+daTK6T1f7W3T+6qXpZt1H140ekSh2F5t+f=20=x1gA@mail.gmail.com>
References: <CABdHhvF+daTK6T1f7W3T+6qXpZt1H140ekSh2F5t+f=20=x1gA@mail.gmail.com>
Message-ID: <CAB8pepwQnua6ZpXRXcNz7gfRrkoWe6buGwx7YwypWJpVQYE9Lg@mail.gmail.com>

> > Including a copy of the license with the work is vital

Hmmm...
Agree.

Just for context:
CRAN has a history of being exceptionally useful and efficient.
In general, I don't support suggestions to change their submission policies.


From hugh@p@r@on@ge @end|ng |rom gm@||@com  Sat Sep 12 11:38:58 2020
From: hugh@p@r@on@ge @end|ng |rom gm@||@com (Hugh Parsonage)
Date: Sat, 12 Sep 2020 19:38:58 +1000
Subject: [Rd] Including full text of open source licenses in a package
In-Reply-To: <CABdHhvF+daTK6T1f7W3T+6qXpZt1H140ekSh2F5t+f=20=x1gA@mail.gmail.com>
References: <CABdHhvF+daTK6T1f7W3T+6qXpZt1H140ekSh2F5t+f=20=x1gA@mail.gmail.com>
Message-ID: <CAJmOi+OGeQZR1HCAYTPSqTaWiAbXwY7=zz67YC98d1oMqCMBYA@mail.gmail.com>

Perhaps I have misread that excerpt from WRE, but my read is that
package authors should not duplicate GNU COPYING, since it is present
in all R distributions already when using GPL-2 and friends.  It
doesn't apply to packages distributed with other licenses.

It should be noted that in GPL FAQ just below the part you quoted it says
> A clear statement in the program's README file is legally sufficient as long as that accompanies the code, but it is easy for them to get separated.




On Sat, 12 Sep 2020 at 09:06, Hadley Wickham <h.wickham at gmail.com> wrote:
>
> Hi all,
>
> R-exts currently requests that package authors don't include copies of
> standard licenses:
>
> > Whereas you should feel free to include a license file in your source distribution, please do
> > not arrange to install yet another copy of the GNU COPYING or COPYING.LIB files but
> > refer to the copies on https://www.R-project.org/Licenses/ and included in the R distribution
> > (in directory share/licenses). Since files named LICENSE or LICENCE will be installed,
> > do not use these names for standard license files.
>
> I'd like to request that this condition be removed because it makes it
> overly difficult to ensure that every version of your package (source,
> tar.gz, binary, and installed) includes the full text of the license.
> This is important because most open source licenses explicitly require
> that you include the full text of the license. For example, the GPL
> faq (http://www.gnu.org/licenses/gpl-faq.html#WhyMustIInclude) states:
>
> > Why does the GPL require including a copy of the GPL with every copy of the program?
> > (#WhyMustIInclude)
> >
> > Including a copy of the license with the work is vital so that everyone who gets a copy of
> > the program can know what their rights are.
> >
> > It might be tempting to include a URL that refers to the license, instead of the license
> > itself. But you cannot be sure that the URL will still be valid, five years or ten years from
> > now. Twenty years from now, URLs as we know them today may no longer exist.
> >
> > The only way to make sure that people who have copies of the program will continue
> > to be able to see the license, despite all the changes that will happen in the network,
> > is to include a copy of the license in the program.
>
> This analysis by an open source lawyer,
> https://writing.kemitchell.com/2016/09/21/MIT-License-Line-by-Line.html#notice-condition,
> reinforces the same message for the MIT license.
>
> Currently we've been working around this limitation by putting a
> markdown version of the license in LICENSE.md and then adding that to
> .Rbuildignore (this ensures that the source version on GitHub includes
> the license even if the CRAN version does not). Ideally, as well as
> allowing us to include full text of licenses in LICENSE or
> LICENSE.txt, a LICENSE.md at the top-level of the package would also
> be explicitly permitted.
>
> Hadley
>
> --
> http://hadley.nz
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From |uc@r @end|ng |rom |edor@project@org  Sat Sep 12 13:16:44 2020
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Sat, 12 Sep 2020 13:16:44 +0200
Subject: [Rd] Garbage collection of seemingly PROTECTed pairlist
In-Reply-To: <CAFyhwT9LD8_UTRN1r-KGEQAw_RYODLvhwYCRFPxqjDi5dDaMAg@mail.gmail.com>
References: <CAFyhwT9LD8_UTRN1r-KGEQAw_RYODLvhwYCRFPxqjDi5dDaMAg@mail.gmail.com>
Message-ID: <CALEXWq01VwaVxK0Jvep8HZTbxtPAQX5wx0RMtQLjDdYyH0KO9Q@mail.gmail.com>

Hi,

In line 5, you are allocating a vector of length nc. Then, in line 12, you
are using nr as a limit, so if nr goes beyond nc, which is happening in
line 39, you are in trouble.

I?aki

On Sat, 12 Sep 2020 at 03:30, Rory Nolan <rorynoolan at gmail.com> wrote:

> I want to write an R function using R's C interface that takes a 2-column
> matrix of increasing, non-overlapping integer intervals and returns a list
> with those intervals plus some added intervals, such that there are no
> gaps. For example, it should take the matrix rbind(c(5L, 6L), c(7L, 10L),
> c(20L, 30L)) and return list(c(5L, 6L), c(7L, 10L), c(11L, 19L), c(20L,
> 30L)). Because the output is of variable length, I use a pairlist (because
> it is growable) and then I call Rf_PairToVectorList() at the end to make it
> into a regular list.
>
> I'm getting a strange garbage collection error. My PROTECTed pairlist prlst
> gets garbage collected away and causes a memory leak error when I try to
> access it.
>
> Here's my code.
>
> #include <Rinternals.h>
>
>
> SEXP C_int_mat_nth_row_nrnc(int *int_mat_int, int nr, int nc, int n) {
>   SEXP out = PROTECT(Rf_allocVector(INTSXP, nc));
>   int *out_int = INTEGER(out);
>   if (n <= 0 | n > nr) {
>     for (int i = 0; i != nc; ++i) {
>       out_int[i] = NA_INTEGER;
>     }
>   } else {
>     for (int i = 0; i != nr; ++i) {
>       out_int[i] = int_mat_int[n - 1 + i * nr];
>     }
>   }
>   UNPROTECT(1);
>   return out;}
>
> SEXP C_make_len2_int_vec(int first, int second) {
>   SEXP out = PROTECT(Rf_allocVector(INTSXP, 2));
>   int *out_int = INTEGER(out);
>   out_int[0] = first;
>   out_int[1] = second;
>   UNPROTECT(1);
>   return out;}
>
> SEXP C_fullocate(SEXP int_mat) {
>   int nr = Rf_nrows(int_mat), *int_mat_int = INTEGER(int_mat);
>   int last, row_num;  // row_num will be 1-indexed
>   SEXP prlst0cdr = PROTECT(C_int_mat_nth_row_nrnc(int_mat_int, nr, 2, 1));
>   SEXP prlst = PROTECT(Rf_list1(prlst0cdr));
>   SEXP prlst_tail = prlst;
>   last = INTEGER(prlst0cdr)[1];
>   row_num = 2;
>   while (row_num <= nr) {
>     Rprintf("row_num: %i\n", row_num);
>     SEXP row = PROTECT(C_int_mat_nth_row_nrnc(int_mat_int, nr, 2,
> row_num));
>     Rf_PrintValue(prlst);  // This is where the error occurs
>     int *row_int = INTEGER(row);
>     if (row_int[0] == last + 1) {
>       Rprintf("here1");
>       SEXP next = PROTECT(Rf_list1(row));
>       prlst_tail = SETCDR(prlst_tail, next);
>       last = row_int[1];
>       UNPROTECT(1);
>       ++row_num;
>     } else {
>       Rprintf("here2");
>       SEXP next_car = PROTECT(C_make_len2_int_vec(last + 1, row_int[0] -
> 1));
>       SEXP next = PROTECT(Rf_list1(next_car));
>       prlst_tail = SETCDR(prlst_tail, next);
>       last = row_int[0] - 1;
>       UNPROTECT(2);
>     }
>     UNPROTECT(1);
>   }
>   SEXP out = PROTECT(Rf_PairToVectorList(prlst));
>   UNPROTECT(3);
>   return out;}
>
> As you can see, I have some diagnostic print statements in there. The
> offending line is line 40, which I have marked with a comment of // This is
> where the error occurs. I have a minimal reproducible package at
> https://github.com/rorynolan/testpkg and I have run R CMD CHECK with
> valgrind using GitHub actions, the results of which are at
> https://github.com/rorynolan/testpkg/runs/1076595757?check_suite_focus=true
> .
> That's where I found out which line is causing the error. This function
> works as expected sometimes, and then sometimes this issue appears. This
> lends weight to the suspicion that it's a garbage collection issue.
>
> I really want to know what my mistake is. I'm not that interested in
> alternative implementations; I want to understand the mistake that I'm
> making so that I can avoid making it in future.
>
> I have asked the question on stackoverflow to little avail, but the
> discussion there may prove helpful.
>
> https://stackoverflow.com/questions/63759604/garbage-collection-of-seemingly-protected-pairlist
> .
>
>
>
> Thanks,
>
> Rory
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 
I?aki ?car

	[[alternative HTML version deleted]]


From h@w|ckh@m @end|ng |rom gm@||@com  Sat Sep 12 15:07:11 2020
From: h@w|ckh@m @end|ng |rom gm@||@com (Hadley Wickham)
Date: Sat, 12 Sep 2020 08:07:11 -0500
Subject: [Rd] Including full text of open source licenses in a package
In-Reply-To: <CAJmOi+OGeQZR1HCAYTPSqTaWiAbXwY7=zz67YC98d1oMqCMBYA@mail.gmail.com>
References: <CABdHhvF+daTK6T1f7W3T+6qXpZt1H140ekSh2F5t+f=20=x1gA@mail.gmail.com>
 <CAJmOi+OGeQZR1HCAYTPSqTaWiAbXwY7=zz67YC98d1oMqCMBYA@mail.gmail.com>
Message-ID: <CABdHhvGcsz7g0ZB+spe7XHmU8gRJC8yf73OQf-Q06J2A0Xnk1Q@mail.gmail.com>

On Saturday, September 12, 2020, Hugh Parsonage <hugh.parsonage at gmail.com>
wrote:

> Perhaps I have misread that excerpt from WRE, but my read is that
> package authors should not duplicate GNU COPYING, since it is present
> in all R distributions already when using GPL-2 and friends.  It
> doesn't apply to packages distributed with other licenses.
>
>
The directory to which it refers, https://www.r-project.org/Licenses/,
includes many open source licenses, not just those used for R. I?m also
pretty sure I?ve had a package fail CRAN submission for this problem in the
past.


> It should be noted that in GPL FAQ just below the part you quoted it says
> > A clear statement in the program's README file is legally sufficient as
> long as that accompanies the code, but it is easy for them to get separated.
>

That question (https://www.gnu.org/licenses/gpl-faq.en.html#LicenseCopyOnly) is
about whether a copy of the license in a file is sufficient, or whether you
must also include a statement at the top of every source file.

Hadley


-- 
http://hadley.nz

	[[alternative HTML version deleted]]


From rorynoo|@n @end|ng |rom gm@||@com  Sat Sep 12 19:19:41 2020
From: rorynoo|@n @end|ng |rom gm@||@com (Rory Nolan)
Date: Sat, 12 Sep 2020 10:19:41 -0700
Subject: [Rd] Garbage collection of seemingly PROTECTed pairlist
In-Reply-To: <CALEXWq01VwaVxK0Jvep8HZTbxtPAQX5wx0RMtQLjDdYyH0KO9Q@mail.gmail.com>
References: <CAFyhwT9LD8_UTRN1r-KGEQAw_RYODLvhwYCRFPxqjDi5dDaMAg@mail.gmail.com>
 <CALEXWq01VwaVxK0Jvep8HZTbxtPAQX5wx0RMtQLjDdYyH0KO9Q@mail.gmail.com>
Message-ID: <F7CB92A8-5AF6-4FA6-A01D-BC397118A8A3@gmail.com>

I?aki is right. This solves it. 
Kudos to Martin Morgan too for paring down my reprex; I wasn?t aware of the method with R CMD SHLIB that he kindly described. 
Thanks also to Peter Dalgaard for having a crack at it. Very grateful to you all.

> On 12 Sep 2020, at 04:16, I?aki Ucar <iucar at fedoraproject.org> wrote:
> 
> Hi,
> 
> In line 5, you are allocating a vector of length nc. Then, in line 12, you are using nr as a limit, so if nr goes beyond nc, which is happening in line 39, you are in trouble.
> 
> I?aki
> 
> On Sat, 12 Sep 2020 at 03:30, Rory Nolan <rorynoolan at gmail.com <mailto:rorynoolan at gmail.com>> wrote:
> I want to write an R function using R's C interface that takes a 2-column
> matrix of increasing, non-overlapping integer intervals and returns a list
> with those intervals plus some added intervals, such that there are no
> gaps. For example, it should take the matrix rbind(c(5L, 6L), c(7L, 10L),
> c(20L, 30L)) and return list(c(5L, 6L), c(7L, 10L), c(11L, 19L), c(20L,
> 30L)). Because the output is of variable length, I use a pairlist (because
> it is growable) and then I call Rf_PairToVectorList() at the end to make it
> into a regular list.
> 
> I'm getting a strange garbage collection error. My PROTECTed pairlist prlst
> gets garbage collected away and causes a memory leak error when I try to
> access it.
> 
> Here's my code.
> 
> #include <Rinternals.h>
> 
> 
> SEXP C_int_mat_nth_row_nrnc(int *int_mat_int, int nr, int nc, int n) {
>   SEXP out = PROTECT(Rf_allocVector(INTSXP, nc));
>   int *out_int = INTEGER(out);
>   if (n <= 0 | n > nr) {
>     for (int i = 0; i != nc; ++i) {
>       out_int[i] = NA_INTEGER;
>     }
>   } else {
>     for (int i = 0; i != nr; ++i) {
>       out_int[i] = int_mat_int[n - 1 + i * nr];
>     }
>   }
>   UNPROTECT(1);
>   return out;}
> 
> SEXP C_make_len2_int_vec(int first, int second) {
>   SEXP out = PROTECT(Rf_allocVector(INTSXP, 2));
>   int *out_int = INTEGER(out);
>   out_int[0] = first;
>   out_int[1] = second;
>   UNPROTECT(1);
>   return out;}
> 
> SEXP C_fullocate(SEXP int_mat) {
>   int nr = Rf_nrows(int_mat), *int_mat_int = INTEGER(int_mat);
>   int last, row_num;  // row_num will be 1-indexed
>   SEXP prlst0cdr = PROTECT(C_int_mat_nth_row_nrnc(int_mat_int, nr, 2, 1));
>   SEXP prlst = PROTECT(Rf_list1(prlst0cdr));
>   SEXP prlst_tail = prlst;
>   last = INTEGER(prlst0cdr)[1];
>   row_num = 2;
>   while (row_num <= nr) {
>     Rprintf("row_num: %i\n", row_num);
>     SEXP row = PROTECT(C_int_mat_nth_row_nrnc(int_mat_int, nr, 2, row_num));
>     Rf_PrintValue(prlst);  // This is where the error occurs
>     int *row_int = INTEGER(row);
>     if (row_int[0] == last + 1) {
>       Rprintf("here1");
>       SEXP next = PROTECT(Rf_list1(row));
>       prlst_tail = SETCDR(prlst_tail, next);
>       last = row_int[1];
>       UNPROTECT(1);
>       ++row_num;
>     } else {
>       Rprintf("here2");
>       SEXP next_car = PROTECT(C_make_len2_int_vec(last + 1, row_int[0] - 1));
>       SEXP next = PROTECT(Rf_list1(next_car));
>       prlst_tail = SETCDR(prlst_tail, next);
>       last = row_int[0] - 1;
>       UNPROTECT(2);
>     }
>     UNPROTECT(1);
>   }
>   SEXP out = PROTECT(Rf_PairToVectorList(prlst));
>   UNPROTECT(3);
>   return out;}
> 
> As you can see, I have some diagnostic print statements in there. The
> offending line is line 40, which I have marked with a comment of // This is
> where the error occurs. I have a minimal reproducible package at
> https://github.com/rorynolan/testpkg <https://github.com/rorynolan/testpkg> and I have run R CMD CHECK with
> valgrind using GitHub actions, the results of which are at
> https://github.com/rorynolan/testpkg/runs/1076595757?check_suite_focus=true <https://github.com/rorynolan/testpkg/runs/1076595757?check_suite_focus=true>.
> That's where I found out which line is causing the error. This function
> works as expected sometimes, and then sometimes this issue appears. This
> lends weight to the suspicion that it's a garbage collection issue.
> 
> I really want to know what my mistake is. I'm not that interested in
> alternative implementations; I want to understand the mistake that I'm
> making so that I can avoid making it in future.
> 
> I have asked the question on stackoverflow to little avail, but the
> discussion there may prove helpful.
> https://stackoverflow.com/questions/63759604/garbage-collection-of-seemingly-protected-pairlist <https://stackoverflow.com/questions/63759604/garbage-collection-of-seemingly-protected-pairlist>.
> 
> 
> 
> Thanks,
> 
> Rory
> 
>         [[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel <https://stat.ethz.ch/mailman/listinfo/r-devel>
> 
> 
> -- 
> I?aki ?car


	[[alternative HTML version deleted]]


From mtmorg@n@b|oc @end|ng |rom gm@||@com  Sat Sep 12 12:44:14 2020
From: mtmorg@n@b|oc @end|ng |rom gm@||@com (Martin Morgan)
Date: Sat, 12 Sep 2020 10:44:14 +0000
Subject: [Rd] Garbage collection of seemingly PROTECTed pairlist
In-Reply-To: <CAFyhwT9LD8_UTRN1r-KGEQAw_RYODLvhwYCRFPxqjDi5dDaMAg@mail.gmail.com>
References: <CAFyhwT9LD8_UTRN1r-KGEQAw_RYODLvhwYCRFPxqjDi5dDaMAg@mail.gmail.com>
Message-ID: <BL0PR04MB66090A33BFD50A366D55D3B8F9250@BL0PR04MB6609.namprd04.prod.outlook.com>

I put your code into a file tmp.R and eliminated the need for a package by compiling this to a shared object

  R CMD SHLIB tmp.c

I'm then able to use a simple script 'tmp.R'

  dyn.load("/tmp/tmp.so")

  fullocate <- function(int_mat)
    .Call("C_fullocate", int_mat)

  int_mat <- rbind(c(5L, 6L), c(7L, 10L), c(20L, 30L))

  while(TRUE)
    res <- fullocate(int_mat)

to generate a segfault.

Looking at your code, it seemed like I could get towards a simpler reproducible example by eliminating most of the 'while' loop and then functions and code branches that are not used

  #include <Rinternals.h>
  
  SEXP C_int_mat_nth_row_nrnc(int *int_mat_int, int nr, int nc, int n) {
      SEXP out = PROTECT(Rf_allocVector(INTSXP, nc));
      int *out_int = INTEGER(out);
      for (int i = 0; i != nr; ++i) {
         out_int[i] = int_mat_int[n - 1 + i * nr];
      }
      UNPROTECT(1);
      return out;}
  
  SEXP C_fullocate(SEXP int_mat) {
      int nr = Rf_nrows(int_mat), *int_mat_int = INTEGER(int_mat);
      int row_num = 2;  // row_num will be 1-indexed
      SEXP prlst0cdr = PROTECT(C_int_mat_nth_row_nrnc(int_mat_int, nr, 2, 1));
      SEXP prlst = PROTECT(Rf_list1(prlst0cdr));
      SEXP row = PROTECT(C_int_mat_nth_row_nrnc(int_mat_int, nr, 2, row_num));
      Rf_PrintValue(prlst);  // This is where the error occurs
      UNPROTECT(3);
  
      return R_NilValue;
  }
  
my script still gives an error, but not a segfault, and the values printed sometimes differ between calls

...

[[1]]
[1] 5 6

.
[[1]]
NULL

...

Error in FUN(X[[i]], ...) :
  cannot coerce type 'NULL' to vector of type 'character'
Calls: message -> .makeMessage -> lapply
Execution halted

The differing values in particular, and the limited PROTECTion in the call and small allocations (hence limited need / opportunity for garbage collection), suggest that you're corrupting memory, rather than having a problem with garbage collection. Indeed,

        SEXP prlst0cdr = PROTECT(C_int_mat_nth_row_nrnc(int_mat_int, nr, 2, 1));

allocates a vector of length 2 at

        SEXP out = PROTECT(Rf_allocVector(INTSXP, nc));

but writes three elements (the 0th, 1st, and 2nd) at

          for (int i = 0; i != nr; ++i) {
              out_int[i] = int_mat_int[n - 1 + i * nr];
          }

Martin Morgan

?On 9/11/20, 9:30 PM, "R-devel on behalf of Rory Nolan" <r-devel-bounces at r-project.org on behalf of rorynoolan at gmail.com> wrote:

    I want to write an R function using R's C interface that takes a 2-column
    matrix of increasing, non-overlapping integer intervals and returns a list
    with those intervals plus some added intervals, such that there are no
    gaps. For example, it should take the matrix rbind(c(5L, 6L), c(7L, 10L),
    c(20L, 30L)) and return list(c(5L, 6L), c(7L, 10L), c(11L, 19L), c(20L,
    30L)). Because the output is of variable length, I use a pairlist (because
    it is growable) and then I call Rf_PairToVectorList() at the end to make it
    into a regular list.

    I'm getting a strange garbage collection error. My PROTECTed pairlist prlst
    gets garbage collected away and causes a memory leak error when I try to
    access it.

    Here's my code.

    #include <Rinternals.h>


    SEXP C_int_mat_nth_row_nrnc(int *int_mat_int, int nr, int nc, int n) {
      SEXP out = PROTECT(Rf_allocVector(INTSXP, nc));
      int *out_int = INTEGER(out);
      if (n <= 0 | n > nr) {
        for (int i = 0; i != nc; ++i) {
          out_int[i] = NA_INTEGER;
        }
      } else {
        for (int i = 0; i != nr; ++i) {
          out_int[i] = int_mat_int[n - 1 + i * nr];
        }
      }
      UNPROTECT(1);
      return out;}

    SEXP C_make_len2_int_vec(int first, int second) {
      SEXP out = PROTECT(Rf_allocVector(INTSXP, 2));
      int *out_int = INTEGER(out);
      out_int[0] = first;
      out_int[1] = second;
      UNPROTECT(1);
      return out;}

    SEXP C_fullocate(SEXP int_mat) {
      int nr = Rf_nrows(int_mat), *int_mat_int = INTEGER(int_mat);
      int last, row_num;  // row_num will be 1-indexed
      SEXP prlst0cdr = PROTECT(C_int_mat_nth_row_nrnc(int_mat_int, nr, 2, 1));
      SEXP prlst = PROTECT(Rf_list1(prlst0cdr));
      SEXP prlst_tail = prlst;
      last = INTEGER(prlst0cdr)[1];
      row_num = 2;
      while (row_num <= nr) {
        Rprintf("row_num: %i\n", row_num);
        SEXP row = PROTECT(C_int_mat_nth_row_nrnc(int_mat_int, nr, 2, row_num));
        Rf_PrintValue(prlst);  // This is where the error occurs
        int *row_int = INTEGER(row);
        if (row_int[0] == last + 1) {
          Rprintf("here1");
          SEXP next = PROTECT(Rf_list1(row));
          prlst_tail = SETCDR(prlst_tail, next);
          last = row_int[1];
          UNPROTECT(1);
          ++row_num;
        } else {
          Rprintf("here2");
          SEXP next_car = PROTECT(C_make_len2_int_vec(last + 1, row_int[0] - 1));
          SEXP next = PROTECT(Rf_list1(next_car));
          prlst_tail = SETCDR(prlst_tail, next);
          last = row_int[0] - 1;
          UNPROTECT(2);
        }
        UNPROTECT(1);
      }
      SEXP out = PROTECT(Rf_PairToVectorList(prlst));
      UNPROTECT(3);
      return out;}

    As you can see, I have some diagnostic print statements in there. The
    offending line is line 40, which I have marked with a comment of // This is
    where the error occurs. I have a minimal reproducible package at
    https://github.com/rorynolan/testpkg and I have run R CMD CHECK with
    valgrind using GitHub actions, the results of which are at
    https://github.com/rorynolan/testpkg/runs/1076595757?check_suite_focus=true.
    That's where I found out which line is causing the error. This function
    works as expected sometimes, and then sometimes this issue appears. This
    lends weight to the suspicion that it's a garbage collection issue.

    I really want to know what my mistake is. I'm not that interested in
    alternative implementations; I want to understand the mistake that I'm
    making so that I can avoid making it in future.

    I have asked the question on stackoverflow to little avail, but the
    discussion there may prove helpful.
    https://stackoverflow.com/questions/63759604/garbage-collection-of-seemingly-protected-pairlist.



    Thanks,

    Rory

    	[[alternative HTML version deleted]]

    ______________________________________________
    R-devel at r-project.org mailing list
    https://stat.ethz.ch/mailman/listinfo/r-devel

From @g|@nner|n| @end|ng |rom gm@||@com  Sat Sep 12 11:11:34 2020
From: @g|@nner|n| @end|ng |rom gm@||@com (Simone Giannerini)
Date: Sat, 12 Sep 2020 11:11:34 +0200
Subject: [Rd] parRapply and parCapply return a list in corner cases
In-Reply-To: <CANcXGiyXS77MhXG0ekCRiEs=DQgaUojxjsCVgezDj5UBReJiQA@mail.gmail.com>
References: <CANcXGiyXS77MhXG0ekCRiEs=DQgaUojxjsCVgezDj5UBReJiQA@mail.gmail.com>
Message-ID: <CANcXGizDFC+XJG=V-KFyWCZB5P9qmg_2GMO_b_T9e+ihMhRk4w-1792@mail.gmail.com>


For the record: I filed a bug report here

https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17807

and this is a more polished minimal example

   library(parallel)
   nslaves <- 2
   cl      <- makeCluster(nslaves)
  X       <- matrix(c(1,0,1),1,3)
    res <- parCapply(cl,X,FUN=function(x){
        y <- x[1]
        if(y==1){
            out <- y
        }else{
            out <- double(0)
        }
        return(out)
    })

> res
[[1]]
[1] 1

[[2]]
numeric(0)

[[3]]
[1] 1

Simone


On Mon, May 18, 2020 at 5:23 PM Simone Giannerini <sgiannerini at gmail.com> wrote:
>
> According to ?parCapply:
>
> parRapply and parCapply always return a vector.
>
> This appears not to be the case in the following minimal reproducible example:
>
> >     library(parallel)
> >     nslaves <- 2
> >     cl      <- makeCluster(nslaves)
> >     X       <- matrix(2,nrow=3,ncol=4)
> >     X       <- rbind(c(1,1,0,1),X)
> >     tv <- parCapply(cl,X,FUN=function(x){
> +         ind <- x[1]
> +         y   <- x[-1]
> +         if(ind==1){
> +             r1 <- sum(y)
> +         }else{
> +             r1 <- logical(0)
> +         }
> +         return(unlist(as.numeric(c(ind,r1))))
> +     })
> > tv
> [[1]]
> [1] 1
>
> [[2]]
> [1] 6
>
> [[3]]
> [1] 1
>
> [[4]]
> [1] 6
>
> [[5]]
> [1] 0
>
> [[6]]
> [1] 1 6
>
> > class(tv)
> [1] "list"
> > sessionInfo()
> R version 4.0.0 (2020-04-24)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 18363)
>
> Matrix products: default
>
> locale:
> [1] LC_COLLATE=Italian_Italy.1252  LC_CTYPE=Italian_Italy.1252
> [3] LC_MONETARY=Italian_Italy.1252 LC_NUMERIC=C
> [5] LC_TIME=Italian_Italy.1252
>
> attached base packages:
> [1] parallel  stats     graphics  grDevices utils     datasets
> methods   base
>
> loaded via a namespace (and not attached):
> [1] compiler_4.0.0
>
> --
> _________________________________________________________________
>
> PHILOSOPHICAL TRANSACTIONS OF THE ROYAL SOCIETY A
> Theme issue ?DNA as information?
> edited by Julyan H.E. Cartwright, Simone Giannerini and Diego L. Gonz?lez
> _________________________________________________________________
>
> Simone Giannerini
> Dipartimento di Scienze Statistiche "Paolo Fortunati"
> Universita' di Bologna
> Via delle belle arti 41 - 40126  Bologna,  ITALY
> Tel: +39 051 2098262  Fax: +39 051 232153
> https://www.unibo.it/sitoweb/simone.giannerini/
> ______________________________________________________



-- 
___________________________________________________

Simone Giannerini
Dipartimento di Scienze Statistiche "Paolo Fortunati"
Universita' di Bologna
Via delle belle arti 41 - 40126  Bologna,  ITALY
Tel: +39 051 2098262  Fax: +39 051 232153
https://simonegiannerini.net/


From @zwj|08 @end|ng |rom gm@||@com  Sun Sep 13 13:11:58 2020
From: @zwj|08 @end|ng |rom gm@||@com (Jiefei Wang)
Date: Sun, 13 Sep 2020 19:11:58 +0800
Subject: [Rd] Thread-safe R functions
Message-ID: <CAGiFhPOH1ky6fSJ-J23hMD815KvMXWaNifgrhHVsd=+svS1VFA-8789@mail.gmail.com>

Hi,

I am curious about whether there exist thread-safe functions in
`Rinternals.h`.  I know that R is single-threaded designed, but for the
simple and straightforward functions like `DATAPTR` and `INTEGER_GET_REGION`,
are these functions safe to call in a multi-thread environment?

Best,
Jiefei

	[[alternative HTML version deleted]]


From iuke-tier@ey m@iii@g oii uiow@@edu  Sun Sep 13 15:48:49 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Sun, 13 Sep 2020 08:48:49 -0500 (CDT)
Subject: [Rd] [External]  Thread-safe R functions
In-Reply-To: <CAGiFhPOH1ky6fSJ-J23hMD815KvMXWaNifgrhHVsd=+svS1VFA-8789@mail.gmail.com>
References: <CAGiFhPOH1ky6fSJ-J23hMD815KvMXWaNifgrhHVsd=+svS1VFA-8789@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2009130844520.3141@luke-Latitude-7480>

You should assume that NO functions or macros in the R API are
thread-safe.  If some happen to be now, on some platforms, they are
not guaranteed to be in the future. Even if you use a global lock you
need to keep in mind that any function in the R API can signal an
error and execute a longjmp, so you need to make sure you have set a
top level context in your thread.

Best,

luke

On Sun, 13 Sep 2020, Jiefei Wang wrote:

> Hi,
>
> I am curious about whether there exist thread-safe functions in
> `Rinternals.h`.  I know that R is single-threaded designed, but for the
> simple and straightforward functions like `DATAPTR` and `INTEGER_GET_REGION`,
> are these functions safe to call in a multi-thread environment?
>
> Best,
> Jiefei
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From g@bembecker @end|ng |rom gm@||@com  Mon Sep 14 00:08:26 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Sun, 13 Sep 2020 15:08:26 -0700
Subject: [Rd] [External] Thread-safe R functions
In-Reply-To: <alpine.DEB.2.21.2009130844520.3141@luke-Latitude-7480>
References: <CAGiFhPOH1ky6fSJ-J23hMD815KvMXWaNifgrhHVsd=+svS1VFA-8789@mail.gmail.com>
 <alpine.DEB.2.21.2009130844520.3141@luke-Latitude-7480>
Message-ID: <CAD4oTHGfLELbLURwfWJiFZBe+mAEVsowQwme7vVD=xBOWE111Q@mail.gmail.com>

Jiefei,

Beyond the general response that Luke gave, to be a bit more specific to
what you said, DATAPTR and INTEGER_GET_REGION involve ALTREP method
execution (for ALTREP objects, obviously) so even they are not as simple
and straightforward as they were a couple years ago. They should not (any
longer) be thought of as being guaranteed to be essentially bare metal data
retrieval from memory.

Best,
~G

On Sun, Sep 13, 2020 at 6:49 AM <luke-tierney at uiowa.edu> wrote:

> You should assume that NO functions or macros in the R API are
> thread-safe.  If some happen to be now, on some platforms, they are
> not guaranteed to be in the future. Even if you use a global lock you
> need to keep in mind that any function in the R API can signal an
> error and execute a longjmp, so you need to make sure you have set a
> top level context in your thread.
>
> Best,
>
> luke
>
> On Sun, 13 Sep 2020, Jiefei Wang wrote:
>
> > Hi,
> >
> > I am curious about whether there exist thread-safe functions in
> > `Rinternals.h`.  I know that R is single-threaded designed, but for the
> > simple and straightforward functions like `DATAPTR` and
> `INTEGER_GET_REGION`,
> > are these functions safe to call in a multi-thread environment?

>
> > Best,
> > Jiefei
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


