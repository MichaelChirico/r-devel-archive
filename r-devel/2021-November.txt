From pd@|gd @end|ng |rom gm@||@com  Mon Nov  1 09:35:49 2021
From: pd@|gd @end|ng |rom gm@||@com (Peter Dalgaard)
Date: Mon, 1 Nov 2021 09:35:49 +0100
Subject: [Rd] R 4.1.2 is released
Message-ID: <C893C950-C99E-4931-9481-095FB0115737@gmail.com>

The build system rolled up R-4.1.2.tar.gz (codename "Bird Hippie") this morning.

The list below details the changes in this release. 

You can get the source code from

https://cran.r-project.org/src/base/R-4/R-4.1.2.tar.gz

or wait for it to be mirrored at a CRAN site nearer to you.

Binaries for various platforms will appear in due course.


For the R Core Team,

Peter Dalgaard

These are the checksums (md5 and SHA-256) for the freshly created files, in case you wish
to check that they are uncorrupted:

MD5 (AUTHORS) = 320967884b547734d6279dedbc739dd4
MD5 (COPYING) = eb723b61539feef013de476e68b5c50a
MD5 (COPYING.LIB) = a6f89e2100d9b6cdffcea4f398e37343
MD5 (FAQ) = ade6a3d38fe5e6a456929cae2b94d568
MD5 (INSTALL) = 7893f754308ca31f1ccf62055090ad7b
MD5 (NEWS) = 924e68decbf327f538a09afb1838506b
MD5 (NEWS.0) = bfcd7c147251b5474d96848c6f57e5a8
MD5 (NEWS.1) = eb78c4d053ec9c32b815cf0c2ebea801
MD5 (NEWS.2) = a767f7809324c73c49eaff47d14bce81
MD5 (NEWS.3) = e55ed2c8a547b827b46e08eb7137ba23
MD5 (R-latest.tar.gz) = 6e28db9d02c6d3dae51a149b8e261ab1
MD5 (README) = f468f281c919665e276a1b691decbbe6
MD5 (RESOURCES) = a79b9b338cab09bd665f6b62ac6f455b
MD5 (THANKS) = 251d20510bfc3cc93b82c5a99f7efcc6
MD5 (VERSION-INFO.dcf) = a72a49578a254b9163f0f10322a3eecc
MD5 (R-4/R-4.1.2.tar.gz) = 6e28db9d02c6d3dae51a149b8e261ab1

60a0d150e6fc1f424be76ad7b645d236b56e747692a4679f81ce6536c550e949  AUTHORS
e6d6a009505e345fe949e1310334fcb0747f28dae2856759de102ab66b722cb4  COPYING
6095e9ffa777dd22839f7801aa845b31c9ed07f3d6bf8a26dc5d2dec8ccc0ef3  COPYING.LIB
e84c67931e9b925abb9142d4a6b4ef03b7605948bbf384d7e3d2401823c7f1fe  FAQ
f87461be6cbaecc4dce44ac58e5bd52364b0491ccdadaf846cb9b452e9550f31  INSTALL
73d5bfb8711bb7833ce8fe7a1359566d48001d13cd32affbd800d759f0b3232a  NEWS
4e21b62f515b749f80997063fceab626d7258c7d650e81a662ba8e0640f12f62  NEWS.0
12b30c724117b1b2b11484673906a6dcd48a361f69fc420b36194f9218692d01  NEWS.1
ba74618bc3f4c0e336dca13d472402a1863d12ba6f7f91a1782bc469ee986f6d  NEWS.2
1910a2405300b9bc7c76beeb0753a5249cf799afe175ce28f8d782fab723e012  NEWS.3
2036225e9f7207d4ce097e54972aecdaa8b40d7d9911cd26491fac5a0fab38af  R-latest.tar.gz
2fdd3e90f23f32692d4b3a0c0452f2c219a10882033d1774f8cadf25886c3ddc  README
8b7d3856100220f4555d4d57140829f2e81c27eccec5b441f5dce616e9ec9061  RESOURCES
c9c7cb32308b4e560a22c858819ade9de524a602abd4e92d1c328c89f8037d73  THANKS
1e74ef089b526538bbb658dc189bc3d34d931839e9933415fb2f267fd57b0b69  VERSION-INFO.dcf
2036225e9f7207d4ce097e54972aecdaa8b40d7d9911cd26491fac5a0fab38af  R-4/R-4.1.2.tar.gz

This is the relevant part of the NEWS file

CHANGES IN R 4.1.2:

  C-LEVEL FACILITIES:

    * The workaround in headers R.h and Rmath.h (using namespace std;)
      for the Oracle Developer Studio compiler is no longer needed now
      C++11 is required so has been removed.  A couple more usages of
      log() (which should have been std::log()) with an int argument
      are reported on Solaris.

    * The undocumented limit of 4095 bytes on messages from the
      S-compatibility macros PROBLEM and MESSAGE is now documented and
      longer messages will be silently truncated rather than
      potentially causing segfaults.

    * If the R_NO_SEGV_HANDLER environment variable is non-empty, the
      signal handler for SEGV/ILL/BUS signals (which offers recovery
      user interface) is not set. This allows more reliable debugging
      of crashes that involve the console.

  DEPRECATED AND DEFUNCT:

    * The legacy S-compatibility macros PROBLEM, MESSAGE, ERROR, WARN,
      WARNING, RECOVER, ... are deprecated and will be hidden in R
      4.2.0. R's native interface of Rf_error and Rf_warning has long
      been preferred.

  BUG FIXES:

    * .mapply(F, dots, .) no longer segfaults when dots is not a list
      and uses match.fun(F) as always documented; reported by Andrew
      Simmons in PR#18164.

    * hist(<Date>, ...) and hist(<POSIXt>, ...)  no longer pass
      arguments for rect() (such as col and density) to axis().
      (Thanks to Sebastian Meyer's PR#18171.)

    * \Sexpr{ch} now preserves Encoding(ch). (Thanks to report and
      patch by Jeroen Ooms in PR#18152.)

    * Setting the RNG to "Marsaglia-Multicarry" e.g., by RNGkind(), now
      warns in more places, thanks to Andr'e Gillibert's report and
      patch in PR#18168.

    * gray(numeric(), alpha=1/2) no longer segfaults, fixing PR#18183,
      reported by Till Krenz.

    * Fixed dnbinom(x, size=<very_small>, .., log=TRUE) regression,
      reported by Martin Morgan.

    * as.Date.POSIXlt(x) now keeps names(x), thanks to Davis Vaughan's
      report and patch in PR#18188.

    * model.response() now strips an "AsIs" class typically, thanks to
      Duncan Murdoch's report and other discussants in PR#18190.

    * try() is considerably faster in case of an error and long call,
      as e.g., from some do.call().  Thanks to Alexander Kaever's
      suggestion posted to R-devel.

    * qqline(y = <object>) such as y=I(.), now works, see also
      PR#18190.

    * Non-integer mgp par() settings are now handled correctly in
      axis() and mtext(), thanks to Mikael Jagan and Duncan Murdoch's
      report and suggestion in PR#18194.

    * formatC(x) returns length zero character() now, rather than ""
      when x is of length zero, as documented, thanks to Davis
      Vaughan's post to R-devel.

    * removeSource(fn) now retains (other) attributes(fn).

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Nov  1 11:36:17 2021
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 1 Nov 2021 06:36:17 -0400
Subject: [Rd] Wrong number of names?
Message-ID: <3b0ce089-f83b-3f58-93b4-51922178f4c1@stats.uwo.ca>

The StackOverflow post https://stackoverflow.com/a/69767361/2554330 
discusses a dataframe which has a named numeric column of length 1488 
that has 744 names. I don't think this is ever legal, but am I wrong 
about that?

The `dat.rds` file mentioned in the post is temporarily available online 
in case anyone else wants to examine it.

Assuming that the file contains a badly formed object, I wonder if 
readRDS() should do some sanity checks as it reads.

Duncan Murdoch


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Nov  1 14:10:08 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 1 Nov 2021 14:10:08 +0100
Subject: [Rd] Wrong number of names?
In-Reply-To: <3b0ce089-f83b-3f58-93b4-51922178f4c1@stats.uwo.ca>
References: <3b0ce089-f83b-3f58-93b4-51922178f4c1@stats.uwo.ca>
Message-ID: <24959.59184.879532.448761@stat.math.ethz.ch>

>>>>> Duncan Murdoch 
>>>>>     on Mon, 1 Nov 2021 06:36:17 -0400 writes:

    > The StackOverflow post
    > https://stackoverflow.com/a/69767361/2554330 discusses a
    > dataframe which has a named numeric column of length 1488
    > that has 744 names. I don't think this is ever legal, but
    > am I wrong about that?

    > The `dat.rds` file mentioned in the post is temporarily
    > available online in case anyone else wants to examine it.

    > Assuming that the file contains a badly formed object, I
    > wonder if readRDS() should do some sanity checks as it
    > reads.

    > Duncan Murdoch

Good question.

In the mean time, I've also added a bit on the SO page
above.. e.g.

---------------------------------------------------------------------------

d <- readRDS("<.....>dat.rds")
str(d)
## 'data.frame':	1488 obs. of  4 variables:
##  $ facet_var: chr  "AUT" "AUT" "AUT" "AUT" ...
##  $ date     : Date, format: "2020-04-26" "2020-04-27" ...
##  $ variable : Factor w/ 2 levels "arima","prophet": 1 1 1 1 1 1 1 1 1 1 ...
##  $ score    : Named num  2.74e-06 2.41e-06 2.48e-06 2.39e-06 2.79e-06 ...
##   ..- attr(*, "names")= chr [1:744] "new_confirmed10" "new_confirmed10" "new_confirmed10" "new_confirmed10" ...

ds <- d$score
c(length(ds), length(names(ds)))
## 1488   744

dput(ds) # -> 

##  *** caught segfault ***
## address (nil), cause 'memory not mapped'

---------------------------------------------------------------------------

Hence  "proving" that the dat.rds  really contains an invalid object,
when simple  dput(.) directly gives a segmentation fault.

I think we are aware that using C code and say .Call(..)  one
can create all kinds of invalid objects "easily".. and I think
it's clear that it's not feasible to check for validity of such
objects "everwhere".

Your proposal to have at least our deserialization code used in
readRDS() do (at least *some*) validity checks seems good, but
maybe we should think of more cases, and / or  do such validity
checks already during serialization { <-> saveRDS() here } ?

.. Such questions then really are for those who understand more than
me about (de)serialization in R, its performance bottlenecks etc.
Given the speed impact we should probably have such checks *optional*
but have them *on* by default e.g., at least for saveRDS() ?

Martin


From pd@|gd @end|ng |rom gm@||@com  Mon Nov  1 15:55:15 2021
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Mon, 1 Nov 2021 15:55:15 +0100
Subject: [Rd] Wrong number of names?
In-Reply-To: <3b0ce089-f83b-3f58-93b4-51922178f4c1@stats.uwo.ca>
References: <3b0ce089-f83b-3f58-93b4-51922178f4c1@stats.uwo.ca>
Message-ID: <D8FC0C8F-77F4-40D2-AD46-54DBA99E7749@gmail.com>



> On 1 Nov 2021, at 11:36 , Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> 
> The StackOverflow post https://stackoverflow.com/a/69767361/2554330 discusses a dataframe which has a named numeric column of length 1488 that has 744 names. I don't think this is ever legal, but am I wrong about that?
> 

It is certainly not easy to create such objects at the R level, e.g.:

> x <- 1:10 
> names(x) <- 1:10 
> length(names(x)) <- 5
> x
   1    2    3    4    5 <NA> <NA> <NA> <NA> <NA> 
   1    2    3    4    5    6    7    8    9   10 
> names(x)
 [1] "1" "2" "3" "4" "5" NA  NA  NA  NA  NA 

or even

> x <- 1:10 
> attributes(x)$foo <- 1:5
> x
 [1]  1  2  3  4  5  6  7  8  9 10
attr(,"foo")
[1] 1 2 3 4 5
> names(attributes(x)) <- "names"
> x
   1    2    3    4    5 <NA> <NA> <NA> <NA> <NA> 
   1    2    3    4    5    6    7    8    9   10 
> dput(x)
structure(1:10, .Names = c("1", "2", "3", "4", "5", NA, NA, NA, 
NA, NA))

of course, at the C level, everything is possible...




> The `dat.rds` file mentioned in the post is temporarily available online in case anyone else wants to examine it.
> 
> Assuming that the file contains a badly formed object, I wonder if readRDS() should do some sanity checks as it reads.
> 
> Duncan Murdoch
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Nov  1 16:31:54 2021
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 1 Nov 2021 11:31:54 -0400
Subject: [Rd] Wrong number of names?
In-Reply-To: <24959.59184.879532.448761@stat.math.ethz.ch>
References: <3b0ce089-f83b-3f58-93b4-51922178f4c1@stats.uwo.ca>
 <24959.59184.879532.448761@stat.math.ethz.ch>
Message-ID: <52632258-82f4-ee95-1121-7d0867689070@gmail.com>

On 01/11/2021 9:10 a.m., Martin Maechler wrote:
>>>>>> Duncan Murdoch
>>>>>>      on Mon, 1 Nov 2021 06:36:17 -0400 writes:
> 
>      > The StackOverflow post
>      > https://stackoverflow.com/a/69767361/2554330 discusses a
>      > dataframe which has a named numeric column of length 1488
>      > that has 744 names. I don't think this is ever legal, but
>      > am I wrong about that?
> 
>      > The `dat.rds` file mentioned in the post is temporarily
>      > available online in case anyone else wants to examine it.
> 
>      > Assuming that the file contains a badly formed object, I
>      > wonder if readRDS() should do some sanity checks as it
>      > reads.
> 
>      > Duncan Murdoch
> 
> Good question.
> 
> In the mean time, I've also added a bit on the SO page
> above.. e.g.
> 
> ---------------------------------------------------------------------------
> 
> d <- readRDS("<.....>dat.rds")
> str(d)
> ## 'data.frame':	1488 obs. of  4 variables:
> ##  $ facet_var: chr  "AUT" "AUT" "AUT" "AUT" ...
> ##  $ date     : Date, format: "2020-04-26" "2020-04-27" ...
> ##  $ variable : Factor w/ 2 levels "arima","prophet": 1 1 1 1 1 1 1 1 1 1 ...
> ##  $ score    : Named num  2.74e-06 2.41e-06 2.48e-06 2.39e-06 2.79e-06 ...
> ##   ..- attr(*, "names")= chr [1:744] "new_confirmed10" "new_confirmed10" "new_confirmed10" "new_confirmed10" ...
> 
> ds <- d$score
> c(length(ds), length(names(ds)))
> ## 1488   744
> 
> dput(ds) # ->
> 
> ##  *** caught segfault ***
> ## address (nil), cause 'memory not mapped'
> 
> ---------------------------------------------------------------------------
> 
> Hence  "proving" that the dat.rds  really contains an invalid object,
> when simple  dput(.) directly gives a segmentation fault.
> 
> I think we are aware that using C code and say .Call(..)  one
> can create all kinds of invalid objects "easily".. and I think
> it's clear that it's not feasible to check for validity of such
> objects "everwhere".
> 
> Your proposal to have at least our deserialization code used in
> readRDS() do (at least *some*) validity checks seems good, but
> maybe we should think of more cases, and / or  do such validity
> checks already during serialization { <-> saveRDS() here } ?
> 
> .. Such questions then really are for those who understand more than
> me about (de)serialization in R, its performance bottlenecks etc.
> Given the speed impact we should probably have such checks *optional*
> but have them *on* by default e.g., at least for saveRDS() ?

It might make sense to start with a contributed package.  It could 
include lots of checks without worrying about how expensive they are; if 
some of them prove to be cost-effective, they could be moved into base 
functions.

Duncan Murdoch


From je|| @end|ng |rom vtke||er@@com  Tue Nov  2 00:45:32 2021
From: je|| @end|ng |rom vtke||er@@com (Jeff Keller)
Date: Mon, 1 Nov 2021 19:45:32 -0400 (EDT)
Subject: [Rd] parallel PSOCK connection latency is greater on Linux?
In-Reply-To: <CALEXWq0QnKiKyVNqfx9zCtpVLRomrygFcEDPvaOaQNnx-8jBsQ@mail.gmail.com>
References: <JQG4JQ.RSMMA5AL6E0M3@vtkellers.com>
 <6B25B60C-EF8D-4CAF-856F-E948C27BD5CA@R-project.org>
 <CALEXWq3SXK5_=JTQ3ZfXN+upU=NLrMaqZdzzCuXBumMmyvVDMg@mail.gmail.com>
 <7486JQ.F60K6EHKGCP02@vtkellers.com>
 <6867535C-28A7-4F14-A703-6028EC46513F@r-project.org>
 <CALEXWq0QnKiKyVNqfx9zCtpVLRomrygFcEDPvaOaQNnx-8jBsQ@mail.gmail.com>
Message-ID: <402481886.602574.1635810332917@privateemail.com>

Hi Simon,

I see there may have been some changes to address the TCP_NODELAY issue on Linux in https://github.com/wch/r-source/commit/82369f73fc297981e64cac8c9a696d05116f0797.

I gave this a try with R 4.1.1, but I still see a 40ms compute floor. Am I misunderstanding these changes or how socketOptions is intended to be used?

-Jeff

library(parallel)
library(microbenchmark)
options(socketOptions = "no-delay")
cl <- makeCluster(1)
(x <- microbenchmark(clusterEvalQ(cl, iris), times = 100, unit = "us"))
# Unit: microseconds
#                   expr  min       lq     mean   median       uq     max neval
# clusterEvalQ(cl, iris) 96.9 43986.73 40535.93 43999.59 44012.79 48046.6   100

> On 11/04/2020 5:41 AM I?aki Ucar <iucar at fedoraproject.org> wrote:
> 
>  
> Please, check a tcpdump session on localhost while running the following script:
> 
> library(parallel)
> library(tictoc)
> cl <- makeCluster(1)
> Sys.sleep(1)
> 
> for (i in 1:10) {
>   tic()
>   x <- clusterEvalQ(cl, iris)
>   toc()
> }
> 
> The initialization phase comprises 7 packets. Then, the 1-second sleep
> will help you see where the evaluation starts. Each clusterEvalQ
> generates 6 packets:
> 
> 1. main -> worker PSH, ACK 1026 bytes
> 2. worker -> main ACK 66 bytes
> 3. worker -> main PSH, ACK 3758 bytes
> 4. main -> worker ACK 66 bytes
> 5. worker -> main PSH, ACK 2484 bytes
> 6. main -> worker ACK 66 bytes
> 
> The first two are the command and its ACK, the following are the data
> back and their ACKs. In the first 4-5 iterations, I see no delay at
> all. Then, in the following iterations, a 40 ms delay starts to happen
> between packets 3 and 4, that is: the main process delays the ACK to
> the first packet of the incoming result.
> 
> So I'd say Nagle is hardly to blame for this. It would be interesting
> to see how many packets are generated with TCP_NODELAY on. If there
> are still 6 packets, then we are fine. If we suddenly see a gazillion
> packets, then TCP_NODELAY does more harm than good. On the other hand,
> TCP_QUICKACK would surely solve the issue without any drawback. As
> Nagle himself put it once, "set TCP_QUICKACK. If you find a case where
> that makes things worse, let me know."
> 
> I?aki
> 
> On Wed, 4 Nov 2020 at 04:34, Simon Urbanek <simon.urbanek at r-project.org> wrote:
> >
> > I'm not sure the user would know ;). This is very system-specific issue just because the Linux network stack behaves so differently from other OSes (for purely historical reasons). That makes it hard to abstract as a "feature" for the R sockets that are supposed to be platform-independent. At least TCP_NODELAY is actually part of POSIX so it is on better footing, and disabling delayed ACK is practically only useful to work around the other side having Nagle on, so I would expect it to be rarely used.
> >
> > This is essentially RFC since we don't have a mechanism for socket options (well, almost, there is timeout and blocking already...) and I don't think we want to expose low-level details so perhaps one idea would be to add something like delay=NA to socketConnection() in order to not touch (NA), enable (TRUE) or disable (FALSE) TCP_NODELAY. I wonder if there is any other way we could infer the intention of the user to try to choose the right approach...
> >
> > Cheers,
> > Simon
> >
> >
> > > On Nov 3, 2020, at 02:28, Jeff <jeff at vtkellers.com> wrote:
> > >
> > > Could TCP_NODELAY and TCP_QUICKACK be exposed to the R user so that they might determine what is best for their potentially latency- or throughput-sensitive application?
> > >
> > > Best,
> > > Jeff
> > >
> > > On Mon, Nov 2, 2020 at 14:05, I?aki Ucar <iucar at fedoraproject.org> wrote:
> > >> On Mon, 2 Nov 2020 at 02:22, Simon Urbanek <simon.urbanek at r-project.org> wrote:
> > >>> It looks like R sockets on Linux could do with TCP_NODELAY -- without (status quo):
> > >> How many network packets are generated with and without it? If there
> > >> are many small writes and thus setting TCP_NODELAY causes many small
> > >> packets to be sent, it might make more sense to set TCP_QUICKACK
> > >> instead.
> > >> I?aki
> > >>> Unit: microseconds
> > >>>                    expr      min       lq     mean  median       uq      max
> > >>>  clusterEvalQ(cl, iris) 1449.997 43991.99 43975.21 43997.1 44001.91 48027.83
> > >>>  neval
> > >>>   1000
> > >>> exactly the same machine + R but with TCP_NODELAY enabled in R_SockConnect():
> > >>> Unit: microseconds
> > >>>                    expr     min     lq     mean  median      uq      max neval
> > >>>  clusterEvalQ(cl, iris) 156.125 166.41 180.8806 170.247 174.298 5322.234  1000
> > >>> Cheers,
> > >>> Simon
> > >>> > On 2/11/2020, at 3:39 AM, Jeff <jeff at vtkellers.com> wrote:
> > >>> >
> > >>> > I'm exploring latency overhead of parallel PSOCK workers and noticed that serializing/unserializing data back to the main R session is significantly slower on Linux than it is on Windows/MacOS with similar hardware. Is there a reason for this difference and is there a way to avoid the apparent additional Linux overhead?
> > >>> >
> > >>> > I attempted to isolate the behavior with a test that simply returns an existing object from the worker back to the main R session.
> > >>> >
> > >>> > library(parallel)
> > >>> > library(microbenchmark)
> > >>> > gcinfo(TRUE)
> > >>> > cl <- makeCluster(1)
> > >>> > (x <- microbenchmark(clusterEvalQ(cl, iris), times = 1000, unit = "us"))
> > >>> > plot(x$time, ylab = "microseconds")
> > >>> > head(x$time, n = 10)
> > >>> >
> > >>> > On Windows/MacOS, the test runs in 300-500 microseconds depending on hardware. A few of the 1000 runs are an order of magnitude slower but this can probably be attributed to garbage collection on the worker.
> > >>> >
> > >>> > On Linux, the first 5 or so executions run at comparable speeds but all subsequent executions are two orders of magnitude slower (~40 milliseconds).
> > >>> >
> > >>> > I see this behavior across various platforms and hardware combinations:
> > >>> >
> > >>> > Ubuntu 18.04 (Intel Xeon Platinum 8259CL)
> > >>> > Linux Mint 19.3 (AMD Ryzen 7 1800X)
> > >>> > Linux Mint 20 (AMD Ryzen 7 3700X)
> > >>> > Windows 10 (AMD Ryzen 7 4800H)
> > >>> > MacOS 10.15.7 (Intel Core i7-8850H)
> > >>> >
> > >>> > ______________________________________________
> > >>> > R-devel at r-project.org mailing list
> > >>> > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >>> >
> > >>> ______________________________________________
> > >>> R-devel at r-project.org mailing list
> > >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> > >> --
> > >> I?aki ?car
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> >
> 
> 
> -- 
> I?aki ?car


From g@bembecker @end|ng |rom gm@||@com  Tue Nov  2 01:55:45 2021
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Mon, 1 Nov 2021 17:55:45 -0700
Subject: [Rd] parallel PSOCK connection latency is greater on Linux?
In-Reply-To: <402481886.602574.1635810332917@privateemail.com>
References: <JQG4JQ.RSMMA5AL6E0M3@vtkellers.com>
 <6B25B60C-EF8D-4CAF-856F-E948C27BD5CA@R-project.org>
 <CALEXWq3SXK5_=JTQ3ZfXN+upU=NLrMaqZdzzCuXBumMmyvVDMg@mail.gmail.com>
 <7486JQ.F60K6EHKGCP02@vtkellers.com>
 <6867535C-28A7-4F14-A703-6028EC46513F@r-project.org>
 <CALEXWq0QnKiKyVNqfx9zCtpVLRomrygFcEDPvaOaQNnx-8jBsQ@mail.gmail.com>
 <402481886.602574.1635810332917@privateemail.com>
Message-ID: <CAD4oTHFy0Mkmt4TCD+Yj_VZuEiOo742qAYZN4gs=Vuxg2XQuow@mail.gmail.com>

Jeff,

Perhaps I'm just missing something here, but ms is generally milliseconds,
not microseconds (which are much smaller), right?

Also, this seems to just be how long it takes to roundtrip serialize iris
(in 4.1.0  on mac osx, as thats what I have handy right this moment):

> microbenchmark({x <- unserialize(serialize(iris, connection = NULL))})

Unit: microseconds

                                                         expr    min      lq

 {     x <- unserialize(serialize(iris, connection = NULL)) } 35.378 36.0085

     mean  median     uq   max neval

 40.26888 36.4345 43.641 80.39   100



> res <- system.time(replicate(10000, {x <- unserialize(serialize(iris,
connection = NULL))}))

> res/10000

    user   system  elapsed

4.58e-05 2.90e-06 4.88e-05


Thus the overhead appears to be extremely minimal in your results above,
right? In fact it seems to be comparable or lower than replicate.

~G





On Mon, Nov 1, 2021 at 5:20 PM Jeff Keller <jeff at vtkellers.com> wrote:

> Hi Simon,
>
> I see there may have been some changes to address the TCP_NODELAY issue on
> Linux in
> https://github.com/wch/r-source/commit/82369f73fc297981e64cac8c9a696d05116f0797
> .
>
> I gave this a try with R 4.1.1, but I still see a 40ms compute floor. Am I
> misunderstanding these changes or how socketOptions is intended to be used?
>
> -Jeff
>
> library(parallel)
> library(microbenchmark)
> options(socketOptions = "no-delay")
> cl <- makeCluster(1)
> (x <- microbenchmark(clusterEvalQ(cl, iris), times = 100, unit = "us"))
> # Unit: microseconds
> #                   expr  min       lq     mean   median       uq     max
> neval
> # clusterEvalQ(cl, iris) 96.9 43986.73 40535.93 43999.59 44012.79 48046.6
>  100
>
> > On 11/04/2020 5:41 AM I?aki Ucar <iucar at fedoraproject.org> wrote:
> >
> >
> > Please, check a tcpdump session on localhost while running the following
> script:
> >
> > library(parallel)
> > library(tictoc)
> > cl <- makeCluster(1)
> > Sys.sleep(1)
> >
> > for (i in 1:10) {
> >   tic()
> >   x <- clusterEvalQ(cl, iris)
> >   toc()
> > }
> >
> > The initialization phase comprises 7 packets. Then, the 1-second sleep
> > will help you see where the evaluation starts. Each clusterEvalQ
> > generates 6 packets:
> >
> > 1. main -> worker PSH, ACK 1026 bytes
> > 2. worker -> main ACK 66 bytes
> > 3. worker -> main PSH, ACK 3758 bytes
> > 4. main -> worker ACK 66 bytes
> > 5. worker -> main PSH, ACK 2484 bytes
> > 6. main -> worker ACK 66 bytes
> >
> > The first two are the command and its ACK, the following are the data
> > back and their ACKs. In the first 4-5 iterations, I see no delay at
> > all. Then, in the following iterations, a 40 ms delay starts to happen
> > between packets 3 and 4, that is: the main process delays the ACK to
> > the first packet of the incoming result.
> >
> > So I'd say Nagle is hardly to blame for this. It would be interesting
> > to see how many packets are generated with TCP_NODELAY on. If there
> > are still 6 packets, then we are fine. If we suddenly see a gazillion
> > packets, then TCP_NODELAY does more harm than good. On the other hand,
> > TCP_QUICKACK would surely solve the issue without any drawback. As
> > Nagle himself put it once, "set TCP_QUICKACK. If you find a case where
> > that makes things worse, let me know."
> >
> > I?aki
> >
> > On Wed, 4 Nov 2020 at 04:34, Simon Urbanek <simon.urbanek at r-project.org>
> wrote:
> > >
> > > I'm not sure the user would know ;). This is very system-specific
> issue just because the Linux network stack behaves so differently from
> other OSes (for purely historical reasons). That makes it hard to abstract
> as a "feature" for the R sockets that are supposed to be
> platform-independent. At least TCP_NODELAY is actually part of POSIX so it
> is on better footing, and disabling delayed ACK is practically only useful
> to work around the other side having Nagle on, so I would expect it to be
> rarely used.
> > >
> > > This is essentially RFC since we don't have a mechanism for socket
> options (well, almost, there is timeout and blocking already...) and I
> don't think we want to expose low-level details so perhaps one idea would
> be to add something like delay=NA to socketConnection() in order to not
> touch (NA), enable (TRUE) or disable (FALSE) TCP_NODELAY. I wonder if there
> is any other way we could infer the intention of the user to try to choose
> the right approach...
> > >
> > > Cheers,
> > > Simon
> > >
> > >
> > > > On Nov 3, 2020, at 02:28, Jeff <jeff at vtkellers.com> wrote:
> > > >
> > > > Could TCP_NODELAY and TCP_QUICKACK be exposed to the R user so that
> they might determine what is best for their potentially latency- or
> throughput-sensitive application?
> > > >
> > > > Best,
> > > > Jeff
> > > >
> > > > On Mon, Nov 2, 2020 at 14:05, I?aki Ucar <iucar at fedoraproject.org>
> wrote:
> > > >> On Mon, 2 Nov 2020 at 02:22, Simon Urbanek <
> simon.urbanek at r-project.org> wrote:
> > > >>> It looks like R sockets on Linux could do with TCP_NODELAY --
> without (status quo):
> > > >> How many network packets are generated with and without it? If there
> > > >> are many small writes and thus setting TCP_NODELAY causes many small
> > > >> packets to be sent, it might make more sense to set TCP_QUICKACK
> > > >> instead.
> > > >> I?aki
> > > >>> Unit: microseconds
> > > >>>                    expr      min       lq     mean  median
>  uq      max
> > > >>>  clusterEvalQ(cl, iris) 1449.997 43991.99 43975.21 43997.1
> 44001.91 48027.83
> > > >>>  neval
> > > >>>   1000
> > > >>> exactly the same machine + R but with TCP_NODELAY enabled in
> R_SockConnect():
> > > >>> Unit: microseconds
> > > >>>                    expr     min     lq     mean  median      uq
>   max neval
> > > >>>  clusterEvalQ(cl, iris) 156.125 166.41 180.8806 170.247 174.298
> 5322.234  1000
> > > >>> Cheers,
> > > >>> Simon
> > > >>> > On 2/11/2020, at 3:39 AM, Jeff <jeff at vtkellers.com> wrote:
> > > >>> >
> > > >>> > I'm exploring latency overhead of parallel PSOCK workers and
> noticed that serializing/unserializing data back to the main R session is
> significantly slower on Linux than it is on Windows/MacOS with similar
> hardware. Is there a reason for this difference and is there a way to avoid
> the apparent additional Linux overhead?
> > > >>> >
> > > >>> > I attempted to isolate the behavior with a test that simply
> returns an existing object from the worker back to the main R session.
> > > >>> >
> > > >>> > library(parallel)
> > > >>> > library(microbenchmark)
> > > >>> > gcinfo(TRUE)
> > > >>> > cl <- makeCluster(1)
> > > >>> > (x <- microbenchmark(clusterEvalQ(cl, iris), times = 1000, unit
> = "us"))
> > > >>> > plot(x$time, ylab = "microseconds")
> > > >>> > head(x$time, n = 10)
> > > >>> >
> > > >>> > On Windows/MacOS, the test runs in 300-500 microseconds
> depending on hardware. A few of the 1000 runs are an order of magnitude
> slower but this can probably be attributed to garbage collection on the
> worker.
> > > >>> >
> > > >>> > On Linux, the first 5 or so executions run at comparable speeds
> but all subsequent executions are two orders of magnitude slower (~40
> milliseconds).
> > > >>> >
> > > >>> > I see this behavior across various platforms and hardware
> combinations:
> > > >>> >
> > > >>> > Ubuntu 18.04 (Intel Xeon Platinum 8259CL)
> > > >>> > Linux Mint 19.3 (AMD Ryzen 7 1800X)
> > > >>> > Linux Mint 20 (AMD Ryzen 7 3700X)
> > > >>> > Windows 10 (AMD Ryzen 7 4800H)
> > > >>> > MacOS 10.15.7 (Intel Core i7-8850H)
> > > >>> >
> > > >>> > ______________________________________________
> > > >>> > R-devel at r-project.org mailing list
> > > >>> > https://stat.ethz.ch/mailman/listinfo/r-devel
> > > >>> >
> > > >>> ______________________________________________
> > > >>> R-devel at r-project.org mailing list
> > > >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> > > >> --
> > > >> I?aki ?car
> > > >
> > > > ______________________________________________
> > > > R-devel at r-project.org mailing list
> > > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > > >
> > >
> >
> >
> > --
> > I?aki ?car
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From n@r@@ @end|ng |rom @t@n|ord@edu  Tue Nov  2 03:03:02 2021
From: n@r@@ @end|ng |rom @t@n|ord@edu (Balasubramanian Narasimhan)
Date: Mon, 1 Nov 2021 19:03:02 -0700
Subject: [Rd] FLIBS in MacOS M1 binary at odds with documentation for
 optional libraries/tools
Message-ID: <3764f301-bcec-d654-508c-d23a0242b521@stanford.edu>

The Mac OS M1 pre-built binary arrives with a 
/Library/Frameworks/R.framework/Resources/etc/Makevars containing

FLIBS =? -L/Volumes/Builds/opt/R/arm64/gfortran/lib/gcc/aarch64-apple-darwin20.2.0/11.0.0 -L/Volumes/Builds/opt/R/arm64/gfortran/lib/gcc -L/Volumes/Builds/opt/R/arm64/gfortran/lib -lgfortran -lemutls_w -lm

This is inconsistent with what is at said at the top of 
https://mac.r-project.org/libs-arm64/: that all binaries live in 
/opt/R/arm64, not /Volumes/Builds/opt/R/arm64.

So no one would be able to build a source package containing Fortran 
without either modifying Makevars or creating symbolic links.

-Naras


	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Tue Nov  2 03:07:56 2021
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Mon, 1 Nov 2021 19:07:56 -0700
Subject: [Rd] parallel PSOCK connection latency is greater on Linux?
In-Reply-To: <SV8X1R.X05C3QT4GJ2Y@vtkellers.com>
References: <JQG4JQ.RSMMA5AL6E0M3@vtkellers.com>
 <6B25B60C-EF8D-4CAF-856F-E948C27BD5CA@R-project.org>
 <CALEXWq3SXK5_=JTQ3ZfXN+upU=NLrMaqZdzzCuXBumMmyvVDMg@mail.gmail.com>
 <7486JQ.F60K6EHKGCP02@vtkellers.com>
 <6867535C-28A7-4F14-A703-6028EC46513F@r-project.org>
 <CALEXWq0QnKiKyVNqfx9zCtpVLRomrygFcEDPvaOaQNnx-8jBsQ@mail.gmail.com>
 <402481886.602574.1635810332917@privateemail.com>
 <CAD4oTHFy0Mkmt4TCD+Yj_VZuEiOo742qAYZN4gs=Vuxg2XQuow@mail.gmail.com>
 <SV8X1R.X05C3QT4GJ2Y@vtkellers.com>
Message-ID: <CAD4oTHFcFsmjXVPJSSkO-dop8-=+sy4-ozirLsha9_Nd1OUgDw@mail.gmail.com>

Hi all,

Please disregard my previous email as I misread the pasted output. Sorry
for the noise.

Best,
~G

On Mon, Nov 1, 2021 at 6:45 PM Jeff <jeff at vtkellers.com> wrote:

> Hi Gabriel,
>
> Yes, 40 milliseconds (ms) == 40,000 microseconds (us). My benchmarking
> output is reporting the latter, which is considerably higher than the 40us
> you are seeing. If I benchmark just the serialization round trip as you
> did, I get comparable results: 14us median on my Linux system. So at least
> on Linux, there is something else contributing the remaining 39,986us. The
> conclusion from earlier in this thread was that the culprit was TCP
> behavior unique to the Linux network stack.
>
> Jeff
>
> On Mon, Nov 1 2021 at 05:55:45 PM -0700, Gabriel Becker <
> gabembecker at gmail.com> wrote:
>
> Jeff,
>
> Perhaps I'm just missing something here, but ms is generally milliseconds,
> not microseconds (which are much smaller), right?
>
> Also, this seems to just be how long it takes to roundtrip serialize iris
> (in 4.1.0  on mac osx, as thats what I have handy right this moment):
>
> > microbenchmark({x <- unserialize(serialize(iris, connection = NULL))})
>
> Unit: microseconds
>
>                                                          expr    min
> lq
>
>  {     x <- unserialize(serialize(iris, connection = NULL)) } 35.378
> 36.0085
>
>      mean  median     uq   max neval
>
>  40.26888 36.4345 43.641 80.39   100
>
>
>
> > res <- system.time(replicate(10000, {x <- unserialize(serialize(iris,
> connection = NULL))}))
>
> > res/10000
>
>     user   system  elapsed
>
> 4.58e-05 2.90e-06 4.88e-05
>
>
> Thus the overhead appears to be extremely minimal in your results above,
> right? In fact it seems to be comparable or lower than replicate.
>
> ~G
>
>
>
>
>
> On Mon, Nov 1, 2021 at 5:20 PM Jeff Keller <jeff at vtkellers.com> wrote:
>
>> Hi Simon,
>>
>> I see there may have been some changes to address the TCP_NODELAY issue
>> on Linux in
>> https://github.com/wch/r-source/commit/82369f73fc297981e64cac8c9a696d05116f0797
>> .
>>
>> I gave this a try with R 4.1.1, but I still see a 40ms compute floor. Am
>> I misunderstanding these changes or how socketOptions is intended to be
>> used?
>>
>> -Jeff
>>
>> library(parallel)
>> library(microbenchmark)
>> options(socketOptions = "no-delay")
>> cl <- makeCluster(1)
>> (x <- microbenchmark(clusterEvalQ(cl, iris), times = 100, unit = "us"))
>> # Unit: microseconds
>> #                   expr  min       lq     mean   median       uq     max
>> neval
>> # clusterEvalQ(cl, iris) 96.9 43986.73 40535.93 43999.59 44012.79
>> 48046.6   100
>>
>> > On 11/04/2020 5:41 AM I?aki Ucar <iucar at fedoraproject.org> wrote:
>> >
>> >
>> > Please, check a tcpdump session on localhost while running the
>> following script:
>> >
>> > library(parallel)
>> > library(tictoc)
>> > cl <- makeCluster(1)
>> > Sys.sleep(1)
>> >
>> > for (i in 1:10) {
>> >   tic()
>> >   x <- clusterEvalQ(cl, iris)
>> >   toc()
>> > }
>> >
>> > The initialization phase comprises 7 packets. Then, the 1-second sleep
>> > will help you see where the evaluation starts. Each clusterEvalQ
>> > generates 6 packets:
>> >
>> > 1. main -> worker PSH, ACK 1026 bytes
>> > 2. worker -> main ACK 66 bytes
>> > 3. worker -> main PSH, ACK 3758 bytes
>> > 4. main -> worker ACK 66 bytes
>> > 5. worker -> main PSH, ACK 2484 bytes
>> > 6. main -> worker ACK 66 bytes
>> >
>> > The first two are the command and its ACK, the following are the data
>> > back and their ACKs. In the first 4-5 iterations, I see no delay at
>> > all. Then, in the following iterations, a 40 ms delay starts to happen
>> > between packets 3 and 4, that is: the main process delays the ACK to
>> > the first packet of the incoming result.
>> >
>> > So I'd say Nagle is hardly to blame for this. It would be interesting
>> > to see how many packets are generated with TCP_NODELAY on. If there
>> > are still 6 packets, then we are fine. If we suddenly see a gazillion
>> > packets, then TCP_NODELAY does more harm than good. On the other hand,
>> > TCP_QUICKACK would surely solve the issue without any drawback. As
>> > Nagle himself put it once, "set TCP_QUICKACK. If you find a case where
>> > that makes things worse, let me know."
>> >
>> > I?aki
>> >
>> > On Wed, 4 Nov 2020 at 04:34, Simon Urbanek <simon.urbanek at r-project.org>
>> wrote:
>> > >
>> > > I'm not sure the user would know ;). This is very system-specific
>> issue just because the Linux network stack behaves so differently from
>> other OSes (for purely historical reasons). That makes it hard to abstract
>> as a "feature" for the R sockets that are supposed to be
>> platform-independent. At least TCP_NODELAY is actually part of POSIX so it
>> is on better footing, and disabling delayed ACK is practically only useful
>> to work around the other side having Nagle on, so I would expect it to be
>> rarely used.
>> > >
>> > > This is essentially RFC since we don't have a mechanism for socket
>> options (well, almost, there is timeout and blocking already...) and I
>> don't think we want to expose low-level details so perhaps one idea would
>> be to add something like delay=NA to socketConnection() in order to not
>> touch (NA), enable (TRUE) or disable (FALSE) TCP_NODELAY. I wonder if there
>> is any other way we could infer the intention of the user to try to choose
>> the right approach...
>> > >
>> > > Cheers,
>> > > Simon
>> > >
>> > >
>> > > > On Nov 3, 2020, at 02:28, Jeff <jeff at vtkellers.com> wrote:
>> > > >
>> > > > Could TCP_NODELAY and TCP_QUICKACK be exposed to the R user so that
>> they might determine what is best for their potentially latency- or
>> throughput-sensitive application?
>> > > >
>> > > > Best,
>> > > > Jeff
>> > > >
>> > > > On Mon, Nov 2, 2020 at 14:05, I?aki Ucar <iucar at fedoraproject.org>
>> wrote:
>> > > >> On Mon, 2 Nov 2020 at 02:22, Simon Urbanek <
>> simon.urbanek at r-project.org> wrote:
>> > > >>> It looks like R sockets on Linux could do with TCP_NODELAY --
>> without (status quo):
>> > > >> How many network packets are generated with and without it? If
>> there
>> > > >> are many small writes and thus setting TCP_NODELAY causes many
>> small
>> > > >> packets to be sent, it might make more sense to set TCP_QUICKACK
>> > > >> instead.
>> > > >> I?aki
>> > > >>> Unit: microseconds
>> > > >>>                    expr      min       lq     mean  median
>>  uq      max
>> > > >>>  clusterEvalQ(cl, iris) 1449.997 43991.99 43975.21 43997.1
>> 44001.91 48027.83
>> > > >>>  neval
>> > > >>>   1000
>> > > >>> exactly the same machine + R but with TCP_NODELAY enabled in
>> R_SockConnect():
>> > > >>> Unit: microseconds
>> > > >>>                    expr     min     lq     mean  median      uq
>>     max neval
>> > > >>>  clusterEvalQ(cl, iris) 156.125 166.41 180.8806 170.247 174.298
>> 5322.234  1000
>> > > >>> Cheers,
>> > > >>> Simon
>> > > >>> > On 2/11/2020, at 3:39 AM, Jeff <jeff at vtkellers.com> wrote:
>> > > >>> >
>> > > >>> > I'm exploring latency overhead of parallel PSOCK workers and
>> noticed that serializing/unserializing data back to the main R session is
>> significantly slower on Linux than it is on Windows/MacOS with similar
>> hardware. Is there a reason for this difference and is there a way to avoid
>> the apparent additional Linux overhead?
>> > > >>> >
>> > > >>> > I attempted to isolate the behavior with a test that simply
>> returns an existing object from the worker back to the main R session.
>> > > >>> >
>> > > >>> > library(parallel)
>> > > >>> > library(microbenchmark)
>> > > >>> > gcinfo(TRUE)
>> > > >>> > cl <- makeCluster(1)
>> > > >>> > (x <- microbenchmark(clusterEvalQ(cl, iris), times = 1000, unit
>> = "us"))
>> > > >>> > plot(x$time, ylab = "microseconds")
>> > > >>> > head(x$time, n = 10)
>> > > >>> >
>> > > >>> > On Windows/MacOS, the test runs in 300-500 microseconds
>> depending on hardware. A few of the 1000 runs are an order of magnitude
>> slower but this can probably be attributed to garbage collection on the
>> worker.
>> > > >>> >
>> > > >>> > On Linux, the first 5 or so executions run at comparable speeds
>> but all subsequent executions are two orders of magnitude slower (~40
>> milliseconds).
>> > > >>> >
>> > > >>> > I see this behavior across various platforms and hardware
>> combinations:
>> > > >>> >
>> > > >>> > Ubuntu 18.04 (Intel Xeon Platinum 8259CL)
>> > > >>> > Linux Mint 19.3 (AMD Ryzen 7 1800X)
>> > > >>> > Linux Mint 20 (AMD Ryzen 7 3700X)
>> > > >>> > Windows 10 (AMD Ryzen 7 4800H)
>> > > >>> > MacOS 10.15.7 (Intel Core i7-8850H)
>> > > >>> >
>> > > >>> > ______________________________________________
>> > > >>> > R-devel at r-project.org mailing list
>> > > >>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>> > > >>> >
>> > > >>> ______________________________________________
>> > > >>> R-devel at r-project.org mailing list
>> > > >>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> > > >> --
>> > > >> I?aki ?car
>> > > >
>> > > > ______________________________________________
>> > > > R-devel at r-project.org mailing list
>> > > > https://stat.ethz.ch/mailman/listinfo/r-devel
>> > > >
>> > >
>> >
>> >
>> > --
>> > I?aki ?car
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Tue Nov  2 04:04:54 2021
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Tue, 2 Nov 2021 16:04:54 +1300
Subject: [Rd] parallel PSOCK connection latency is greater on Linux?
In-Reply-To: <402481886.602574.1635810332917@privateemail.com>
References: <JQG4JQ.RSMMA5AL6E0M3@vtkellers.com>
 <6B25B60C-EF8D-4CAF-856F-E948C27BD5CA@R-project.org>
 <CALEXWq3SXK5_=JTQ3ZfXN+upU=NLrMaqZdzzCuXBumMmyvVDMg@mail.gmail.com>
 <7486JQ.F60K6EHKGCP02@vtkellers.com>
 <6867535C-28A7-4F14-A703-6028EC46513F@r-project.org>
 <CALEXWq0QnKiKyVNqfx9zCtpVLRomrygFcEDPvaOaQNnx-8jBsQ@mail.gmail.com>
 <402481886.602574.1635810332917@privateemail.com>
Message-ID: <395401B6-9659-4B2C-943B-50F8A19E664B@R-project.org>


Jeff,

you are not setting the option on the server side, only on the client side, so the worker will still wait (which is where it matters). If you set it on the server (worker) side then it works as expected:

> cl <- makeCluster(1, rscript_args="-e 'options(socketOptions=\"no-delay\")'")
>  (x <- microbenchmark(clusterEvalQ(cl, iris), times = 100, unit = "us"))
Unit: microseconds
                   expr    min     lq     mean   median       uq     max neval
 clusterEvalQ(cl, iris) 112.41 115.33 128.9988 117.3065 120.5385 348.702   100

Cheers,
Simon



> On Nov 2, 2021, at 12:45 PM, Jeff Keller <jeff at vtkellers.com> wrote:
> 
> Hi Simon,
> 
> I see there may have been some changes to address the TCP_NODELAY issue on Linux in https://github.com/wch/r-source/commit/82369f73fc297981e64cac8c9a696d05116f0797.
> 
> I gave this a try with R 4.1.1, but I still see a 40ms compute floor. Am I misunderstanding these changes or how socketOptions is intended to be used?
> 
> -Jeff
> 
> library(parallel)
> library(microbenchmark)
> options(socketOptions = "no-delay")
> cl <- makeCluster(1)
> (x <- microbenchmark(clusterEvalQ(cl, iris), times = 100, unit = "us"))
> # Unit: microseconds
> #                   expr  min       lq     mean   median       uq     max neval
> # clusterEvalQ(cl, iris) 96.9 43986.73 40535.93 43999.59 44012.79 48046.6   100
> 
>> On 11/04/2020 5:41 AM I?aki Ucar <iucar at fedoraproject.org> wrote:
>> 
>> 
>> Please, check a tcpdump session on localhost while running the following script:
>> 
>> library(parallel)
>> library(tictoc)
>> cl <- makeCluster(1)
>> Sys.sleep(1)
>> 
>> for (i in 1:10) {
>>  tic()
>>  x <- clusterEvalQ(cl, iris)
>>  toc()
>> }
>> 
>> The initialization phase comprises 7 packets. Then, the 1-second sleep
>> will help you see where the evaluation starts. Each clusterEvalQ
>> generates 6 packets:
>> 
>> 1. main -> worker PSH, ACK 1026 bytes
>> 2. worker -> main ACK 66 bytes
>> 3. worker -> main PSH, ACK 3758 bytes
>> 4. main -> worker ACK 66 bytes
>> 5. worker -> main PSH, ACK 2484 bytes
>> 6. main -> worker ACK 66 bytes
>> 
>> The first two are the command and its ACK, the following are the data
>> back and their ACKs. In the first 4-5 iterations, I see no delay at
>> all. Then, in the following iterations, a 40 ms delay starts to happen
>> between packets 3 and 4, that is: the main process delays the ACK to
>> the first packet of the incoming result.
>> 
>> So I'd say Nagle is hardly to blame for this. It would be interesting
>> to see how many packets are generated with TCP_NODELAY on. If there
>> are still 6 packets, then we are fine. If we suddenly see a gazillion
>> packets, then TCP_NODELAY does more harm than good. On the other hand,
>> TCP_QUICKACK would surely solve the issue without any drawback. As
>> Nagle himself put it once, "set TCP_QUICKACK. If you find a case where
>> that makes things worse, let me know."
>> 
>> I?aki
>> 
>> On Wed, 4 Nov 2020 at 04:34, Simon Urbanek <simon.urbanek at r-project.org> wrote:
>>> 
>>> I'm not sure the user would know ;). This is very system-specific issue just because the Linux network stack behaves so differently from other OSes (for purely historical reasons). That makes it hard to abstract as a "feature" for the R sockets that are supposed to be platform-independent. At least TCP_NODELAY is actually part of POSIX so it is on better footing, and disabling delayed ACK is practically only useful to work around the other side having Nagle on, so I would expect it to be rarely used.
>>> 
>>> This is essentially RFC since we don't have a mechanism for socket options (well, almost, there is timeout and blocking already...) and I don't think we want to expose low-level details so perhaps one idea would be to add something like delay=NA to socketConnection() in order to not touch (NA), enable (TRUE) or disable (FALSE) TCP_NODELAY. I wonder if there is any other way we could infer the intention of the user to try to choose the right approach...
>>> 
>>> Cheers,
>>> Simon
>>> 
>>> 
>>>> On Nov 3, 2020, at 02:28, Jeff <jeff at vtkellers.com> wrote:
>>>> 
>>>> Could TCP_NODELAY and TCP_QUICKACK be exposed to the R user so that they might determine what is best for their potentially latency- or throughput-sensitive application?
>>>> 
>>>> Best,
>>>> Jeff
>>>> 
>>>> On Mon, Nov 2, 2020 at 14:05, I?aki Ucar <iucar at fedoraproject.org> wrote:
>>>>> On Mon, 2 Nov 2020 at 02:22, Simon Urbanek <simon.urbanek at r-project.org> wrote:
>>>>>> It looks like R sockets on Linux could do with TCP_NODELAY -- without (status quo):
>>>>> How many network packets are generated with and without it? If there
>>>>> are many small writes and thus setting TCP_NODELAY causes many small
>>>>> packets to be sent, it might make more sense to set TCP_QUICKACK
>>>>> instead.
>>>>> I?aki
>>>>>> Unit: microseconds
>>>>>>                   expr      min       lq     mean  median       uq      max
>>>>>> clusterEvalQ(cl, iris) 1449.997 43991.99 43975.21 43997.1 44001.91 48027.83
>>>>>> neval
>>>>>>  1000
>>>>>> exactly the same machine + R but with TCP_NODELAY enabled in R_SockConnect():
>>>>>> Unit: microseconds
>>>>>>                   expr     min     lq     mean  median      uq      max neval
>>>>>> clusterEvalQ(cl, iris) 156.125 166.41 180.8806 170.247 174.298 5322.234  1000
>>>>>> Cheers,
>>>>>> Simon
>>>>>>> On 2/11/2020, at 3:39 AM, Jeff <jeff at vtkellers.com> wrote:
>>>>>>> 
>>>>>>> I'm exploring latency overhead of parallel PSOCK workers and noticed that serializing/unserializing data back to the main R session is significantly slower on Linux than it is on Windows/MacOS with similar hardware. Is there a reason for this difference and is there a way to avoid the apparent additional Linux overhead?
>>>>>>> 
>>>>>>> I attempted to isolate the behavior with a test that simply returns an existing object from the worker back to the main R session.
>>>>>>> 
>>>>>>> library(parallel)
>>>>>>> library(microbenchmark)
>>>>>>> gcinfo(TRUE)
>>>>>>> cl <- makeCluster(1)
>>>>>>> (x <- microbenchmark(clusterEvalQ(cl, iris), times = 1000, unit = "us"))
>>>>>>> plot(x$time, ylab = "microseconds")
>>>>>>> head(x$time, n = 10)
>>>>>>> 
>>>>>>> On Windows/MacOS, the test runs in 300-500 microseconds depending on hardware. A few of the 1000 runs are an order of magnitude slower but this can probably be attributed to garbage collection on the worker.
>>>>>>> 
>>>>>>> On Linux, the first 5 or so executions run at comparable speeds but all subsequent executions are two orders of magnitude slower (~40 milliseconds).
>>>>>>> 
>>>>>>> I see this behavior across various platforms and hardware combinations:
>>>>>>> 
>>>>>>> Ubuntu 18.04 (Intel Xeon Platinum 8259CL)
>>>>>>> Linux Mint 19.3 (AMD Ryzen 7 1800X)
>>>>>>> Linux Mint 20 (AMD Ryzen 7 3700X)
>>>>>>> Windows 10 (AMD Ryzen 7 4800H)
>>>>>>> MacOS 10.15.7 (Intel Core i7-8850H)
>>>>>>> 
>>>>>>> ______________________________________________
>>>>>>> R-devel at r-project.org mailing list
>>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>>> 
>>>>>> ______________________________________________
>>>>>> R-devel at r-project.org mailing list
>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>> --
>>>>> I?aki ?car
>>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> 
>>> 
>> 
>> 
>> -- 
>> I?aki ?car
> 


From @|mon@urb@nek @end|ng |rom R-project@org  Tue Nov  2 04:22:39 2021
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Tue, 2 Nov 2021 16:22:39 +1300
Subject: [Rd] FLIBS in MacOS M1 binary at odds with documentation for
 optional libraries/tools
In-Reply-To: <3764f301-bcec-d654-508c-d23a0242b521@stanford.edu>
References: <3764f301-bcec-d654-508c-d23a0242b521@stanford.edu>
Message-ID: <42F051E9-6DEA-452A-8E65-D822DE0A7D3C@R-project.org>


Naras,

thanks. It seems that the FLIBS check resolves symlinks, unfortunately (all others are fine).

I would like to remind people that reports are a lot more useful *before* the release - that's why we publish RCs.

Thanks,
Simon


> On Nov 2, 2021, at 3:03 PM, Balasubramanian Narasimhan <naras at stanford.edu> wrote:
> 
> The Mac OS M1 pre-built binary arrives with a 
> /Library/Frameworks/R.framework/Resources/etc/Makevars containing
> 
> FLIBS =  -L/Volumes/Builds/opt/R/arm64/gfortran/lib/gcc/aarch64-apple-darwin20.2.0/11.0.0 -L/Volumes/Builds/opt/R/arm64/gfortran/lib/gcc -L/Volumes/Builds/opt/R/arm64/gfortran/lib -lgfortran -lemutls_w -lm
> 
> This is inconsistent with what is at said at the top of 
> https://mac.r-project.org/libs-arm64/: that all binaries live in 
> /opt/R/arm64, not /Volumes/Builds/opt/R/arm64.
> 
> So no one would be able to build a source package containing Fortran 
> without either modifying Makevars or creating symbolic links.
> 
> -Naras
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From je|| @end|ng |rom vtke||er@@com  Tue Nov  2 02:45:28 2021
From: je|| @end|ng |rom vtke||er@@com (Jeff)
Date: Mon, 01 Nov 2021 21:45:28 -0400
Subject: [Rd] parallel PSOCK connection latency is greater on Linux?
In-Reply-To: <CAD4oTHFy0Mkmt4TCD+Yj_VZuEiOo742qAYZN4gs=Vuxg2XQuow@mail.gmail.com>
References: <JQG4JQ.RSMMA5AL6E0M3@vtkellers.com>
 <6B25B60C-EF8D-4CAF-856F-E948C27BD5CA@R-project.org>
 <CALEXWq3SXK5_=JTQ3ZfXN+upU=NLrMaqZdzzCuXBumMmyvVDMg@mail.gmail.com>
 <7486JQ.F60K6EHKGCP02@vtkellers.com>
 <6867535C-28A7-4F14-A703-6028EC46513F@r-project.org>
 <CALEXWq0QnKiKyVNqfx9zCtpVLRomrygFcEDPvaOaQNnx-8jBsQ@mail.gmail.com>
 <402481886.602574.1635810332917@privateemail.com>
 <CAD4oTHFy0Mkmt4TCD+Yj_VZuEiOo742qAYZN4gs=Vuxg2XQuow@mail.gmail.com>
Message-ID: <SV8X1R.X05C3QT4GJ2Y@vtkellers.com>

Hi Gabriel,

Yes, 40 milliseconds (ms) == 40,000 microseconds (us). My benchmarking 
output is reporting the latter, which is considerably higher than the 
40us you are seeing. If I benchmark just the serialization round trip 
as you did, I get comparable results: 14us median on my Linux system. 
So at least on Linux, there is something else contributing the 
remaining 39,986us. The conclusion from earlier in this thread was that 
the culprit was TCP behavior unique to the Linux network stack.

Jeff

On Mon, Nov 1 2021 at 05:55:45 PM -0700, Gabriel Becker 
<gabembecker at gmail.com> wrote:
> Jeff,
> 
> Perhaps I'm just missing something here, but ms is generally 
> milliseconds, not microseconds (which are much smaller), right?
> 
> Also, this seems to just be how long it takes to roundtrip serialize 
> iris (in 4.1.0  on mac osx, as thats what I have handy right this 
> moment):
> 
>> > microbenchmark({x <- unserialize(serialize(iris, connection = 
>> NULL))})
>> 
>> Unit: microseconds
>> 
>>                                                         expr   min   
>>   lq
>> 
>>  {    x <- unserialize(serialize(iris, connection = NULL)) } 35.378 
>> 36.0085
>> 
>>     mean median    uq  max neval
>> 
>>  40.26888 36.4345 43.641 80.39  100
>> 
>> 
> 
>> > res <- system.time(replicate(10000, {x <- 
>> unserialize(serialize(iris, connection = NULL))}))
>> 
>> > res/10000
>> 
>>    user  system elapsed
>> 
>> 4.58e-05 2.90e-06 4.88e-05
>> 
> 
> Thus the overhead appears to be extremely minimal in your results 
> above, right? In fact it seems to be comparable or lower than 
> replicate.
> 
> ~G
> 
> 
> 
> 
> 
> On Mon, Nov 1, 2021 at 5:20 PM Jeff Keller <jeff at vtkellers.com 
> <mailto:jeff at vtkellers.com>> wrote:
>> Hi Simon,
>> 
>>  I see there may have been some changes to address the TCP_NODELAY 
>> issue on Linux in 
>> <https://github.com/wch/r-source/commit/82369f73fc297981e64cac8c9a696d05116f0797>.
>> 
>>  I gave this a try with R 4.1.1, but I still see a 40ms compute 
>> floor. Am I misunderstanding these changes or how socketOptions is 
>> intended to be used?
>> 
>>  -Jeff
>> 
>>  library(parallel)
>>  library(microbenchmark)
>>  options(socketOptions = "no-delay")
>>  cl <- makeCluster(1)
>>  (x <- microbenchmark(clusterEvalQ(cl, iris), times = 100, unit = 
>> "us"))
>>  # Unit: microseconds
>>  #                   expr  min       lq     mean   median       uq   
>>   max neval
>>  # clusterEvalQ(cl, iris) 96.9 43986.73 40535.93 43999.59 44012.79 
>> 48046.6   100
>> 
>>  > On 11/04/2020 5:41 AM I?aki Ucar <iucar at fedoraproject.org 
>> <mailto:iucar at fedoraproject.org>> wrote:
>>  >
>>  >
>>  > Please, check a tcpdump session on localhost while running the 
>> following script:
>>  >
>>  > library(parallel)
>>  > library(tictoc)
>>  > cl <- makeCluster(1)
>>  > Sys.sleep(1)
>>  >
>>  > for (i in 1:10) {
>>  >   tic()
>>  >   x <- clusterEvalQ(cl, iris)
>>  >   toc()
>>  > }
>>  >
>>  > The initialization phase comprises 7 packets. Then, the 1-second 
>> sleep
>>  > will help you see where the evaluation starts. Each clusterEvalQ
>>  > generates 6 packets:
>>  >
>>  > 1. main -> worker PSH, ACK 1026 bytes
>>  > 2. worker -> main ACK 66 bytes
>>  > 3. worker -> main PSH, ACK 3758 bytes
>>  > 4. main -> worker ACK 66 bytes
>>  > 5. worker -> main PSH, ACK 2484 bytes
>>  > 6. main -> worker ACK 66 bytes
>>  >
>>  > The first two are the command and its ACK, the following are the 
>> data
>>  > back and their ACKs. In the first 4-5 iterations, I see no delay 
>> at
>>  > all. Then, in the following iterations, a 40 ms delay starts to 
>> happen
>>  > between packets 3 and 4, that is: the main process delays the ACK 
>> to
>>  > the first packet of the incoming result.
>>  >
>>  > So I'd say Nagle is hardly to blame for this. It would be 
>> interesting
>>  > to see how many packets are generated with TCP_NODELAY on. If 
>> there
>>  > are still 6 packets, then we are fine. If we suddenly see a 
>> gazillion
>>  > packets, then TCP_NODELAY does more harm than good. On the other 
>> hand,
>>  > TCP_QUICKACK would surely solve the issue without any drawback. As
>>  > Nagle himself put it once, "set TCP_QUICKACK. If you find a case 
>> where
>>  > that makes things worse, let me know."
>>  >
>>  > I?aki
>>  >
>>  > On Wed, 4 Nov 2020 at 04:34, Simon Urbanek 
>> <simon.urbanek at r-project.org <mailto:simon.urbanek at r-project.org>> 
>> wrote:
>>  > >
>>  > > I'm not sure the user would know ;). This is very 
>> system-specific issue just because the Linux network stack behaves 
>> so differently from other OSes (for purely historical reasons). That 
>> makes it hard to abstract as a "feature" for the R sockets that are 
>> supposed to be platform-independent. At least TCP_NODELAY is 
>> actually part of POSIX so it is on better footing, and disabling 
>> delayed ACK is practically only useful to work around the other side 
>> having Nagle on, so I would expect it to be rarely used.
>>  > >
>>  > > This is essentially RFC since we don't have a mechanism for 
>> socket options (well, almost, there is timeout and blocking 
>> already...) and I don't think we want to expose low-level details so 
>> perhaps one idea would be to add something like delay=NA to 
>> socketConnection() in order to not touch (NA), enable (TRUE) or 
>> disable (FALSE) TCP_NODELAY. I wonder if there is any other way we 
>> could infer the intention of the user to try to choose the right 
>> approach...
>>  > >
>>  > > Cheers,
>>  > > Simon
>>  > >
>>  > >
>>  > > > On Nov 3, 2020, at 02:28, Jeff <jeff at vtkellers.com 
>> <mailto:jeff at vtkellers.com>> wrote:
>>  > > >
>>  > > > Could TCP_NODELAY and TCP_QUICKACK be exposed to the R user 
>> so that they might determine what is best for their potentially 
>> latency- or throughput-sensitive application?
>>  > > >
>>  > > > Best,
>>  > > > Jeff
>>  > > >
>>  > > > On Mon, Nov 2, 2020 at 14:05, I?aki Ucar 
>> <iucar at fedoraproject.org <mailto:iucar at fedoraproject.org>> wrote:
>>  > > >> On Mon, 2 Nov 2020 at 02:22, Simon Urbanek 
>> <simon.urbanek at r-project.org <mailto:simon.urbanek at r-project.org>> 
>> wrote:
>>  > > >>> It looks like R sockets on Linux could do with TCP_NODELAY 
>> -- without (status quo):
>>  > > >> How many network packets are generated with and without it? 
>> If there
>>  > > >> are many small writes and thus setting TCP_NODELAY causes 
>> many small
>>  > > >> packets to be sent, it might make more sense to set 
>> TCP_QUICKACK
>>  > > >> instead.
>>  > > >> I?aki
>>  > > >>> Unit: microseconds
>>  > > >>>                    expr      min       lq     mean  median  
>>      uq      max
>>  > > >>>  clusterEvalQ(cl, iris) 1449.997 43991.99 43975.21 43997.1 
>> 44001.91 48027.83
>>  > > >>>  neval
>>  > > >>>   1000
>>  > > >>> exactly the same machine + R but with TCP_NODELAY enabled 
>> in R_SockConnect():
>>  > > >>> Unit: microseconds
>>  > > >>>                    expr     min     lq     mean  median     
>>  uq      max neval
>>  > > >>>  clusterEvalQ(cl, iris) 156.125 166.41 180.8806 170.247 
>> 174.298 5322.234  1000
>>  > > >>> Cheers,
>>  > > >>> Simon
>>  > > >>> > On 2/11/2020, at 3:39 AM, Jeff <jeff at vtkellers.com 
>> <mailto:jeff at vtkellers.com>> wrote:
>>  > > >>> >
>>  > > >>> > I'm exploring latency overhead of parallel PSOCK workers 
>> and noticed that serializing/unserializing data back to the main R 
>> session is significantly slower on Linux than it is on Windows/MacOS 
>> with similar hardware. Is there a reason for this difference and is 
>> there a way to avoid the apparent additional Linux overhead?
>>  > > >>> >
>>  > > >>> > I attempted to isolate the behavior with a test that 
>> simply returns an existing object from the worker back to the main R 
>> session.
>>  > > >>> >
>>  > > >>> > library(parallel)
>>  > > >>> > library(microbenchmark)
>>  > > >>> > gcinfo(TRUE)
>>  > > >>> > cl <- makeCluster(1)
>>  > > >>> > (x <- microbenchmark(clusterEvalQ(cl, iris), times = 
>> 1000, unit = "us"))
>>  > > >>> > plot(x$time, ylab = "microseconds")
>>  > > >>> > head(x$time, n = 10)
>>  > > >>> >
>>  > > >>> > On Windows/MacOS, the test runs in 300-500 microseconds 
>> depending on hardware. A few of the 1000 runs are an order of 
>> magnitude slower but this can probably be attributed to garbage 
>> collection on the worker.
>>  > > >>> >
>>  > > >>> > On Linux, the first 5 or so executions run at comparable 
>> speeds but all subsequent executions are two orders of magnitude 
>> slower (~40 milliseconds).
>>  > > >>> >
>>  > > >>> > I see this behavior across various platforms and hardware 
>> combinations:
>>  > > >>> >
>>  > > >>> > Ubuntu 18.04 (Intel Xeon Platinum 8259CL)
>>  > > >>> > Linux Mint 19.3 (AMD Ryzen 7 1800X)
>>  > > >>> > Linux Mint 20 (AMD Ryzen 7 3700X)
>>  > > >>> > Windows 10 (AMD Ryzen 7 4800H)
>>  > > >>> > MacOS 10.15.7 (Intel Core i7-8850H)
>>  > > >>> >
>>  > > >>> > ______________________________________________
>>  > > >>> > R-devel at r-project.org <mailto:R-devel at r-project.org> 
>> mailing list
>>  > > >>> > <https://stat.ethz.ch/mailman/listinfo/r-devel>
>>  > > >>> >
>>  > > >>> ______________________________________________
>>  > > >>> R-devel at r-project.org <mailto:R-devel at r-project.org> 
>> mailing list
>>  > > >>> <https://stat.ethz.ch/mailman/listinfo/r-devel>
>>  > > >> --
>>  > > >> I?aki ?car
>>  > > >
>>  > > > ______________________________________________
>>  > > > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing 
>> list
>>  > > > <https://stat.ethz.ch/mailman/listinfo/r-devel>
>>  > > >
>>  > >
>>  >
>>  >
>>  > --
>>  > I?aki ?car
>> 
>>  ______________________________________________
>> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>> <https://stat.ethz.ch/mailman/listinfo/r-devel>


	[[alternative HTML version deleted]]


From n@r@@ @end|ng |rom @t@n|ord@edu  Tue Nov  2 17:36:16 2021
From: n@r@@ @end|ng |rom @t@n|ord@edu (Balasubramanian Narasimhan)
Date: Tue, 2 Nov 2021 09:36:16 -0700
Subject: [Rd] FLIBS in MacOS M1 binary at odds with documentation for
 optional libraries/tools
In-Reply-To: <42F051E9-6DEA-452A-8E65-D822DE0A7D3C@R-project.org>
References: <3764f301-bcec-d654-508c-d23a0242b521@stanford.edu>
 <42F051E9-6DEA-452A-8E65-D822DE0A7D3C@R-project.org>
Message-ID: <b90e6a22-751e-0ac1-c2d6-176545cc9a2e@stanford.edu>

Thanks, Simon.? I only had sporadic access to a M1 laptop but now 
actually have one. Will try to do my part.

Best,

-Naras

On 11/1/21 8:22 PM, Simon Urbanek wrote:
> Naras,
>
> thanks. It seems that the FLIBS check resolves symlinks, unfortunately (all others are fine).
>
> I would like to remind people that reports are a lot more useful *before* the release - that's why we publish RCs.
>
> Thanks,
> Simon
>
>
>> On Nov 2, 2021, at 3:03 PM, Balasubramanian Narasimhan <naras at stanford.edu> wrote:
>>
>> The Mac OS M1 pre-built binary arrives with a
>> /Library/Frameworks/R.framework/Resources/etc/Makevars containing
>>
>> FLIBS =  -L/Volumes/Builds/opt/R/arm64/gfortran/lib/gcc/aarch64-apple-darwin20.2.0/11.0.0 -L/Volumes/Builds/opt/R/arm64/gfortran/lib/gcc -L/Volumes/Builds/opt/R/arm64/gfortran/lib -lgfortran -lemutls_w -lm
>>
>> This is inconsistent with what is at said at the top of
>> https://mac.r-project.org/libs-arm64/: that all binaries live in
>> /opt/R/arm64, not /Volumes/Builds/opt/R/arm64.
>>
>> So no one would be able to build a source package containing Fortran
>> without either modifying Makevars or creating symbolic links.
>>
>> -Naras
>>
>>
>> 	[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>


From iuke-tier@ey m@iii@g oii uiow@@edu  Tue Nov  2 19:39:24 2021
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Tue, 2 Nov 2021 13:39:24 -0500 (CDT)
Subject: [Rd] [External] Re:  Wrong number of names?
In-Reply-To: <24959.59184.879532.448761@stat.math.ethz.ch>
References: <3b0ce089-f83b-3f58-93b4-51922178f4c1@stats.uwo.ca>
 <24959.59184.879532.448761@stat.math.ethz.ch>
Message-ID: <alpine.DEB.2.22.394.2111021338140.3134@luke-Latitude-7480>

On Mon, 1 Nov 2021, Martin Maechler wrote:

>>>>>> Duncan Murdoch
>>>>>>     on Mon, 1 Nov 2021 06:36:17 -0400 writes:
>
>    > The StackOverflow post
>    > https://stackoverflow.com/a/69767361/2554330 discusses a
>    > dataframe which has a named numeric column of length 1488
>    > that has 744 names. I don't think this is ever legal, but
>    > am I wrong about that?
>
>    > The `dat.rds` file mentioned in the post is temporarily
>    > available online in case anyone else wants to examine it.
>
>    > Assuming that the file contains a badly formed object, I
>    > wonder if readRDS() should do some sanity checks as it
>    > reads.
>
>    > Duncan Murdoch
>
> Good question.
>
> In the mean time, I've also added a bit on the SO page
> above.. e.g.
>
> ---------------------------------------------------------------------------
>
> d <- readRDS("<.....>dat.rds")
> str(d)
> ## 'data.frame':	1488 obs. of  4 variables:
> ##  $ facet_var: chr  "AUT" "AUT" "AUT" "AUT" ...
> ##  $ date     : Date, format: "2020-04-26" "2020-04-27" ...
> ##  $ variable : Factor w/ 2 levels "arima","prophet": 1 1 1 1 1 1 1 1 1 1 ...
> ##  $ score    : Named num  2.74e-06 2.41e-06 2.48e-06 2.39e-06 2.79e-06 ...
> ##   ..- attr(*, "names")= chr [1:744] "new_confirmed10" "new_confirmed10" "new_confirmed10" "new_confirmed10" ...
>
> ds <- d$score
> c(length(ds), length(names(ds)))
> ## 1488   744
>
> dput(ds) # ->
>
> ##  *** caught segfault ***
> ## address (nil), cause 'memory not mapped'

If I'm reading this right then dput is where the segfault is
happening, so that could use some more bulletproofing.

Best,

luke


>
> ---------------------------------------------------------------------------
>
> Hence  "proving" that the dat.rds  really contains an invalid object,
> when simple  dput(.) directly gives a segmentation fault.
>
> I think we are aware that using C code and say .Call(..)  one
> can create all kinds of invalid objects "easily".. and I think
> it's clear that it's not feasible to check for validity of such
> objects "everwhere".
>
> Your proposal to have at least our deserialization code used in
> readRDS() do (at least *some*) validity checks seems good, but
> maybe we should think of more cases, and / or  do such validity
> checks already during serialization { <-> saveRDS() here } ?
>
> .. Such questions then really are for those who understand more than
> me about (de)serialization in R, its performance bottlenecks etc.
> Given the speed impact we should probably have such checks *optional*
> but have them *on* by default e.g., at least for saveRDS() ?
>
> Martin
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From henr|k@bengt@@on @end|ng |rom gm@||@com  Wed Nov  3 01:37:26 2021
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Tue, 2 Nov 2021 17:37:26 -0700
Subject: [Rd] Fwd: Using existing envars in Renviron on friendly Windows
In-Reply-To: <87e89990-ebc4-6879-a34e-4301c3b83563@gmail.com>
References: <CAByPayHQ33kLY+S6U6NGAzHRuMZJQhaoPhbCDGt6EpgAU9aB5w@mail.gmail.com>
 <CAByPayFCM72e32p6aBshSa0oD0wijUkRQ-vKKT9Aq2YD5rKrpg@mail.gmail.com>
 <20211015194037.595b389f@Tarkus>
 <CAByPayFOobioF-W6Xt=6vkEw2srbg1xc9p6YvyO+r-yu=4doTg@mail.gmail.com>
 <CAByPayEZskmsn1bsFACYvxUC+ENaDfyoJsvbxwxLKc8gNyRgzQ@mail.gmail.com>
 <3ec44e42-f7af-575c-1b69-fe7e2bda00b2@gmail.com>
 <CAByPayH4dzWOqnaFg0z=UxjgHp6BSNrP17DP3RJ4qLPfw6q33A@mail.gmail.com>
 <24945.33990.369010.718929@stat.math.ethz.ch>
 <38f36d15-c08e-d57c-41f7-31dcc9449e84@gmail.com>
 <CAFDcVCSmQO43H7Jpj132ba13Lg0GfyFQoa+ev0st5kH3bhZL4A@mail.gmail.com>
 <87e89990-ebc4-6879-a34e-4301c3b83563@gmail.com>
Message-ID: <CAFDcVCRn1kKeEPCqzjMrcCN=38GZa_ODHRvO6Oq8GccoaxX7bg@mail.gmail.com>

Oh, I see, I misunderstood.  Thanks for clarifying.

One more thing, to mix-and-match environment variables and strings
with escaped characters, while mimicking how POSIX shells does it, by
using strings with double and single quotes. For example, with:

$ cat .Renviron
APPDATA='C:\Users\foobar\AppData\Roaming'
R_LIBS_USER="${APPDATA}"'\R-library'

we get:

$ Rscript --no-init-file --quiet -e 'cat(sprintf("R_LIBS_USER=[%s]\n",
Sys.getenv("R_LIBS_USER")))'
R_LIBS_USER=[C:\Users\foobar\AppData\Roaming\R-library]

and

$ source .Renviron
$ echo "R_LIBS_USER=[${R_LIBS_USER}]"
R_LIBS_USER=[C:\Users\foobar\AppData\Roaming\R-library]

/Henrik

On Sun, Oct 31, 2021 at 2:59 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
>
> On 10/31/21 2:55 AM, Henrik Bengtsson wrote:
> >> ... If one still needed backslashes,
> >> they could then be entered in single quotes, e.g. VAR='c:\users'.
> > I don't think it matters whether you use single or double quotes -
> > both will work.  Here's a proof of concept on Linux with R 4.1.1:
> >
> > $ cat ./.Renviron
> > A=C:\users
> > B='C:\users'
> > C="C:\users"
> >
> > $ Rscript -e "Sys.getenv(c('A', 'B', 'C'))"
> >            A           B           C
> >    "C:users" "C:\\users" "C:\\users"
>
> Yes, but as I wrote "I think the Renviron files should be written in a
> way so that they would work the same in a POSIX shell". This is why
> single quotes. With double quotes, backslashes are interpreted
> differently from a POSIX shell.
>
> Tomas
>
>
> >
> > /Henrik
> >
> > On Wed, Oct 27, 2021 at 11:45 AM Tomas Kalibera
> > <tomas.kalibera at gmail.com> wrote:
> >>
> >> On 10/21/21 5:18 PM, Martin Maechler wrote:
> >>>>>>>> Micha? Bojanowski
> >>>>>>>>       on Wed, 20 Oct 2021 16:31:08 +0200 writes:
> >>>       > Hello Tomas,
> >>>       > Yes, that's accurate although rather terse, which is perhaps the
> >>>       > reason why I did not realize it applies to my case.
> >>>
> >>>       > How about adding something in the direction of:
> >>>
> >>>       > 1. Continuing the cited paragraph with:
> >>>       > In particular, on Windows it may be necessary to quote references to
> >>>       > existing environment variables, especially those containing file paths
> >>>       > (which include backslashes). For example: `"${WINVAR}"`.
> >>>
> >>>       > 2. Add an example (not run):
> >>>
> >>>       > # On Windows do quote references to variables containing paths, e.g.:
> >>>       > # If APPDATA=C:\Users\foobar\AppData\Roaming
> >>>       > # to point to a library tree inside APPDATA in .Renviron use
> >>>       > R_LIBS_USER="${APPDATA}"/R-library
> >>>
> >>>       > Incidentally the last example is on backslashes too.
> >>>
> >>>
> >>>       > What do you think?
> >>>
> >>> I agree that adding an example really helps a lot in such cases,
> >>> in my experience, notably if it's precise enough to be used +/- directly.
> >> Yes, I agree as well. I think the Renviron files should be written in a
> >> way so that they would work the same in a POSIX shell, so e.g.
> >> VAR="${VAR0}" or VAR="${VAR0}/subdir" are the recommended ways to
> >> preserve backslashes in VAR0. It is better to use forward slashes in
> >> string literals, e.g. VAR="c:/users". If one still needed backslashes,
> >> they could then be entered in single quotes, e.g. VAR='c:\users'.
> >>
> >> The currently implemented parsing of Renviron files differs in a number
> >> of details from POSIX shells, some are documented and some are not.
> >> Relying only on the documented behavior that is the same as in POSIX
> >> shells is the best choice for future compatibility.
> >>
> >> Tomas
> >>
> >>>
> >>>       > On Mon, Oct 18, 2021 at 5:02 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>       >>
> >>>       >>
> >>>       >> On 10/15/21 6:44 PM, Micha? Bojanowski wrote:
> >>>       >> > Perhaps a small update to ?.Renviron would be in order to mention that...
> >>>       >>
> >>>       >> Would you have a more specific suggestion how to update the
> >>>       >> documentation? Please note that it already says
> >>>       >>
> >>>       >> "?value? is then processed in a similar way to a Unix shell: in
> >>>       >> particular the outermost level of (single or double) quotes is stripped,
> >>>       >> and backslashes are removed except inside quotes."
> >>>       >>
> >>>       >> Thanks,
> >>>       >> Tomas
> >>>       >>
> >>>       >> > On Fri, Oct 15, 2021 at 6:43 PM Micha? Bojanowski <michal2992 at gmail.com> wrote:
> >>>       >> >> Indeed quoting works! Kevin suggested the same, but he didnt reply to the list.
> >>>       >> >> Thank you all!
> >>>       >> >> Michal
> >>>       >> >>
> >>>       >> >> On Fri, Oct 15, 2021 at 6:40 PM Ivan Krylov <krylov.r00t at gmail.com> wrote:
> >>>       >> >>> Sorry for the noise! I wasn't supposed to send my previous message.
> >>>       >> >>>
> >>>       >> >>> On Fri, 15 Oct 2021 16:44:28 +0200
> >>>       >> >>> Micha? Bojanowski <michal2992 at gmail.com> wrote:
> >>>       >> >>>
> >>>       >> >>>> AVAR=${APPDATA}/foo/bar
> >>>       >> >>>>
> >>>       >> >>>> Which is a documented way of referring to existing environment
> >>>       >> >>>> variables. Now, with that in R I'm getting:
> >>>       >> >>>>
> >>>       >> >>>> Sys.getenv("APPDATA")    # That works OK
> >>>       >> >>>> [1] "C:\\Users\\mbojanowski\\AppData\\Roaming"
> >>>       >> >>>>
> >>>       >> >>>> so OK, but:
> >>>       >> >>>>
> >>>       >> >>>> Sys.getenv("AVAR")
> >>>       >> >>>> [1] "C:UsersmbojanowskiAppDataRoaming/foo/bar"
> >>>       >> >>> Hmm, a function called by readRenviron does seem to remove backslashes,
> >>>       >> >>> but not if they are encountered inside quotes:
> >>>       >> >>>
> >>>       >> >>> https://github.com/r-devel/r-svn/blob/3f8b75857fb1397f9f3ceab6c75554e1a5386adc/src/main/Renviron.c#L149
> >>>       >> >>>
> >>>       >> >>> Would AVAR="${APPDATA}"/foo/bar work?
> >>>       >> >>>
> >>>       >> >>> --
> >>>       >> >>> Best regards,
> >>>       >> >>> Ivan
> >>>       >> > ______________________________________________
> >>>       >> > R-devel at r-project.org mailing list
> >>>       >> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>
> >>>       > ______________________________________________
> >>>       > R-devel at r-project.org mailing list
> >>>       > https://stat.ethz.ch/mailman/listinfo/r-devel
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel


From henr|k@bengt@@on @end|ng |rom gm@||@com  Wed Nov  3 01:52:29 2021
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Tue, 2 Nov 2021 17:52:29 -0700
Subject: [Rd] 
 BUG?: R CMD check with --as-cran *disables* checks for unused
 imports otherwise performed
In-Reply-To: <CANBtttbbDsSkgvDseywE3vi7jxcPG6V4Es_JfP7tWZQm4LTyoA@mail.gmail.com>
References: <CAFDcVCQtwySG8HpbOABqoKJ=B7kiQpj57SaU_hzQ=hSWDDa_GA@mail.gmail.com>
 <CANBtttbbDsSkgvDseywE3vi7jxcPG6V4Es_JfP7tWZQm4LTyoA@mail.gmail.com>
Message-ID: <CAFDcVCRtii3+EbXH=rPrvgYF1pGsVdeWApG749r-B8Kmku2OeA@mail.gmail.com>

I've just posted this to BugZilla as PR18229
(https://bugs.r-project.org/show_bug.cgi?id=18229) to make sure it's
tracked.

/Henrik

On Wed, Oct 20, 2021 at 8:08 PM Jeffrey Dick <j3ffdick at gmail.com> wrote:
>
> FWIW, I also encountered this issue and posted on R-pkg-devel about it, with no resolution at the time (May 2020). See "Dependencies NOTE lost with --as-cran" (https://stat.ethz.ch/pipermail/r-package-devel/2020q2/005467.html)
>
> On Wed, Oct 20, 2021 at 11:55 PM Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
>>
>> ISSUE:
>>
>> Using 'R CMD check' with --as-cran,
>> set_R_CHECK_PACKAGES_USED_IGNORE_UNUSED_IMPORTS_=TRUE, whereas the
>> default is FALSE, which you get if you don't add --as-cran.
>> I would expect --as-cran to check more things and more be conservative
>> than without.  So, is this behavior a mistake?  Could it be a thinko
>> around the negating "IGNORE", and the behavior is meant to be vice
>> verse?
>>
>> Example:
>>
>> $ R CMD check QDNAseq_1.29.4.tar.gz
>> ...
>> * using R version 4.1.1 (2021-08-10)
>> * using platform: x86_64-pc-linux-gnu (64-bit)
>> ...
>> * checking dependencies in R code ... NOTE
>> Namespace in Imports field not imported from: ?future?
>>   All declared Imports should be used.
>>
>> whereas, if I run with --as-cran, I don't get that NOTE;
>>
>> $ R CMD check --as-cran QDNAseq_1.29.4.tar.gz
>> ...
>> * checking dependencies in R code ... OK
>>
>>
>> TROUBLESHOOTING:
>>
>> In src/library/tools/R/check.R [1], the following is set if --as-cran is used:
>>
>>   Sys.setenv("_R_CHECK_PACKAGES_USED_IGNORE_UNUSED_IMPORTS_" = "TRUE")
>>
>> whereas, if not set, the default is:
>>
>> ignore_unused_imports <-
>> config_val_to_logical(Sys.getenv("_R_CHECK_PACKAGES_USED_IGNORE_UNUSED_IMPORTS_",
>> "FALSE"))
>>
>> [1] https://github.com/wch/r-source/blob/b50e3f755674cbb697a4a7395b766647a5cfeea2/src/library/tools/R/check.R#L6335
>> [2] https://github.com/wch/r-source/blob/b50e3f755674cbb697a4a7395b766647a5cfeea2/src/library/tools/R/QC.R#L5954-L5956
>>
>> /Henrik
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Nov  3 11:30:37 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 3 Nov 2021 11:30:37 +0100
Subject: [Rd] Fwd: Using existing envars in Renviron on friendly Windows
In-Reply-To: <CAFDcVCRn1kKeEPCqzjMrcCN=38GZa_ODHRvO6Oq8GccoaxX7bg@mail.gmail.com>
References: <CAByPayHQ33kLY+S6U6NGAzHRuMZJQhaoPhbCDGt6EpgAU9aB5w@mail.gmail.com>
 <CAByPayFCM72e32p6aBshSa0oD0wijUkRQ-vKKT9Aq2YD5rKrpg@mail.gmail.com>
 <20211015194037.595b389f@Tarkus>
 <CAByPayFOobioF-W6Xt=6vkEw2srbg1xc9p6YvyO+r-yu=4doTg@mail.gmail.com>
 <CAByPayEZskmsn1bsFACYvxUC+ENaDfyoJsvbxwxLKc8gNyRgzQ@mail.gmail.com>
 <3ec44e42-f7af-575c-1b69-fe7e2bda00b2@gmail.com>
 <CAByPayH4dzWOqnaFg0z=UxjgHp6BSNrP17DP3RJ4qLPfw6q33A@mail.gmail.com>
 <24945.33990.369010.718929@stat.math.ethz.ch>
 <38f36d15-c08e-d57c-41f7-31dcc9449e84@gmail.com>
 <CAFDcVCSmQO43H7Jpj132ba13Lg0GfyFQoa+ev0st5kH3bhZL4A@mail.gmail.com>
 <87e89990-ebc4-6879-a34e-4301c3b83563@gmail.com>
 <CAFDcVCRn1kKeEPCqzjMrcCN=38GZa_ODHRvO6Oq8GccoaxX7bg@mail.gmail.com>
Message-ID: <a85d0f84-413f-944a-ed8f-1a3420a231b4@gmail.com>


On 11/3/21 1:37 AM, Henrik Bengtsson wrote:
> Oh, I see, I misunderstood.  Thanks for clarifying.
>
> One more thing, to mix-and-match environment variables and strings
> with escaped characters, while mimicking how POSIX shells does it, by
> using strings with double and single quotes. For example, with:
>
> $ cat .Renviron
> APPDATA='C:\Users\foobar\AppData\Roaming'
> R_LIBS_USER="${APPDATA}"'\R-library'
>
> we get:
>
> $ Rscript --no-init-file --quiet -e 'cat(sprintf("R_LIBS_USER=[%s]\n",
> Sys.getenv("R_LIBS_USER")))'
> R_LIBS_USER=[C:\Users\foobar\AppData\Roaming\R-library]
>
> and
>
> $ source .Renviron
> $ echo "R_LIBS_USER=[${R_LIBS_USER}]"
> R_LIBS_USER=[C:\Users\foobar\AppData\Roaming\R-library]
Yes, that could be mentioned explicitly as well.

Tomas


>
> /Henrik
>
> On Sun, Oct 31, 2021 at 2:59 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>
>> On 10/31/21 2:55 AM, Henrik Bengtsson wrote:
>>>> ... If one still needed backslashes,
>>>> they could then be entered in single quotes, e.g. VAR='c:\users'.
>>> I don't think it matters whether you use single or double quotes -
>>> both will work.  Here's a proof of concept on Linux with R 4.1.1:
>>>
>>> $ cat ./.Renviron
>>> A=C:\users
>>> B='C:\users'
>>> C="C:\users"
>>>
>>> $ Rscript -e "Sys.getenv(c('A', 'B', 'C'))"
>>>             A           B           C
>>>     "C:users" "C:\\users" "C:\\users"
>> Yes, but as I wrote "I think the Renviron files should be written in a
>> way so that they would work the same in a POSIX shell". This is why
>> single quotes. With double quotes, backslashes are interpreted
>> differently from a POSIX shell.
>>
>> Tomas
>>
>>
>>> /Henrik
>>>
>>> On Wed, Oct 27, 2021 at 11:45 AM Tomas Kalibera
>>> <tomas.kalibera at gmail.com> wrote:
>>>> On 10/21/21 5:18 PM, Martin Maechler wrote:
>>>>>>>>>> Micha? Bojanowski
>>>>>>>>>>        on Wed, 20 Oct 2021 16:31:08 +0200 writes:
>>>>>        > Hello Tomas,
>>>>>        > Yes, that's accurate although rather terse, which is perhaps the
>>>>>        > reason why I did not realize it applies to my case.
>>>>>
>>>>>        > How about adding something in the direction of:
>>>>>
>>>>>        > 1. Continuing the cited paragraph with:
>>>>>        > In particular, on Windows it may be necessary to quote references to
>>>>>        > existing environment variables, especially those containing file paths
>>>>>        > (which include backslashes). For example: `"${WINVAR}"`.
>>>>>
>>>>>        > 2. Add an example (not run):
>>>>>
>>>>>        > # On Windows do quote references to variables containing paths, e.g.:
>>>>>        > # If APPDATA=C:\Users\foobar\AppData\Roaming
>>>>>        > # to point to a library tree inside APPDATA in .Renviron use
>>>>>        > R_LIBS_USER="${APPDATA}"/R-library
>>>>>
>>>>>        > Incidentally the last example is on backslashes too.
>>>>>
>>>>>
>>>>>        > What do you think?
>>>>>
>>>>> I agree that adding an example really helps a lot in such cases,
>>>>> in my experience, notably if it's precise enough to be used +/- directly.
>>>> Yes, I agree as well. I think the Renviron files should be written in a
>>>> way so that they would work the same in a POSIX shell, so e.g.
>>>> VAR="${VAR0}" or VAR="${VAR0}/subdir" are the recommended ways to
>>>> preserve backslashes in VAR0. It is better to use forward slashes in
>>>> string literals, e.g. VAR="c:/users". If one still needed backslashes,
>>>> they could then be entered in single quotes, e.g. VAR='c:\users'.
>>>>
>>>> The currently implemented parsing of Renviron files differs in a number
>>>> of details from POSIX shells, some are documented and some are not.
>>>> Relying only on the documented behavior that is the same as in POSIX
>>>> shells is the best choice for future compatibility.
>>>>
>>>> Tomas
>>>>
>>>>>        > On Mon, Oct 18, 2021 at 5:02 PM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>        >>
>>>>>        >>
>>>>>        >> On 10/15/21 6:44 PM, Micha? Bojanowski wrote:
>>>>>        >> > Perhaps a small update to ?.Renviron would be in order to mention that...
>>>>>        >>
>>>>>        >> Would you have a more specific suggestion how to update the
>>>>>        >> documentation? Please note that it already says
>>>>>        >>
>>>>>        >> "?value? is then processed in a similar way to a Unix shell: in
>>>>>        >> particular the outermost level of (single or double) quotes is stripped,
>>>>>        >> and backslashes are removed except inside quotes."
>>>>>        >>
>>>>>        >> Thanks,
>>>>>        >> Tomas
>>>>>        >>
>>>>>        >> > On Fri, Oct 15, 2021 at 6:43 PM Micha? Bojanowski <michal2992 at gmail.com> wrote:
>>>>>        >> >> Indeed quoting works! Kevin suggested the same, but he didnt reply to the list.
>>>>>        >> >> Thank you all!
>>>>>        >> >> Michal
>>>>>        >> >>
>>>>>        >> >> On Fri, Oct 15, 2021 at 6:40 PM Ivan Krylov <krylov.r00t at gmail.com> wrote:
>>>>>        >> >>> Sorry for the noise! I wasn't supposed to send my previous message.
>>>>>        >> >>>
>>>>>        >> >>> On Fri, 15 Oct 2021 16:44:28 +0200
>>>>>        >> >>> Micha? Bojanowski <michal2992 at gmail.com> wrote:
>>>>>        >> >>>
>>>>>        >> >>>> AVAR=${APPDATA}/foo/bar
>>>>>        >> >>>>
>>>>>        >> >>>> Which is a documented way of referring to existing environment
>>>>>        >> >>>> variables. Now, with that in R I'm getting:
>>>>>        >> >>>>
>>>>>        >> >>>> Sys.getenv("APPDATA")    # That works OK
>>>>>        >> >>>> [1] "C:\\Users\\mbojanowski\\AppData\\Roaming"
>>>>>        >> >>>>
>>>>>        >> >>>> so OK, but:
>>>>>        >> >>>>
>>>>>        >> >>>> Sys.getenv("AVAR")
>>>>>        >> >>>> [1] "C:UsersmbojanowskiAppDataRoaming/foo/bar"
>>>>>        >> >>> Hmm, a function called by readRenviron does seem to remove backslashes,
>>>>>        >> >>> but not if they are encountered inside quotes:
>>>>>        >> >>>
>>>>>        >> >>> https://github.com/r-devel/r-svn/blob/3f8b75857fb1397f9f3ceab6c75554e1a5386adc/src/main/Renviron.c#L149
>>>>>        >> >>>
>>>>>        >> >>> Would AVAR="${APPDATA}"/foo/bar work?
>>>>>        >> >>>
>>>>>        >> >>> --
>>>>>        >> >>> Best regards,
>>>>>        >> >>> Ivan
>>>>>        >> > ______________________________________________
>>>>>        >> > R-devel at r-project.org mailing list
>>>>>        >> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>
>>>>>        > ______________________________________________
>>>>>        > R-devel at r-project.org mailing list
>>>>>        > https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel


From dmedri m@iii@g oii gm@ii@com  Wed Nov  3 12:36:12 2021
From: dmedri m@iii@g oii gm@ii@com (dmedri m@iii@g oii gm@ii@com)
Date: Wed, 03 Nov 2021 12:36:12 +0100
Subject: [Rd] R 4.1.2 is released
In-Reply-To: <C893C950-C99E-4931-9481-095FB0115737@gmail.com>
References: <C893C950-C99E-4931-9481-095FB0115737@gmail.com>
Message-ID: <73bd5b0043565985e353662cd4655905d1fc090f.camel@gmail.com>

Il giorno lun, 01/11/2021 alle 09.35 +0100, Peter Dalgaard ha scritto:
> The build system rolled up R-4.1.2.tar.gz (codename "Bird Hippie") this
> morning.

Dear Peter Dalgaard,
thank you very much for you work.

The italian translation in codebase should be already up-to sync, but
latest updated version is in my github repo:

https://github.com/dmedri/R-italian-lang/releases/tag/R4.1.2


To update R and test latest translations in an unusual way:

# get the latest Roaster release

git clone https://www.github.com/dmedri/roaster
cd roaster/

# select your build configuration on Linux:
# 1. standard build in system (--build-standard)
# 2. virtual environment (--build-virtualenv)
# 3. server (--build-server)

./roaster --build-virtualenv

# get the latest Italian translation:

git clone https://www.github.com/dmedri/R-italian-lang
cd R-italian-lang/
./repo.roaster


HTH

Best Regards
--
DM


From r-deve| @end|ng |rom @ker@t|ng@de  Wed Nov  3 12:51:43 2021
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Wed, 03 Nov 2021 12:51:43 +0100 (CET)
Subject: [Rd] GC: speeding-up the CHARSXP cache maintenance, 2nd try
Message-ID: <E1miEnv-0003jj-HB@rmmprod05.runbox>

Hi,

In https://stat.ethz.ch/pipermail/r-devel/2021-October/081147.html I proposed to speed up the CHARSXP cache maintenance during GC using threading. This was rejected by Luke in https://stat.ethz.ch/pipermail/r-devel/2021-October/081172.html.

Here I want to propose an alternative approach to significantly speed up CHARSXP cache maintenance during partial GCs. A patch which passes `make check-devel` is attached. Compared to R devel (revision 81110) I get the following performance improvements on my system:

Elapsed time for five non-full gc in a session after

x <- as.character(runif(5e7))[]
gc(full = TRUE)

+20sec -> ~1sec.


This patch introduces (theoretical) overheads to mkCharLenCE() and full GCs. However, I did not measure dramatic differences:

y <- "old_CHARSXP" 

after

x <- "old_CHARSXP"; gc(); gc()

takes a median 32 nanoseconds with and without the patch.


gc(full = TRUE)

in a new session takes a median 16 milliseconds with and 14 without the patch.


The basic idea is to maintain the CHARSXP cache using subtables in R_StringHash, one for each of the (NUM_GC_GENERATIONS := NUM_OLD_GENERATIONS + 1) GC generations. New CHARSXPs are added by mkCharLenCE() to the subtable of the youngest generation. After a partial GC, only the chains anchored at the subtables of the youngest (num_old_gens_to_collect + 1) generations need to be searched for and cleaned of unmarked nodes. Afterwards, these chains need to be merged into those of the respective next generation, if any. This approach relies on the fact that an object/CHARSXP can never become younger again. It is OK though if an object/CHARSXP "skips" a GC generation.

R_StringHash, which is now of length (NUM_GC_GENERATIONS * char_hash_size), is structured such that the chains for the same hashcode but for different generations are anchored at slots of R_StringHash which are next to each other in memory. This is because we often need to access two or more (i.e. currently all three) of them for one operation and this avoids cache misses.

HASHPRI, i.e. the number of occupied primary slots, is computed and stored as NUM_GC_GENERATIONS times the number of slots which are occupied in at least one of the subtables. This is done because in mkCharLenCE() we need to iterate through one or more chains if and only if there is a chain for the particular hashcode in at least one subtable.

I tried to keep the patch as minimal as possible. In particular, I did not add long vector support to R_StringHash. I rather reduced the max value of char_hash_size from 2^30 to 2^29, assuming that NUM_OLD_GENERATIONS is (not larger than) 2. I also did not yet adjust do_show_cache() and do_write_cache(), but I could do so if the patch is accepted.

Thanks for your consideration and feedback.

Regards,
Andreas


P.S. I had a hard time to get the indentation right in the patch due the mix of tabs and spaces. Sorry, if I screwed this up.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: r_stringhash.diff
Type: text/x-patch
Size: 8495 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20211103/078ff701/attachment.bin>

From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Nov  4 15:24:09 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 4 Nov 2021 15:24:09 +0100
Subject: [Rd] Fwd: Using existing envars in Renviron on friendly Windows
In-Reply-To: <a85d0f84-413f-944a-ed8f-1a3420a231b4@gmail.com>
References: <CAByPayHQ33kLY+S6U6NGAzHRuMZJQhaoPhbCDGt6EpgAU9aB5w@mail.gmail.com>
 <CAByPayFCM72e32p6aBshSa0oD0wijUkRQ-vKKT9Aq2YD5rKrpg@mail.gmail.com>
 <20211015194037.595b389f@Tarkus>
 <CAByPayFOobioF-W6Xt=6vkEw2srbg1xc9p6YvyO+r-yu=4doTg@mail.gmail.com>
 <CAByPayEZskmsn1bsFACYvxUC+ENaDfyoJsvbxwxLKc8gNyRgzQ@mail.gmail.com>
 <3ec44e42-f7af-575c-1b69-fe7e2bda00b2@gmail.com>
 <CAByPayH4dzWOqnaFg0z=UxjgHp6BSNrP17DP3RJ4qLPfw6q33A@mail.gmail.com>
 <24945.33990.369010.718929@stat.math.ethz.ch>
 <38f36d15-c08e-d57c-41f7-31dcc9449e84@gmail.com>
 <CAFDcVCSmQO43H7Jpj132ba13Lg0GfyFQoa+ev0st5kH3bhZL4A@mail.gmail.com>
 <87e89990-ebc4-6879-a34e-4301c3b83563@gmail.com>
 <CAFDcVCRn1kKeEPCqzjMrcCN=38GZa_ODHRvO6Oq8GccoaxX7bg@mail.gmail.com>
 <a85d0f84-413f-944a-ed8f-1a3420a231b4@gmail.com>
Message-ID: <25766be5-137b-e8e2-292a-e43f77b042c4@gmail.com>

Thanks for the suggestions, I've updated the documentation.
Tomas

On 11/3/21 11:30 AM, Tomas Kalibera wrote:
>
> On 11/3/21 1:37 AM, Henrik Bengtsson wrote:
>> Oh, I see, I misunderstood.? Thanks for clarifying.
>>
>> One more thing, to mix-and-match environment variables and strings
>> with escaped characters, while mimicking how POSIX shells does it, by
>> using strings with double and single quotes. For example, with:
>>
>> $ cat .Renviron
>> APPDATA='C:\Users\foobar\AppData\Roaming'
>> R_LIBS_USER="${APPDATA}"'\R-library'
>>
>> we get:
>>
>> $ Rscript --no-init-file --quiet -e 'cat(sprintf("R_LIBS_USER=[%s]\n",
>> Sys.getenv("R_LIBS_USER")))'
>> R_LIBS_USER=[C:\Users\foobar\AppData\Roaming\R-library]
>>
>> and
>>
>> $ source .Renviron
>> $ echo "R_LIBS_USER=[${R_LIBS_USER}]"
>> R_LIBS_USER=[C:\Users\foobar\AppData\Roaming\R-library]
> Yes, that could be mentioned explicitly as well.
>
> Tomas
>
>
>>
>> /Henrik
>>
>> On Sun, Oct 31, 2021 at 2:59 AM Tomas Kalibera 
>> <tomas.kalibera at gmail.com> wrote:
>>>
>>> On 10/31/21 2:55 AM, Henrik Bengtsson wrote:
>>>>> ... If one still needed backslashes,
>>>>> they could then be entered in single quotes, e.g. VAR='c:\users'.
>>>> I don't think it matters whether you use single or double quotes -
>>>> both will work.? Here's a proof of concept on Linux with R 4.1.1:
>>>>
>>>> $ cat ./.Renviron
>>>> A=C:\users
>>>> B='C:\users'
>>>> C="C:\users"
>>>>
>>>> $ Rscript -e "Sys.getenv(c('A', 'B', 'C'))"
>>>> ??????????? A?????????? B?????????? C
>>>> ??? "C:users" "C:\\users" "C:\\users"
>>> Yes, but as I wrote "I think the Renviron files should be written in a
>>> way so that they would work the same in a POSIX shell". This is why
>>> single quotes. With double quotes, backslashes are interpreted
>>> differently from a POSIX shell.
>>>
>>> Tomas
>>>
>>>
>>>> /Henrik
>>>>
>>>> On Wed, Oct 27, 2021 at 11:45 AM Tomas Kalibera
>>>> <tomas.kalibera at gmail.com> wrote:
>>>>> On 10/21/21 5:18 PM, Martin Maechler wrote:
>>>>>>>>>>> Micha? Bojanowski
>>>>>>>>>>> ?????? on Wed, 20 Oct 2021 16:31:08 +0200 writes:
>>>>>> ?????? > Hello Tomas,
>>>>>> ?????? > Yes, that's accurate although rather terse, which is 
>>>>>> perhaps the
>>>>>> ?????? > reason why I did not realize it applies to my case.
>>>>>>
>>>>>> ?????? > How about adding something in the direction of:
>>>>>>
>>>>>> ?????? > 1. Continuing the cited paragraph with:
>>>>>> ?????? > In particular, on Windows it may be necessary to quote 
>>>>>> references to
>>>>>> ?????? > existing environment variables, especially those 
>>>>>> containing file paths
>>>>>> ?????? > (which include backslashes). For example: `"${WINVAR}"`.
>>>>>>
>>>>>> ?????? > 2. Add an example (not run):
>>>>>>
>>>>>> ?????? > # On Windows do quote references to variables containing 
>>>>>> paths, e.g.:
>>>>>> ?????? > # If APPDATA=C:\Users\foobar\AppData\Roaming
>>>>>> ?????? > # to point to a library tree inside APPDATA in .Renviron 
>>>>>> use
>>>>>> ?????? > R_LIBS_USER="${APPDATA}"/R-library
>>>>>>
>>>>>> ?????? > Incidentally the last example is on backslashes too.
>>>>>>
>>>>>>
>>>>>> ?????? > What do you think?
>>>>>>
>>>>>> I agree that adding an example really helps a lot in such cases,
>>>>>> in my experience, notably if it's precise enough to be used +/- 
>>>>>> directly.
>>>>> Yes, I agree as well. I think the Renviron files should be written 
>>>>> in a
>>>>> way so that they would work the same in a POSIX shell, so e.g.
>>>>> VAR="${VAR0}" or VAR="${VAR0}/subdir" are the recommended ways to
>>>>> preserve backslashes in VAR0. It is better to use forward slashes in
>>>>> string literals, e.g. VAR="c:/users". If one still needed 
>>>>> backslashes,
>>>>> they could then be entered in single quotes, e.g. VAR='c:\users'.
>>>>>
>>>>> The currently implemented parsing of Renviron files differs in a 
>>>>> number
>>>>> of details from POSIX shells, some are documented and some are not.
>>>>> Relying only on the documented behavior that is the same as in POSIX
>>>>> shells is the best choice for future compatibility.
>>>>>
>>>>> Tomas
>>>>>
>>>>>> ?????? > On Mon, Oct 18, 2021 at 5:02 PM Tomas Kalibera 
>>>>>> <tomas.kalibera at gmail.com> wrote:
>>>>>> ?????? >>
>>>>>> ?????? >>
>>>>>> ?????? >> On 10/15/21 6:44 PM, Micha? Bojanowski wrote:
>>>>>> ?????? >> > Perhaps a small update to ?.Renviron would be in 
>>>>>> order to mention that...
>>>>>> ?????? >>
>>>>>> ?????? >> Would you have a more specific suggestion how to update 
>>>>>> the
>>>>>> ?????? >> documentation? Please note that it already says
>>>>>> ?????? >>
>>>>>> ?????? >> "?value? is then processed in a similar way to a Unix 
>>>>>> shell: in
>>>>>> ?????? >> particular the outermost level of (single or double) 
>>>>>> quotes is stripped,
>>>>>> ?????? >> and backslashes are removed except inside quotes."
>>>>>> ?????? >>
>>>>>> ?????? >> Thanks,
>>>>>> ?????? >> Tomas
>>>>>> ?????? >>
>>>>>> ?????? >> > On Fri, Oct 15, 2021 at 6:43 PM Micha? Bojanowski 
>>>>>> <michal2992 at gmail.com> wrote:
>>>>>> ?????? >> >> Indeed quoting works! Kevin suggested the same, but 
>>>>>> he didnt reply to the list.
>>>>>> ?????? >> >> Thank you all!
>>>>>> ?????? >> >> Michal
>>>>>> ?????? >> >>
>>>>>> ?????? >> >> On Fri, Oct 15, 2021 at 6:40 PM Ivan Krylov 
>>>>>> <krylov.r00t at gmail.com> wrote:
>>>>>> ?????? >> >>> Sorry for the noise! I wasn't supposed to send my 
>>>>>> previous message.
>>>>>> ?????? >> >>>
>>>>>> ?????? >> >>> On Fri, 15 Oct 2021 16:44:28 +0200
>>>>>> ?????? >> >>> Micha? Bojanowski <michal2992 at gmail.com> wrote:
>>>>>> ?????? >> >>>
>>>>>> ?????? >> >>>> AVAR=${APPDATA}/foo/bar
>>>>>> ?????? >> >>>>
>>>>>> ?????? >> >>>> Which is a documented way of referring to existing 
>>>>>> environment
>>>>>> ?????? >> >>>> variables. Now, with that in R I'm getting:
>>>>>> ?????? >> >>>>
>>>>>> ?????? >> >>>> Sys.getenv("APPDATA")??? # That works OK
>>>>>> ?????? >> >>>> [1] "C:\\Users\\mbojanowski\\AppData\\Roaming"
>>>>>> ?????? >> >>>>
>>>>>> ?????? >> >>>> so OK, but:
>>>>>> ?????? >> >>>>
>>>>>> ?????? >> >>>> Sys.getenv("AVAR")
>>>>>> ?????? >> >>>> [1] "C:UsersmbojanowskiAppDataRoaming/foo/bar"
>>>>>> ?????? >> >>> Hmm, a function called by readRenviron does seem to 
>>>>>> remove backslashes,
>>>>>> ?????? >> >>> but not if they are encountered inside quotes:
>>>>>> ?????? >> >>>
>>>>>> ?????? >> >>> 
>>>>>> https://github.com/r-devel/r-svn/blob/3f8b75857fb1397f9f3ceab6c75554e1a5386adc/src/main/Renviron.c#L149
>>>>>> ?????? >> >>>
>>>>>> ?????? >> >>> Would AVAR="${APPDATA}"/foo/bar work?
>>>>>> ?????? >> >>>
>>>>>> ?????? >> >>> --
>>>>>> ?????? >> >>> Best regards,
>>>>>> ?????? >> >>> Ivan
>>>>>> ?????? >> > ______________________________________________
>>>>>> ?????? >> > R-devel at r-project.org mailing list
>>>>>> ?????? >> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>>>
>>>>>> ?????? > ______________________________________________
>>>>>> ?????? > R-devel at r-project.org mailing list
>>>>>> ?????? > https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel


From iuke-tier@ey m@iii@g oii uiow@@edu  Thu Nov  4 17:04:18 2021
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Thu, 4 Nov 2021 11:04:18 -0500 (CDT)
Subject: [Rd] [External]  GC: speeding-up the CHARSXP cache maintenance,
 2nd try
In-Reply-To: <E1miEnv-0003jj-HB@rmmprod05.runbox>
References: <E1miEnv-0003jj-HB@rmmprod05.runbox>
Message-ID: <alpine.DEB.2.22.394.2111041100400.388953@luke-Latitude-7480>

Can you please submit this as a wishlist item to bugzilla? it is
easier to keep track of there. You could also submit your threads
based suggestion there, again to keep it easier to keep track of and
possibly get back to in the future.

I will have a look at your approach when I get a chance, but I am
exploring a different approach to avoid scanning old generations that
may be simpler.

Best,

luke

On Wed, 3 Nov 2021, Andreas Kersting wrote:

> Hi,
>
> In https://stat.ethz.ch/pipermail/r-devel/2021-October/081147.html I proposed to speed up the CHARSXP cache maintenance during GC using threading. This was rejected by Luke in https://stat.ethz.ch/pipermail/r-devel/2021-October/081172.html.
>
> Here I want to propose an alternative approach to significantly speed up CHARSXP cache maintenance during partial GCs. A patch which passes `make check-devel` is attached. Compared to R devel (revision 81110) I get the following performance improvements on my system:
>
> Elapsed time for five non-full gc in a session after
>
> x <- as.character(runif(5e7))[]
> gc(full = TRUE)
>
> +20sec -> ~1sec.
>
>
> This patch introduces (theoretical) overheads to mkCharLenCE() and full GCs. However, I did not measure dramatic differences:
>
> y <- "old_CHARSXP"
>
> after
>
> x <- "old_CHARSXP"; gc(); gc()
>
> takes a median 32 nanoseconds with and without the patch.
>
>
> gc(full = TRUE)
>
> in a new session takes a median 16 milliseconds with and 14 without the patch.
>
>
> The basic idea is to maintain the CHARSXP cache using subtables in R_StringHash, one for each of the (NUM_GC_GENERATIONS := NUM_OLD_GENERATIONS + 1) GC generations. New CHARSXPs are added by mkCharLenCE() to the subtable of the youngest generation. After a partial GC, only the chains anchored at the subtables of the youngest (num_old_gens_to_collect + 1) generations need to be searched for and cleaned of unmarked nodes. Afterwards, these chains need to be merged into those of the respective next generation, if any. This approach relies on the fact that an object/CHARSXP can never become younger again. It is OK though if an object/CHARSXP "skips" a GC generation.
>
> R_StringHash, which is now of length (NUM_GC_GENERATIONS * char_hash_size), is structured such that the chains for the same hashcode but for different generations are anchored at slots of R_StringHash which are next to each other in memory. This is because we often need to access two or more (i.e. currently all three) of them for one operation and this avoids cache misses.
>
> HASHPRI, i.e. the number of occupied primary slots, is computed and stored as NUM_GC_GENERATIONS times the number of slots which are occupied in at least one of the subtables. This is done because in mkCharLenCE() we need to iterate through one or more chains if and only if there is a chain for the particular hashcode in at least one subtable.
>
> I tried to keep the patch as minimal as possible. In particular, I did not add long vector support to R_StringHash. I rather reduced the max value of char_hash_size from 2^30 to 2^29, assuming that NUM_OLD_GENERATIONS is (not larger than) 2. I also did not yet adjust do_show_cache() and do_write_cache(), but I could do so if the patch is accepted.
>
> Thanks for your consideration and feedback.
>
> Regards,
> Andreas
>
>
> P.S. I had a hard time to get the indentation right in the patch due the mix of tabs and spaces. Sorry, if I screwed this up.

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From ch|r|com @end|ng |rom goog|e@com  Thu Nov  4 19:50:04 2021
From: ch|r|com @end|ng |rom goog|e@com (Michael Chirico)
Date: Thu, 4 Nov 2021 11:50:04 -0700
Subject: [Rd] .onLoad, packageStartupMessage, and R CMD check
Message-ID: <CAD7Bkx9ySNzwwbnADzA3k=AA8gvW-jMdO+C_w9eHOAXR5pCeOg@mail.gmail.com>

I wrote a linter to stop users from using packageStartupMessage() in
their .onLoad() hook because of the R CMD check warning it triggers:

https://github.com/wch/r-source/blob/8b6625e39cd62424dc23399dade37f20fa8afa91/src/library/tools/R/QC.R#L5167

However, this received some pushback which I ultimately agree with,
and moreover ?.onLoad seems to agree as well:

> Loading a namespace should where possible be silent, with startup
messages given by \code{.onAttach}. These messages (**and any essential
ones from \code{.onLoad}**) should use \code{\link{packageStartupMessage}}
so they can be silenced where they would be a distraction.

**emphasis** mine. That is, if we think some message is _essential_ to
print during loadNamespace(), we are told to use
packageStartupMessage().

Should we remove this R CMD check warning?


From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Nov  4 20:37:01 2021
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 4 Nov 2021 15:37:01 -0400
Subject: [Rd] .onLoad, packageStartupMessage, and R CMD check
In-Reply-To: <CAD7Bkx9ySNzwwbnADzA3k=AA8gvW-jMdO+C_w9eHOAXR5pCeOg@mail.gmail.com>
References: <CAD7Bkx9ySNzwwbnADzA3k=AA8gvW-jMdO+C_w9eHOAXR5pCeOg@mail.gmail.com>
Message-ID: <c364a4c7-4db5-71e9-9079-0c694043a37f@gmail.com>

On 04/11/2021 2:50 p.m., Michael Chirico via R-devel wrote:
> I wrote a linter to stop users from using packageStartupMessage() in
> their .onLoad() hook because of the R CMD check warning it triggers:
> 
> https://github.com/wch/r-source/blob/8b6625e39cd62424dc23399dade37f20fa8afa91/src/library/tools/R/QC.R#L5167
> 
> However, this received some pushback which I ultimately agree with,
> and moreover ?.onLoad seems to agree as well:
> 
>> Loading a namespace should where possible be silent, with startup
> messages given by \code{.onAttach}. These messages (**and any essential
> ones from \code{.onLoad}**) should use \code{\link{packageStartupMessage}}
> so they can be silenced where they would be a distraction.
> 
> **emphasis** mine. That is, if we think some message is _essential_ to
> print during loadNamespace(), we are told to use
> packageStartupMessage().
> 
> Should we remove this R CMD check warning?

The help page doesn't define what an "essential" message would be, but I 
would assume it's a message about some dire condition, not just "Hi! I 
just got loaded!".  So I think a note or warning would be appropriate, 
but not an error.

Do you have an example of something that should routinely print, but 
that triggers a warning when checked?

Duncan Murdoch


From g@bembecker @end|ng |rom gm@||@com  Thu Nov  4 21:02:38 2021
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Thu, 4 Nov 2021 13:02:38 -0700
Subject: [Rd] .onLoad, packageStartupMessage, and R CMD check
In-Reply-To: <c364a4c7-4db5-71e9-9079-0c694043a37f@gmail.com>
References: <CAD7Bkx9ySNzwwbnADzA3k=AA8gvW-jMdO+C_w9eHOAXR5pCeOg@mail.gmail.com>
 <c364a4c7-4db5-71e9-9079-0c694043a37f@gmail.com>
Message-ID: <CAD4oTHFAOdWPn2uORPRjQ_WACWVqWtb3kJDusfYRqBPRVMWDEQ@mail.gmail.com>

Hi Michael,

Indeed, just to elaborate further on what I believe Duncan's point is, can
you give any examples, "dire" or not, that are appropriate when the package
is loaded but not attached (ie none of its symbols are visible to the user
without using :::)?

The only things I can think of are a package that changes the behavior of
other, attached package code, such as conflicted. Doing so is very much an
anti-pattern imo generally, with something like conflicted being an
(arguable) exception. And that's assuming conflicted even works/does
anything when loaded but not attached (I have not confirmed whether thats
the case or not). That or a package that is at end-of-life and is or soon
will be unsupported entirely.

The examples don't need to be yours, per se, if you know what those pushing
back against your linter were using messages from .onLoad for...

Best,
~G



On Thu, Nov 4, 2021 at 12:37 PM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> On 04/11/2021 2:50 p.m., Michael Chirico via R-devel wrote:
> > I wrote a linter to stop users from using packageStartupMessage() in
> > their .onLoad() hook because of the R CMD check warning it triggers:
> >
> >
> https://github.com/wch/r-source/blob/8b6625e39cd62424dc23399dade37f20fa8afa91/src/library/tools/R/QC.R#L5167
> >
> > However, this received some pushback which I ultimately agree with,
> > and moreover ?.onLoad seems to agree as well:
> >
> >> Loading a namespace should where possible be silent, with startup
> > messages given by \code{.onAttach}. These messages (**and any essential
> > ones from \code{.onLoad}**) should use
> \code{\link{packageStartupMessage}}
> > so they can be silenced where they would be a distraction.
> >
> > **emphasis** mine. That is, if we think some message is _essential_ to
> > print during loadNamespace(), we are told to use
> > packageStartupMessage().
> >
> > Should we remove this R CMD check warning?
>
> The help page doesn't define what an "essential" message would be, but I
> would assume it's a message about some dire condition, not just "Hi! I
> just got loaded!".  So I think a note or warning would be appropriate,
> but not an error.
>
> Do you have an example of something that should routinely print, but
> that triggers a warning when checked?
>
> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From ch|r|com @end|ng |rom goog|e@com  Fri Nov  5 06:08:51 2021
From: ch|r|com @end|ng |rom goog|e@com (Michael Chirico)
Date: Thu, 4 Nov 2021 22:08:51 -0700
Subject: [Rd] .onLoad, packageStartupMessage, and R CMD check
In-Reply-To: <CAD4oTHFAOdWPn2uORPRjQ_WACWVqWtb3kJDusfYRqBPRVMWDEQ@mail.gmail.com>
References: <CAD7Bkx9ySNzwwbnADzA3k=AA8gvW-jMdO+C_w9eHOAXR5pCeOg@mail.gmail.com>
 <c364a4c7-4db5-71e9-9079-0c694043a37f@gmail.com>
 <CAD4oTHFAOdWPn2uORPRjQ_WACWVqWtb3kJDusfYRqBPRVMWDEQ@mail.gmail.com>
Message-ID: <CAD7Bkx9idq2WjMXkp8jDNA5aWqmZhyTivfpQUNV==L9nfE0aiw@mail.gmail.com>

Examining more closely, it's a NOTE produced by R CMD check --
originally I had thought it was a WARNING, which I think would have
been too strong for this case. A NOTE actually seems fine, on second
thought.

For a tiny bit of context, it's common for us to issue messaging
around some state initialization, which has to happen after some
(ex-ante unknown) set of packages are loaded. It's important to do so
whether or not the package is attached, so the proviso in .onLoad()
indeed makes the most sense.

Thanks!

On Thu, Nov 4, 2021 at 1:02 PM Gabriel Becker <gabembecker at gmail.com> wrote:
>
> Hi Michael,
>
> Indeed, just to elaborate further on what I believe Duncan's point is, can you give any examples, "dire" or not, that are appropriate when the package is loaded but not attached (ie none of its symbols are visible to the user without using :::)?
>
> The only things I can think of are a package that changes the behavior of other, attached package code, such as conflicted. Doing so is very much an anti-pattern imo generally, with something like conflicted being an (arguable) exception. And that's assuming conflicted even works/does anything when loaded but not attached (I have not confirmed whether thats the case or not). That or a package that is at end-of-life and is or soon will be unsupported entirely.
>
> The examples don't need to be yours, per se, if you know what those pushing back against your linter were using messages from .onLoad for...
>
> Best,
> ~G
>
>
>
> On Thu, Nov 4, 2021 at 12:37 PM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>
>> On 04/11/2021 2:50 p.m., Michael Chirico via R-devel wrote:
>> > I wrote a linter to stop users from using packageStartupMessage() in
>> > their .onLoad() hook because of the R CMD check warning it triggers:
>> >
>> > https://github.com/wch/r-source/blob/8b6625e39cd62424dc23399dade37f20fa8afa91/src/library/tools/R/QC.R#L5167
>> >
>> > However, this received some pushback which I ultimately agree with,
>> > and moreover ?.onLoad seems to agree as well:
>> >
>> >> Loading a namespace should where possible be silent, with startup
>> > messages given by \code{.onAttach}. These messages (**and any essential
>> > ones from \code{.onLoad}**) should use \code{\link{packageStartupMessage}}
>> > so they can be silenced where they would be a distraction.
>> >
>> > **emphasis** mine. That is, if we think some message is _essential_ to
>> > print during loadNamespace(), we are told to use
>> > packageStartupMessage().
>> >
>> > Should we remove this R CMD check warning?
>>
>> The help page doesn't define what an "essential" message would be, but I
>> would assume it's a message about some dire condition, not just "Hi! I
>> just got loaded!".  So I think a note or warning would be appropriate,
>> but not an error.
>>
>> Do you have an example of something that should routinely print, but
>> that triggers a warning when checked?
>>
>> Duncan Murdoch
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel


From d@tr7320 @end|ng |rom un|@@ydney@edu@@u  Fri Nov  5 13:00:04 2021
From: d@tr7320 @end|ng |rom un|@@ydney@edu@@u (Dario Strbenac)
Date: Fri, 5 Nov 2021 12:00:04 +0000
Subject: [Rd] Data Frame Conversion and Table Input
Message-ID: <SYBPR01MB4761958F315F2D7ADA8FCDE7CD899@SYBPR01MB4761.ausprd01.prod.outlook.com>

Good day,

as.data.frame is documented on ?table and on ?as.data.frame (for list and matrix inputs). For inputs of list type and matrix type, there is an argument optional, which allows preservation of column names. If the input is a table, there is no such option. Could the API be made consistent for base data types?

--------------------------------------
Dario Strbenac
University of Sydney
Camperdown NSW 2050
Australia

From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Nov  5 13:38:06 2021
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 5 Nov 2021 08:38:06 -0400
Subject: [Rd] Data Frame Conversion and Table Input
In-Reply-To: <SYBPR01MB4761958F315F2D7ADA8FCDE7CD899@SYBPR01MB4761.ausprd01.prod.outlook.com>
References: <SYBPR01MB4761958F315F2D7ADA8FCDE7CD899@SYBPR01MB4761.ausprd01.prod.outlook.com>
Message-ID: <e404ac41-c190-ccc0-a055-cc84fcecf6ec@gmail.com>

On 05/11/2021 8:00 a.m., Dario Strbenac via R-devel wrote:
> Good day,
> 
> as.data.frame is documented on ?table and on ?as.data.frame (for list and matrix inputs). For inputs of list type and matrix type, there is an argument optional, which allows preservation of column names. If the input is a table, there is no such option. Could the API be made consistent for base data types?

as.data.frame.character is also inconsistent with the generic.

Duncan Murdoch


From henr|k@bengt@@on @end|ng |rom gm@||@com  Fri Nov  5 15:51:22 2021
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Fri, 5 Nov 2021 15:51:22 +0100
Subject: [Rd] gettext(msgid, domain="R") doesn't work for some 'msgid':s
Message-ID: <CAFDcVCT0zPRGEG5ugr+yEbgKH57bo1MMwXRgh=q5y7OwAU1F0A@mail.gmail.com>

I'm trying to reuse some of the translations available in base R by using:

  gettext(msgid, domain="R")

This works great for most 'msgid's, e.g.

$ LANGUAGE=de Rscript -e 'gettext("cannot get working directory", domain="R")'
[1] "kann das Arbeitsverzeichnis nicht ermitteln"

However, it does not work for all.  For instance,

$ LANGUAGE=de Rscript -e 'gettext("Execution halted\n", domain="R")'
[1] "Execution halted\n"

This despite that 'msgid' existing in:

$ grep -C 2 -F 'Execution halted\n' src/library/base/po/de.po

#: src/main/main.c:342
msgid "Execution halted\n"
msgstr "Ausf?hrung angehalten\n"

It could be that the trailing newline causes problems, because the
same happens also for:

$ LANGUAGE=de Rscript --vanilla -e 'gettext("error during cleanup\n",
domain="R")'
[1] "error during cleanup\n"

Is this meant to work, and if so, how do I get it to work, or is it a bug?

Thanks,

Henrik


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Nov  5 16:12:20 2021
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 5 Nov 2021 11:12:20 -0400
Subject: [Rd] gettext(msgid, domain="R") doesn't work for some 'msgid':s
In-Reply-To: <CAFDcVCT0zPRGEG5ugr+yEbgKH57bo1MMwXRgh=q5y7OwAU1F0A@mail.gmail.com>
References: <CAFDcVCT0zPRGEG5ugr+yEbgKH57bo1MMwXRgh=q5y7OwAU1F0A@mail.gmail.com>
Message-ID: <000f4e2a-684d-e26b-2b1c-fabc28880d55@gmail.com>

On 05/11/2021 10:51 a.m., Henrik Bengtsson wrote:
> I'm trying to reuse some of the translations available in base R by using:
> 
>    gettext(msgid, domain="R")
> 
> This works great for most 'msgid's, e.g.
> 
> $ LANGUAGE=de Rscript -e 'gettext("cannot get working directory", domain="R")'
> [1] "kann das Arbeitsverzeichnis nicht ermitteln"
> 
> However, it does not work for all.  For instance,
> 
> $ LANGUAGE=de Rscript -e 'gettext("Execution halted\n", domain="R")'
> [1] "Execution halted\n"
> 
> This despite that 'msgid' existing in:
> 
> $ grep -C 2 -F 'Execution halted\n' src/library/base/po/de.po
> 
> #: src/main/main.c:342
> msgid "Execution halted\n"
> msgstr "Ausf?hrung angehalten\n"
> 
> It could be that the trailing newline causes problems, because the
> same happens also for:
> 
> $ LANGUAGE=de Rscript --vanilla -e 'gettext("error during cleanup\n",
> domain="R")'
> [1] "error during cleanup\n"
> 
> Is this meant to work, and if so, how do I get it to work, or is it a bug?

I don't know the solution, but I think the cause is different than you 
think, because I also have the problem with other strings not including 
"\n":

$ LANGUAGE=de Rscript -e 'gettext("malformed version string", domain="R")'
[1] "malformed version string"

Duncan Murdoch


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Fri Nov  5 16:13:19 2021
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Serguei Sokol)
Date: Fri, 5 Nov 2021 16:13:19 +0100
Subject: [Rd] gettext(msgid, domain="R") doesn't work for some 'msgid':s
In-Reply-To: <CAFDcVCT0zPRGEG5ugr+yEbgKH57bo1MMwXRgh=q5y7OwAU1F0A@mail.gmail.com>
References: <CAFDcVCT0zPRGEG5ugr+yEbgKH57bo1MMwXRgh=q5y7OwAU1F0A@mail.gmail.com>
Message-ID: <cbb50719-7151-0187-6bde-d45193cd0bd7@insa-toulouse.fr>

Le 05/11/2021 ? 15:51, Henrik Bengtsson a ?crit?:
> I'm trying to reuse some of the translations available in base R by using:
>
>    gettext(msgid, domain="R")
>
> This works great for most 'msgid's, e.g.
>
> $ LANGUAGE=de Rscript -e 'gettext("cannot get working directory", domain="R")'
> [1] "kann das Arbeitsverzeichnis nicht ermitteln"
>
> However, it does not work for all.  For instance,
>
> $ LANGUAGE=de Rscript -e 'gettext("Execution halted\n", domain="R")'
> [1] "Execution halted\n"
>
> This despite that 'msgid' existing in:
>
> $ grep -C 2 -F 'Execution halted\n' src/library/base/po/de.po
>
> #: src/main/main.c:342
> msgid "Execution halted\n"
> msgstr "Ausf?hrung angehalten\n"
>
> It could be that the trailing newline causes problems, because the
> same happens also for:
>
> $ LANGUAGE=de Rscript --vanilla -e 'gettext("error during cleanup\n",
> domain="R")'
> [1] "error during cleanup\n"
It happens also to:

$ LANGUAGE=de Rscript -e 'gettext("During startup - ", domain="R")'
[1] "During startup - "


#: src/main/main.c:1078
msgid "During startup - "
msgstr "Beim Start - "

which has not "\n" at the end.

Just a testimony with a hope it helps.

Best,
Serguei.

>
> Is this meant to work, and if so, how do I get it to work, or is it a bug?
>
> Thanks,
>
> Henrik
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


-- 
Serguei Sokol
Ingenieur de recherche INRAE

Cellule Math?matiques
TBI, INSA/INRAE UMR 792, INSA/CNRS UMR 5504
135 Avenue de Rangueil
31077 Toulouse Cedex 04

tel: +33 5 61 55 98 49
email: sokol at insa-toulouse.fr
http://www.toulouse-biotechnology-institute.fr/en/technology_platforms/mathematics-cell.html


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Nov  5 16:15:19 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 5 Nov 2021 16:15:19 +0100
Subject: [Rd] gettext(msgid, domain="R") doesn't work for some 'msgid':s
In-Reply-To: <000f4e2a-684d-e26b-2b1c-fabc28880d55@gmail.com>
References: <CAFDcVCT0zPRGEG5ugr+yEbgKH57bo1MMwXRgh=q5y7OwAU1F0A@mail.gmail.com>
 <000f4e2a-684d-e26b-2b1c-fabc28880d55@gmail.com>
Message-ID: <23255480-95fb-f5b0-4828-56aaace9b575@gmail.com>


On 11/5/21 4:12 PM, Duncan Murdoch wrote:
> On 05/11/2021 10:51 a.m., Henrik Bengtsson wrote:
>> I'm trying to reuse some of the translations available in base R by 
>> using:
>>
>> ?? gettext(msgid, domain="R")
>>
>> This works great for most 'msgid's, e.g.
>>
>> $ LANGUAGE=de Rscript -e 'gettext("cannot get working directory", 
>> domain="R")'
>> [1] "kann das Arbeitsverzeichnis nicht ermitteln"
>>
>> However, it does not work for all.? For instance,
>>
>> $ LANGUAGE=de Rscript -e 'gettext("Execution halted\n", domain="R")'
>> [1] "Execution halted\n"
>>
>> This despite that 'msgid' existing in:
>>
>> $ grep -C 2 -F 'Execution halted\n' src/library/base/po/de.po
>>
>> #: src/main/main.c:342
>> msgid "Execution halted\n"
>> msgstr "Ausf?hrung angehalten\n"
>>
>> It could be that the trailing newline causes problems, because the
>> same happens also for:
>>
>> $ LANGUAGE=de Rscript --vanilla -e 'gettext("error during cleanup\n",
>> domain="R")'
>> [1] "error during cleanup\n"
>>
>> Is this meant to work, and if so, how do I get it to work, or is it a 
>> bug?
>
> I don't know the solution, but I think the cause is different than you 
> think, because I also have the problem with other strings not 
> including "\n":
>
> $ LANGUAGE=de Rscript -e 'gettext("malformed version string", 
> domain="R")'
> [1] "malformed version string"

I can reproduce Henrik's report and the problem there is that the 
trailing \n is stripped by R before doing the lookup, in do_gettext


 ??????????? /* strip leading and trailing white spaces and
 ?????????????? add back after translation */
 ??????????? for(p = tmp;
 ??????????????? *p && (*p == ' ' || *p == '\t' || *p == '\n');
 ??????????????? p++, ihead++) ;

But, calling dgettext with the trailing \n does translate correctly for me.

I'd leave to translation experts how this should work (e.g. whether the 
.po files should have trailing newlines).

Tomas

>
> Duncan Murdoch
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Nov  5 17:55:24 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 5 Nov 2021 17:55:24 +0100
Subject: [Rd] gettext(msgid, domain="R") doesn't work for some 'msgid':s
In-Reply-To: <23255480-95fb-f5b0-4828-56aaace9b575@gmail.com>
References: <CAFDcVCT0zPRGEG5ugr+yEbgKH57bo1MMwXRgh=q5y7OwAU1F0A@mail.gmail.com>
 <000f4e2a-684d-e26b-2b1c-fabc28880d55@gmail.com>
 <23255480-95fb-f5b0-4828-56aaace9b575@gmail.com>
Message-ID: <24965.25084.791480.520562@stat.math.ethz.ch>

>>>>> Tomas Kalibera 
>>>>>     on Fri, 5 Nov 2021 16:15:19 +0100 writes:

    > On 11/5/21 4:12 PM, Duncan Murdoch wrote:
    >> On 05/11/2021 10:51 a.m., Henrik Bengtsson wrote:
    >>> I'm trying to reuse some of the translations available in base R by 
    >>> using:
    >>> 
    >>> ?? gettext(msgid, domain="R")
    >>> 
    >>> This works great for most 'msgid's, e.g.
    >>> 
    >>> $ LANGUAGE=de Rscript -e 'gettext("cannot get working directory", 
    >>> domain="R")'
    >>> [1] "kann das Arbeitsverzeichnis nicht ermitteln"
    >>> 
    >>> However, it does not work for all.? For instance,
    >>> 
    >>> $ LANGUAGE=de Rscript -e 'gettext("Execution halted\n", domain="R")'
    >>> [1] "Execution halted\n"
    >>> 
    >>> This despite that 'msgid' existing in:
    >>> 
    >>> $ grep -C 2 -F 'Execution halted\n' src/library/base/po/de.po
    >>> 
    >>> #: src/main/main.c:342
    >>> msgid "Execution halted\n"
    >>> msgstr "Ausf?hrung angehalten\n"
    >>> 
    >>> It could be that the trailing newline causes problems, because the
    >>> same happens also for:
    >>> 
    >>> $ LANGUAGE=de Rscript --vanilla -e 'gettext("error during cleanup\n",
    >>> domain="R")'
    >>> [1] "error during cleanup\n"
    >>> 
    >>> Is this meant to work, and if so, how do I get it to work, or is it a 
    >>> bug?
    >> 
    >> I don't know the solution, but I think the cause is different than you 
    >> think, because I also have the problem with other strings not 
    >> including "\n":
    >> 
    >> $ LANGUAGE=de Rscript -e 'gettext("malformed version string", 
    >> domain="R")'
    >> [1] "malformed version string"

You need domain="R-base" for the  "malformed version "string"


    > I can reproduce Henrik's report and the problem there is that the 
    > trailing \n is stripped by R before doing the lookup, in do_gettext


    > ??????????? /* strip leading and trailing white spaces and
    > ?????????????? add back after translation */
    > ??????????? for(p = tmp;
    > ??????????????? *p && (*p == ' ' || *p == '\t' || *p == '\n');
    > ??????????????? p++, ihead++) ;

    > But, calling dgettext with the trailing \n does translate correctly for me.

    > I'd leave to translation experts how this should work (e.g. whether the 
    > .po files should have trailing newlines).

Thanks a lot, Tomas.
This is "interesting" .. and I think an R bug  one way or the
other (and I also note that Henrik's guess was also right on !).

We have the following:

- New translation *.po source files are to be made from the original *.pot  files.

  In our case it's our code that produce  R.pot and R-base.pot  
  (and more for the non-base packages, and more e.g. for
   Recommended packages 'Matrix' and 'cluster' I maintain).

And notably the R.pot (from all the "base" C error/warn/.. messages)
contains tons of msgid strings of the form  ".......\n"
i.e., ending in \n.
>From that automatically the translator's  *.po files should also
end in \n.

Additionally, the GNU gettext FAQ has
 (here :   https://www.gnu.org/software/gettext/FAQ.html#newline )

------------------------------------------------
Q: What does this mean: ?'msgid' and 'msgstr' entries do not both end with '\n'?

A: It means that when the original string ends in a newline, your translation must also end in a newline. And if the original string does not end in a newline, then your translation should likewise not have a newline at the end.
------------------------------------------------
 
>From all that I'd conclude that we (R base code) are the source
of the problem.
Given the above FAQ, it seems common in other projects also to
have such trailing \n  and so we should really change the C code
you cite above.

On the other hand, this is from almost the very beginning of
when Brian added translation to R,
------------------------------------------------------------------------
r32938 | ripley | 2005-01-30 20:24:04 +0100 (Sun, 30 Jan 2005) | 2 lines

include \n in whitespace ignored for R-level gettext
------------------------------------------------------------------------

I think this has been because simultaneously we had started to
emphasize to useRs  they should *not* end message/format strings
in stop() / warning()  by a new line, but rather stop() and
warning() would *add* the newlines(s) themselves.

Still, currently we have a few such cases in  R-base.pot,
but just these few and maybe they really are "in error", in the
sense we could drop the ending '\n' (and do the same in all the *.po files!),
and newlines would be appended later {{not just by Rstudio which
   graceously adds final newlines in its R console, even for say
   cat("abc") }}

However, this is quite different for all the message strings from C, as
used there in  error() or warn() e.g., and so in   R.pot
we see many many msg strings ending in "\n" (which must then
also be in the *.po files.

My current conclusion is we should try simplifying the
do_gettext() code and *not* remove and re-add the '\n' (nor the
'\t' I think ...)

Martin


    > Tomas

    >> 
    >> Duncan Murdoch


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Nov  5 18:23:56 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 5 Nov 2021 18:23:56 +0100
Subject: [Rd] gettext(msgid, domain="R") doesn't work for some 'msgid':s
In-Reply-To: <24965.25084.791480.520562@stat.math.ethz.ch>
References: <CAFDcVCT0zPRGEG5ugr+yEbgKH57bo1MMwXRgh=q5y7OwAU1F0A@mail.gmail.com>
 <000f4e2a-684d-e26b-2b1c-fabc28880d55@gmail.com>
 <23255480-95fb-f5b0-4828-56aaace9b575@gmail.com>
 <24965.25084.791480.520562@stat.math.ethz.ch>
Message-ID: <24965.26796.249437.598189@stat.math.ethz.ch>

>>>>> Martin Maechler 
>>>>>     on Fri, 5 Nov 2021 17:55:24 +0100 writes:

>>>>> Tomas Kalibera 
>>>>>     on Fri, 5 Nov 2021 16:15:19 +0100 writes:

    >> On 11/5/21 4:12 PM, Duncan Murdoch wrote:
    >>> On 05/11/2021 10:51 a.m., Henrik Bengtsson wrote:
    >>>> I'm trying to reuse some of the translations available in base R by 
    >>>> using:
    >>>> 
    >>>> ?? gettext(msgid, domain="R")
    >>>> 
    >>>> This works great for most 'msgid's, e.g.
    >>>> 
    >>>> $ LANGUAGE=de Rscript -e 'gettext("cannot get working directory", 
    >>>> domain="R")'
    >>>> [1] "kann das Arbeitsverzeichnis nicht ermitteln"
    >>>> 
    >>>> However, it does not work for all.? For instance,
    >>>> 
    >>>> $ LANGUAGE=de Rscript -e 'gettext("Execution halted\n", domain="R")'
    >>>> [1] "Execution halted\n"
    >>>> 
    >>>> This despite that 'msgid' existing in:
    >>>> 
    >>>> $ grep -C 2 -F 'Execution halted\n' src/library/base/po/de.po
    >>>> 
    >>>> #: src/main/main.c:342
    >>>> msgid "Execution halted\n"
    >>>> msgstr "Ausf?hrung angehalten\n"
    >>>> 
    >>>> It could be that the trailing newline causes problems, because the
    >>>> same happens also for:
    >>>> 
    >>>> $ LANGUAGE=de Rscript --vanilla -e 'gettext("error during cleanup\n",
    >>>> domain="R")'
    >>>> [1] "error during cleanup\n"
    >>>> 
    >>>> Is this meant to work, and if so, how do I get it to work, or is it a 
    >>>> bug?
    >>> 
    >>> I don't know the solution, but I think the cause is different than you 
    >>> think, because I also have the problem with other strings not 
    >>> including "\n":
    >>> 
    >>> $ LANGUAGE=de Rscript -e 'gettext("malformed version string", 
    >>> domain="R")'
    >>> [1] "malformed version string"

    > You need domain="R-base" for the  "malformed version "string"


    >> I can reproduce Henrik's report and the problem there is that the 
    >> trailing \n is stripped by R before doing the lookup, in do_gettext


    >> ??????????? /* strip leading and trailing white spaces and
    >> ?????????????? add back after translation */
    >> ??????????? for(p = tmp;
    >> ??????????????? *p && (*p == ' ' || *p == '\t' || *p == '\n');
    >> ??????????????? p++, ihead++) ;

    >> But, calling dgettext with the trailing \n does translate correctly for me.

    >> I'd leave to translation experts how this should work (e.g. whether the 
    >> .po files should have trailing newlines).

    > Thanks a lot, Tomas.
    > This is "interesting" .. and I think an R bug  one way or the
    > other (and I also note that Henrik's guess was also right on !).

    > We have the following:

    > - New translation *.po source files are to be made from the original *.pot  files.

    > In our case it's our code that produce  R.pot and R-base.pot  
    > (and more for the non-base packages, and more e.g. for
    > Recommended packages 'Matrix' and 'cluster' I maintain).

    > And notably the R.pot (from all the "base" C error/warn/.. messages)
    > contains tons of msgid strings of the form  ".......\n"
    > i.e., ending in \n.
    >> From that automatically the translator's  *.po files should also
    > end in \n.

    > Additionally, the GNU gettext FAQ has
    > (here :   https://www.gnu.org/software/gettext/FAQ.html#newline )

    > ------------------------------------------------
    > Q: What does this mean: ?'msgid' and 'msgstr' entries do not both end with '\n'?

    > A: It means that when the original string ends in a newline, your translation must also end in a newline. And if the original string does not end in a newline, then your translation should likewise not have a newline at the end.
    > ------------------------------------------------
 
    >> From all that I'd conclude that we (R base code) are the source
    > of the problem.
    > Given the above FAQ, it seems common in other projects also to
    > have such trailing \n  and so we should really change the C code
    > you cite above.

    > On the other hand, this is from almost the very beginning of
    > when Brian added translation to R,
    > ------------------------------------------------------------------------
    > r32938 | ripley | 2005-01-30 20:24:04 +0100 (Sun, 30 Jan 2005) | 2 lines

    > include \n in whitespace ignored for R-level gettext
    > ------------------------------------------------------------------------

    > I think this has been because simultaneously we had started to
    > emphasize to useRs  they should *not* end message/format strings
    > in stop() / warning()  by a new line, but rather stop() and
    > warning() would *add* the newlines(s) themselves.

    > Still, currently we have a few such cases in  R-base.pot,
    > but just these few and maybe they really are "in error", in the
    > sense we could drop the ending '\n' (and do the same in all the *.po files!),
    > and newlines would be appended later {{not just by Rstudio which
    > graceously adds final newlines in its R console, even for say
    > cat("abc") }}

    > However, this is quite different for all the message strings from C, as
    > used there in  error() or warn() e.g., and so in   R.pot
    > we see many many msg strings ending in "\n" (which must then
    > also be in the *.po files.

    > My current conclusion is we should try simplifying the
    > do_gettext() code and *not* remove and re-add the '\n' (nor the
    > '\t' I think ...)

After such a change, I indeed  do see

$ LANGUAGE=de bin/Rscript --vanilla -e 'gettext("Execution halted\n", domain="R")'
[1] "Ausf?hrung angehalten\n"
$ LANGUAGE=de bin/Rscript --vanilla -e 'message("Execution halted\n", domain="R")'
Ausf?hrung angehalten

$ LANGUAGE=de bin/Rscript --vanilla -e 'warning("Execution halted\n", domain="R")'
Warnmeldung:
Ausf?hrung angehalten
 
$

(note the extra newline after the German translation!)
whereas before, not only using  gettext() directly did not work,
but also using warning() or message()  {with or without trailing \n} 
were never translated.



... and my simple  #ifdef .. #endif change around the head/tail
save and restor seems to pass make check-devel ...

so I will be looking into dropping all those "head" and "tail" add
and remove parts in do_gettext() as they really seem to harm given the current
translation data bases which indeed *are* full of final '\n' in
`msgid` and corresponding translated `msgstr` ....

So, no need for a bugzilla PR nor a patch, please.
Maybe further examples which add something interesting in
addition to the ones we have here.

Thank you again, Henrik, Duncan, and Tomas!


Martin


From @uh@rto_@nggono @end|ng |rom y@hoo@com  Sat Nov  6 09:07:58 2021
From: @uh@rto_@nggono @end|ng |rom y@hoo@com (Suharto Anggono Suharto Anggono)
Date: Sat, 6 Nov 2021 08:07:58 +0000 (UTC)
Subject: [Rd] gettext(msgid, domain="R") doesn't work for some 'msgid':s
References: <1741628426.1795842.1636186078866.ref@mail.yahoo.com>
Message-ID: <1741628426.1795842.1636186078866@mail.yahoo.com>

This issue has come up before: https://stat.ethz.ch/pipermail/r-help/2013-February/346721.html ("gettext wierdness"), https://stat.ethz.ch/pipermail/r-devel/2007-December/047893.html ("gettext() and messages in 'pkg' domain").

Using 'ngettext' is a workaround, like in https://rdrr.io/cran/svMisc/src/R/svMisc-internal.R .

It is documented: "For 'gettext', leading and trailing whitespace is ignored when looking for the translation."

------------
>> Martin Maechler
>>>>> on Fri, 5 Nov 2021 17:55:24 +0100 writes:

>>>>> Tomas Kalibera
>>>>> on Fri, 5 Nov 2021 16:15:19 +0100 writes:

 >> On 11/5/21 4:12 PM, Duncan Murdoch wrote:
 >>> On 05/11/2021 10:51 a.m., Henrik Bengtsson wrote:
 >>>> I'm trying to reuse some of the translations available in base R by
 >>>> using:
 >>>>
 >>>> ?? gettext(msgid, domain="R")
 >>>>
 >>>> This works great for most 'msgid's, e.g.
 >>>>
 >>>> $ LANGUAGE=de Rscript -e 'gettext("cannot get working directory",
 >>>> domain="R")'
 >>>> [1] "kann das Arbeitsverzeichnis nicht ermitteln"
 >>>>
 >>>> However, it does not work for all.? For instance,
 >>>>
 >>>> $ LANGUAGE=de Rscript -e 'gettext("Execution halted\n", domain="R")'
 >>>> [1] "Execution halted\n"
 >>>>
 >>>> This despite that 'msgid' existing in:
 >>>>
 >>>> $ grep -C 2 -F 'Execution halted\n' src/library/base/po/de.po
 >>>>
 >>>> #: src/main/main.c:342
 >>>> msgid "Execution halted\n"
 >>>> msgstr "Ausf?hrung angehalten\n"
 >>>>
 >>>> It could be that the trailing newline causes problems, because the
 >>>> same happens also for:
 >>>>
 >>>> $ LANGUAGE=de Rscript --vanilla -e 'gettext("error during cleanup\n",
 >>>> domain="R")'
 >>>> [1] "error during cleanup\n"
 >>>>
 >>>> Is this meant to work, and if so, how do I get it to work, or is it a
 >>>> bug?
 >>>
 >>> I don't know the solution, but I think the cause is different than you
 >>> think, because I also have the problem with other strings not
 >>> including "\n":
 >>>
 >>> $ LANGUAGE=de Rscript -e 'gettext("malformed version string",
 >>> domain="R")'
 >>> [1] "malformed version string"

 > You need domain="R-base" for the "malformed version "string"


 >> I can reproduce Henrik's report and the problem there is that the
 >> trailing \n is stripped by R before doing the lookup, in do_gettext


 >> ??????????? /* strip leading and trailing white spaces and
 >> ?????????????? add back after translation */
 >> ??????????? for(p = tmp;
 >> ??????????????? *p && (*p == ' ' || *p == '\t' || *p == '\n');
 >> ??????????????? p++, ihead++) ;

 >> But, calling dgettext with the trailing \n does translate correctly for me.

 >> I'd leave to translation experts how this should work (e.g. whether the
 >> .po files should have trailing newlines).

 > Thanks a lot, Tomas.
 > This is "interesting" .. and I think an R bug one way or the
 > other (and I also note that Henrik's guess was also right on !).

 > We have the following:

 > - New translation *.po source files are to be made from the original *.pot files.

 > In our case it's our code that produce R.pot and R-base.pot
 > (and more for the non-base packages, and more e.g. for
 > Recommended packages 'Matrix' and 'cluster' I maintain).

 > And notably the R.pot (from all the "base" C error/warn/.. messages)
 > contains tons of msgid strings of the form ".......\n"
 > i.e., ending in \n.
 >> From that automatically the translator's *.po files should also
 > end in \n.

 > Additionally, the GNU gettext FAQ has
 > (here : https://www.gnu.org/software/gettext/FAQ.html#newline )

 > ------------------------------------------------
 > Q: What does this mean: ?'msgid' and 'msgstr' entries do not both end with '\n'?

 > A: It means that when the original string ends in a newline, your translation must also end in a newline. And if the original string does not end in a newline, then your translation should likewise not have a newline at the end.
 > ------------------------------------------------

 >> From all that I'd conclude that we (R base code) are the source
 > of the problem.
 > Given the above FAQ, it seems common in other projects also to
 > have such trailing \n and so we should really change the C code
 > you cite above.

 > On the other hand, this is from almost the very beginning of
 > when Brian added translation to R,
 > ------------------------------------------------------------------------
 > r32938 | ripley | 2005-01-30 20:24:04 +0100 (Sun, 30 Jan 2005) | 2 lines

 > include \n in whitespace ignored for R-level gettext
 > ------------------------------------------------------------------------

 > I think this has been because simultaneously we had started to
 > emphasize to useRs they should *not* end message/format strings
 > in stop() / warning() by a new line, but rather stop() and
 > warning() would *add* the newlines(s) themselves.

 > Still, currently we have a few such cases in R-base.pot,
 > but just these few and maybe they really are "in error", in the
 > sense we could drop the ending '\n' (and do the same in all the *.po files!),
 > and newlines would be appended later {{not just by Rstudio which
 > graceously adds final newlines in its R console, even for say
 > cat("abc") }}

 > However, this is quite different for all the message strings from C, as
 > used there in error() or warn() e.g., and so in R.pot
 > we see many many msg strings ending in "\n" (which must then
 > also be in the *.po files.

 > My current conclusion is we should try simplifying the
 > do_gettext() code and *not* remove and re-add the '\n' (nor the
 > '\t' I think ...)

After such a change, I indeed do see

$ LANGUAGE=de bin/Rscript --vanilla -e 'gettext("Execution halted\n", domain="R")'
[1] "Ausf?hrung angehalten\n"
$ LANGUAGE=de bin/Rscript --vanilla -e 'message("Execution halted\n", domain="R")'
Ausf?hrung angehalten

$ LANGUAGE=de bin/Rscript --vanilla -e 'warning("Execution halted\n", domain="R")'
Warnmeldung:
Ausf?hrung angehalten

$

(note the extra newline after the German translation!)
whereas before, not only using gettext() directly did not work,
but also using warning() or message() {with or without trailing \n}
were never translated.



... and my simple #ifdef .. #endif change around the head/tail
save and restor seems to pass make check-devel ...

so I will be looking into dropping all those "head" and "tail" add
and remove parts in do_gettext() as they really seem to harm given the current
translation data bases which indeed *are* full of final '\n' in
`msgid` and corresponding translated `msgstr` ....

So, no need for a bugzilla PR nor a patch, please.
Maybe further examples which add something interesting in
addition to the ones we have here.

Thank you again, Henrik, Duncan, and Tomas!


Martin


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Sat Nov  6 11:39:58 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Sat, 6 Nov 2021 11:39:58 +0100
Subject: [Rd] gettext(msgid, domain="R") doesn't work for some 'msgid':s
In-Reply-To: <1741628426.1795842.1636186078866@mail.yahoo.com>
References: <1741628426.1795842.1636186078866.ref@mail.yahoo.com>
 <1741628426.1795842.1636186078866@mail.yahoo.com>
Message-ID: <24966.23422.259436.635908@stat.math.ethz.ch>

>>>>> Suharto Anggono Suharto Anggono via R-devel 
>>>>>     on Sat, 6 Nov 2021 08:07:58 +0000 (UTC) writes:

    > This issue has come up before: https://stat.ethz.ch/pipermail/r-help/2013-February/346721.html ("gettext wierdness"), https://stat.ethz.ch/pipermail/r-devel/2007-December/047893.html ("gettext() and messages in 'pkg' domain").
    > Using 'ngettext' is a workaround, like in https://rdrr.io/cran/svMisc/src/R/svMisc-internal.R .

Thank you for the pointers!

    > It is documented: "For 'gettext', leading and trailing whitespace is ignored when looking for the translation."

Indeed; and it *is* a feature  but really only valuable when the
msgid's (the original message strings) do *not* contain such
whitespace.
And, in fact, when xgettext() or xgettext2pot() from pkg 'tools'
are used to create the original *.pot files, they *also* trim
leading and trailing \n, \t and spaces.

So ideally there should not be any   end(or beginning)-of-line
"\n" in the R-base.pot (and hence corresponding  <LANG>-base.po )
and as I mentioned there *are* only a few, and
we could (should?) consider to remove them from there.

A "problem" is still in the many C-code msgid's  where
end-of-line-"\n" are common.

Yes, indeed, one can use the workaround Suharto mentions,
ngettext()  even though users will typically only look at
ngettext() if they want / need to learn about plural/singular
messages ...

I.e. in our case, this works, and Henrik could get what he wants

> Sys.setenv(LANGUAGE = "de")
> ngettext(1,"Execution halted\n", "", domain="R")
[1] "Ausf?hrung angehalten\n"

but it's still not so satisfactory, that you cannot use
gettext() itself to look at a considerable proportion of the
C/C++/.. level error messages just because they end with "\n".

One possibility would be to introduce an optional
`trim = TRUE` argument, so the above could be achieved (more
efficiently and naturally) by

   gettext("Execution halted\n", domain="R", trim=FALSE)

but in any case, to *not* do the trimming anymore in general,
as I proposed yesterday (see below) is not a good idea.

    > ------------
    >>> Martin Maechler
>>>>> on Fri, 5 Nov 2021 17:55:24 +0100 writes:

>>>>> Tomas Kalibera
>>>>> on Fri, 5 Nov 2021 16:15:19 +0100 writes:

    >>> On 11/5/21 4:12 PM, Duncan Murdoch wrote:
    >>>> On 05/11/2021 10:51 a.m., Henrik Bengtsson wrote:
    >>>>> I'm trying to reuse some of the translations available in base R by
    >>>>> using:
    >>>>> 
    >>>>> ?? gettext(msgid, domain="R")
    >>>>> 
    >>>>> This works great for most 'msgid's, e.g.
    >>>>> 
    >>>>> $ LANGUAGE=de Rscript -e 'gettext("cannot get working directory",
    >>>>> domain="R")'
    >>>>> [1] "kann das Arbeitsverzeichnis nicht ermitteln"
    >>>>> 
    >>>>> However, it does not work for all.? For instance,
    >>>>> 
    >>>>> $ LANGUAGE=de Rscript -e 'gettext("Execution halted\n", domain="R")'
    >>>>> [1] "Execution halted\n"
    >>>>> 
    >>>>> This despite that 'msgid' existing in:
    >>>>> 
    >>>>> $ grep -C 2 -F 'Execution halted\n' src/library/base/po/de.po
    >>>>> 
    >>>>> #: src/main/main.c:342
    >>>>> msgid "Execution halted\n"
    >>>>> msgstr "Ausf?hrung angehalten\n"
    >>>>> 
    >>>>> It could be that the trailing newline causes problems, because the
    >>>>> same happens also for:
    >>>>> 
    >>>>> $ LANGUAGE=de Rscript --vanilla -e 'gettext("error during cleanup\n",
    >>>>> domain="R")'
    >>>>> [1] "error during cleanup\n"
    >>>>> 
    >>>>> Is this meant to work, and if so, how do I get it to work, or is it a
    >>>>> bug?
    >>>> 
    >>>> I don't know the solution, but I think the cause is different than you
    >>>> think, because I also have the problem with other strings not
    >>>> including "\n":
    >>>> 
    >>>> $ LANGUAGE=de Rscript -e 'gettext("malformed version string",
    >>>> domain="R")'
    >>>> [1] "malformed version string"

    >> You need domain="R-base" for the "malformed version "string"


    >>> I can reproduce Henrik's report and the problem there is that the
    >>> trailing \n is stripped by R before doing the lookup, in do_gettext


    >>> ??????????? /* strip leading and trailing white spaces and
    >>> ?????????????? add back after translation */
    >>> ??????????? for(p = tmp;
    >>> ??????????????? *p && (*p == ' ' || *p == '\t' || *p == '\n');
    >>> ??????????????? p++, ihead++) ;

    >>> But, calling dgettext with the trailing \n does translate correctly for me.

    >>> I'd leave to translation experts how this should work (e.g. whether the
    >>> .po files should have trailing newlines).

    >> Thanks a lot, Tomas.
    >> This is "interesting" .. and I think an R bug one way or the
    >> other (and I also note that Henrik's guess was also right on !).

    >> We have the following:

    >> - New translation *.po source files are to be made from the original *.pot files.

    >> In our case it's our code that produce R.pot and R-base.pot
    >> (and more for the non-base packages, and more e.g. for
    >> Recommended packages 'Matrix' and 'cluster' I maintain).

    >> And notably the R.pot (from all the "base" C error/warn/.. messages)
    >> contains tons of msgid strings of the form ".......\n"
    >> i.e., ending in \n.
    >>> From that automatically the translator's *.po files should also
    >> end in \n.

    >> Additionally, the GNU gettext FAQ has
    >> (here : https://www.gnu.org/software/gettext/FAQ.html#newline )

    >> ------------------------------------------------
    >> Q: What does this mean: ?'msgid' and 'msgstr' entries do not both end with '\n'?

    >> A: It means that when the original string ends in a newline, your translation must also end in a newline. And if the original string does not end in a newline, then your translation should likewise not have a newline at the end.
    >> ------------------------------------------------

    >>> From all that I'd conclude that we (R base code) are the source
    >> of the problem.
    >> Given the above FAQ, it seems common in other projects also to
    >> have such trailing \n and so we should really change the C code
    >> you cite above.

    >> On the other hand, this is from almost the very beginning of
    >> when Brian added translation to R,
    >> ------------------------------------------------------------------------
    >> r32938 | ripley | 2005-01-30 20:24:04 +0100 (Sun, 30 Jan 2005) | 2 lines

    >> include \n in whitespace ignored for R-level gettext
    >> ------------------------------------------------------------------------

    >> I think this has been because simultaneously we had started to
    >> emphasize to useRs they should *not* end message/format strings
    >> in stop() / warning() by a new line, but rather stop() and
    >> warning() would *add* the newlines(s) themselves.

    >> Still, currently we have a few such cases in R-base.pot,
    >> but just these few and maybe they really are "in error", in the
    >> sense we could drop the ending '\n' (and do the same in all the *.po files!),
    >> and newlines would be appended later {{not just by Rstudio which
    >> graceously adds final newlines in its R console, even for say
    >> cat("abc") }}

    >> However, this is quite different for all the message strings from C, as
    >> used there in error() or warn() e.g., and so in R.pot
    >> we see many many msg strings ending in "\n" (which must then
    >> also be in the *.po files.

    >> My current conclusion is we should try simplifying the
    >> do_gettext() code and *not* remove and re-add the '\n' (nor the
    >> '\t' I think ...)

    > After such a change, I indeed do see

    > $ LANGUAGE=de bin/Rscript --vanilla -e 'gettext("Execution halted\n", domain="R")'
    > [1] "Ausf?hrung angehalten\n"
    > $ LANGUAGE=de bin/Rscript --vanilla -e 'message("Execution halted\n", domain="R")'
    > Ausf?hrung angehalten

    > $ LANGUAGE=de bin/Rscript --vanilla -e 'warning("Execution halted\n", domain="R")'
    > Warnmeldung:
    > Ausf?hrung angehalten

    > $

    > (note the extra newline after the German translation!)
    > whereas before, not only using gettext() directly did not work,
    > but also using warning() or message() {with or without trailing \n}
    > were never translated.



    > ... and my simple #ifdef .. #endif change around the head/tail
    > save and restor seems to pass make check-devel ...

    > so I will be looking into dropping all those "head" and "tail" add
    > and remove parts in do_gettext() as they really seem to harm given the current
    > translation data bases which indeed *are* full of final '\n' in
    > `msgid` and corresponding translated `msgstr` ....

    > So, no need for a bugzilla PR nor a patch, please.
    > Maybe further examples which add something interesting in
    > addition to the ones we have here.

    > Thank you again, Henrik, Duncan, and Tomas!


    > Martin

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From btyner @end|ng |rom gm@||@com  Sat Nov  6 14:51:31 2021
From: btyner @end|ng |rom gm@||@com (Benjamin Tyner)
Date: Sat, 6 Nov 2021 09:51:31 -0400
Subject: [Rd] S4 methods with default argument of NULL
Message-ID: <a6157cb1-fd0b-63dd-55eb-496933e1a61e@gmail.com>

Greetings,

I noticed that starting with R version 3.5.0, it is now possible to do, 
for example:

    setGeneric(name = "foo",
     ?????????? def = function(x, y, ...) standardGeneric("foo"),
     ?????????? valueClass = "fooResult"
     ?????????? )

    setMethod(f = "foo",
     ????????? signature = c("character", "character"),
     ????????? definition = function(x, y = NULL, z = NULL, ...) {

     ????????????? force(y)
     ????????????? message(sprintf("x is %s", x))

     ????????????? structure(list(), class = "fooResult")
     ????????? })

    foo("a", "b") # this works in R >= 3.5.0, but fails in R < 3.5.0

(Prior to R version 3.5.0, it gives "Error in force(y) : object 'y' not 
found")

I am curious to learn whether the change permitting this was:

    1. an intentional enhancement
    2. unintentional, but a "happy accident" (i.e., a desirable side
    effect of some other enhancement)
    3. unintentional, and perhaps undesirable (i.e., a loosening of
    standards)

For reference, this came up in the debugging of the following issue:

    https://github.com/DyfanJones/noctua/issues/170

Any comments to shed some light would be greatly appreciated.

Regards,

Ben


From r-deve| @end|ng |rom @ker@t|ng@de  Sun Nov  7 20:22:42 2021
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Sun, 07 Nov 2021 20:22:42 +0100 (CET)
Subject: [Rd] GC: parallelizing the CHARSXP cache maintenance
In-Reply-To: <E1mYNn6-0000cv-1M@rmmprod05.runbox>
Message-ID: <E1mjnkY-0007mK-Ld@rmmprod05.runbox>

I have now added this to the wishlist in Bugzilla: https://bugs.r-project.org/show_bug.cgi?id=18234

2021-10-07 09:26 GMT+02:00 "Andreas Kersting" <r-devel at akersting.de>:
> Hi all,
> 
> As part of RunGenCollect() (in src/main/memory.c), some maintenance on the CHARSXP cache is done, namely unmarked nodes/CHARSXPs are removed from the hash chains. This requires always touching all CHARSXP in the cache, irrespective of the number of generations which were just garbage collected. In a session with a big CHARSXP cache, this will significantly slow down gc also when just collecting the youngest generation.
> 
> However, this part of RunGenCollect() seems to be one of the few which can easily be parallelized without the need for thread synchronization. And it seems to be the one most profiting from parallelization.
> 
> Attached patch (?parallel_CHARSXP_cache.diff) implements parallelization over the elements of R_StringHash and gives the following performance improvements on my system when using 4 threads compared to R devel (revision 81008):
> 
> Elapsed time for 200 non-full gc in a session after
> 
> x <- as.character(runif(1e6))[]
> gc(full = TRUE)
> 
> 8sec -> 2.5sec.
> 
> AND
> 
> Elapsed time for five non-full gc in a session after
> 
> x <- as.character(runif(5e7))[]
> gc(full = TRUE)
> 
> 21sec -> 6sec.
> 
> In the patch, I dropped the two lines 
> 
> FORWARD_NODE(s);
> FORWARD_NODE(CXHEAD(s));
> 
> because they are currently both no-ops (and would require synchronization if they were not). They are no-ops because we have
> 
> ?# define CXHEAD(x) (x)  // in Defn.h
> 
> and hence FORWARD_NODE(s)/FORWARD_NODE(CXHEAD(s)) is only called when s is already marked, in which case FORWARD_NODE() does nothing.
> 
> I used OpenMP despite the known issues of some of its implementations with hanging after a fork, mostly because it was the easiest thing to do for a PoC. I worked around this similar to e.g. data.table by using only one thread in forked children.
> 
> It might be worth considering making the parallelization conditional on the size of the CHARSXP cache and use only the main thread if the cache is (still) small.
> 
> In the second attached patch (parallel_CHARSXP_cache_no_forward.diff) I additionally no longer call FORWARD_NODE(R_StringHash) because this will make the following call to PROCESS_NODES() iterate through all elements of R_StringHash again which is unnecessary since all elements are either R_NilValue or an already marked CHARSXP. I rather directly mark & snap R_StringHash. In contrast to the parallelization, this only affects full gcs since R_StringHash will quickly belong to the oldest generation.
> 
> Attached gc_test.R is the script I used to get the previously mentioned and more gc timings.
> 
> To me this looks like a significant performance improvement, especially given the little changeset. What do you think?
> 
> Best regards,
> Andreas
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 

From r-deve| @end|ng |rom @ker@t|ng@de  Sun Nov  7 20:26:32 2021
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Sun, 07 Nov 2021 20:26:32 +0100 (CET)
Subject: [Rd] [External]  GC: speeding-up the CHARSXP cache maintenance,
 2nd try
In-Reply-To: <alpine.DEB.2.22.394.2111041100400.388953@luke-Latitude-7480>
Message-ID: <E1mjnoG-0008FN-UH@rmmprod05.runbox>

Hi Luke,

As proposed by you, I have just added this to the wishlist in Bugzilla: https://bugs.r-project.org/show_bug.cgi?id=18233

Best,
Andreas

2021-11-04 17:04 GMT+01:00 luke-tierney at uiowa.edu:
> Can you please submit this as a wishlist item to bugzilla? it is
> easier to keep track of there. You could also submit your threads
> based suggestion there, again to keep it easier to keep track of and
> possibly get back to in the future.
> 
> I will have a look at your approach when I get a chance, but I am
> exploring a different approach to avoid scanning old generations that
> may be simpler.
> 
> Best,
> 
> luke
> 
> On Wed, 3 Nov 2021, Andreas Kersting wrote:
> 
>> Hi,
>>
>> In https://stat.ethz.ch/pipermail/r-devel/2021-October/081147.html I proposed to speed up the CHARSXP cache maintenance during GC using threading. This was rejected by Luke in https://stat.ethz.ch/pipermail/r-devel/2021-October/081172.html.
>>
>> Here I want to propose an alternative approach to significantly speed up CHARSXP cache maintenance during partial GCs. A patch which passes `make check-devel` is attached. Compared to R devel (revision 81110) I get the following performance improvements on my system:
>>
>> Elapsed time for five non-full gc in a session after
>>
>> x <- as.character(runif(5e7))[]
>> gc(full = TRUE)
>>
>> +20sec -> ~1sec.
>>
>>
>> This patch introduces (theoretical) overheads to mkCharLenCE() and full GCs. However, I did not measure dramatic differences:
>>
>> y <- "old_CHARSXP"
>>
>> after
>>
>> x <- "old_CHARSXP"; gc(); gc()
>>
>> takes a median 32 nanoseconds with and without the patch.
>>
>>
>> gc(full = TRUE)
>>
>> in a new session takes a median 16 milliseconds with and 14 without the patch.
>>
>>
>> The basic idea is to maintain the CHARSXP cache using subtables in R_StringHash, one for each of the (NUM_GC_GENERATIONS := NUM_OLD_GENERATIONS + 1) GC generations. New CHARSXPs are added by mkCharLenCE() to the subtable of the youngest generation. After a partial GC, only the chains anchored at the subtables of the youngest (num_old_gens_to_collect + 1) generations need to be searched for and cleaned of unmarked nodes. Afterwards, these chains need to be merged into those of the respective next generation, if any. This approach relies on the fact that an object/CHARSXP can never become younger again. It is OK though if an object/CHARSXP "skips" a GC generation.
>>
>> R_StringHash, which is now of length (NUM_GC_GENERATIONS * char_hash_size), is structured such that the chains for the same hashcode but for different generations are anchored at slots of R_StringHash which are next to each other in memory. This is because we often need to access two or more (i.e. currently all three) of them for one operation and this avoids cache misses.
>>
>> HASHPRI, i.e. the number of occupied primary slots, is computed and stored as NUM_GC_GENERATIONS times the number of slots which are occupied in at least one of the subtables. This is done because in mkCharLenCE() we need to iterate through one or more chains if and only if there is a chain for the particular hashcode in at least one subtable.
>>
>> I tried to keep the patch as minimal as possible. In particular, I did not add long vector support to R_StringHash. I rather reduced the max value of char_hash_size from 2^30 to 2^29, assuming that NUM_OLD_GENERATIONS is (not larger than) 2. I also did not yet adjust do_show_cache() and do_write_cache(), but I could do so if the patch is accepted.
>>
>> Thanks for your consideration and feedback.
>>
>> Regards,
>> Andreas
>>
>>
>> P.S. I had a hard time to get the indentation right in the patch due the mix of tabs and spaces. Sorry, if I screwed this up.
> 
> -- 
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>    Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
> 

From ezr@ @end|ng |rom |@ndtucker@com  Tue Nov  9 17:19:13 2021
From: ezr@ @end|ng |rom |@ndtucker@com (Ezra Tucker)
Date: Tue, 09 Nov 2021 16:19:13 +0000
Subject: [Rd] Using R to wrap NREL's SSC library
Message-ID: <3c61931340b0748a0d7f112d398e158e4098f265.camel@landtucker.com>

Hi all,

I'm attempting to write a package that wraps a pre-compiled library
which is part of the SAM application, put out by NREL, available here:
https://sam.nrel.gov/download.html
or the source for the library only, available here:
https://github.com/nrel/ssc
For a variety of reasons, I'd rather not recompile the library myself,
I'd rather use the precompiled version.

I'm using the linux version right now, for mac or windows some of the
paths might be different.

In linux, the installation of SAM goes into /opt/SAM/<version>. There's
a single .h file I'm concerned with, which is in
/opt/SAM/2020.11.29/linux_64/sscapi.h and the library itself
/opt/SAM/2020.11.29/linux_64/ssc.so.

Steps I have taken:
- I duplicated it in the same directory and renamed the duplicate
libssc.so
- New package with Rcpp entitled "ssc"
- in my Makevars file I put
PKG_CPPFLAGS=-I/opt/SAM/2020.11.29/linux_64
PKG_LIBS=-L/opt/SAM/2020.11.29/linux_64 -lssc

- my NAMESPCAE file has
importFrom(Rcpp,sourceCpp)
useDynLib(ssc, .register = TRUE)

- Single function to get the library's version from the library itself
(just to make sure things are working), in ssc_version.cpp:

#include <Rcpp.h>
#include "sscapi.h"
using namespace Rcpp;

// [[Rcpp::export]]
int R_ssc_version() {
  int version = ssc_version();
  return version;
}

I'm running into a problem actually installing the package though. When
running

> devtools::check("/path/to/ssc")

The output is:
?  installing *source* package ?ssc? ...
   ** using staged installation
   ** libs
   g++ -std=gnu++14 -I"/usr/share/R/include" -DNDEBUG -
I/opt/SAM/2020.11.29/linux_64 -I'/home/ezra/R/x86_64-pc-linux-gnu-
library/4.1/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-
base-i2PIHO/r-base-4.1.2=. -fstack-protector-strong -Wformat -
Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -UNDEBUG -
Wall -pedantic -g -O0 -fdiagnostics-color=always -c RcppExports.cpp -o
RcppExports.o
   g++ -std=gnu++14 -I"/usr/share/R/include" -DNDEBUG -
I/opt/SAM/2020.11.29/linux_64 -I'/home/ezra/R/x86_64-pc-linux-gnu-
library/4.1/Rcpp/include'    -fpic  -g -O2 -fdebug-prefix-map=/build/r-
base-i2PIHO/r-base-4.1.2=. -fstack-protector-strong -Wformat -
Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g  -UNDEBUG -
Wall -pedantic -g -O0 -fdiagnostics-color=always -c ssc_info.cpp -o
ssc_info.o
   g++ -std=gnu++14 -shared -L/usr/lib/R/lib -Wl,-Bsymbolic-functions -
Wl,-z,relro -o ssc.so RcppExports.o ssc_info.o -
L/opt/SAM/2020.11.29/linux_64 -lssc -L/usr/lib/R/lib -lR
   installing to /tmp/RtmpfGwydd/devtools_install_d2f4f57cbec83/00LOCK-
ssc/00new/ssc/libs
   ** checking absolute paths in shared objects and dynamic libraries
?  DONE (ssc)
Error in dyn.load(dll_copy_file) :
  unable to load shared object
'/tmp/RtmpfGwydd/pkgloadd2f4f752bdb80/ssc.so':
  ssc.so: cannot open shared object file: No such file or directory

However:
> file.exists("/tmp/RtmpfGwydd/pkgloadd2f4f752bdb80/ssc.so")
[1] TRUE

(I'm using devtools::check because R CMD check deletes the package info
after running. Also I ran Rcpp::compileAttributes() before initiating
the check.)

My sessionInfo (before running devtools::check) is:

R version 4.1.2 (2021-11-01)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 21.10

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
 [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_4.1.2

Does anybody have any suggestions? Thank you!

-Ezra


From kry|ov@r00t @end|ng |rom gm@||@com  Tue Nov  9 17:56:34 2021
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Tue, 9 Nov 2021 19:56:34 +0300
Subject: [Rd] Using R to wrap NREL's SSC library
In-Reply-To: <3c61931340b0748a0d7f112d398e158e4098f265.camel@landtucker.com>
References: <3c61931340b0748a0d7f112d398e158e4098f265.camel@landtucker.com>
Message-ID: <20211109195634.34014fd1@Tarkus>

Sorry, this discussion is better continued at
https://stat.ethz.ch/mailman/listinfo/r-package-devel.

On Tue, 09 Nov 2021 16:19:13 +0000
Ezra Tucker <ezra at landtucker.com> wrote:

> PKG_LIBS=-L/opt/SAM/2020.11.29/linux_64

There's no good answer, but search "Writing R Extensions" for "rpath"
for potential ways of solving this problem: you'll need to specify the
runtime dynamic library path in addition to the link-time library path.

-- 
Best regards,
Ivan


From ezr@ @end|ng |rom |@ndtucker@com  Tue Nov  9 19:06:48 2021
From: ezr@ @end|ng |rom |@ndtucker@com (Ezra Tucker)
Date: Tue, 09 Nov 2021 18:06:48 +0000
Subject: [Rd] Using R to wrap NREL's SSC library
In-Reply-To: <20211109195634.34014fd1@Tarkus>
References: <3c61931340b0748a0d7f112d398e158e4098f265.camel@landtucker.com>
 <20211109195634.34014fd1@Tarkus>
Message-ID: <8eb0a75473acaa53b233d4a9c11cda211d3bf4d3.camel@landtucker.com>

Hi Ivan,

Sorry all-- wrong message board, embarrassed!
Also embarrassed I forgot the -Wl,-rpath flags. One quick fix, seems to
be working now.
Thanks!!

-Ezra

On Tue, 2021-11-09 at 19:56 +0300, Ivan Krylov wrote:
> Sorry, this discussion is better continued at
> https://stat.ethz.ch/mailman/listinfo/r-package-devel.
>
> On Tue, 09 Nov 2021 16:19:13 +0000
> Ezra Tucker <ezra at landtucker.com> wrote:
>
> > PKG_LIBS=-L/opt/SAM/2020.11.29/linux_64
>
> There's no good answer, but search "Writing R Extensions" for "rpath"
> for potential ways of solving this problem: you'll need to specify
> the
> runtime dynamic library path in addition to the link-time library
> path.
>
> --
> Best regards,
> Ivan


From z@gu @end|ng |rom dk|z-he|de|berg@de  Sat Nov 13 12:51:04 2021
From: z@gu @end|ng |rom dk|z-he|de|berg@de (Gu, Zuguang)
Date: Sat, 13 Nov 2021 11:51:04 +0000
Subject: [Rd] Converting width for a grob where graphics parameters have
 length 0 crashes R
Message-ID: <1636804264876.29489@dkfz-heidelberg.de>

Dear developers,


In grid::gpar(), graphic parameters are not allowed to have length 0, but this can be done by first creating a gpar object and later modifying it:


gp = gpar(fontsize = 10)

gp$fontsize = numeric(0)


when a grob has a gp where some parameters have length 0, converting the width or height of this grob will crash R.

?

A reproducible example is as follows:


> library(grid)

> gp = gpar(fontsize = 10)
> gp$fontsize = numeric(0)
> gb = textGrob("foo", gp = gp)
> convertWidth(grobWidth(gb), "mm")
[1]    21045 floating point exception  R??


Best regards,

Zuguang Gu


	[[alternative HTML version deleted]]


