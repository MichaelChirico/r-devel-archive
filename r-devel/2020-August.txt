From edg@rc|@ @end|ng |rom e@t-econ@uc3m@e@  Mon Aug  3 23:11:10 2020
From: edg@rc|@ @end|ng |rom e@t-econ@uc3m@e@ (EDUARDO GARCIA PORTUGUES)
Date: Mon, 3 Aug 2020 23:11:10 +0200
Subject: [Rd] Typo in ?base::Bessel
Message-ID: <CALzd1DK04zaNAp96WA-GdRWA3tNY-K_CbsTc1J9ZFKEp1AYjSw@mail.gmail.com>

"So*c*kne, David J. (1973)." -> "Sookne, David J. (1973)."

"Sookne" is referred previously in the documentation and is the correct
surname in the publication
<https://pdfs.semanticscholar.org/9cdc/c4aa1562200e6fa50b1400909d1355c3e4f0.pdf>
and Netlib's source <https://www.netlib.org/specfun/ribesl>.

	[[alternative HTML version deleted]]


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Tue Aug  4 12:47:01 2020
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Tue, 4 Aug 2020 12:47:01 +0200
Subject: [Rd] Typo in ?base::Bessel
In-Reply-To: <CALzd1DK04zaNAp96WA-GdRWA3tNY-K_CbsTc1J9ZFKEp1AYjSw@mail.gmail.com>
References: <CALzd1DK04zaNAp96WA-GdRWA3tNY-K_CbsTc1J9ZFKEp1AYjSw@mail.gmail.com>
Message-ID: <24361.15525.377680.36928@hornik.net>

>>>>> EDUARDO GARCIA PORTUGUES writes:

Thanks, will fix and add a DOI ...

Best
-k

> "So*c*kne, David J. (1973)." -> "Sookne, David J. (1973)."
> "Sookne" is referred previously in the documentation and is the correct
> surname in the publication
> <https://pdfs.semanticscholar.org/9cdc/c4aa1562200e6fa50b1400909d1355c3e4f0.pdf>
> and Netlib's source <https://www.netlib.org/specfun/ribesl>.

> 	[[alternative HTML version deleted]]

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From iuke-tier@ey m@iii@g oii uiow@@edu  Wed Aug  5 16:22:42 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Wed, 5 Aug 2020 09:22:42 -0500 (CDT)
Subject: [Rd] HELPWANTED keyword in bugs.r-project.org
Message-ID: <alpine.DEB.2.21.2008050919360.18514@luke-Latitude-7480>

Just a quick note to mention that we have added a HELPWANTED keyword
on bugs.r-project.org for tagging bugs and issues where a good
well-tested patch would be particularly appreciated.  You can find the
HELPWANTED issues by selecting the keyword in the search interface or at

https://bugs.r-project.org/bugzilla/buglist.cgi?keywords=HELPWANTED

This URL shows both open and resolved HELPWANTED issues.

At the moment only a handful of issues have been tagged, but there
will be more over time. One of these may be a good place to start if
you are looking for ways to contribute. The techincal level varies;
some might be resolved with a small amount of R code; others might
need more extensive changes at the C level.

Best,

luke


-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From @rtjom31415 @end|ng |rom goog|em@||@com  Fri Aug  7 20:01:09 2020
From: @rtjom31415 @end|ng |rom goog|em@||@com (Constantin Ahlmann-Eltze)
Date: Fri, 7 Aug 2020 20:01:09 +0200
Subject: [Rd] qnbinom with small size is slow
Message-ID: <CANk-X-3TxnVsQYOS9TE4Cs8bP8E1m3Mu6V2mXcZSkp3Sxj4mfA@mail.gmail.com>

Hi all,

I recently noticed that `qnbinom()` can take a long time to calculate
a result if the `size` argument is very small.
For example
   qnbinom(0.5, mu = 3, size = 1e-10)
takes ~30 seconds on my computer.

I used gdb to step through the qnbinom.c implementation and noticed
that in line 106
(https://github.com/wch/r-source/blob/f8d4d7d48051860cc695b99db9be9cf439aee743/src/nmath/qnbinom.c#L106)
`y` becomes a very large negative number. Later in the function `y` is
(as far as I can see) only used as input for `pnbinom()` which is why
I would assume that it should be a non-negative integer.

I was wondering if this behavior could be considered a bug and should
be reported on the bugzilla? I read the instructions at
https://www.r-project.org/bugs.html and wasn't quite sure, so I
decided to ask here first :)

Best,
Constantin




PS: I tested the code with R 4.0.0 on macOS and the latest unstable
version using docker (https://github.com/wch/r-debug). The session
info is
> sessionInfo()
R Under development (unstable) (2020-08-06 r78973)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 20.04 LTS

Matrix products: default
BLAS:   /usr/local/RD/lib/R/lib/libRblas.so
LAPACK: /usr/local/RD/lib/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
 [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_4.1.0


From bbo|ker @end|ng |rom gm@||@com  Fri Aug  7 21:41:33 2020
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Fri, 7 Aug 2020 15:41:33 -0400
Subject: [Rd] qnbinom with small size is slow
In-Reply-To: <CANk-X-3TxnVsQYOS9TE4Cs8bP8E1m3Mu6V2mXcZSkp3Sxj4mfA@mail.gmail.com>
References: <CANk-X-3TxnVsQYOS9TE4Cs8bP8E1m3Mu6V2mXcZSkp3Sxj4mfA@mail.gmail.com>
Message-ID: <72e43a04-38fd-18bd-a379-257f1082104f@gmail.com>

 ?? I can reproduce this on

R Under development (unstable) (2020-07-24 r78910)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Pop!_OS 18.04 LTS

 ? In my opinion this is worth reporting, but discussing it here first 
was a good idea.? Many more people read this list than watch the bug 
tracker, so it will get more attention here; once the excitement has 
died down here (which might be almost immediately!), if no-one has 
already volunteered to post it to the bug tracker, request an account 
(as specified at https://www.r-project.org/bugs.html )

 ? Thanks!

 ?? Ben Bolker


For what it's worth it doesn't seem to be a threshold effect: approximately

log10(time[seconds]) ~ -8 - log10(-size)

over the range from 1e-6 to 1e-9


ff <- function(x) {
 ?? system.time(qnbinom(0.5, mu=3, size=10^x))[["elapsed"]]
}
svec <- seq(-5,-9,by=-0.2)
res <- lapply(svec, function(x) {
 ??? cat(x,"\n")
 ??? replicate(10,ff(x))
 ??? })

dd <- data.frame(size=rep(svec,each=10),
 ???????????????? time=unlist(res))
boxplot(log10(time)~size, dd)
summary(lm(log10(time)~size, data=dd, subset=time>0))




On 8/7/20 2:01 PM, Constantin Ahlmann-Eltze via R-devel wrote:

> Hi all,
>
> I recently noticed that `qnbinom()` can take a long time to calculate
> a result if the `size` argument is very small.
> For example
>     qnbinom(0.5, mu = 3, size = 1e-10)
> takes ~30 seconds on my computer.
>
> I used gdb to step through the qnbinom.c implementation and noticed
> that in line 106
> (https://github.com/wch/r-source/blob/f8d4d7d48051860cc695b99db9be9cf439aee743/src/nmath/qnbinom.c#L106)
> `y` becomes a very large negative number. Later in the function `y` is
> (as far as I can see) only used as input for `pnbinom()` which is why
> I would assume that it should be a non-negative integer.
>
> I was wondering if this behavior could be considered a bug and should
> be reported on the bugzilla? I read the instructions at
> https://www.r-project.org/bugs.html and wasn't quite sure, so I
> decided to ask here first :)
>
> Best,
> Constantin
>
>
>
>
> PS: I tested the code with R 4.0.0 on macOS and the latest unstable
> version using docker (https://github.com/wch/r-debug). The session
> info is
>> sessionInfo()
> R Under development (unstable) (2020-08-06 r78973)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Ubuntu 20.04 LTS
>
> Matrix products: default
> BLAS:   /usr/local/RD/lib/R/lib/libRblas.so
> LAPACK: /usr/local/RD/lib/R/lib/libRlapack.so
>
> locale:
>   [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
>   [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
>   [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
>   [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
>   [9] LC_ADDRESS=C               LC_TELEPHONE=C
> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> loaded via a namespace (and not attached):
> [1] compiler_4.1.0
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @per@nz@ @end|ng |rom |bk@eu  Sun Aug  9 12:09:27 2020
From: @per@nz@ @end|ng |rom |bk@eu (speranza)
Date: Sun, 9 Aug 2020 12:09:27 +0200
Subject: [Rd] Interactive graphics
Message-ID: <1ca58d86-fea4-9407-b629-cdcc6859535a@fbk.eu>

Dear R-Devel list members
I'm facing as problem already known and linked to the use of

getGraphicsEvent(prompt = "Waiting for input",
 ???????????????? onMouseDown = NULL, onMouseMove = NULL,
 ???????????????? onMouseUp = NULL, onKeybd = NULL,
 ???????????????? onIdle = NULL,
 ???????????????? consolePrompt = prompt)
setGraphicsEventHandlers(which = dev.cur(), ...)
getGraphicsEventEnv(which = dev.cur())
setGraphicsEventEnv(which = dev.cur(), env)

The problem rises when trying to get interrupts generated by pressing 
mouse buttons and, at the same time, interrupts coming from widgets. The 
idea is to locate points under a spectrum and draw a baseline.
 ?In my code the logical sequence of operations is:
1) widgets are created to select the datafile, the spectrum to plot, and 
the baseline to use;
2) The selection of the datafile and spectrum activate widget-handlers 
and the spectrum is drawn in an X-Y plot;
3) then
/setGraphicsEventHandlers(which = dev.cur(), ...)/
/getGraphicsEventEnv()//
/are used to set the graphic handler and check if the /EventEnv$which/ 
corresponds to the active device and get events when mouse buttons are 
pressed. Observe that these instructions are located after widgets at 
the end of the code (i.e. all widget with handlers are defined).

In Windows operating systems both widget-handlers and 
graphic-Event-handlers are active. This allows defining the baseline 
edges under the spectrum (graphic-Event-handlers), select the baseline 
(widget handlers) and plot the baseline under the spectrum (widget 
handlers).
Unfortunately in linux (I'm using Ubuntu 18.04 LTS) the 
graphic-Event-handler masks the widget handlers. This blocks the mouse 
clicks on widgets preventing any selection of the baseline and of other 
options.

The locator function uses a graphic handler letting widget-handlers 
active in both windows and linux operating systems. Infortunately 
locator() only responds to the Left_mouse_button while I need both the 
left and right buttons. The code C_locator() used to sense the mouse 
button pressing is not accessible I then cannot modify it to satisfy my 
needs.
Could you suggest any solution?
Is it possible to have the C_locator code to modify it?
Thanking you in advance for the attention
best regards
G. Speranza

-- 
Dr. Giorgio Speranza Senior Researcher
CMM - FBK Sommarive str. 18
38121 Trento - Italy
Phone ++39 0461 314487


-- 
_FBK vi invita a leggere il suo?Piano di rientro 
<https://trasparenza.fbk.eu/COVID-19-comunicazioni-del-Datore-di-Lavoro-raccomandazioni-e-altro/Piano-di-rientro-FBK/Piano-di-rientro-FBK>?
| FBK invites you to read its?Premises Reopening Plan 
<https://trasparenza.fbk.eu/COVID-19-comunicazioni-del-Datore-di-Lavoro-raccomandazioni-e-altro/Piano-di-rientro-FBK/English-version_FBK-Reopening-Plan>._



--
Le informazioni contenute nella presente comunicazione sono di natura?
privata e come tali sono da considerarsi riservate ed indirizzate?
esclusivamente ai destinatari indicati e per le finalit? strettamente?
legate al relativo contenuto. Se avete ricevuto questo messaggio per?
errore, vi preghiamo di eliminarlo e di inviare una comunicazione?
all?indirizzo e-mail del mittente.

--
The information transmitted is 
intended only for the person or entity to which it is addressed and may 
contain confidential and/or privileged material. If you received this in 
error, please contact the sender and delete the material.

	[[alternative HTML version deleted]]


From jmount @end|ng |rom w|n-vector@com  Sun Aug  9 20:13:47 2020
From: jmount @end|ng |rom w|n-vector@com (John Mount)
Date: Sun, 9 Aug 2020 18:13:47 +0000
Subject: [Rd] lm() takes weights from formula environment
Message-ID: <C57EF170-CC1D-426A-A659-3EA8B198EBC6@win-vector.com>

I know this programmers can reason this out from R's late parameter evaluation rules PLUS the explicit match.call()/eval() lm() does to work with the passed in formula and data frame. But, from a statistical user point of view this seems to be counter-productive. At best it works as if the user is passing in the name of the weights variable instead of values (I know this is the obvious consequence of NSE).

lm() takes instance weights from the formula environment. Usually that environment is the interactive environment or a close child of the interactive environment and we are lucky enough to have no intervening name collisions so we don't have a problem. However it makes programming over formulas for lm() a bit tricky. Here is an example of the issue.

Is there any recommended discussion on this and how to work around it? In my own work I explicitly set the formula environment and put the weights in that environment.


d <- data.frame(x = 1:3, y = c(3, 3, 4))
w <- c(1, 5, 1)

# works
lm(y ~ x, data = d, weights = w)  

# fails, as weights are taken from formul environment
fn <- function() {  # deliberately set up formula with bad value in environment
  w <- c(-1, -1, -1, -1)  # bad weights
  f <- as.formula(y ~ x)  # captures bad weights with as.formula(env = parent.frame()) default
  return(f)
}
lm(fn(), data = d, weights = w)
# Error in model.frame.default(formula = fn(), data = d, weights = w, drop.unused.levels = TRUE) : 
#   variable lengths differ (found for '(weights)')


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Aug  9 20:56:59 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 9 Aug 2020 14:56:59 -0400
Subject: [Rd] lm() takes weights from formula environment
In-Reply-To: <C57EF170-CC1D-426A-A659-3EA8B198EBC6@win-vector.com>
References: <C57EF170-CC1D-426A-A659-3EA8B198EBC6@win-vector.com>
Message-ID: <509f3b0d-d531-20cd-ea34-bd340d5be3b0@gmail.com>

This is fairly clearly documented in ?lm:

"All of weights, subset and offset are evaluated in the same way as 
variables in formula, that is first in data and then in the environment 
of formula."

There are lots of possible places to look for weights, but this seems to 
me like a pretty sensible search order.  In most cases the environment 
of the formula will have a parent environment chain that eventually 
leads to the global environment, so (with no conflicts) your strategy of 
defining w there will sometimes work, but looks pretty unreliable.

When you say you want to work around this search order, I think the 
obvious way is to add your w vector to your d dataframe.  That way it is 
guaranteed to be found even if there's a conflicting variable in the 
formula environment, or the global environment.

Duncan Murdoch

On 09/08/2020 2:13 p.m., John Mount wrote:
> I know this programmers can reason this out from R's late parameter evaluation rules PLUS the explicit match.call()/eval() lm() does to work with the passed in formula and data frame. But, from a statistical user point of view this seems to be counter-productive. At best it works as if the user is passing in the name of the weights variable instead of values (I know this is the obvious consequence of NSE).
> 
> lm() takes instance weights from the formula environment. Usually that environment is the interactive environment or a close child of the interactive environment and we are lucky enough to have no intervening name collisions so we don't have a problem. However it makes programming over formulas for lm() a bit tricky. Here is an example of the issue.
> 
> Is there any recommended discussion on this and how to work around it? In my own work I explicitly set the formula environment and put the weights in that environment.
> 
> 
> d <- data.frame(x = 1:3, y = c(3, 3, 4))
> w <- c(1, 5, 1)
> 
> # works
> lm(y ~ x, data = d, weights = w)
> 
> # fails, as weights are taken from formul environment
> fn <- function() {  # deliberately set up formula with bad value in environment
>    w <- c(-1, -1, -1, -1)  # bad weights
>    f <- as.formula(y ~ x)  # captures bad weights with as.formula(env = parent.frame()) default
>    return(f)
> }
> lm(fn(), data = d, weights = w)
> # Error in model.frame.default(formula = fn(), data = d, weights = w, drop.unused.levels = TRUE) :
> #   variable lengths differ (found for '(weights)')
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From jmount @end|ng |rom w|n-vector@com  Sun Aug  9 21:01:21 2020
From: jmount @end|ng |rom w|n-vector@com (John Mount)
Date: Sun, 9 Aug 2020 19:01:21 +0000
Subject: [Rd] lm() takes weights from formula environment
In-Reply-To: <509f3b0d-d531-20cd-ea34-bd340d5be3b0@gmail.com>
References: <C57EF170-CC1D-426A-A659-3EA8B198EBC6@win-vector.com>
 <509f3b0d-d531-20cd-ea34-bd340d5be3b0@gmail.com>
Message-ID: <BFF38212-4B55-4981-97D1-4738B3454B6E@win-vector.com>

Doesn't this preclude "y ~ ." style notations?

> On Aug 9, 2020, at 11:56 AM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> 
> This is fairly clearly documented in ?lm:
> 
> "All of weights, subset and offset are evaluated in the same way as variables in formula, that is first in data and then in the environment of formula."
> 
> There are lots of possible places to look for weights, but this seems to me like a pretty sensible search order.  In most cases the environment of the formula will have a parent environment chain that eventually leads to the global environment, so (with no conflicts) your strategy of defining w there will sometimes work, but looks pretty unreliable.
> 
> When you say you want to work around this search order, I think the obvious way is to add your w vector to your d dataframe.  That way it is guaranteed to be found even if there's a conflicting variable in the formula environment, or the global environment.
> 
> Duncan Murdoch
> 
> On 09/08/2020 2:13 p.m., John Mount wrote:
>> I know this programmers can reason this out from R's late parameter evaluation rules PLUS the explicit match.call()/eval() lm() does to work with the passed in formula and data frame. But, from a statistical user point of view this seems to be counter-productive. At best it works as if the user is passing in the name of the weights variable instead of values (I know this is the obvious consequence of NSE).
>> lm() takes instance weights from the formula environment. Usually that environment is the interactive environment or a close child of the interactive environment and we are lucky enough to have no intervening name collisions so we don't have a problem. However it makes programming over formulas for lm() a bit tricky. Here is an example of the issue.
>> Is there any recommended discussion on this and how to work around it? In my own work I explicitly set the formula environment and put the weights in that environment.
>> d <- data.frame(x = 1:3, y = c(3, 3, 4))
>> w <- c(1, 5, 1)
>> # works
>> lm(y ~ x, data = d, weights = w)
>> # fails, as weights are taken from formul environment
>> fn <- function() {  # deliberately set up formula with bad value in environment
>>   w <- c(-1, -1, -1, -1)  # bad weights
>>   f <- as.formula(y ~ x)  # captures bad weights with as.formula(env = parent.frame()) default
>>   return(f)
>> }
>> lm(fn(), data = d, weights = w)
>> # Error in model.frame.default(formula = fn(), data = d, weights = w, drop.unused.levels = TRUE) :
>> #   variable lengths differ (found for '(weights)')
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Aug  9 21:07:40 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 9 Aug 2020 15:07:40 -0400
Subject: [Rd] lm() takes weights from formula environment
In-Reply-To: <BFF38212-4B55-4981-97D1-4738B3454B6E@win-vector.com>
References: <C57EF170-CC1D-426A-A659-3EA8B198EBC6@win-vector.com>
 <509f3b0d-d531-20cd-ea34-bd340d5be3b0@gmail.com>
 <BFF38212-4B55-4981-97D1-4738B3454B6E@win-vector.com>
Message-ID: <351b0718-6630-18f8-860a-fc0984bf36d7@gmail.com>

On 09/08/2020 3:01 p.m., John Mount wrote:
> Doesn't this preclude "y ~ ." style notations?

Yes, but you can use "y ~ . - w".

Duncan Murdoch


> 
>> On Aug 9, 2020, at 11:56 AM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>
>> This is fairly clearly documented in ?lm:
>>
>> "All of weights, subset and offset are evaluated in the same way as variables in formula, that is first in data and then in the environment of formula."
>>
>> There are lots of possible places to look for weights, but this seems to me like a pretty sensible search order.  In most cases the environment of the formula will have a parent environment chain that eventually leads to the global environment, so (with no conflicts) your strategy of defining w there will sometimes work, but looks pretty unreliable.
>>
>> When you say you want to work around this search order, I think the obvious way is to add your w vector to your d dataframe.  That way it is guaranteed to be found even if there's a conflicting variable in the formula environment, or the global environment.
>>
>> Duncan Murdoch
>>
>> On 09/08/2020 2:13 p.m., John Mount wrote:
>>> I know this programmers can reason this out from R's late parameter evaluation rules PLUS the explicit match.call()/eval() lm() does to work with the passed in formula and data frame. But, from a statistical user point of view this seems to be counter-productive. At best it works as if the user is passing in the name of the weights variable instead of values (I know this is the obvious consequence of NSE).
>>> lm() takes instance weights from the formula environment. Usually that environment is the interactive environment or a close child of the interactive environment and we are lucky enough to have no intervening name collisions so we don't have a problem. However it makes programming over formulas for lm() a bit tricky. Here is an example of the issue.
>>> Is there any recommended discussion on this and how to work around it? In my own work I explicitly set the formula environment and put the weights in that environment.
>>> d <- data.frame(x = 1:3, y = c(3, 3, 4))
>>> w <- c(1, 5, 1)
>>> # works
>>> lm(y ~ x, data = d, weights = w)
>>> # fails, as weights are taken from formul environment
>>> fn <- function() {  # deliberately set up formula with bad value in environment
>>>    w <- c(-1, -1, -1, -1)  # bad weights
>>>    f <- as.formula(y ~ x)  # captures bad weights with as.formula(env = parent.frame()) default
>>>    return(f)
>>> }
>>> lm(fn(), data = d, weights = w)
>>> # Error in model.frame.default(formula = fn(), data = d, weights = w, drop.unused.levels = TRUE) :
>>> #   variable lengths differ (found for '(weights)')
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Aug 10 00:05:32 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 9 Aug 2020 18:05:32 -0400
Subject: [Rd] lm() takes weights from formula environment
In-Reply-To: <351b0718-6630-18f8-860a-fc0984bf36d7@gmail.com>
References: <C57EF170-CC1D-426A-A659-3EA8B198EBC6@win-vector.com>
 <509f3b0d-d531-20cd-ea34-bd340d5be3b0@gmail.com>
 <BFF38212-4B55-4981-97D1-4738B3454B6E@win-vector.com>
 <351b0718-6630-18f8-860a-fc0984bf36d7@gmail.com>
Message-ID: <d479ad0e-24cd-71a3-d678-0aa312ebcaf5@gmail.com>

On 09/08/2020 3:07 p.m., Duncan Murdoch wrote:
> On 09/08/2020 3:01 p.m., John Mount wrote:
>> Doesn't this preclude "y ~ ." style notations?
> 
> Yes, but you can use "y ~ . - w".

And as was pointed out to me offline, often one doesn't have a simple 
vector w giving the weights, instead one computes the weights from the 
predictors.  So if weights = f(pred), the original "y ~ ." would be fine.

Duncan Murdoch


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Mon Aug 10 09:45:39 2020
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Mon, 10 Aug 2020 08:45:39 +0100
Subject: [Rd] Typos in file.path documentation.
Message-ID: <5c4e8fe9-7559-4e8b-8613-c14e9ed0a3ed@sapo.pt>

Hello,

R 4.0.2 on Ubuntu 20.04, sessionInfo() below.

I believe there are two typos in ?file.path, section Value, 2nd paragraph.

1. There is a close parenthesis missing  after Encoding, as it is 
reading is a bit confusing, I had to backtrack and repeat.
2. I'm not a native language speaker but before a consonant it's 'a', 
not 'an', right?

an component

should be

a component


Current:

An element of the result will be marked (see Encoding as UTF-8 if run in 
a UTF-8 locale (when marked inputs are converted to UTF-8) or if an 
component of the result is marked as UTF-8, or as Latin-1 in a 
non-Latin-1 locale.

Should be:

An element of the result will be marked (see Encoding) as UTF-8 if run 
in a UTF-8 locale (when marked inputs are converted to UTF-8) or if a 
component of the result is marked as UTF-8, or as Latin-1 in a 
non-Latin-1 locale.


sessionInfo()
R version 4.0.2 (2020-06-22)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 20.04.1 LTS

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0

locale:
  [1] LC_CTYPE=pt_PT.UTF-8       LC_NUMERIC=C
  [3] LC_TIME=pt_PT.UTF-8        LC_COLLATE=pt_PT.UTF-8
  [5] LC_MONETARY=pt_PT.UTF-8    LC_MESSAGES=pt_PT.UTF-8
  [7] LC_PAPER=pt_PT.UTF-8       LC_NAME=C
  [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=pt_PT.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_4.0.2


Hope this helps,

Rui Barradas


From @rtjom31415 @end|ng |rom goog|em@||@com  Mon Aug 10 10:05:36 2020
From: @rtjom31415 @end|ng |rom goog|em@||@com (Constantin Ahlmann-Eltze)
Date: Mon, 10 Aug 2020 10:05:36 +0200
Subject: [Rd] qnbinom with small size is slow
In-Reply-To: <72e43a04-38fd-18bd-a379-257f1082104f@gmail.com>
References: <CANk-X-3TxnVsQYOS9TE4Cs8bP8E1m3Mu6V2mXcZSkp3Sxj4mfA@mail.gmail.com>
 <72e43a04-38fd-18bd-a379-257f1082104f@gmail.com>
Message-ID: <CANk-X-31zDWV-dKsknHvkh3rNZkpaq=1LyQ93G48bX2vUDh=VQ@mail.gmail.com>

Thanks Ben for verifying the issue. It is always reassuring to hear
when others can reproduce the problem.

I wrote a small patch that fixes the issue
(https://github.com/r-devel/r-svn/pull/11):

diff --git a/src/nmath/qnbinom.c b/src/nmath/qnbinom.c
index b313ce56b2..d2e8d98759 100644
--- a/src/nmath/qnbinom.c
+++ b/src/nmath/qnbinom.c
@@ -104,6 +104,7 @@ double qnbinom(double p, double size, double prob,
int lower_tail, int log_p)
     /* y := approx.value (Cornish-Fisher expansion) :  */
     z = qnorm(p, 0., 1., /*lower_tail*/TRUE, /*log_p*/FALSE);
     y = R_forceint(mu + sigma * (z + gamma * (z*z - 1) / 6));
+    y = fmax2(0.0, y);

     z = pnbinom(y, size, prob, /*lower_tail*/TRUE, /*log_p*/FALSE);

I used the https://github.com/r-devel/r-svn repo and its continuous
integration tools to check that it doesn't break any existing tests:
https://github.com/r-devel/r-svn/actions/runs/201327042

I have also requested a Bugzilla-account, but haven't heard anything back yet.

Best,
Constantin

Am Fr., 7. Aug. 2020 um 21:41 Uhr schrieb Ben Bolker <bbolker at gmail.com>:
>
>     I can reproduce this on
>
> R Under development (unstable) (2020-07-24 r78910)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Pop!_OS 18.04 LTS
>
>    In my opinion this is worth reporting, but discussing it here first
> was a good idea.  Many more people read this list than watch the bug
> tracker, so it will get more attention here; once the excitement has
> died down here (which might be almost immediately!), if no-one has
> already volunteered to post it to the bug tracker, request an account
> (as specified at https://www.r-project.org/bugs.html )
>
>    Thanks!
>
>     Ben Bolker
>
>
> For what it's worth it doesn't seem to be a threshold effect: approximately
>
> log10(time[seconds]) ~ -8 - log10(-size)
>
> over the range from 1e-6 to 1e-9
>
>
> ff <- function(x) {
>     system.time(qnbinom(0.5, mu=3, size=10^x))[["elapsed"]]
> }
> svec <- seq(-5,-9,by=-0.2)
> res <- lapply(svec, function(x) {
>      cat(x,"\n")
>      replicate(10,ff(x))
>      })
>
> dd <- data.frame(size=rep(svec,each=10),
>                   time=unlist(res))
> boxplot(log10(time)~size, dd)
> summary(lm(log10(time)~size, data=dd, subset=time>0))
>
>
>
>
> On 8/7/20 2:01 PM, Constantin Ahlmann-Eltze via R-devel wrote:
>
> > Hi all,
> >
> > I recently noticed that `qnbinom()` can take a long time to calculate
> > a result if the `size` argument is very small.
> > For example
> >     qnbinom(0.5, mu = 3, size = 1e-10)
> > takes ~30 seconds on my computer.
> >
> > I used gdb to step through the qnbinom.c implementation and noticed
> > that in line 106
> > (https://github.com/wch/r-source/blob/f8d4d7d48051860cc695b99db9be9cf439aee743/src/nmath/qnbinom.c#L106)
> > `y` becomes a very large negative number. Later in the function `y` is
> > (as far as I can see) only used as input for `pnbinom()` which is why
> > I would assume that it should be a non-negative integer.
> >
> > I was wondering if this behavior could be considered a bug and should
> > be reported on the bugzilla? I read the instructions at
> > https://www.r-project.org/bugs.html and wasn't quite sure, so I
> > decided to ask here first :)
> >
> > Best,
> > Constantin
> >
> >
> >
> >
> > PS: I tested the code with R 4.0.0 on macOS and the latest unstable
> > version using docker (https://github.com/wch/r-debug). The session
> > info is
> >> sessionInfo()
> > R Under development (unstable) (2020-08-06 r78973)
> > Platform: x86_64-pc-linux-gnu (64-bit)
> > Running under: Ubuntu 20.04 LTS
> >
> > Matrix products: default
> > BLAS:   /usr/local/RD/lib/R/lib/libRblas.so
> > LAPACK: /usr/local/RD/lib/R/lib/libRlapack.so
> >
> > locale:
> >   [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
> >   [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
> >   [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
> >   [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
> >   [9] LC_ADDRESS=C               LC_TELEPHONE=C
> > [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
> >
> > attached base packages:
> > [1] stats     graphics  grDevices utils     datasets  methods   base
> >
> > loaded via a namespace (and not attached):
> > [1] compiler_4.1.0
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From jmount @end|ng |rom w|n-vector@com  Mon Aug 10 19:42:43 2020
From: jmount @end|ng |rom w|n-vector@com (John Mount)
Date: Mon, 10 Aug 2020 17:42:43 +0000
Subject: [Rd] lm() takes weights from formula environment
In-Reply-To: <509f3b0d-d531-20cd-ea34-bd340d5be3b0@gmail.com>
References: <C57EF170-CC1D-426A-A659-3EA8B198EBC6@win-vector.com>
 <509f3b0d-d531-20cd-ea34-bd340d5be3b0@gmail.com>
Message-ID: <CC3F936D-DA0C-4681-A5F0-1A2C790147D3@win-vector.com>

I wish I had started with "I am disappointed that lm() doesn't continue its search for weights into the calling environment" or "the fact that lm() looks only in the formula environment and data frame for weights doesn't seem consistent with how other values are treated."

But I did not. So I do apologize for both that and for negative tone on my part.


Simplified example:

d <- data.frame(x = 1:3, y = c(1, 2, 1))
w <- c(1, 10, 1)
f <- as.formula(y ~ x)
lm(f, data = d, weights = w)  # works

# fails
environment(f) <- baseenv()
lm(f, data = d, weights = w)
# Error in eval(extras, data, env) : object 'w' not found


> On Aug 9, 2020, at 11:56 AM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> 
> This is fairly clearly documented in ?lm:
> 


From wdun|@p @end|ng |rom t|bco@com  Mon Aug 10 20:25:58 2020
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Mon, 10 Aug 2020 11:25:58 -0700
Subject: [Rd] lm() takes weights from formula environment
In-Reply-To: <CC3F936D-DA0C-4681-A5F0-1A2C790147D3@win-vector.com>
References: <C57EF170-CC1D-426A-A659-3EA8B198EBC6@win-vector.com>
 <509f3b0d-d531-20cd-ea34-bd340d5be3b0@gmail.com>
 <CC3F936D-DA0C-4681-A5F0-1A2C790147D3@win-vector.com>
Message-ID: <CAF8bMcaiWzHH5Ui-gs3z6vjAyvC-GZqsiP5rbqPfWNwNb9yBHA@mail.gmail.com>

I assume you are concerned about this because the formula is defined
in one environment and the model fitting with weights occurs in a
separate function.  If that is the case then the model fitting
function can create a new environment, a child of the formula's
environment, add the weights variable to it, and make that the new
environment of the formula.  (This new environment is only an
attribute of the copy of the formula in the model fitting function: it
will not affect the formula outside of that function.)  E.g.,


d <- data.frame(x = 1:3, y = c(1, 2, 1))

lmWithWeightsBad <- function(formula, data, weights) {
    lm(formula, data=data, weights=weights)
}
coef(lmWithWeightsBad(y~x, data=d, weights=c(2,5,1))) # lm finds the
'weights' function in package:stats
#Error in model.frame.default(formula = formula, data = data, weights
= weights,  :
#  invalid type (closure) for variable '(weights)'

lmWithWeightsGood <- function(formula, data, weights) {
    envir <- new.env(parent = environment(formula))
    envir$weights <- weights
    environment(formula) <- envir
    lm(formula, data=data, weights=weights)
}
coef(lmWithWeightsGood(y~x, data=d, weights=c(2,5,1)))
#(Intercept)           x
#  1.2173913   0.2173913

Bill Dunlap
TIBCO Software
wdunlap tibco.com

On Mon, Aug 10, 2020 at 10:43 AM John Mount <jmount at win-vector.com> wrote:
>
> I wish I had started with "I am disappointed that lm() doesn't continue its search for weights into the calling environment" or "the fact that lm() looks only in the formula environment and data frame for weights doesn't seem consistent with how other values are treated."
>
> But I did not. So I do apologize for both that and for negative tone on my part.
>
>
> Simplified example:
>
> d <- data.frame(x = 1:3, y = c(1, 2, 1))
> w <- c(1, 10, 1)
> f <- as.formula(y ~ x)
> lm(f, data = d, weights = w)  # works
>
> # fails
> environment(f) <- baseenv()
> lm(f, data = d, weights = w)
> # Error in eval(extras, data, env) : object 'w' not found
>
>
> > On Aug 9, 2020, at 11:56 AM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> >
> > This is fairly clearly documented in ?lm:
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Aug 10 20:34:20 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 10 Aug 2020 14:34:20 -0400
Subject: [Rd] lm() takes weights from formula environment
In-Reply-To: <CC3F936D-DA0C-4681-A5F0-1A2C790147D3@win-vector.com>
References: <C57EF170-CC1D-426A-A659-3EA8B198EBC6@win-vector.com>
 <509f3b0d-d531-20cd-ea34-bd340d5be3b0@gmail.com>
 <CC3F936D-DA0C-4681-A5F0-1A2C790147D3@win-vector.com>
Message-ID: <f299efeb-503e-dab6-f119-fe087b40756a@gmail.com>

On 10/08/2020 1:42 p.m., John Mount wrote:
> I wish I had started with "I am disappointed that lm() doesn't continue its search for weights into the calling environment" or "the fact that lm() looks only in the formula environment and data frame for weights doesn't seem consistent with how other values are treated."

Normally searching is done automatically by following a chain of 
environments.  It's easy to add something to the head of the chain (e.g. 
data), it's hard to add something in the middle or at the end (because 
the chain ends with emptyenv(), which is not allowed to have a parent).

So I'd suggest using

  environment(f) <- environment()

before calling lm() if you want the calling environment to be in the 
search.  Setting it to baseenv() doesn't really make sense, unless you 
want to disable all searches except in data, in which case emptyenv() 
would make more sense (but I haven't tried it, so it might break something).

Duncan Murdoch

> 
> But I did not. So I do apologize for both that and for negative tone on my part.
> 
> 
> Simplified example:
> 
> d <- data.frame(x = 1:3, y = c(1, 2, 1))
> w <- c(1, 10, 1)
> f <- as.formula(y ~ x)
> lm(f, data = d, weights = w)  # works
> 
> # fails
> environment(f) <- baseenv()
> lm(f, data = d, weights = w)
> # Error in eval(extras, data, env) : object 'w' not found
> 
> 
>> On Aug 9, 2020, at 11:56 AM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>
>> This is fairly clearly documented in ?lm:
>>
>


From jmount @end|ng |rom w|n-vector@com  Mon Aug 10 20:50:04 2020
From: jmount @end|ng |rom w|n-vector@com (John Mount)
Date: Mon, 10 Aug 2020 18:50:04 +0000
Subject: [Rd] lm() takes weights from formula environment
In-Reply-To: <f299efeb-503e-dab6-f119-fe087b40756a@gmail.com>
References: <C57EF170-CC1D-426A-A659-3EA8B198EBC6@win-vector.com>
 <509f3b0d-d531-20cd-ea34-bd340d5be3b0@gmail.com>
 <CC3F936D-DA0C-4681-A5F0-1A2C790147D3@win-vector.com>
 <f299efeb-503e-dab6-f119-fe087b40756a@gmail.com>
Message-ID: <3762C93D-E83A-493E-8AE5-1C40368F31C2@win-vector.com>

Thank you for your suggestion. I do know how to work around the issue.  I usually build a fresh environment as a child of base-environment and then insurt the weights there. I was just trying to provide an example of the issue.

emptyenv() can not be used, as it is needed for the eval (errors out even if weights are not used with "could not find function list").

For some applications one doesn't want the formula to have a non-trivial environment with respect to serialization.  Nina Zumel wrote about reference leaks in lm()/glm() and a good part of that was environments other than global/base (such as those formed when building a formula in a function) capturing references to unrelated structures.



> On Aug 10, 2020, at 11:34 AM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> 
> On 10/08/2020 1:42 p.m., John Mount wrote:
>> I wish I had started with "I am disappointed that lm() doesn't continue its search for weights into the calling environment" or "the fact that lm() looks only in the formula environment and data frame for weights doesn't seem consistent with how other values are treated."
> 
> Normally searching is done automatically by following a chain of environments.  It's easy to add something to the head of the chain (e.g. data), it's hard to add something in the middle or at the end (because the chain ends with emptyenv(), which is not allowed to have a parent).
> 
> So I'd suggest using
> 
> environment(f) <- environment()
> 
> before calling lm() if you want the calling environment to be in the search.  Setting it to baseenv() doesn't really make sense, unless you want to disable all searches except in data, in which case emptyenv() would make more sense (but I haven't tried it, so it might break something).
> 
> Duncan Murdoch
> 
>> But I did not. So I do apologize for both that and for negative tone on my part.
>> Simplified example:
>> d <- data.frame(x = 1:3, y = c(1, 2, 1))
>> w <- c(1, 10, 1)
>> f <- as.formula(y ~ x)
>> lm(f, data = d, weights = w)  # works
>> # fails
>> environment(f) <- baseenv()
>> lm(f, data = d, weights = w)
>> # Error in eval(extras, data, env) : object 'w' not found
>>> On Aug 9, 2020, at 11:56 AM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>> 
>>> This is fairly clearly documented in ?lm:
>>> 
> 


From jmount @end|ng |rom w|n-vector@com  Mon Aug 10 20:54:58 2020
From: jmount @end|ng |rom w|n-vector@com (John Mount)
Date: Mon, 10 Aug 2020 18:54:58 +0000
Subject: [Rd] lm() takes weights from formula environment
In-Reply-To: <3762C93D-E83A-493E-8AE5-1C40368F31C2@win-vector.com>
References: <C57EF170-CC1D-426A-A659-3EA8B198EBC6@win-vector.com>
 <509f3b0d-d531-20cd-ea34-bd340d5be3b0@gmail.com>
 <CC3F936D-DA0C-4681-A5F0-1A2C790147D3@win-vector.com>
 <f299efeb-503e-dab6-f119-fe087b40756a@gmail.com>
 <3762C93D-E83A-493E-8AE5-1C40368F31C2@win-vector.com>
Message-ID: <CC71C4C8-6A7A-4317-8279-1AEB66700690@win-vector.com>

Forgot the url: https://win-vector.com/2014/05/30/trimming-the-fat-from-glm-models-in-r/

On Aug 10, 2020, at 11:50 AM, John Mount <jmount at win-vector.com<mailto:jmount at win-vector.com>> wrote:

Thank you for your suggestion. I do know how to work around the issue.  I usually build a fresh environment as a child of base-environment and then insurt the weights there. I was just trying to provide an example of the issue.

emptyenv() can not be used, as it is needed for the eval (errors out even if weights are not used with "could not find function list").

For some applications one doesn't want the formula to have a non-trivial environment with respect to serialization.  Nina Zumel wrote about reference leaks in lm()/glm() and a good part of that was environments other than global/base (such as those formed when building a formula in a function) capturing references to unrelated structures.



On Aug 10, 2020, at 11:34 AM, Duncan Murdoch <murdoch.duncan at gmail.com<mailto:murdoch.duncan at gmail.com>> wrote:

On 10/08/2020 1:42 p.m., John Mount wrote:
I wish I had started with "I am disappointed that lm() doesn't continue its search for weights into the calling environment" or "the fact that lm() looks only in the formula environment and data frame for weights doesn't seem consistent with how other values are treated."

Normally searching is done automatically by following a chain of environments.  It's easy to add something to the head of the chain (e.g. data), it's hard to add something in the middle or at the end (because the chain ends with emptyenv(), which is not allowed to have a parent).

So I'd suggest using

environment(f) <- environment()

before calling lm() if you want the calling environment to be in the search.  Setting it to baseenv() doesn't really make sense, unless you want to disable all searches except in data, in which case emptyenv() would make more sense (but I haven't tried it, so it might break something).

Duncan Murdoch

But I did not. So I do apologize for both that and for negative tone on my part.
Simplified example:
d <- data.frame(x = 1:3, y = c(1, 2, 1))
w <- c(1, 10, 1)
f <- as.formula(y ~ x)
lm(f, data = d, weights = w)  # works
# fails
environment(f) <- baseenv()
lm(f, data = d, weights = w)
# Error in eval(extras, data, env) : object 'w' not found
On Aug 9, 2020, at 11:56 AM, Duncan Murdoch <murdoch.duncan at gmail.com<mailto:murdoch.duncan at gmail.com>> wrote:

This is fairly clearly documented in ?lm:





	[[alternative HTML version deleted]]


From bbo|ker @end|ng |rom gm@||@com  Tue Aug 11 03:23:01 2020
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Mon, 10 Aug 2020 21:23:01 -0400
Subject: [Rd] M[cbind()] <- assignment with Matrix object loses attributes
Message-ID: <baa2781d-0371-401d-b8a5-62b5f693eec5@gmail.com>

 ? Does this constitute a bug, or is there something I'm missing? 
assigning sub-elements of a sparse Matrix via M[X]<-..., where X is a 
2-column matrix, appears to drop user-assigned attributes. I dug around 
in the R code for Matrix trying to find the relevant machinery but my 
brain started to hurt too badly ...

 ?? Will submit this as a bug if it seems warranted.

library(Matrix)
m1 <- matrix(1:9,3,3)
m1 <- Matrix(m1)
attr(m1,"junk") <- 12
stopifnot(isTRUE(attr(m1,"junk")==12))? ## OK
m1[cbind(1:2,2:3)] <- 1
stopifnot(isTRUE(attr(m1,"junk")==12)) ## not OK
attr(m1,"junk") ## NULL


## note I have to use the ugly stopifnot(isTRUE(...)) because a missing 
attribute returns NULL, an assignment to NULL returns NULL, and 
stopifnot(NULL) doesn't stop ...


 ?? cheers

 ???? Ben Bolker


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Tue Aug 11 13:39:26 2020
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Tue, 11 Aug 2020 13:39:26 +0200
Subject: [Rd] Typos in file.path documentation.
In-Reply-To: <5c4e8fe9-7559-4e8b-8613-c14e9ed0a3ed@sapo.pt>
References: <5c4e8fe9-7559-4e8b-8613-c14e9ed0a3ed@sapo.pt>
Message-ID: <24370.33646.170137.156667@hornik.net>

>>>>> Rui Barradas writes:

Thanks: both fixed now in the trunk with c79004.

Best
-k

> Hello,
> R 4.0.2 on Ubuntu 20.04, sessionInfo() below.

> I believe there are two typos in ?file.path, section Value, 2nd paragraph.

> 1. There is a close parenthesis missing  after Encoding, as it is 
> reading is a bit confusing, I had to backtrack and repeat.
> 2. I'm not a native language speaker but before a consonant it's 'a', 
> not 'an', right?

> an component

> should be

> a component


> Current:

> An element of the result will be marked (see Encoding as UTF-8 if run in 
> a UTF-8 locale (when marked inputs are converted to UTF-8) or if an 
> component of the result is marked as UTF-8, or as Latin-1 in a 
> non-Latin-1 locale.

> Should be:

> An element of the result will be marked (see Encoding) as UTF-8 if run 
> in a UTF-8 locale (when marked inputs are converted to UTF-8) or if a 
> component of the result is marked as UTF-8, or as Latin-1 in a 
> non-Latin-1 locale.


> sessionInfo()
> R version 4.0.2 (2020-06-22)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Ubuntu 20.04.1 LTS

> Matrix products: default
> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0
> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0

> locale:
>   [1] LC_CTYPE=pt_PT.UTF-8       LC_NUMERIC=C
>   [3] LC_TIME=pt_PT.UTF-8        LC_COLLATE=pt_PT.UTF-8
>   [5] LC_MONETARY=pt_PT.UTF-8    LC_MESSAGES=pt_PT.UTF-8
>   [7] LC_PAPER=pt_PT.UTF-8       LC_NAME=C
>   [9] LC_ADDRESS=C               LC_TELEPHONE=C
> [11] LC_MEASUREMENT=pt_PT.UTF-8 LC_IDENTIFICATION=C

> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base

> loaded via a namespace (and not attached):
> [1] compiler_4.0.2


> Hope this helps,

> Rui Barradas

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From tdhock5 @end|ng |rom gm@||@com  Wed Aug 12 05:39:58 2020
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Tue, 11 Aug 2020 20:39:58 -0700
Subject: [Rd] HELPWANTED keyword in bugs.r-project.org
In-Reply-To: <alpine.DEB.2.21.2008050919360.18514@luke-Latitude-7480>
References: <alpine.DEB.2.21.2008050919360.18514@luke-Latitude-7480>
Message-ID: <CALK03d0BrvNCOEC5yMhGswdSJP-9kQY4g--nYB9wUJJKnXno=A@mail.gmail.com>

Hi Luke,
I just wanted to say thanks for taking the time to add this tag. That is
very helpful to know which bugs are worth working on and need help. Keep up
the good work!
Toby

On Wed, Aug 5, 2020 at 7:23 AM <luke-tierney at uiowa.edu> wrote:

> Just a quick note to mention that we have added a HELPWANTED keyword
> on bugs.r-project.org for tagging bugs and issues where a good
> well-tested patch would be particularly appreciated.  You can find the
> HELPWANTED issues by selecting the keyword in the search interface or at
>
> https://bugs.r-project.org/bugzilla/buglist.cgi?keywords=HELPWANTED
>
> This URL shows both open and resolved HELPWANTED issues.
>
> At the moment only a handful of issues have been tagged, but there
> will be more over time. One of these may be a good place to start if
> you are looking for ways to contribute. The techincal level varies;
> some might be resolved with a small amount of R code; others might
> need more extensive changes at the C level.
>
> Best,
>
> luke
>
>
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


