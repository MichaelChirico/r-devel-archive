From suh@rto_@@ggo@o m@iii@g oii y@hoo@com  Fri May  1 05:05:37 2020
From: suh@rto_@@ggo@o m@iii@g oii y@hoo@com (suh@rto_@@ggo@o m@iii@g oii y@hoo@com)
Date: Fri, 1 May 2020 03:05:37 +0000 (UTC)
Subject: [Rd] paste(character(0), collapse="", recycle0=FALSE) should be ""
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
Message-ID: <1527610684.154738.1588302337266@mail.yahoo.com>

Without 'collapse', 'paste' pastes (concatenates) its arguments elementwise (separated by 'sep', " " by default). New in R devel and R patched, specifying recycle0 = FALSE makes mixing zero-length and nonzero-length arguments results in length zero. The result of paste(n, "th", sep = "", recycle0 = FALSE) always have the same length as 'n'. Previously, the result is still as long as the longest argument, with the zero-length argument like "". If all og the arguments have length zero, 'recycle0' doesn't matter.

As far as I understand, 'paste' with 'collapse' as a character string is supposed to put together elements of a vector into a single character string. I think 'recycle0' shouldn't change it.

In current R devel and R patched, paste(character(0), collapse = "", recycle0 = FALSE) is character(0). I think it should be "", like paste(character(0), collapse="").

paste(c("4", "5"), "th", sep = "", collapse = ", ", recycle0 = FALSE)
is
"4th, 5th".
paste(c("4"     ), "th", sep = "", collapse = ", ", recycle0 = FALSE)
is
"4th".
I think
paste(c(        ), "th", sep = "", collapse = ", ", recycle0 = FALSE)
should be
"",
not character(0).


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Fri May  1 06:51:16 2020
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Thu, 30 Apr 2020 23:51:16 -0500
Subject: [Rd] 
 "not a valid win32 application" with rtools40-x86_65.exe on
 Windows 10
In-Reply-To: <CABFfbXtKWAuc0y61jV3WDpX52ksPJOzsaY=h+6rmOuMySWHZfw@mail.gmail.com>
References: <48910d2a-c3f0-7a2a-b94a-4f7c2cc74a54@prodsyse.com>
 <CABFfbXtKWAuc0y61jV3WDpX52ksPJOzsaY=h+6rmOuMySWHZfw@mail.gmail.com>
Message-ID: <bcf6e1e7-38f7-595c-63ca-d0106753aefc@prodsyse.com>

Hi, Jeroen et al.:


On 2020-04-30 03:15, Jeroen Ooms wrote:
> On Thu, Apr 30, 2020 at 6:38 AM Spencer Graves
> <spencer.graves at prodsyse.com> wrote:
>> Hello, All:
>>
>>
>>         "00install.out" from "R CMD check Ecfun_0.2-4.tar.gz" includes:
>>
>>
>> Error:  package or namespace load failed for 'Ecfun':
>>    .onLoad failed in loadNamespace() for 'rJava', details
>>     call: inDL(x, as.logical(local), as.logical(now), ...)
>>     error:  unable to load shared object 'c:/Program
>> Files/R/R-4.0.0/library/rJava/libs/i386/rJava.dll':
>>     LoadLibrary failure: ^1 is not a valid win32 application
>>
> This is an error in loading the rJava package, so it is not related to
> rtools40, and probably inappropriate for this mailing list.
>
> As Simon suggested, you may have to install the 32-bit Java JDK. See
> also this faq: https://github.com/r-windows/docs/blob/master/faq.md#how-to-install-rjava-on-windows


 ????? In fact I had both 32- and 64-bit Java installed but only the 
64-bit was in the path.? I added the 32-bit, but that did not fix the 
problem.? The last 2.5 lines in the section "How to install rJava on 
Windows?" to which you referred me reads:


to build rJava from source, you need the --merge-multiarch flag:

install.packages('rJava', type = 'source', INSTALL_opts='--merge-multiarch')


 ????? When I tried that, I got:


Warning in system("sh ./configure.win") : 'sh' not found


*** ON THE OTHER HAND:? The error message above says 'c:/Program
Files/R/R-4.0.0/library/rJava/libs/i386/rJava.dll':
 ?? LoadLibrary failure: ^1 is not a valid win32 application


 >>>> Is "rJava.dll" a valid win32 application?


 ????? Suggestions?
 ????? Thanks,
 ????? Spencer Graves


p.s.? A similar problem with rJava a month ago was fixed by installed 
64-bit Java.? Now with the upgrade to R 4.0.0 and rtools40, this no 
longer works.


From deep@y@n@@@rk@r @end|ng |rom gm@||@com  Fri May  1 08:44:43 2020
From: deep@y@n@@@rk@r @end|ng |rom gm@||@com (Deepayan Sarkar)
Date: Fri, 1 May 2020 12:14:43 +0530
Subject: [Rd] Possible documentation problem/bug?
In-Reply-To: <CAP8icURj-jxF-Qr+eqwT6qS9zZ5N_tkUyMACmSWQezsC2NvRMg@mail.gmail.com>
References: <CAP8icURj-jxF-Qr+eqwT6qS9zZ5N_tkUyMACmSWQezsC2NvRMg@mail.gmail.com>
Message-ID: <CADfFDC5VoLPzRjv5eYx6pFQMMGzdMnm5B=or2S9aNCted0UZ-Q@mail.gmail.com>

On Thu, Apr 30, 2020 at 6:04 PM Dominic Littlewood
<11dlittlewood at gmail.com> wrote:
>
> It seems like there is no obvious way in the documentation to convert the
> expressions in the dots argument to a list without evaluating them. Say, if
> you want to have a function that prints all its arguments:
>
> > foo(abc$de, fg[h], i)
> abc$de
> fg[h]
> i
>
> ...then converting them to a list would be helpful.
> Using substitute(...) was the first thing I tried, but that only gives
> the *first* argument

Isn't that what you would expect anyway? substitute() takes two
arguments, the expression and an environment. You are giving it three.
Normally this should be an error:

foo <- function(a, b, c) substitute(a, b, c)
foo(abc$de, fg[h], i)
# Error in substitute(a, b, c) : unused argument (c)

Clearly ... is being handled in some special way so that we don't get
an error, but otherwise works as expected.

foo <- function(...) substitute(...)
foo(abc$de, fg[h], i)
# abc$de

I would consider this a side-effect of the implementation, and not
something you should rely on.

On the other hand, I would have expected the following to give
something sensible, and it does:

foo <- function(...) substitute({...})
foo(abc$de, fg[h], i)
# {
#   abc$de
#    fg[h]
#    i
# }
as.character(foo(abc$de, fg[h], i))
# [1] "{"      "abc$de" "fg[h]"  "i"

> in dots. It turns out that there is a way to do this, using
> substitute(...()), but this does not appear to be in either the substitute or
> the dots help page.

There is no documented reason for this to work (AFAIK), so again, I
would guess this is a side-effect of the implementation, and not a API
feature you should rely on. This is somewhat borne out by the
following:

> foo <- function(...) substitute({...()})
> foo(abc$de, fg[h], i)
{
   pairlist(abc$de, fg[h], i)
}
> foo(abc$de, fg[h], , i) # add a missing argument for extra fun
{
   as.pairlist(alist(abc$de, fg[h], , i))
}

which is not something you would expect to see at the user level. So
my recommendation: don't use ...() and pretend that you never
discovered it in the first place. Use match.call() instead, as
suggested by Serguei.

[Disclaimer: I have no idea what is actually going on, so these are
just guesses. There are some hints at
https://cran.r-project.org/doc/manuals/r-devel/R-ints.html#Dot_002ddot_002ddot-arguments
if you want to folllow up.]

-Deepayan

> In fact, there is a clue how to do this in the documentation, if you look
> closely. Let me quote the substitute page:
>
> "Substituting and quoting often cause confusion when the argument is
> expression(...). The result is a call to the expression constructor
> function and needs to be evaluated with eval to give the actual expression
> object."
>
> So this appears to give a way to turn the arguments into a list -
> eval(substitute(expression(...))).  But that's quite long, and hard to
> understand if you just come across it in some code - why are we using eval
> here? why are we substituting expression? - and would definitely require an
> explanatory comment. If the user just wants to iterate over the arguments,
> substitute(...()) is better. In fact, you can get exactly the same effect
> as the above code using as.expression(substitute(...())). Should the
> documentation be updated?
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From toth@dene@ @end|ng |rom kogentum@hu  Fri May  1 23:00:30 2020
From: toth@dene@ @end|ng |rom kogentum@hu (=?UTF-8?B?RMOpbmVzIFTDs3Ro?=)
Date: Fri, 1 May 2020 23:00:30 +0200
Subject: [Rd] Request: tools::md5sum should accept connections and finally
 in-memory objects
Message-ID: <9367310a-9199-1d97-601c-10206421537c@kogentum.hu>


AFAIK there is no hashing utility in base R which can create hash 
digests of arbitrary R objects. However, as also described by Henrik 
Bengtsson in [1], we have tools::md5sum() which calculates MD5 hashes of 
files. Calculating hashes of in-memory objects is a very common task in 
several areas, as demonstrated by the popularity of the 'digest' package 
(~850.000 downloads/month).

Upon the inspection of the relevant files in the R-source (e.g., [2] and 
[3]), it seems all building blocks have already been implemented so that 
hashing should not be restricted to files. I would like to ask:

1) Why is md5_buffer unused?:
In src/library/tools/src/md5.c [see 2], md5_buffer is implemented which 
seems to be the counterpart of md5_stream for non-file inputs:

---
#ifdef UNUSED
/* Compute MD5 message digest for LEN bytes beginning at BUFFER.  The
    result is always in little endian byte order, so that a byte-wise
    output yields to the wanted ASCII representation of the message
    digest.  */
static void *
md5_buffer (const char *buffer, size_t len, void *resblock)
{
   struct md5_ctx ctx;

   /* Initialize the computation context.  */
   md5_init_ctx (&ctx);

   /* Process whole buffer but last len % 64 bytes.  */
   md5_process_bytes (buffer, len, &ctx);

   /* Put result in desired memory area.  */
   return md5_finish_ctx (&ctx, resblock);
}
#endif
---

2) How can the R-community help so that this feature becomes available 
in package 'tools'?

Suggestions:
As a first step, it would be great if tools::md5sum would support 
connections (credit goes to Henrik for the idea). E.g., instead of the 
signature tools::md5sum(files), we could have tools::md5sum(files, conn 
= NULL), which would allow:

x <- runif(10)
tools::md5sum(conn = rawConnection(serialize(x, NULL)))

To avoid the inconsistency between 'files' (which computes the hash 
digests in a vectorized manner, that is, one for each file) and 'conn' 
(which expects a single connection), and to make it easier to extend the 
hashing for other algorithms without changing the main R interface, a 
more involved solution would be to introduce tools::hash and 
tools::hashes, in a similar vein to digest::digest and digest::getVDigest.

Regards,
Denes


[1]: https://github.com/HenrikBengtsson/Wishlist-for-R/issues/21
[2]: 
https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/library/tools/src/md5.c#L172
[3]: 
https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/library/tools/src/Rmd5.c#L27


From jmount @end|ng |rom w|n-vector@com  Fri May  1 23:09:31 2020
From: jmount @end|ng |rom w|n-vector@com (John Mount)
Date: Fri, 1 May 2020 14:09:31 -0700
Subject: [Rd] 
 Request: tools::md5sum should accept connections and finally
 in-memory objects
In-Reply-To: <9367310a-9199-1d97-601c-10206421537c@kogentum.hu>
References: <9367310a-9199-1d97-601c-10206421537c@kogentum.hu>
Message-ID: <99EA2602-BC94-4EA3-8A60-5797B8A84485@win-vector.com>

Perhaps use the digest package? Isn't "R the R packages?"

> On May 1, 2020, at 2:00 PM, D?nes T?th <toth.denes at kogentum.hu> wrote:
> 
> 
> AFAIK there is no hashing utility in base R which can create hash digests of arbitrary R objects. However, as also described by Henrik Bengtsson in [1], we have tools::md5sum() which calculates MD5 hashes of files. Calculating hashes of in-memory objects is a very common task in several areas, as demonstrated by the popularity of the 'digest' package (~850.000 downloads/month).
> 
> Upon the inspection of the relevant files in the R-source (e.g., [2] and [3]), it seems all building blocks have already been implemented so that hashing should not be restricted to files. I would like to ask:
> 
> 1) Why is md5_buffer unused?:
> In src/library/tools/src/md5.c [see 2], md5_buffer is implemented which seems to be the counterpart of md5_stream for non-file inputs:
> 
> ---
> #ifdef UNUSED
> /* Compute MD5 message digest for LEN bytes beginning at BUFFER.  The
>   result is always in little endian byte order, so that a byte-wise
>   output yields to the wanted ASCII representation of the message
>   digest.  */
> static void *
> md5_buffer (const char *buffer, size_t len, void *resblock)
> {
>  struct md5_ctx ctx;
> 
>  /* Initialize the computation context.  */
>  md5_init_ctx (&ctx);
> 
>  /* Process whole buffer but last len % 64 bytes.  */
>  md5_process_bytes (buffer, len, &ctx);
> 
>  /* Put result in desired memory area.  */
>  return md5_finish_ctx (&ctx, resblock);
> }
> #endif
> ---
> 
> 2) How can the R-community help so that this feature becomes available in package 'tools'?
> 
> Suggestions:
> As a first step, it would be great if tools::md5sum would support connections (credit goes to Henrik for the idea). E.g., instead of the signature tools::md5sum(files), we could have tools::md5sum(files, conn = NULL), which would allow:
> 
> x <- runif(10)
> tools::md5sum(conn = rawConnection(serialize(x, NULL)))
> 
> To avoid the inconsistency between 'files' (which computes the hash digests in a vectorized manner, that is, one for each file) and 'conn' (which expects a single connection), and to make it easier to extend the hashing for other algorithms without changing the main R interface, a more involved solution would be to introduce tools::hash and tools::hashes, in a similar vein to digest::digest and digest::getVDigest.
> 
> Regards,
> Denes
> 
> 
> [1]: https://github.com/HenrikBengtsson/Wishlist-for-R/issues/21
> [2]: https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/library/tools/src/md5.c#L172
> [3]: https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/library/tools/src/Rmd5.c#L27
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

---------------
John Mount
http://www.win-vector.com/ <http://www.win-vector.com/> 
Our book: Practical Data Science with R
http://practicaldatascience.com <http://practicaldatascience.com/> 






	[[alternative HTML version deleted]]


From toth@dene@ @end|ng |rom kogentum@hu  Fri May  1 23:35:04 2020
From: toth@dene@ @end|ng |rom kogentum@hu (=?UTF-8?B?RMOpbmVzIFTDs3Ro?=)
Date: Fri, 1 May 2020 23:35:04 +0200
Subject: [Rd] 
 Request: tools::md5sum should accept connections and finally
 in-memory objects
In-Reply-To: <99EA2602-BC94-4EA3-8A60-5797B8A84485@win-vector.com>
References: <9367310a-9199-1d97-601c-10206421537c@kogentum.hu>
 <99EA2602-BC94-4EA3-8A60-5797B8A84485@win-vector.com>
Message-ID: <948ca0cd-3466-f02d-34d7-e6db0c5578c4@kogentum.hu>



On 5/1/20 11:09 PM, John Mount wrote:
> Perhaps use the digest package? Isn't "R the R packages?"

I think it is clear that I am aware of the existence of the digest 
package and also of other packages with similar functionality, e.g. the 
fastdigest package. (And I actually do use digest as I guess 99% percent 
of the R developers do at least as an indirect dependency.) The point is 
that
a) digest is a wonderful and very stable package, but still, it is a 
user-contributed package, whereas
b) 'tools' is a base package which is included by default in all R 
installations, and
c) tools::md5sum already exists, with almost all building blocks to 
allow its extension to calculate MD5 hashes of R objects, and
d) there is high demand in the R community for being able to calculate 
hashes.

So yes, if one wants to use all the utilities or the various algos that 
the digest package provides, one should install and load it. But if one 
can live with MD5 hashes, why not use the built-in R function? (Well, 
without serializing an object to a file, calling tools::md5sum, and then 
cleaning up the file.)

> 
>> On May 1, 2020, at 2:00 PM, D?nes T?th <toth.denes at kogentum.hu 
>> <mailto:toth.denes at kogentum.hu>> wrote:
>>
>>
>> AFAIK there is no hashing utility in base R which can create hash 
>> digests of arbitrary R objects. However, as also described by Henrik 
>> Bengtsson in [1], we have tools::md5sum() which calculates MD5 hashes 
>> of files. Calculating hashes of in-memory objects is a very common 
>> task in several areas, as demonstrated by the popularity of the 
>> 'digest' package (~850.000 downloads/month).
>>
>> Upon the inspection of the relevant files in the R-source (e.g., [2] 
>> and [3]), it seems all building blocks have already been implemented 
>> so that hashing should not be restricted to files. I would like to ask:
>>
>> 1) Why is md5_buffer unused?:
>> In src/library/tools/src/md5.c [see 2], md5_buffer is implemented 
>> which seems to be the counterpart of md5_stream for non-file inputs:
>>
>> ---
>> #ifdef UNUSED
>> /* Compute MD5 message digest for LEN bytes beginning at BUFFER. ?The
>> ??result is always in little endian byte order, so that a byte-wise
>> ??output yields to the wanted ASCII representation of the message
>> ??digest. ?*/
>> static void *
>> md5_buffer (const char *buffer, size_t len, void *resblock)
>> {
>> ?struct md5_ctx ctx;
>>
>> ?/* Initialize the computation context. ?*/
>> ?md5_init_ctx (&ctx);
>>
>> ?/* Process whole buffer but last len % 64 bytes. ?*/
>> ?md5_process_bytes (buffer, len, &ctx);
>>
>> ?/* Put result in desired memory area. ?*/
>> ?return md5_finish_ctx (&ctx, resblock);
>> }
>> #endif
>> ---
>>
>> 2) How can the R-community help so that this feature becomes available 
>> in package 'tools'?
>>
>> Suggestions:
>> As a first step, it would be great if tools::md5sum would support 
>> connections (credit goes to Henrik for the idea). E.g., instead of the 
>> signature tools::md5sum(files), we could have tools::md5sum(files, 
>> conn = NULL), which would allow:
>>
>> x <- runif(10)
>> tools::md5sum(conn = rawConnection(serialize(x, NULL)))
>>
>> To avoid the inconsistency between 'files' (which computes the hash 
>> digests in a vectorized manner, that is, one for each file) and 'conn' 
>> (which expects a single connection), and to make it easier to extend 
>> the hashing for other algorithms without changing the main R 
>> interface, a more involved solution would be to introduce tools::hash 
>> and tools::hashes, in a similar vein to digest::digest and 
>> digest::getVDigest.
>>
>> Regards,
>> Denes
>>
>>
>> [1]: https://github.com/HenrikBengtsson/Wishlist-for-R/issues/21
>> [2]: 
>> https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/library/tools/src/md5.c#L172
>> [3]: 
>> https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/library/tools/src/Rmd5.c#L27
>>
>> ______________________________________________
>> R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ---------------
> John Mount
> http://www.win-vector.com/
> Our book: Practical Data Science with R
> http://practicaldatascience.com
> 
> 
> 
> 
>


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri May  1 23:35:48 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 1 May 2020 17:35:48 -0400
Subject: [Rd] 
 Request: tools::md5sum should accept connections and finally
 in-memory objects
In-Reply-To: <9367310a-9199-1d97-601c-10206421537c@kogentum.hu>
References: <9367310a-9199-1d97-601c-10206421537c@kogentum.hu>
Message-ID: <aa159b4c-b2a5-4511-af17-d40838250341@gmail.com>

The tools package is not for users, it's for functions that R uses in 
installing packages, checking them, etc.  If you want a function for 
users, it would belong in utils.  But what's wrong with the digest 
package?  What's the argument that R Core should take this on?

Duncan Murdoch

On 01/05/2020 5:00 p.m., D?nes T?th wrote:
> 
> AFAIK there is no hashing utility in base R which can create hash
> digests of arbitrary R objects. However, as also described by Henrik
> Bengtsson in [1], we have tools::md5sum() which calculates MD5 hashes of
> files. Calculating hashes of in-memory objects is a very common task in
> several areas, as demonstrated by the popularity of the 'digest' package
> (~850.000 downloads/month).
> 
> Upon the inspection of the relevant files in the R-source (e.g., [2] and
> [3]), it seems all building blocks have already been implemented so that
> hashing should not be restricted to files. I would like to ask:
> 
> 1) Why is md5_buffer unused?:
> In src/library/tools/src/md5.c [see 2], md5_buffer is implemented which
> seems to be the counterpart of md5_stream for non-file inputs:
> 
> ---
> #ifdef UNUSED
> /* Compute MD5 message digest for LEN bytes beginning at BUFFER.  The
>      result is always in little endian byte order, so that a byte-wise
>      output yields to the wanted ASCII representation of the message
>      digest.  */
> static void *
> md5_buffer (const char *buffer, size_t len, void *resblock)
> {
>     struct md5_ctx ctx;
> 
>     /* Initialize the computation context.  */
>     md5_init_ctx (&ctx);
> 
>     /* Process whole buffer but last len % 64 bytes.  */
>     md5_process_bytes (buffer, len, &ctx);
> 
>     /* Put result in desired memory area.  */
>     return md5_finish_ctx (&ctx, resblock);
> }
> #endif
> ---
> 
> 2) How can the R-community help so that this feature becomes available
> in package 'tools'?
> 
> Suggestions:
> As a first step, it would be great if tools::md5sum would support
> connections (credit goes to Henrik for the idea). E.g., instead of the
> signature tools::md5sum(files), we could have tools::md5sum(files, conn
> = NULL), which would allow:
> 
> x <- runif(10)
> tools::md5sum(conn = rawConnection(serialize(x, NULL)))
> 
> To avoid the inconsistency between 'files' (which computes the hash
> digests in a vectorized manner, that is, one for each file) and 'conn'
> (which expects a single connection), and to make it easier to extend the
> hashing for other algorithms without changing the main R interface, a
> more involved solution would be to introduce tools::hash and
> tools::hashes, in a similar vein to digest::digest and digest::getVDigest.
> 
> Regards,
> Denes
> 
> 
> [1]: https://github.com/HenrikBengtsson/Wishlist-for-R/issues/21
> [2]:
> https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/library/tools/src/md5.c#L172
> [3]:
> https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/library/tools/src/Rmd5.c#L27
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From jmount @end|ng |rom w|n-vector@com  Fri May  1 23:40:40 2020
From: jmount @end|ng |rom w|n-vector@com (John Mount)
Date: Fri, 1 May 2020 14:40:40 -0700
Subject: [Rd] 
 Request: tools::md5sum should accept connections and finally
 in-memory objects
In-Reply-To: <948ca0cd-3466-f02d-34d7-e6db0c5578c4@kogentum.hu>
References: <9367310a-9199-1d97-601c-10206421537c@kogentum.hu>
 <99EA2602-BC94-4EA3-8A60-5797B8A84485@win-vector.com>
 <948ca0cd-3466-f02d-34d7-e6db0c5578c4@kogentum.hu>
Message-ID: <81172D45-9DE3-4520-9A9A-458C2E1B0CFE@win-vector.com>


> So yes, if one wants to use all the utilities or the various algos that the digest package provides, one should install and load it. But if one can live with MD5 hashes, why not use the built-in R function? (Well, without serializing an object to a file, calling tools::md5sum, and then cleaning up the file.)

Doesn't that assume that the serialization method is deterministic? Is that a documented property of the serialization tools?


From toth@dene@ @end|ng |rom kogentum@hu  Sat May  2 00:07:43 2020
From: toth@dene@ @end|ng |rom kogentum@hu (=?UTF-8?B?RMOpbmVzIFTDs3Ro?=)
Date: Sat, 2 May 2020 00:07:43 +0200
Subject: [Rd] 
 Request: tools::md5sum should accept connections and finally
 in-memory objects
In-Reply-To: <aa159b4c-b2a5-4511-af17-d40838250341@gmail.com>
References: <9367310a-9199-1d97-601c-10206421537c@kogentum.hu>
 <aa159b4c-b2a5-4511-af17-d40838250341@gmail.com>
Message-ID: <eed122db-7e6f-f1c2-06ed-68325d41abef@kogentum.hu>



On 5/1/20 11:35 PM, Duncan Murdoch wrote:
> The tools package is not for users, it's for functions that R uses in 
> installing packages, checking them, etc. 

I think the target group for this functionality is the group of R 
developers, not regular R users.

> If you want a function for 
> users, it would belong in utils.? But what's wrong with the digest 
> package?? What's the argument that R Core should take this on?

There is nothing wrong with the digest package except for being an extra 
dependency which could be avoided if an already implemented C function 
were available at the R level.

I do understand that given the load on R Core, they do include new 
features and the related burden of maintenance only if it is absolutely 
necessary. This is why I asked first whether there is a particular 
reason not to expose an already existing (base-R) implementation. I 
think it is reasonable to assume that 'md5_buffer' exists for a reason - 
but probably there is a reason why it never became part of any exported 
function. Now I checked the history of the md5.c file; it was last 
edited 8 years ago. Somewhat surprisingly, md5_buffer was already 
included in the original file (created 17 years ago), but marked as 
UNUSED 12 years ago.

Just to clarify: I do not want suggest that R Core team should take over 
all functionalities of the digest package. I do really focus on 
computing MD5 digests, which is already possible for files. My 
suggestion for a more general function was meant for keeping potential 
further enhancements in mind.


> 
> Duncan Murdoch
> 
> On 01/05/2020 5:00 p.m., D?nes T?th wrote:
>>
>> AFAIK there is no hashing utility in base R which can create hash
>> digests of arbitrary R objects. However, as also described by Henrik
>> Bengtsson in [1], we have tools::md5sum() which calculates MD5 hashes of
>> files. Calculating hashes of in-memory objects is a very common task in
>> several areas, as demonstrated by the popularity of the 'digest' package
>> (~850.000 downloads/month).
>>
>> Upon the inspection of the relevant files in the R-source (e.g., [2] and
>> [3]), it seems all building blocks have already been implemented so that
>> hashing should not be restricted to files. I would like to ask:
>>
>> 1) Why is md5_buffer unused?:
>> In src/library/tools/src/md5.c [see 2], md5_buffer is implemented which
>> seems to be the counterpart of md5_stream for non-file inputs:
>>
>> ---
>> #ifdef UNUSED
>> /* Compute MD5 message digest for LEN bytes beginning at BUFFER.? The
>> ???? result is always in little endian byte order, so that a byte-wise
>> ???? output yields to the wanted ASCII representation of the message
>> ???? digest.? */
>> static void *
>> md5_buffer (const char *buffer, size_t len, void *resblock)
>> {
>> ??? struct md5_ctx ctx;
>>
>> ??? /* Initialize the computation context.? */
>> ??? md5_init_ctx (&ctx);
>>
>> ??? /* Process whole buffer but last len % 64 bytes.? */
>> ??? md5_process_bytes (buffer, len, &ctx);
>>
>> ??? /* Put result in desired memory area.? */
>> ??? return md5_finish_ctx (&ctx, resblock);
>> }
>> #endif
>> ---
>>
>> 2) How can the R-community help so that this feature becomes available
>> in package 'tools'?
>>
>> Suggestions:
>> As a first step, it would be great if tools::md5sum would support
>> connections (credit goes to Henrik for the idea). E.g., instead of the
>> signature tools::md5sum(files), we could have tools::md5sum(files, conn
>> = NULL), which would allow:
>>
>> x <- runif(10)
>> tools::md5sum(conn = rawConnection(serialize(x, NULL)))
>>
>> To avoid the inconsistency between 'files' (which computes the hash
>> digests in a vectorized manner, that is, one for each file) and 'conn'
>> (which expects a single connection), and to make it easier to extend the
>> hashing for other algorithms without changing the main R interface, a
>> more involved solution would be to introduce tools::hash and
>> tools::hashes, in a similar vein to digest::digest and 
>> digest::getVDigest.
>>
>> Regards,
>> Denes
>>
>>
>> [1]: https://github.com/HenrikBengtsson/Wishlist-for-R/issues/21
>> [2]:
>> https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/library/tools/src/md5.c#L172 
>>
>> [3]:
>> https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/library/tools/src/Rmd5.c#L27 
>>
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
>


From @|mon@urb@nek @end|ng |rom R-project@org  Sat May  2 09:20:53 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Sat, 2 May 2020 19:20:53 +1200
Subject: [Rd] 
 "not a valid win32 application" with rtools40-x86_65.exe on
 Windows 10
In-Reply-To: <bcf6e1e7-38f7-595c-63ca-d0106753aefc@prodsyse.com>
References: <48910d2a-c3f0-7a2a-b94a-4f7c2cc74a54@prodsyse.com>
 <CABFfbXtKWAuc0y61jV3WDpX52ksPJOzsaY=h+6rmOuMySWHZfw@mail.gmail.com>
 <bcf6e1e7-38f7-595c-63ca-d0106753aefc@prodsyse.com>
Message-ID: <07330765-1A84-43DE-BC03-D89A05DE35D8@R-project.org>

Spencer,

you shouldn't have anything on the PATH, the location of Java is taken from the registry so you only need t have a valid installation of Java. Better don't set PATH or JAVA_HOME as it will stop rJava from working if you get it wrong. The errors on Windows are confusing, the actual error is shown via GUI as pop-up, what they report in the console is not the real error.

Re installation from source - it sooks like you either don't have Rtools40 or you didn't set PATH properly. If I recall the new Rtools40 no longer set the PATH (for whatever reason) so you have to do it by hand and the instructions it gives you are not working for the command shell.

Cheers,
Simon



> On 1/05/2020, at 4:51 PM, Spencer Graves <spencer.graves at prodsyse.com> wrote:
> 
> Hi, Jeroen et al.:
> 
> 
> On 2020-04-30 03:15, Jeroen Ooms wrote:
>> On Thu, Apr 30, 2020 at 6:38 AM Spencer Graves
>> <spencer.graves at prodsyse.com> wrote:
>>> Hello, All:
>>> 
>>> 
>>>        "00install.out" from "R CMD check Ecfun_0.2-4.tar.gz" includes:
>>> 
>>> 
>>> Error:  package or namespace load failed for 'Ecfun':
>>>   .onLoad failed in loadNamespace() for 'rJava', details
>>>    call: inDL(x, as.logical(local), as.logical(now), ...)
>>>    error:  unable to load shared object 'c:/Program
>>> Files/R/R-4.0.0/library/rJava/libs/i386/rJava.dll':
>>>    LoadLibrary failure: ^1 is not a valid win32 application
>>> 
>> This is an error in loading the rJava package, so it is not related to
>> rtools40, and probably inappropriate for this mailing list.
>> 
>> As Simon suggested, you may have to install the 32-bit Java JDK. See
>> also this faq: https://github.com/r-windows/docs/blob/master/faq.md#how-to-install-rjava-on-windows
> 
> 
>       In fact I had both 32- and 64-bit Java installed but only the 64-bit was in the path.  I added the 32-bit, but that did not fix the problem.  The last 2.5 lines in the section "How to install rJava on Windows?" to which you referred me reads:
> 
> 
> to build rJava from source, you need the --merge-multiarch flag:
> 
> install.packages('rJava', type = 'source', INSTALL_opts='--merge-multiarch')
> 
> 
>       When I tried that, I got:
> 
> 
> Warning in system("sh ./configure.win") : 'sh' not found
> 
> 
> *** ON THE OTHER HAND:  The error message above says 'c:/Program
> Files/R/R-4.0.0/library/rJava/libs/i386/rJava.dll':
>    LoadLibrary failure: ^1 is not a valid win32 application
> 
> 
> >>>> Is "rJava.dll" a valid win32 application?
> 
> 
>       Suggestions?
>       Thanks,
>       Spencer Graves
> 
> 
> p.s.  A similar problem with rJava a month ago was fixed by installed 64-bit Java.  Now with the upgrade to R 4.0.0 and rtools40, this no longer works.
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From @nto|ne@|@br| @end|ng |rom gm@||@com  Sat May  2 14:30:29 2020
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Antoine Fabri)
Date: Sat, 2 May 2020 14:30:29 +0200
Subject: [Rd] issues with environment handling in model.frame()
Message-ID: <CAEKh8ugLJi=APMiaAUki11M7V2UdpeGfbSbpr=kCc5AXxRdBTw@mail.gmail.com>

Dear all,

model.frame behaves in a way I don't expect when both its formula and
subset argument are passed through a function call.

This works as expected:

model.frame(~wool, warpbreaks, breaks < 15)
#>    wool
#> 14    A
#> 23    A
#> 29    B
#> 50    B
fun1 <- function(y) model.frame(~wool, warpbreaks, y)
fun1(with(warpbreaks, breaks < 15))
#>    wool
#> 14    A
#> 23    A
#> 29    B
#> 50    B

but this doesn't:

fun2 <- function(x, y) model.frame(x, warpbreaks, y)
fun2(~wool, with(warpbreaks, breaks < 15))
#> Error in eval(substitute(subset), data, env): object 'y' not found

model.frame is used by xtabs() and aggregate() so the following won't work
either:
fun3 <- function(x, y) xtabs(x, warpbreaks, y)
fun3(~wool, with(warpbreaks, breaks < 15))
#> Error in eval(substitute(subset), data, env): object 'y' not found

fun4 <- function(x, y) aggregate(x, warpbreaks, length, subset = y)
fun4(breaks ~ wool, with(warpbreaks, breaks < 15))
#> Error in eval(substitute(subset), data, env): object 'y' not found

The subset argument uses NSE, though no help file among aggregate, xtabs or
model.frame suggests it as far as I can see, and I assume the expectation
that NSE will be used led to overlook the problematic case above.

The SO question prompted this bug report :
https://stackoverflow.com/questions/61145404

Best regards,

Antoine

	[[alternative HTML version deleted]]


From n@veen @end|ng |rom ccdc|nd|@@org  Sat May  2 16:14:45 2020
From: n@veen @end|ng |rom ccdc|nd|@@org (Naveen Kaushik)
Date: Sat, 2 May 2020 14:14:45 +0000
Subject: [Rd] R not working to Window 10
Message-ID: <PS1PR0601MB19316CB959D149B2A6230C9FD5A80@PS1PR0601MB1931.apcprd06.prod.outlook.com>

I have just installed R from https://cran.r-project.org/bin/windows/base/rtest.html but when i want to open R, not open to massage show and when I troubleshoot R program it is show that Settings applied to: Rgui: Windows compatibility mode: Windows 8 (incompatible Program).  So please guide me how to run this program or please fix this type of bugs.



Thanks & Regards
Naveen Kaushik


	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Sat May  2 16:54:21 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sat, 2 May 2020 09:54:21 -0500
Subject: [Rd] R not working to Window 10
In-Reply-To: <PS1PR0601MB19316CB959D149B2A6230C9FD5A80@PS1PR0601MB1931.apcprd06.prod.outlook.com>
References: <PS1PR0601MB19316CB959D149B2A6230C9FD5A80@PS1PR0601MB1931.apcprd06.prod.outlook.com>
Message-ID: <24237.35229.935290.521860@rob.eddelbuettel.com>


On 2 May 2020 at 14:14, Naveen Kaushik via R-devel wrote:
| I have just installed R from https://cran.r-project.org/bin/windows/base/rtest.html but when i want to open R, not open to massage show and when I troubleshoot R program it is show that Settings applied to: Rgui: Windows compatibility mode: Windows 8 (incompatible Program).  So please guide me how to run this program or please fix this type of bugs.

Welcome to R, and sorry about your troubles. This is however *very much* the
wrong place to ask, as this list is about R development of, and with, R.

Not use or installation. Please try r-help, maybe StackOverflow.  I
understand a lot of people use R happily on Windows 10, so maybe also check
the 'R on Windows FAQ' for its entries on anti-virus checkers and alike.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Sat May  2 17:09:14 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Sat, 2 May 2020 17:09:14 +0200
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <1527610684.154738.1588302337266@mail.yahoo.com>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <1527610684.154738.1588302337266@mail.yahoo.com>
Message-ID: <24237.36122.138161.27636@stat.math.ethz.ch>

>>>>> suharto anggono--- via R-devel 
>>>>>     on Fri, 1 May 2020 03:05:37 +0000 (UTC) writes:

    > Without 'collapse', 'paste' pastes (concatenates) its arguments elementwise (separated by 'sep', " " by default). New in R devel and R patched, specifying recycle0 = FALSE makes mixing zero-length and nonzero-length arguments results in length zero. 

That's not intended.
(It's what should only happen with the new (non-default) recycle0=TRUE )

> The result of paste(n, "th", sep = "", recycle0 = FALSE) always have the same length as 'n'. Previously, the result is still as long as the longest argument, with the zero-length argument like "". If all og the arguments have length zero, 'recycle0' doesn't matter.

    > As far as I understand, 'paste' with 'collapse' as a character string is supposed to put together elements of a vector into a single character string. I think 'recycle0' shouldn't change it.

Well, not quite:  only  'recycle0=FALSE'  shouldn't change it
.. maybe this is what you meant anyway.

    > In current R devel and R patched, paste(character(0), collapse = "", recycle0 = FALSE) is character(0). I think it should be "", like paste(character(0), collapse="").

Definitely:  The intent of the new 'recycle0' argument is to 
provide a non-default possibility for paste(...., recycle0=TRUE) to behave more
like "arithmetic" functions where the recycling rules ensure that
if one argument has length 0 then the result has length 0:
i.e.,   paste(a,b,c,d,  recycle0=TRUE)      should recycle the same as
              a+b+c+d                       does recycle

Indeed, the default 'recycle0=FALSE'  should correspond to previous (R <= 4.0.0)
behavior entirely.

BUT from all I see, R-devel and R-patched's version of paste()
do behave as they should.  Also what you clim here is not true :

    > paste(c("4", "5"), "th", sep = "", collapse = ", ", recycle0 = FALSE)
    > is
    > "4th, 5th".
    > paste(c("4"     ), "th", sep = "", collapse = ", ", recycle0 = FALSE)
    > is
    > "4th".
    > I think
    > paste(c(        ), "th", sep = "", collapse = ", ", recycle0 = FALSE)
    > should be
    > "",
    > not character(0).

Rather, what I see is what the comments of the following code
lines claim (according to the intention of 'recycle0', contrary
some of your claims above) :


paste(character(0), collapse = "", recycle0 = FALSE) # is "", like
paste(character(0), collapse = "")
paste(character(0), collapse = "", recycle0 =  TRUE) # is character(0)

paste(c("4", "5"), "th", sep = "", collapse = ", ", recycle0 = FALSE) # is "4th, 5th"
paste(c("4"     ), "th", sep = "", collapse = ", ", recycle0 = FALSE) # is "4th"
paste(c(        ), "th", sep = "", collapse = ", ", recycle0 = FALSE) # is "th"
##
paste(c("4", "5"), "th", sep = "", collapse = ", ", recycle0 =  TRUE) # is "4th, 5th"
paste(c("4"     ), "th", sep = "", collapse = ", ", recycle0 =  TRUE) # is "4th"
paste(c(        ), "th", sep = "", collapse = ", ", recycle0 =  TRUE) # is character(0)


There must be a lapsus / misunderstanding somewhere.
I don't see any problem in the new behavior for now.

Best regards,
Martin


From ccberry @end|ng |rom he@|th@uc@d@edu  Sat May  2 20:09:35 2020
From: ccberry @end|ng |rom he@|th@uc@d@edu (Berry, Charles)
Date: Sat, 2 May 2020 18:09:35 +0000
Subject: [Rd] issues with environment handling in model.frame()
In-Reply-To: <CAEKh8ugLJi=APMiaAUki11M7V2UdpeGfbSbpr=kCc5AXxRdBTw@mail.gmail.com>
References: <CAEKh8ugLJi=APMiaAUki11M7V2UdpeGfbSbpr=kCc5AXxRdBTw@mail.gmail.com>
Message-ID: <20999428-C4E1-492B-AA25-C8AEF4278A15@ucsd.edu>



> On May 2, 2020, at 5:30 AM, Antoine Fabri <antoine.fabri at gmail.com> wrote:
> 
> Dear all,
> 
> model.frame behaves in a way I don't expect when both its formula and
> subset argument are passed through a function call.
> 

See the help page

?formula

in particular the section headed 'Environments'.

Then look at the help for 

?model.frame

which says

"All the variables in formula, subset and in ... are looked for first in data and then in the environment of formula (see the help for formula for further details) and collected into a data frame."


> This works as expected:
> 
> model.frame(~wool, warpbreaks, breaks < 15)
> #>    wool
> #> 14    A
> #> 23    A
> #> 29    B
> #> 50    B
> fun1 <- function(y) model.frame(~wool, warpbreaks, y)
> fun1(with(warpbreaks, breaks < 15))
> #>    wool
> #> 14    A
> #> 23    A
> #> 29    B
> #> 50    B
> 

Here the fornmula `~wool' has the environment created when fun1 is called and so does `y'.

So model.frame finds them both after first looking for them in `warpbreaks'.


> but this doesn't:
> 
> fun2 <- function(x, y) model.frame(x, warpbreaks, y)
> fun2(~wool, with(warpbreaks, breaks < 15))
> #> Error in eval(substitute(subset), data, env): object 'y' not found
> 


Here the formula has environment `<environment: R_GlobalEnv>' and `y' has the environment created when fun2 is called. 

So model.frame looks in warpbreaks, then in `<environment: R_GlobalEnv>' and doesn't find y in either.

Similar issues apply in the use of formulas below.

> model.frame is used by xtabs() and aggregate() so the following won't work
> either:
> fun3 <- function(x, y) xtabs(x, warpbreaks, y)
> fun3(~wool, with(warpbreaks, breaks < 15))
> #> Error in eval(substitute(subset), data, env): object 'y' not found
> 
> fun4 <- function(x, y) aggregate(x, warpbreaks, length, subset = y)
> fun4(breaks ~ wool, with(warpbreaks, breaks < 15))
> #> Error in eval(substitute(subset), data, env): object 'y' not found
> 


Each of these cases can be made to work by inserting

	environment(x) <- environment()

before the call to model.frame in each of your fun[2-4] functions.

However, this can lead to headaches downstream if you need to save the formula and use it in another function.  If this is where you are headed some time spent studying lm() and methods for "lm" objects may help.

[rest deleted]

HTH,

Chuck

From @dr|@n @end|ng |rom tr@p|ett|@org  Sun May  3 10:06:13 2020
From: @dr|@n @end|ng |rom tr@p|ett|@org (Adrian Trapletti)
Date: Sun, 3 May 2020 10:06:13 +0200
Subject: [Rd] R 4.0.0 with Intel MKL for Windows
Message-ID: <CAFmikf17XhpXNCCy9Xv+gcmSN98=4X85OwXY-9K5c9Xzechshw@mail.gmail.com>

For Windows users, some instructions how to use R 4.0.0 with Intel MKL:

https://linkedin.com/pulse/r-400-intel-mkl-windows-adrian-trapletti

Best Regards
Adrian

Adrian Trapletti

Steinstrasse 9b, 8610 Uster, Switzerland
P +41 44 994 56 30  |  M +41 79 103 71 31
adrian at trapletti.org  |  www.trapletti.org


From suh@rto_@@ggo@o m@iii@g oii y@hoo@com  Sun May  3 10:54:12 2020
From: suh@rto_@@ggo@o m@iii@g oii y@hoo@com (suh@rto_@@ggo@o m@iii@g oii y@hoo@com)
Date: Sun, 3 May 2020 08:54:12 +0000 (UTC)
Subject: [Rd] 
 paste(character(0), collapse="", recycle0=FALSE) should be ""
In-Reply-To: <24237.36122.138161.27636@stat.math.ethz.ch>
References: <1527610684.154738.1588302337266.ref@mail.yahoo.com>
 <1527610684.154738.1588302337266@mail.yahoo.com>
 <24237.36122.138161.27636@stat.math.ethz.ch>
Message-ID: <612519988.282141.1588496052127@mail.yahoo.com>

 I was wrong, as I didn't actually try and didn't read the documentation carefully. I thought that ' zero-length arguments being recycled to "" ' happens when recycle0 = TRUE. It is actually the opposite.

Everywhere in my previous message, recycle0 = FALSE should be recycle0 = TRUE.

I really think that 'paste' with 'collapse' specified (as a character string) should always result in a single character string, no matter what value of 'recycle0'.

paste(character(0), collapse = "", recycle0 = TRUE) # character(0), but should be ""

paste(character(0), recycle0 = FALSE)
is the same as
paste(character(0), recycle0 = TRUE) .
'recycle0' doesn't matter there.
Why should
paste(character(0), collapse = "", recycle0 = FALSE)
be different from
paste(character(0), collapse = "", recycle0 = TRUE) ?

paste(c("4", "5"), "th", sep = "", collapse = ", ", recycle0 =? TRUE) # "4th, 5th"
paste(c("4"? ? ), "th", sep = "", collapse = ", ", recycle0 =? TRUE) # "4th"
paste(c(? ? ? ? ), "th", sep = "", collapse = ", ", recycle0 =? TRUE) # character(0), but should be ""


On Saturday, 2 May 2020, 10:09:21 pm GMT+7, Martin Maechler <maechler at stat.math.ethz.ch> wrote:


>>>>> suharto anggono--- via R-devel 
>>>>>? ? on Fri, 1 May 2020 03:05:37 +0000 (UTC) writes:

? ? > Without 'collapse', 'paste' pastes (concatenates) its arguments elementwise (separated by 'sep', " " by default). New in R devel and R patched, specifying recycle0 = FALSE makes mixing zero-length and nonzero-length arguments results in length zero. 

That's not intended.
(It's what should only happen with the new (non-default) recycle0=TRUE )

> The result of paste(n, "th", sep = "", recycle0 = FALSE) always have the same length as 'n'. Previously, the result is still as long as the longest argument, with the zero-length argument like "". If all og the arguments have length zero, 'recycle0' doesn't matter.

? ? > As far as I understand, 'paste' with 'collapse' as a character string is supposed to put together elements of a vector into a single character string. I think 'recycle0' shouldn't change it.

Well, not quite:? only? 'recycle0=FALSE'? shouldn't change it
.. maybe this is what you meant anyway.

? ? > In current R devel and R patched, paste(character(0), collapse = "", recycle0 = FALSE) is character(0). I think it should be "", like paste(character(0), collapse="").

Definitely:? The intent of the new 'recycle0' argument is to 
provide a non-default possibility for paste(...., recycle0=TRUE) to behave more
like "arithmetic" functions where the recycling rules ensure that
if one argument has length 0 then the result has length 0:
i.e.,? paste(a,b,c,d,? recycle0=TRUE)? ? ? should recycle the same as
? ? ? ? ? ? ? a+b+c+d? ? ? ? ? ? ? ? ? ? ? does recycle

Indeed, the default 'recycle0=FALSE'? should correspond to previous (R <= 4.0.0)
behavior entirely.

BUT from all I see, R-devel and R-patched's version of paste()
do behave as they should.? Also what you clim here is not true :

? ? > paste(c("4", "5"), "th", sep = "", collapse = ", ", recycle0 = FALSE)
? ? > is
? ? > "4th, 5th".
? ? > paste(c("4"? ? ), "th", sep = "", collapse = ", ", recycle0 = FALSE)
? ? > is
? ? > "4th".
? ? > I think
? ? > paste(c(? ? ? ? ), "th", sep = "", collapse = ", ", recycle0 = FALSE)
? ? > should be
? ? > "",
? ? > not character(0).

Rather, what I see is what the comments of the following code
lines claim (according to the intention of 'recycle0', contrary
some of your claims above) :


paste(character(0), collapse = "", recycle0 = FALSE) # is "", like
paste(character(0), collapse = "")
paste(character(0), collapse = "", recycle0 =? TRUE) # is character(0)


paste(c("4", "5"), "th", sep = "", collapse = ", ", recycle0 = FALSE) # is "4th, 5th"
paste(c("4"? ? ), "th", sep = "", collapse = ", ", recycle0 = FALSE) # is "4th"

paste(c(? ? ? ? ), "th", sep = "", collapse = ", ", recycle0 = FALSE) # is "th"
##
paste(c("4", "5"), "th", sep = "", collapse = ", ", recycle0 =? TRUE) # is "4th, 5th"
paste(c("4"? ? ), "th", sep = "", collapse = ", ", recycle0 =? TRUE) # is "4th"
paste(c(? ? ? ? ), "th", sep = "", collapse = ", ", recycle0 =? TRUE) # is character(0)


There must be a lapsus / misunderstanding somewhere.
I don't see any problem in the new behavior for now.

Best regards,
Martin  
	[[alternative HTML version deleted]]


From j|ox @end|ng |rom mcm@@ter@c@  Sun May  3 18:15:42 2020
From: j|ox @end|ng |rom mcm@@ter@c@ (Fox, John)
Date: Sun, 3 May 2020 16:15:42 +0000
Subject: [Rd] Tcl.Tk Tktable package missing from R 4.0.0 on Windows
Message-ID: <B074B41A-963F-40E1-A2D8-870236E5D3CC@mcmaster.ca>

Dear R-devel list members,

The Tktable package for Tcl/Tk is apparently missing from the Windows distribution of R 4.0.0. I (actually a user of the Rcmdr package) discovered this when trying to use the new-data-set dialog in the Rcmdr package, producing the error, "Tcl package 'Tktable' must be installed first." 

I believe the Tktable has been part of the R distribution for Windows since R version 2.9.0, and is still present in the macOS distribution of R 4.0.0.

I apologize for not discovering this problem prior to the release of R 4.0.0. I did test the Rcmdr package under R 4.0.0 on both Windows and macOS, but not every menu item and dialog on each platform.

Does anyone have more information about this problem? 

Thank you,
 John

  -----------------------------
  John Fox, Professor Emeritus
  McMaster University
  Hamilton, Ontario, Canada
  Web: http::/socserv.mcmaster.ca/jfox


From morg@n@em@||box @end|ng |rom gm@||@com  Sun May  3 18:48:46 2020
From: morg@n@em@||box @end|ng |rom gm@||@com (Morgan Morgan)
Date: Sun, 3 May 2020 17:48:46 +0100
Subject: [Rd] Hash functions at C level
Message-ID: <CAL0QV_NQSBFYFZYemCbUUug=_wcTdDoQGKuAst27N9CdxB-gQg@mail.gmail.com>

Dear R-dev,

Hope you are all well.
I would like to know if there is a hash function available for the R C API?
I noticed that there are hash structures and functions defined in the file
"unique.c". These would definitly suit my needs, however is there a way to
access them at C level?
Thank you for your time.
Best regards
Morgan

	[[alternative HTML version deleted]]


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Sun May  3 21:51:39 2020
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Sun, 3 May 2020 19:51:39 +0000 (UTC)
Subject: [Rd] Character Column-width Calculations
References: <1399385279.574387.1588535499652.ref@mail.yahoo.com>
Message-ID: <1399385279.574387.1588535499652@mail.yahoo.com>

I just submitted a patch on bugzilla[1] to update the internal column-width tables to a more recent version of Unicode.? The most obvious way this shows up is with emoji now having a computed width of 2 columns instead of 1 once the patch is applied:

> nchar('\U0001F600', type='width'). # grinning face emoji
[1] 2 

This wasn't really an issue for a long time as many terminals didn't even do this properly either, but over the last couple of years it seems as if terminals have started to update their width tables.

I don't personally care much for emoji, but do like my wrapped-text columns to be nice and even, which is why I'm proposing the patch.? Posting here in case others are interested in the issue.

This doesn't do any grapheme computations so it won't work with combining emoji, but should still be a step in the right direction.

Best,

Brodie

[1]: https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17781


From jeroenoom@ @end|ng |rom gm@||@com  Mon May  4 09:01:07 2020
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Mon, 4 May 2020 09:01:07 +0200
Subject: [Rd] Tcl.Tk Tktable package missing from R 4.0.0 on Windows
In-Reply-To: <B074B41A-963F-40E1-A2D8-870236E5D3CC@mcmaster.ca>
References: <B074B41A-963F-40E1-A2D8-870236E5D3CC@mcmaster.ca>
Message-ID: <CABFfbXtzXg_jChyX21jAq73UcG0ueH+tgoycvSHr8u-CJy9ORA@mail.gmail.com>

On Sun, May 3, 2020 at 6:15 PM Fox, John <jfox at mcmaster.ca> wrote:
>
> Dear R-devel list members,
>
> The Tktable package for Tcl/Tk is apparently missing from the Windows distribution of R 4.0.0. I (actually a user of the Rcmdr package) discovered this when trying to use the new-data-set dialog in the Rcmdr package, producing the error, "Tcl package 'Tktable' must be installed first."
>
> I believe the Tktable has been part of the R distribution for Windows since R version 2.9.0, and is still present in the macOS distribution of R 4.0.0.
>
> I apologize for not discovering this problem prior to the release of R 4.0.0. I did test the Rcmdr package under R 4.0.0 on both Windows and macOS, but not every menu item and dialog on each platform.
>
> Does anyone have more information about this problem?

Sorry this was my mistake. I somehow missed tktable when updating the
tcltk bundle for rtools40. This didn't show up in any package check
either.

I've added it back now, it should work again in today's builds r-devel
and r-patched. Thanks for catching this.

Jeroen


From j|ox @end|ng |rom mcm@@ter@c@  Mon May  4 15:33:47 2020
From: j|ox @end|ng |rom mcm@@ter@c@ (Fox, John)
Date: Mon, 4 May 2020 13:33:47 +0000
Subject: [Rd] Tcl.Tk Tktable package missing from R 4.0.0 on Windows
In-Reply-To: <CABFfbXtzXg_jChyX21jAq73UcG0ueH+tgoycvSHr8u-CJy9ORA@mail.gmail.com>
References: <B074B41A-963F-40E1-A2D8-870236E5D3CC@mcmaster.ca>
 <CABFfbXtzXg_jChyX21jAq73UcG0ueH+tgoycvSHr8u-CJy9ORA@mail.gmail.com>
Message-ID: <0C718739-15D6-4F04-9352-395873D27419@mcmaster.ca>

Dear Jeroen,

Thank you very much for doing this.

I understand from other (off-list) correspondence that there is an intention to remove Tktable from the macOS distribution of R when Tcl/Tk is updated there, and so a more permanent solution is probably to provide Tktable via an R package. I plan to pursue that possibility.

Best,
 John

> On May 4, 2020, at 3:01 AM, Jeroen Ooms <jeroenooms at gmail.com> wrote:
> 
> On Sun, May 3, 2020 at 6:15 PM Fox, John <jfox at mcmaster.ca> wrote:
>> 
>> Dear R-devel list members,
>> 
>> The Tktable package for Tcl/Tk is apparently missing from the Windows distribution of R 4.0.0. I (actually a user of the Rcmdr package) discovered this when trying to use the new-data-set dialog in the Rcmdr package, producing the error, "Tcl package 'Tktable' must be installed first."
>> 
>> I believe the Tktable has been part of the R distribution for Windows since R version 2.9.0, and is still present in the macOS distribution of R 4.0.0.
>> 
>> I apologize for not discovering this problem prior to the release of R 4.0.0. I did test the Rcmdr package under R 4.0.0 on both Windows and macOS, but not every menu item and dialog on each platform.
>> 
>> Does anyone have more information about this problem?
> 
> Sorry this was my mistake. I somehow missed tktable when updating the
> tcltk bundle for rtools40. This didn't show up in any package check
> either.
> 
> I've added it back now, it should work again in today's builds r-devel
> and r-patched. Thanks for catching this.
> 
> Jeroen


From t@|@nepr@@@ @end|ng |rom gm@||@com  Mon May  4 16:25:09 2020
From: t@|@nepr@@@ @end|ng |rom gm@||@com (Taiane S. Prass)
Date: Mon, 4 May 2020 11:25:09 -0300
Subject: [Rd] Error in message printed by lbfgsb
Message-ID: <CANDZg5qQVHE16=3FEgeGu2aSViPp+0_CaBaGkXyq4yJHvCgL4A@mail.gmail.com>

Hi

I have a FORTRAN version of the L-BFGS-B algorithm and I was comparing it
to the code in the lbfgsb.c file available at R-4.0.0.tar.gz

Everithing looks the same, except for those two lines that must be printed
by the prn3lb function in case of an error (lines 3559 and 3561 in
lbfgsb.c):

case -5: Rprintf("l(%d) > u(%d).  No feasible solution", k, k); break;

case -7: Rprintf("Warning:  more than 10 function and gradient
evaluations\n   in the last line search\n"); break;

I believe that these two lines are interchanged, as lines 835 to 837 say

if (iback >= 10) info = -5;
/*     i.e., to issue a warning if iback>10 in the line search. */
goto L999;

while lines 1784 and 1785 say

strcpy(task, "ERROR: NO FEASIBLE SOLUTION");
*info = -7;


Best regards,


*Profa. Dra. Taiane Schaedler PrassDepartamento de Estat?stica - Instituto
de Matem?tica e Estat?stica*

*Programa de P?s-Gradua??o em Estat?stica (PPGEst)*
*Universidade Federal do Rio Grande do Sul*
Av. Bento Gon?alves, 9500, Porto Alegre - RS - BRASIL - CEP: 91509-900
*https://www.ufrgs.br/ime/ <https://www.ufrgs.br/ime/>*
www.professor.ufrgs.br/tsprass

*"In order to seek truth, it is necessary once in the course of our life,
to doubt, as far as possible, of all things*
*"  Ren? Descartes (1596-1650)*

	[[alternative HTML version deleted]]


From t@|@nepr@@@ @end|ng |rom gm@||@com  Mon May  4 21:26:39 2020
From: t@|@nepr@@@ @end|ng |rom gm@||@com (Taiane S. Prass)
Date: Mon, 4 May 2020 16:26:39 -0300
Subject: [Rd] error in message printed by L-BFGS-B
Message-ID: <CANDZg5rZopSGrgOdierZMk9MLRnm4mR9p120nqvNH0ndcH8dkQ@mail.gmail.com>

Hi

I have a FORTRAN version of the L-BFGS-B algorithm and I was comparing it
to the code in the lbfgsb.c file available at R-4.0.0.tar.gz

Everithing looks the same, except for those two lines that must be printed
by the prn3lb function in case of an error (lines 3559 and 3561 in
lbfgsb.c):

case -5: Rprintf("l(%d) > u(%d).  No feasible solution", k, k); break;

case -7: Rprintf("Warning:  more than 10 function and gradient
evaluations\n   in the last line search\n"); break;

I believe that these two lines are interchanged, as lines 835 to 837 say

if (iback >= 10) info = -5;
/*     i.e., to issue a warning if iback>10 in the line search. */
goto L999;

while lines 1784 and 1785 say

strcpy(task, "ERROR: NO FEASIBLE SOLUTION");
*info = -7;


Best regards,


*Profa. Dra. Taiane Schaedler PrassDepartamento de Estat?stica - Instituto
de Matem?tica e Estat?stica*

*Programa de P?s-Gradua??o em Estat?stica (PPGEst)*
*Universidade Federal do Rio Grande do Sul*
Av. Bento Gon?alves, 9500, Porto Alegre - RS - BRASIL - CEP: 91509-900
*https://www.ufrgs.br/ime/ <https://www.ufrgs.br/ime/>*
www.professor.ufrgs.br/tsprass

*"In order to seek truth, it is necessary once in the course of our life,
to doubt, as far as possible, of all things*
*"  Ren? Descartes (1596-1650)*

	[[alternative HTML version deleted]]


From k|r||| @end|ng |rom @|t||nux@org  Tue May  5 09:54:22 2020
From: k|r||| @end|ng |rom @|t||nux@org (Kirill Maslinsky)
Date: Tue, 05 May 2020 10:54:22 +0300
Subject: [Rd] 
 [External] Re: R 4.0.0 build error with sysdata.rda on ppc64el
 architecture
In-Reply-To: <24234.57996.340969.97974@rob.eddelbuettel.com>
References: <24232.47486.618901.868945@rob.eddelbuettel.com>
 <7D148040-DA12-4405-8D11-7E9B3868913D@gmail.com>
 <24234.8339.103881.186264@rob.eddelbuettel.com>
 <CALEXWq2x-ywdQeJRApN_77cnGF1su1fWVZt6vC=FwFgf0VBJiA@mail.gmail.com>
 <24234.53535.647635.838791@rob.eddelbuettel.com>
 <alpine.DEB.2.21.2004300910220.3189@luke-Latitude-7480>
 <24234.57996.340969.97974@rob.eddelbuettel.com>
Message-ID: <m31rnyakb5.fsf@gmail.com>


Dirk Eddelbuettel writes:

> We know by now (thanks to Bryan and Tomas) that src/main/machar.c is the real
> culprit due to the long double behaviour on ppc64el.  I presume 'compiler'
> calls into platform.c and hence machar.c for calibration or setup.
>
> On the Debian side, I just shipped an updated source package which will skip
> long double support on this platform.  That should allow builds to complete,
> hopefully, so that we can look into get the build from 'experimental' into
> 'unstable' and the distro proper.

I had the similar issue on ppc64le when trying to package R 4.0.0 for ALT
Linux Sisyphus. Disabling long double support indeed fixes the build of
the binaries, but then the build fails in the tests section (make check)
with violated assertions in some basic tests results.

Do you also have this problem, and is there a better solution to this
issue on ppc64le yet?

--
KM


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue May  5 14:46:52 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 5 May 2020 14:46:52 +0200
Subject: [Rd] error in message printed by L-BFGS-B
In-Reply-To: <CANDZg5rZopSGrgOdierZMk9MLRnm4mR9p120nqvNH0ndcH8dkQ@mail.gmail.com>
References: <CANDZg5rZopSGrgOdierZMk9MLRnm4mR9p120nqvNH0ndcH8dkQ@mail.gmail.com>
Message-ID: <d1d7b63e-568a-09d9-dc6b-051f4b3373b2@gmail.com>

Thanks for the report, fixed in R-devel.
Tomas

On 5/4/20 9:26 PM, Taiane S. Prass wrote:
> Hi
>
> I have a FORTRAN version of the L-BFGS-B algorithm and I was comparing it
> to the code in the lbfgsb.c file available at R-4.0.0.tar.gz
>
> Everithing looks the same, except for those two lines that must be printed
> by the prn3lb function in case of an error (lines 3559 and 3561 in
> lbfgsb.c):
>
> case -5: Rprintf("l(%d) > u(%d).  No feasible solution", k, k); break;
>
> case -7: Rprintf("Warning:  more than 10 function and gradient
> evaluations\n   in the last line search\n"); break;
>
> I believe that these two lines are interchanged, as lines 835 to 837 say
>
> if (iback >= 10) info = -5;
> /*     i.e., to issue a warning if iback>10 in the line search. */
> goto L999;
>
> while lines 1784 and 1785 say
>
> strcpy(task, "ERROR: NO FEASIBLE SOLUTION");
> *info = -7;
>
>
> Best regards,
>
>
> *Profa. Dra. Taiane Schaedler PrassDepartamento de Estat?stica - Instituto
> de Matem?tica e Estat?stica*
>
> *Programa de P?s-Gradua??o em Estat?stica (PPGEst)*
> *Universidade Federal do Rio Grande do Sul*
> Av. Bento Gon?alves, 9500, Porto Alegre - RS - BRASIL - CEP: 91509-900
> *https://www.ufrgs.br/ime/ <https://www.ufrgs.br/ime/>*
> www.professor.ufrgs.br/tsprass
>
> *"In order to seek truth, it is necessary once in the course of our life,
> to doubt, as far as possible, of all things*
> *"  Ren? Descartes (1596-1650)*
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n|  Tue May  5 15:11:35 2020
From: wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n| (Viechtbauer, Wolfgang (SP))
Date: Tue, 5 May 2020 13:11:35 +0000
Subject: [Rd] Use of MathJax (or something similar) in .Rd files
In-Reply-To: <98017b68d8874f44bef58880a02ac5bb@jhu.edu>
References: <8021fa8f9ad046ea9478ffaa4d604cb1@UM-MAIL3214.unimaas.nl>
 <CABtg=Km8CKTAJbp3H3aR7QfOPhg3u57sq6UxFzjbUE2PGmsv9Q@mail.gmail.com>
 <9eed70bdcdd54198992940818b963139@UM-MAIL3214.unimaas.nl>
 <2433a78d-0209-cbc2-71c0-6e4feb590293@gmail.com>,
 <ccfcbcdad94a43cbbc3ef4f4cbacaf3c@UM-MAIL3214.unimaas.nl>
 <98017b68d8874f44bef58880a02ac5bb@jhu.edu>
Message-ID: <65475fc6dc214df7a48151a5b6388cbb@UM-MAIL3214.unimaas.nl>

Hi All,

After some tinkering, and with support from Duncan, I put together a package that allows for easy inclusion of MathJax equations in Rd files. The package has been submitted to CRAN, but those who want to try this out already can get it here:

https://github.com/wviechtb/mathjaxr

or in other words:

install.packages("remotes")
remotes::install_github("wviechtb/mathjaxr")

Package authors can then use the \loadmathjax macro to enable its use and the \mjeqn{latex}{ascii} and \mjdeqn{latex}{ascii} macros for including inline and displayed equations.

Feedback and suggestions more than welcome!

Best,
Wolfgang

>-----Original Message-----
>From: Ravi Varadhan [mailto:ravi.varadhan at jhu.edu]
>Sent: Thursday, 30 April, 2020 15:58
>To: Viechtbauer, Wolfgang (SP); r-devel
>Subject: Re: [Rd] Use of MathJax (or something similar) in .Rd files
>
>Thank you.? This is a very useful idea!
>
>Best,
>Ravi
>________________________________________
>From: R-devel <r-devel-bounces at r-project.org> on behalf of Viechtbauer,
>Wolfgang (SP) <wolfgang.viechtbauer at maastrichtuniversity.nl>
>Sent: Thursday, April 30, 2020 6:59:02 AM
>To: r-devel
>Subject: Re: [Rd] Use of MathJax (or something similar) in .Rd files
>
>Thanks Gabor and Duncan! It works. For those interested, I added this to the
>beginning of the \details{} section:
>
>\if{html}{\out{
><script id="MathJax-script" async
>?? src="https://cdn.jsdelivr.net/npm/mathjax at 3/es5/tex-mml-chtml.js">
></script>
>}}
>
>And then I can use:
>
>\if{html}{\out{\(B_{x(a,b)} = \int_0^x t^{a-1} (1-t)^{b-1} dt\)}}
>
>or
>
>\if{html}{\out{\[B_{x(a,b)} = \int_0^x t^{a-1} (1-t)^{b-1} dt\]}}
>
>to render the equation (inline or as 'displaymath'). I'll try to add MathJax
>locally next.
>
>Best,
>Wolfgang
>
>>-----Original Message-----
>>From: Duncan Murdoch [mailto:murdoch.duncan at gmail.com]
>>Sent: Thursday, 30 April, 2020 12:22
>>To: Viechtbauer, Wolfgang (SP); r-devel
>>Subject: Re: [Rd] Use of MathJax (or something similar) in .Rd files
>>
>>On 30/04/2020 6:15 a.m., Viechtbauer, Wolfgang (SP) wrote:
>>> Interesting. I gave this a try, but couldn't make this work. One would
>>have to infuse something like
>>>
>>> <script id="MathJax-script" async
>>>??? src="https://cdn.jsdelivr.net/npm/mathjax at 3/es5/tex-mml-chtml.js">
>>> </script>
>>>
>>> or
>>>
>>> <script id="MathJax-script" async
>>>??? src="<url-to-your-site>/mathjax/tex-chtml.js">
>>> </script>
>>>
>>> into the .html file, but just adding this to the .Rd file (directly or
>>wrapped with \if{html}{}) doesn't do that (it just gets printed). If
>>somebody has already successfully done this, I would be interested in
>>hearing how.
>>
>>You'd need to wrap that code in \out (inside the conditional, i.e.
>>something like
>>
>>\if{html}{\out{<script id="MathJax-script" async
>>src="<url-to-your-site>/mathjax/tex-chtml.js"></script>}}
>>
>>Duncan Murdoch
>>
>>>
>>> Best,
>>> Wolfgang
>>>
>>>> -----Original Message-----
>>>> From: G?bor Cs?rdi [mailto:csardi.gabor at gmail.com]
>>>> Sent: Thursday, 30 April, 2020 11:51
>>>> To: Viechtbauer, Wolfgang (SP)
>>>> Cc: r-devel
>>>> Subject: Re: [Rd] Use of MathJax (or something similar) in .Rd files
>>>>
>>>> You can probably already do this using the \if{html} conditional, and
>>>> either including the matchjax js files in the package, or getting them
>>>>from a CDN.
>>>>
>>>> Gabor
>>>>
>>>> On Thu, Apr 30, 2020 at 9:13 AM Viechtbauer, Wolfgang (SP)
>>>> <wolfgang.viechtbauer at maastrichtuniversity.nl> wrote:
>>>>>
>>>>> Hello All,
>>>>>
>>>>> I am wondering if there has ever been any discussion/consideration
>given
>>>> to incorporating MathJax (or something similar) into R for rendering
>>>> equations in .Rd files. I know that equations are rendered beautifully
>in
>>>> the pdf manuals, but I suspect the majority of users primarily look at
>>the
>>>> html help files when using R. While I am comfortable reading something
>>like
>>>> "B_x(a,b) = integral_0^x t^(a-1) (1-t)^(b-1) dt", it would definitely be
>>>> nicer if this was shown as a 'proper' equation.
>>>>>
>>>>> Best,
>>>>> Wolfgang


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue May  5 15:37:30 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 5 May 2020 09:37:30 -0400
Subject: [Rd] Use of MathJax (or something similar) in .Rd files
In-Reply-To: <65475fc6dc214df7a48151a5b6388cbb@UM-MAIL3214.unimaas.nl>
References: <8021fa8f9ad046ea9478ffaa4d604cb1@UM-MAIL3214.unimaas.nl>
 <CABtg=Km8CKTAJbp3H3aR7QfOPhg3u57sq6UxFzjbUE2PGmsv9Q@mail.gmail.com>
 <9eed70bdcdd54198992940818b963139@UM-MAIL3214.unimaas.nl>
 <2433a78d-0209-cbc2-71c0-6e4feb590293@gmail.com>
 <ccfcbcdad94a43cbbc3ef4f4cbacaf3c@UM-MAIL3214.unimaas.nl>
 <98017b68d8874f44bef58880a02ac5bb@jhu.edu>
 <65475fc6dc214df7a48151a5b6388cbb@UM-MAIL3214.unimaas.nl>
Message-ID: <8ce10555-68da-1a4a-4869-9d79fd79f76e@gmail.com>

The package is really nice, I recommend it.  Package writers should 
install it, but users of their help pages don't need it unless they're 
working offline.  Even then, because of the way MathJax works, they get 
something that's fairly readable, e.g.

"The probability density function of a normal distribution is given by 
\[f(x) = \frac{1}{\sqrt{2\pi} \sigma} 
e^{-\frac{1}{2}\left(\frac{x-\mu}{\sigma}\right)^2},\] where \(\mu\) 
denotes the mean of the distribution and \(\sigma\) its standard deviation."

For a user who is online, or who has the mathjaxr package installed, 
this would be displayed with the equation as a display equation, and mu 
and sigma displayed properly inline.  To obtain that output I used this 
input in an Rd file:

"The probability density function of a normal distribution is given by 
\mjdeqn{f(x) = \frac{1}{\sqrt{2\pi} \sigma} 
e^{-\frac{1}{2}\left(\frac{x-\mu}{\sigma}\right)^2},}{f(x) = 1/(sqrt(2 
pi) sigma) e^-((x - mu)^2/(2 sigma^2)),} where \mjeqn{\mu}{mu} denotes 
the mean of the distribution and \mjeqn{\sigma}{sigma} its standard 
deviation."

A frill that might be possible to add would be a test for a remote 
connection, and a fallback to the ascii display if it's not there.  It 
already has a display-time test for the presence of the MathJax files 
locally.

Maybe once all the kinks are worked out this could be incorporated into 
the R distribution.  However, it's not really needed there, since it 
works so well as a contributed package already.

Duncan Murdoch


On 05/05/2020 9:11 a.m., Viechtbauer, Wolfgang (SP) wrote:
> Hi All,
> 
> After some tinkering, and with support from Duncan, I put together a package that allows for easy inclusion of MathJax equations in Rd files. The package has been submitted to CRAN, but those who want to try this out already can get it here:
> 
> https://github.com/wviechtb/mathjaxr
> 
> or in other words:
> 
> install.packages("remotes")
> remotes::install_github("wviechtb/mathjaxr")
> 
> Package authors can then use the \loadmathjax macro to enable its use and the \mjeqn{latex}{ascii} and \mjdeqn{latex}{ascii} macros for including inline and displayed equations.
> 
> Feedback and suggestions more than welcome!
> 
> Best,
> Wolfgang
> 
>> -----Original Message-----
>> From: Ravi Varadhan [mailto:ravi.varadhan at jhu.edu]
>> Sent: Thursday, 30 April, 2020 15:58
>> To: Viechtbauer, Wolfgang (SP); r-devel
>> Subject: Re: [Rd] Use of MathJax (or something similar) in .Rd files
>>
>> Thank you.? This is a very useful idea!
>>
>> Best,
>> Ravi
>> ________________________________________
>> From: R-devel <r-devel-bounces at r-project.org> on behalf of Viechtbauer,
>> Wolfgang (SP) <wolfgang.viechtbauer at maastrichtuniversity.nl>
>> Sent: Thursday, April 30, 2020 6:59:02 AM
>> To: r-devel
>> Subject: Re: [Rd] Use of MathJax (or something similar) in .Rd files
>>
>> Thanks Gabor and Duncan! It works. For those interested, I added this to the
>> beginning of the \details{} section:
>>
>> \if{html}{\out{
>> <script id="MathJax-script" async
>>  ?? src="https://cdn.jsdelivr.net/npm/mathjax at 3/es5/tex-mml-chtml.js">
>> </script>
>> }}
>>
>> And then I can use:
>>
>> \if{html}{\out{\(B_{x(a,b)} = \int_0^x t^{a-1} (1-t)^{b-1} dt\)}}
>>
>> or
>>
>> \if{html}{\out{\[B_{x(a,b)} = \int_0^x t^{a-1} (1-t)^{b-1} dt\]}}
>>
>> to render the equation (inline or as 'displaymath'). I'll try to add MathJax
>> locally next.
>>
>> Best,
>> Wolfgang
>>
>>> -----Original Message-----
>>> From: Duncan Murdoch [mailto:murdoch.duncan at gmail.com]
>>> Sent: Thursday, 30 April, 2020 12:22
>>> To: Viechtbauer, Wolfgang (SP); r-devel
>>> Subject: Re: [Rd] Use of MathJax (or something similar) in .Rd files
>>>
>>> On 30/04/2020 6:15 a.m., Viechtbauer, Wolfgang (SP) wrote:
>>>> Interesting. I gave this a try, but couldn't make this work. One would
>>> have to infuse something like
>>>>
>>>> <script id="MathJax-script" async
>>>>  ??? src="https://cdn.jsdelivr.net/npm/mathjax at 3/es5/tex-mml-chtml.js">
>>>> </script>
>>>>
>>>> or
>>>>
>>>> <script id="MathJax-script" async
>>>>  ??? src="<url-to-your-site>/mathjax/tex-chtml.js">
>>>> </script>
>>>>
>>>> into the .html file, but just adding this to the .Rd file (directly or
>>> wrapped with \if{html}{}) doesn't do that (it just gets printed). If
>>> somebody has already successfully done this, I would be interested in
>>> hearing how.
>>>
>>> You'd need to wrap that code in \out (inside the conditional, i.e.
>>> something like
>>>
>>> \if{html}{\out{<script id="MathJax-script" async
>>> src="<url-to-your-site>/mathjax/tex-chtml.js"></script>}}
>>>
>>> Duncan Murdoch
>>>
>>>>
>>>> Best,
>>>> Wolfgang
>>>>
>>>>> -----Original Message-----
>>>>> From: G?bor Cs?rdi [mailto:csardi.gabor at gmail.com]
>>>>> Sent: Thursday, 30 April, 2020 11:51
>>>>> To: Viechtbauer, Wolfgang (SP)
>>>>> Cc: r-devel
>>>>> Subject: Re: [Rd] Use of MathJax (or something similar) in .Rd files
>>>>>
>>>>> You can probably already do this using the \if{html} conditional, and
>>>>> either including the matchjax js files in the package, or getting them
>>>> >from a CDN.
>>>>>
>>>>> Gabor
>>>>>
>>>>> On Thu, Apr 30, 2020 at 9:13 AM Viechtbauer, Wolfgang (SP)
>>>>> <wolfgang.viechtbauer at maastrichtuniversity.nl> wrote:
>>>>>>
>>>>>> Hello All,
>>>>>>
>>>>>> I am wondering if there has ever been any discussion/consideration
>> given
>>>>> to incorporating MathJax (or something similar) into R for rendering
>>>>> equations in .Rd files. I know that equations are rendered beautifully
>> in
>>>>> the pdf manuals, but I suspect the majority of users primarily look at
>>> the
>>>>> html help files when using R. While I am comfortable reading something
>>> like
>>>>> "B_x(a,b) = integral_0^x t^(a-1) (1-t)^(b-1) dt", it would definitely be
>>>>> nicer if this was shown as a 'proper' equation.
>>>>>>
>>>>>> Best,
>>>>>> Wolfgang
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From irederik m@iii@g oii oib@@et  Wed May  6 19:09:19 2020
From: irederik m@iii@g oii oib@@et (irederik m@iii@g oii oib@@et)
Date: Wed, 6 May 2020 10:09:19 -0700
Subject: [Rd] defining r audio connections
Message-ID: <20200506170919.GA34684@localhost>

Dear R Devel,

Since Linux moved away from using a file-system interface for audio, I think it is necessary to write special libraries to interface with audio hardware from various languages on Linux.

In R, it seems like the appropriate datatype for a `snd_pcm_t` handle pointing to an open ALSA source or sink would be a "connection". Connection types are already defined in R for "file", "url", "pipe", "fifo", "socketConnection", etc.

Is there a tutorial or an example package where a new type of connection is defined, so that I can see how to do this properly in a package?

I can see from the R source that, for example, `do_gzfile` is defined in `connections.c` and referenced in `names.c`. However, I thought I should ask here first in case there is a better place to start, than trying to copy this code.

I only want an object that I can use `readBin` and `writeBin` on, to read and write audio data using e.g. `snd_pcm_writei` which is part of the `alsa-lib` package.

Thank you very much,

Frederick


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed May  6 20:26:34 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 6 May 2020 14:26:34 -0400
Subject: [Rd] defining r audio connections
In-Reply-To: <20200506170919.GA34684@localhost>
References: <20200506170919.GA34684@localhost>
Message-ID: <d6158363-d59a-3fa9-7ccd-0a80985094ab@gmail.com>

On 06/05/2020 1:09 p.m., frederik at ofb.net wrote:
> Dear R Devel,
> 
> Since Linux moved away from using a file-system interface for audio, I think it is necessary to write special libraries to interface with audio hardware from various languages on Linux.
> 
> In R, it seems like the appropriate datatype for a `snd_pcm_t` handle pointing to an open ALSA source or sink would be a "connection". Connection types are already defined in R for "file", "url", "pipe", "fifo", "socketConnection", etc.
> 
> Is there a tutorial or an example package where a new type of connection is defined, so that I can see how to do this properly in a package?
> 
> I can see from the R source that, for example, `do_gzfile` is defined in `connections.c` and referenced in `names.c`. However, I thought I should ask here first in case there is a better place to start, than trying to copy this code.
> 
> I only want an object that I can use `readBin` and `writeBin` on, to read and write audio data using e.g. `snd_pcm_writei` which is part of the `alsa-lib` package.

I don't think R supports user-defined connections, but probably writing 
readBin and writeBin equivalents specific to your library wouldn't be 
any harder than creating a connection.  For those, you will probably 
want to work with an "external pointer" (see Writing R Extensions). 
Rcpp probably has support for these if you're working in C++.

Duncan Murdoch


From mtmorg@n@b|oc @end|ng |rom gm@||@com  Wed May  6 22:04:19 2020
From: mtmorg@n@b|oc @end|ng |rom gm@||@com (Martin Morgan)
Date: Wed, 6 May 2020 20:04:19 +0000
Subject: [Rd] defining r audio connections
In-Reply-To: <d6158363-d59a-3fa9-7ccd-0a80985094ab@gmail.com>
References: <20200506170919.GA34684@localhost>
 <d6158363-d59a-3fa9-7ccd-0a80985094ab@gmail.com>
Message-ID: <BL0PR04MB6609459170C7D73F98768D17F9A40@BL0PR04MB6609.namprd04.prod.outlook.com>

The public connection API is defined in

https://github.com/wch/r-source/blob/trunk/src/include/R_ext/Connections.h

I'm not sure of a good pedagogic example; people who want to write their own connections usually want to do so for complicated reasons!

This is my own abandoned attempt https://github.com/mtmorgan/socketeer/blob/b0a1448191fe5f79a3f09d1f939e1e235a22cf11/src/connection.c#L169-L192 where connection_local_client() is called from R and _connection_local() creates and populates the appropriate structure. Probably I have done things totally wrong (e.g., by not checking the version of the API, as advised in the header file!)

Martin Morgan

?On 5/6/20, 2:26 PM, "R-devel on behalf of Duncan Murdoch" <r-devel-bounces at r-project.org on behalf of murdoch.duncan at gmail.com> wrote:

    On 06/05/2020 1:09 p.m., frederik at ofb.net wrote:
    > Dear R Devel,
    > 
    > Since Linux moved away from using a file-system interface for audio, I think it is necessary to write special libraries to interface with audio hardware from various languages on Linux.
    > 
    > In R, it seems like the appropriate datatype for a `snd_pcm_t` handle pointing to an open ALSA source or sink would be a "connection". Connection types are already defined in R for "file", "url", "pipe", "fifo", "socketConnection", etc.
    > 
    > Is there a tutorial or an example package where a new type of connection is defined, so that I can see how to do this properly in a package?
    > 
    > I can see from the R source that, for example, `do_gzfile` is defined in `connections.c` and referenced in `names.c`. However, I thought I should ask here first in case there is a better place to start, than trying to copy this code.
    > 
    > I only want an object that I can use `readBin` and `writeBin` on, to read and write audio data using e.g. `snd_pcm_writei` which is part of the `alsa-lib` package.

    I don't think R supports user-defined connections, but probably writing 
    readBin and writeBin equivalents specific to your library wouldn't be 
    any harder than creating a connection.  For those, you will probably 
    want to work with an "external pointer" (see Writing R Extensions). 
    Rcpp probably has support for these if you're working in C++.

    Duncan Murdoch

    ______________________________________________
    R-devel at r-project.org mailing list
    https://stat.ethz.ch/mailman/listinfo/r-devel

From c@@rd|@g@bor @end|ng |rom gm@||@com  Wed May  6 22:11:46 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Wed, 6 May 2020 21:11:46 +0100
Subject: [Rd] defining r audio connections
In-Reply-To: <BL0PR04MB6609459170C7D73F98768D17F9A40@BL0PR04MB6609.namprd04.prod.outlook.com>
References: <20200506170919.GA34684@localhost>
 <d6158363-d59a-3fa9-7ccd-0a80985094ab@gmail.com>
 <BL0PR04MB6609459170C7D73F98768D17F9A40@BL0PR04MB6609.namprd04.prod.outlook.com>
Message-ID: <CABtg=Kk+AeZ4TzUFZFD4t5f6RCcs2F0SXF_Cx1TCS2_FnxbYPQ@mail.gmail.com>

AFAIK that API is not allowed on CRAN. It triggers a NOTE or a
WARNING, and your package will not be published.

Gabor

On Wed, May 6, 2020 at 9:04 PM Martin Morgan <mtmorgan.bioc at gmail.com> wrote:
>
> The public connection API is defined in
>
> https://github.com/wch/r-source/blob/trunk/src/include/R_ext/Connections.h
>
> I'm not sure of a good pedagogic example; people who want to write their own connections usually want to do so for complicated reasons!
>
> This is my own abandoned attempt https://github.com/mtmorgan/socketeer/blob/b0a1448191fe5f79a3f09d1f939e1e235a22cf11/src/connection.c#L169-L192 where connection_local_client() is called from R and _connection_local() creates and populates the appropriate structure. Probably I have done things totally wrong (e.g., by not checking the version of the API, as advised in the header file!)
>
> Martin Morgan
>
> ?On 5/6/20, 2:26 PM, "R-devel on behalf of Duncan Murdoch" <r-devel-bounces at r-project.org on behalf of murdoch.duncan at gmail.com> wrote:
>
>     On 06/05/2020 1:09 p.m., frederik at ofb.net wrote:
>     > Dear R Devel,
>     >
>     > Since Linux moved away from using a file-system interface for audio, I think it is necessary to write special libraries to interface with audio hardware from various languages on Linux.
>     >
>     > In R, it seems like the appropriate datatype for a `snd_pcm_t` handle pointing to an open ALSA source or sink would be a "connection". Connection types are already defined in R for "file", "url", "pipe", "fifo", "socketConnection", etc.
>     >
>     > Is there a tutorial or an example package where a new type of connection is defined, so that I can see how to do this properly in a package?
>     >
>     > I can see from the R source that, for example, `do_gzfile` is defined in `connections.c` and referenced in `names.c`. However, I thought I should ask here first in case there is a better place to start, than trying to copy this code.
>     >
>     > I only want an object that I can use `readBin` and `writeBin` on, to read and write audio data using e.g. `snd_pcm_writei` which is part of the `alsa-lib` package.
>
>     I don't think R supports user-defined connections, but probably writing
>     readBin and writeBin equivalents specific to your library wouldn't be
>     any harder than creating a connection.  For those, you will probably
>     want to work with an "external pointer" (see Writing R Extensions).
>     Rcpp probably has support for these if you're working in C++.
>
>     Duncan Murdoch
>
>     ______________________________________________
>     R-devel at r-project.org mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From mtmorg@n@b|oc @end|ng |rom gm@||@com  Thu May  7 01:26:15 2020
From: mtmorg@n@b|oc @end|ng |rom gm@||@com (Martin Morgan)
Date: Wed, 6 May 2020 23:26:15 +0000
Subject: [Rd] defining r audio connections
In-Reply-To: <CABtg=Kk+AeZ4TzUFZFD4t5f6RCcs2F0SXF_Cx1TCS2_FnxbYPQ@mail.gmail.com>
References: <20200506170919.GA34684@localhost>
 <d6158363-d59a-3fa9-7ccd-0a80985094ab@gmail.com>
 <BL0PR04MB6609459170C7D73F98768D17F9A40@BL0PR04MB6609.namprd04.prod.outlook.com>
 <CABtg=Kk+AeZ4TzUFZFD4t5f6RCcs2F0SXF_Cx1TCS2_FnxbYPQ@mail.gmail.com>
Message-ID: <BL0PR04MB6609075FFBD291823005B023F9A40@BL0PR04MB6609.namprd04.prod.outlook.com>

yep, you're right, after some initial clean-up and running with or without --as-cran R CMD check gives a NOTE

  *  checking compiled code
  File ?socketeer/libs/socketeer.so?:
    Found non-API calls to R: ?R_GetConnection?,
       ?R_new_custom_connection?
   
  Compiled code should not call non-API entry points in R.
   
  See 'Writing portable packages' in the 'Writing R Extensions' manual.

Connections in general seem more useful than ad-hoc functions, though perhaps for Frederick's use case Duncan's suggestion is sufficient. For non-CRAN packages I personally would implement a connection.

(I mistakenly thought this was a more specialized mailing list; I wouldn't have posted to R-devel on this topic otherwise)

Martin Morgan

?On 5/6/20, 4:12 PM, "G?bor Cs?rdi" <csardi.gabor at gmail.com> wrote:

    AFAIK that API is not allowed on CRAN. It triggers a NOTE or a
    WARNING, and your package will not be published.

    Gabor

    On Wed, May 6, 2020 at 9:04 PM Martin Morgan <mtmorgan.bioc at gmail.com> wrote:
    >
    > The public connection API is defined in
    >
    > https://github.com/wch/r-source/blob/trunk/src/include/R_ext/Connections.h
    >
    > I'm not sure of a good pedagogic example; people who want to write their own connections usually want to do so for complicated reasons!
    >
    > This is my own abandoned attempt https://github.com/mtmorgan/socketeer/blob/b0a1448191fe5f79a3f09d1f939e1e235a22cf11/src/connection.c#L169-L192 where connection_local_client() is called from R and _connection_local() creates and populates the appropriate structure. Probably I have done things totally wrong (e.g., by not checking the version of the API, as advised in the header file!)
    >
    > Martin Morgan
    >
    > ?On 5/6/20, 2:26 PM, "R-devel on behalf of Duncan Murdoch" <r-devel-bounces at r-project.org on behalf of murdoch.duncan at gmail.com> wrote:
    >
    >     On 06/05/2020 1:09 p.m., frederik at ofb.net wrote:
    >     > Dear R Devel,
    >     >
    >     > Since Linux moved away from using a file-system interface for audio, I think it is necessary to write special libraries to interface with audio hardware from various languages on Linux.
    >     >
    >     > In R, it seems like the appropriate datatype for a `snd_pcm_t` handle pointing to an open ALSA source or sink would be a "connection". Connection types are already defined in R for "file", "url", "pipe", "fifo", "socketConnection", etc.
    >     >
    >     > Is there a tutorial or an example package where a new type of connection is defined, so that I can see how to do this properly in a package?
    >     >
    >     > I can see from the R source that, for example, `do_gzfile` is defined in `connections.c` and referenced in `names.c`. However, I thought I should ask here first in case there is a better place to start, than trying to copy this code.
    >     >
    >     > I only want an object that I can use `readBin` and `writeBin` on, to read and write audio data using e.g. `snd_pcm_writei` which is part of the `alsa-lib` package.
    >
    >     I don't think R supports user-defined connections, but probably writing
    >     readBin and writeBin equivalents specific to your library wouldn't be
    >     any harder than creating a connection.  For those, you will probably
    >     want to work with an "external pointer" (see Writing R Extensions).
    >     Rcpp probably has support for these if you're working in C++.
    >
    >     Duncan Murdoch
    >
    >     ______________________________________________
    >     R-devel at r-project.org mailing list
    >     https://stat.ethz.ch/mailman/listinfo/r-devel
    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel

From henr|k@bengt@@on @end|ng |rom gm@||@com  Thu May  7 04:30:15 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Wed, 6 May 2020 19:30:15 -0700
Subject: [Rd] defining r audio connections
In-Reply-To: <BL0PR04MB6609075FFBD291823005B023F9A40@BL0PR04MB6609.namprd04.prod.outlook.com>
References: <20200506170919.GA34684@localhost>
 <d6158363-d59a-3fa9-7ccd-0a80985094ab@gmail.com>
 <BL0PR04MB6609459170C7D73F98768D17F9A40@BL0PR04MB6609.namprd04.prod.outlook.com>
 <CABtg=Kk+AeZ4TzUFZFD4t5f6RCcs2F0SXF_Cx1TCS2_FnxbYPQ@mail.gmail.com>
 <BL0PR04MB6609075FFBD291823005B023F9A40@BL0PR04MB6609.namprd04.prod.outlook.com>
Message-ID: <CAFDcVCQbGvzovVaN_5TF=aFYxFWAr+=5x0dXw6jXYxRtswVNVw@mail.gmail.com>

What's the gist of the problem of making/having this part of the public
API? Is it security, is it stability, is it that the current API is under
construction, is it a worry about maintenance load for R Core, ...? Do we
know why?

It sounds like it's a feature that is  useful. I think we missed out on
some great enhancements in the past because of it not being part of the
public API.

/Henrik

On Wed, May 6, 2020, 16:26 Martin Morgan <mtmorgan.bioc at gmail.com> wrote:

> yep, you're right, after some initial clean-up and running with or without
> --as-cran R CMD check gives a NOTE
>
>   *  checking compiled code
>   File ?socketeer/libs/socketeer.so?:
>     Found non-API calls to R: ?R_GetConnection?,
>        ?R_new_custom_connection?
>
>   Compiled code should not call non-API entry points in R.
>
>   See 'Writing portable packages' in the 'Writing R Extensions' manual.
>
> Connections in general seem more useful than ad-hoc functions, though
> perhaps for Frederick's use case Duncan's suggestion is sufficient. For
> non-CRAN packages I personally would implement a connection.
>
> (I mistakenly thought this was a more specialized mailing list; I wouldn't
> have posted to R-devel on this topic otherwise)
>
> Martin Morgan
>
> ?On 5/6/20, 4:12 PM, "G?bor Cs?rdi" <csardi.gabor at gmail.com> wrote:
>
>     AFAIK that API is not allowed on CRAN. It triggers a NOTE or a
>     WARNING, and your package will not be published.
>
>     Gabor
>
>     On Wed, May 6, 2020 at 9:04 PM Martin Morgan <mtmorgan.bioc at gmail.com>
> wrote:
>     >
>     > The public connection API is defined in
>     >
>     >
> https://github.com/wch/r-source/blob/trunk/src/include/R_ext/Connections.h
>     >
>     > I'm not sure of a good pedagogic example; people who want to write
> their own connections usually want to do so for complicated reasons!
>     >
>     > This is my own abandoned attempt
> https://github.com/mtmorgan/socketeer/blob/b0a1448191fe5f79a3f09d1f939e1e235a22cf11/src/connection.c#L169-L192
> where connection_local_client() is called from R and _connection_local()
> creates and populates the appropriate structure. Probably I have done
> things totally wrong (e.g., by not checking the version of the API, as
> advised in the header file!)
>     >
>     > Martin Morgan
>     >
>     > ?On 5/6/20, 2:26 PM, "R-devel on behalf of Duncan Murdoch" <
> r-devel-bounces at r-project.org on behalf of murdoch.duncan at gmail.com>
> wrote:
>     >
>     >     On 06/05/2020 1:09 p.m., frederik at ofb.net wrote:
>     >     > Dear R Devel,
>     >     >
>     >     > Since Linux moved away from using a file-system interface for
> audio, I think it is necessary to write special libraries to interface with
> audio hardware from various languages on Linux.
>     >     >
>     >     > In R, it seems like the appropriate datatype for a `snd_pcm_t`
> handle pointing to an open ALSA source or sink would be a "connection".
> Connection types are already defined in R for "file", "url", "pipe",
> "fifo", "socketConnection", etc.
>     >     >
>     >     > Is there a tutorial or an example package where a new type of
> connection is defined, so that I can see how to do this properly in a
> package?
>     >     >
>     >     > I can see from the R source that, for example, `do_gzfile` is
> defined in `connections.c` and referenced in `names.c`. However, I thought
> I should ask here first in case there is a better place to start, than
> trying to copy this code.
>     >     >
>     >     > I only want an object that I can use `readBin` and `writeBin`
> on, to read and write audio data using e.g. `snd_pcm_writei` which is part
> of the `alsa-lib` package.
>     >
>     >     I don't think R supports user-defined connections, but probably
> writing
>     >     readBin and writeBin equivalents specific to your library
> wouldn't be
>     >     any harder than creating a connection.  For those, you will
> probably
>     >     want to work with an "external pointer" (see Writing R
> Extensions).
>     >     Rcpp probably has support for these if you're working in C++.
>     >
>     >     Duncan Murdoch
>     >
>     >     ______________________________________________
>     >     R-devel at r-project.org mailing list
>     >     https://stat.ethz.ch/mailman/listinfo/r-devel
>     > ______________________________________________
>     > R-devel at r-project.org mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From j@me@@|@he@ter @end|ng |rom gm@||@com  Thu May  7 15:02:57 2020
From: j@me@@|@he@ter @end|ng |rom gm@||@com (Jim Hester)
Date: Thu, 7 May 2020 09:02:57 -0400
Subject: [Rd] defining r audio connections
In-Reply-To: <CAFDcVCQbGvzovVaN_5TF=aFYxFWAr+=5x0dXw6jXYxRtswVNVw@mail.gmail.com>
References: <20200506170919.GA34684@localhost>
 <d6158363-d59a-3fa9-7ccd-0a80985094ab@gmail.com>
 <BL0PR04MB6609459170C7D73F98768D17F9A40@BL0PR04MB6609.namprd04.prod.outlook.com>
 <CABtg=Kk+AeZ4TzUFZFD4t5f6RCcs2F0SXF_Cx1TCS2_FnxbYPQ@mail.gmail.com>
 <BL0PR04MB6609075FFBD291823005B023F9A40@BL0PR04MB6609.namprd04.prod.outlook.com>
 <CAFDcVCQbGvzovVaN_5TF=aFYxFWAr+=5x0dXw6jXYxRtswVNVw@mail.gmail.com>
Message-ID: <CAD6tx94ab9--UdNsRAd2KVxL8P3bmBv-=AYi8+BsdM7f_Rf7_A@mail.gmail.com>

https://github.com/jimhester/archive was not allowed on CRAN when I
submitted it 3 years ago due to this restriction.

Being able to write custom connections is a useful feature for a number of
applications, I would love this policy to be reconsidered.

On Wed, May 6, 2020 at 10:30 PM Henrik Bengtsson <henrik.bengtsson at gmail.com>
wrote:

> What's the gist of the problem of making/having this part of the public
> API? Is it security, is it stability, is it that the current API is under
> construction, is it a worry about maintenance load for R Core, ...? Do we
> know why?
>
> It sounds like it's a feature that is  useful. I think we missed out on
> some great enhancements in the past because of it not being part of the
> public API.
>
> /Henrik
>
> On Wed, May 6, 2020, 16:26 Martin Morgan <mtmorgan.bioc at gmail.com> wrote:
>
> > yep, you're right, after some initial clean-up and running with or
> without
> > --as-cran R CMD check gives a NOTE
> >
> >   *  checking compiled code
> >   File ?socketeer/libs/socketeer.so?:
> >     Found non-API calls to R: ?R_GetConnection?,
> >        ?R_new_custom_connection?
> >
> >   Compiled code should not call non-API entry points in R.
> >
> >   See 'Writing portable packages' in the 'Writing R Extensions' manual.
> >
> > Connections in general seem more useful than ad-hoc functions, though
> > perhaps for Frederick's use case Duncan's suggestion is sufficient. For
> > non-CRAN packages I personally would implement a connection.
> >
> > (I mistakenly thought this was a more specialized mailing list; I
> wouldn't
> > have posted to R-devel on this topic otherwise)
> >
> > Martin Morgan
> >
> > ?On 5/6/20, 4:12 PM, "G?bor Cs?rdi" <csardi.gabor at gmail.com> wrote:
> >
> >     AFAIK that API is not allowed on CRAN. It triggers a NOTE or a
> >     WARNING, and your package will not be published.
> >
> >     Gabor
> >
> >     On Wed, May 6, 2020 at 9:04 PM Martin Morgan <
> mtmorgan.bioc at gmail.com>
> > wrote:
> >     >
> >     > The public connection API is defined in
> >     >
> >     >
> >
> https://github.com/wch/r-source/blob/trunk/src/include/R_ext/Connections.h
> >     >
> >     > I'm not sure of a good pedagogic example; people who want to write
> > their own connections usually want to do so for complicated reasons!
> >     >
> >     > This is my own abandoned attempt
> >
> https://github.com/mtmorgan/socketeer/blob/b0a1448191fe5f79a3f09d1f939e1e235a22cf11/src/connection.c#L169-L192
> > where connection_local_client() is called from R and _connection_local()
> > creates and populates the appropriate structure. Probably I have done
> > things totally wrong (e.g., by not checking the version of the API, as
> > advised in the header file!)
> >     >
> >     > Martin Morgan
> >     >
> >     > ?On 5/6/20, 2:26 PM, "R-devel on behalf of Duncan Murdoch" <
> > r-devel-bounces at r-project.org on behalf of murdoch.duncan at gmail.com>
> > wrote:
> >     >
> >     >     On 06/05/2020 1:09 p.m., frederik at ofb.net wrote:
> >     >     > Dear R Devel,
> >     >     >
> >     >     > Since Linux moved away from using a file-system interface for
> > audio, I think it is necessary to write special libraries to interface
> with
> > audio hardware from various languages on Linux.
> >     >     >
> >     >     > In R, it seems like the appropriate datatype for a
> `snd_pcm_t`
> > handle pointing to an open ALSA source or sink would be a "connection".
> > Connection types are already defined in R for "file", "url", "pipe",
> > "fifo", "socketConnection", etc.
> >     >     >
> >     >     > Is there a tutorial or an example package where a new type of
> > connection is defined, so that I can see how to do this properly in a
> > package?
> >     >     >
> >     >     > I can see from the R source that, for example, `do_gzfile` is
> > defined in `connections.c` and referenced in `names.c`. However, I
> thought
> > I should ask here first in case there is a better place to start, than
> > trying to copy this code.
> >     >     >
> >     >     > I only want an object that I can use `readBin` and `writeBin`
> > on, to read and write audio data using e.g. `snd_pcm_writei` which is
> part
> > of the `alsa-lib` package.
> >     >
> >     >     I don't think R supports user-defined connections, but probably
> > writing
> >     >     readBin and writeBin equivalents specific to your library
> > wouldn't be
> >     >     any harder than creating a connection.  For those, you will
> > probably
> >     >     want to work with an "external pointer" (see Writing R
> > Extensions).
> >     >     Rcpp probably has support for these if you're working in C++.
> >     >
> >     >     Duncan Murdoch
> >     >
> >     >     ______________________________________________
> >     >     R-devel at r-project.org mailing list
> >     >     https://stat.ethz.ch/mailman/listinfo/r-devel
> >     > ______________________________________________
> >     > R-devel at r-project.org mailing list
> >     > https://stat.ethz.ch/mailman/listinfo/r-devel
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Fri May  8 00:02:13 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 8 May 2020 10:02:13 +1200
Subject: [Rd] defining r audio connections
In-Reply-To: <CAD6tx94ab9--UdNsRAd2KVxL8P3bmBv-=AYi8+BsdM7f_Rf7_A@mail.gmail.com>
References: <20200506170919.GA34684@localhost>
 <d6158363-d59a-3fa9-7ccd-0a80985094ab@gmail.com>
 <BL0PR04MB6609459170C7D73F98768D17F9A40@BL0PR04MB6609.namprd04.prod.outlook.com>
 <CABtg=Kk+AeZ4TzUFZFD4t5f6RCcs2F0SXF_Cx1TCS2_FnxbYPQ@mail.gmail.com>
 <BL0PR04MB6609075FFBD291823005B023F9A40@BL0PR04MB6609.namprd04.prod.outlook.com>
 <CAFDcVCQbGvzovVaN_5TF=aFYxFWAr+=5x0dXw6jXYxRtswVNVw@mail.gmail.com>
 <CAD6tx94ab9--UdNsRAd2KVxL8P3bmBv-=AYi8+BsdM7f_Rf7_A@mail.gmail.com>
Message-ID: <470F189B-3150-4F3E-94F6-9BC7091AF010@R-project.org>

The custom connections API was specifically introduced to allow packages to create custom connections back in 2013. Its sole purpose is to allow package authors to create new connections outside of base R, so I don't see why packages using it shouldn't be allowed on CRAN. However, it is solely at CRAN's discretion to decide what gets published, so it may be worth raising it with the team, ask for the reasons and what it would take for them to accept packages using that API.

Cheers,
Simon


> On 8/05/2020, at 1:02 AM, Jim Hester <james.f.hester at gmail.com> wrote:
> 
> https://github.com/jimhester/archive was not allowed on CRAN when I
> submitted it 3 years ago due to this restriction.
> 
> Being able to write custom connections is a useful feature for a number of
> applications, I would love this policy to be reconsidered.
> 
> On Wed, May 6, 2020 at 10:30 PM Henrik Bengtsson <henrik.bengtsson at gmail.com>
> wrote:
> 
>> What's the gist of the problem of making/having this part of the public
>> API? Is it security, is it stability, is it that the current API is under
>> construction, is it a worry about maintenance load for R Core, ...? Do we
>> know why?
>> 
>> It sounds like it's a feature that is  useful. I think we missed out on
>> some great enhancements in the past because of it not being part of the
>> public API.
>> 
>> /Henrik
>> 
>> On Wed, May 6, 2020, 16:26 Martin Morgan <mtmorgan.bioc at gmail.com> wrote:
>> 
>>> yep, you're right, after some initial clean-up and running with or
>> without
>>> --as-cran R CMD check gives a NOTE
>>> 
>>>  *  checking compiled code
>>>  File ?socketeer/libs/socketeer.so?:
>>>    Found non-API calls to R: ?R_GetConnection?,
>>>       ?R_new_custom_connection?
>>> 
>>>  Compiled code should not call non-API entry points in R.
>>> 
>>>  See 'Writing portable packages' in the 'Writing R Extensions' manual.
>>> 
>>> Connections in general seem more useful than ad-hoc functions, though
>>> perhaps for Frederick's use case Duncan's suggestion is sufficient. For
>>> non-CRAN packages I personally would implement a connection.
>>> 
>>> (I mistakenly thought this was a more specialized mailing list; I
>> wouldn't
>>> have posted to R-devel on this topic otherwise)
>>> 
>>> Martin Morgan
>>> 
>>> ?On 5/6/20, 4:12 PM, "G?bor Cs?rdi" <csardi.gabor at gmail.com> wrote:
>>> 
>>>    AFAIK that API is not allowed on CRAN. It triggers a NOTE or a
>>>    WARNING, and your package will not be published.
>>> 
>>>    Gabor
>>> 
>>>    On Wed, May 6, 2020 at 9:04 PM Martin Morgan <
>> mtmorgan.bioc at gmail.com>
>>> wrote:
>>>> 
>>>> The public connection API is defined in
>>>> 
>>>> 
>>> 
>> https://github.com/wch/r-source/blob/trunk/src/include/R_ext/Connections.h
>>>> 
>>>> I'm not sure of a good pedagogic example; people who want to write
>>> their own connections usually want to do so for complicated reasons!
>>>> 
>>>> This is my own abandoned attempt
>>> 
>> https://github.com/mtmorgan/socketeer/blob/b0a1448191fe5f79a3f09d1f939e1e235a22cf11/src/connection.c#L169-L192
>>> where connection_local_client() is called from R and _connection_local()
>>> creates and populates the appropriate structure. Probably I have done
>>> things totally wrong (e.g., by not checking the version of the API, as
>>> advised in the header file!)
>>>> 
>>>> Martin Morgan
>>>> 
>>>> ?On 5/6/20, 2:26 PM, "R-devel on behalf of Duncan Murdoch" <
>>> r-devel-bounces at r-project.org on behalf of murdoch.duncan at gmail.com>
>>> wrote:
>>>> 
>>>>    On 06/05/2020 1:09 p.m., frederik at ofb.net wrote:
>>>>> Dear R Devel,
>>>>> 
>>>>> Since Linux moved away from using a file-system interface for
>>> audio, I think it is necessary to write special libraries to interface
>> with
>>> audio hardware from various languages on Linux.
>>>>> 
>>>>> In R, it seems like the appropriate datatype for a
>> `snd_pcm_t`
>>> handle pointing to an open ALSA source or sink would be a "connection".
>>> Connection types are already defined in R for "file", "url", "pipe",
>>> "fifo", "socketConnection", etc.
>>>>> 
>>>>> Is there a tutorial or an example package where a new type of
>>> connection is defined, so that I can see how to do this properly in a
>>> package?
>>>>> 
>>>>> I can see from the R source that, for example, `do_gzfile` is
>>> defined in `connections.c` and referenced in `names.c`. However, I
>> thought
>>> I should ask here first in case there is a better place to start, than
>>> trying to copy this code.
>>>>> 
>>>>> I only want an object that I can use `readBin` and `writeBin`
>>> on, to read and write audio data using e.g. `snd_pcm_writei` which is
>> part
>>> of the `alsa-lib` package.
>>>> 
>>>>    I don't think R supports user-defined connections, but probably
>>> writing
>>>>    readBin and writeBin equivalents specific to your library
>>> wouldn't be
>>>>    any harder than creating a connection.  For those, you will
>>> probably
>>>>    want to work with an "external pointer" (see Writing R
>>> Extensions).
>>>>    Rcpp probably has support for these if you're working in C++.
>>>> 
>>>>    Duncan Murdoch
>>>> 
>>>>    ______________________________________________
>>>>    R-devel at r-project.org mailing list
>>>>    https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>> 
>>        [[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From @eb@@t|@n@kr@ntz @end|ng |rom gr@du@te|n@t|tute@ch  Fri May  8 23:01:39 2020
From: @eb@@t|@n@kr@ntz @end|ng |rom gr@du@te|n@t|tute@ch (Sebastian Martin Krantz)
Date: Fri, 8 May 2020 23:01:39 +0200
Subject: [Rd] base::order making available retGrp and sortStr options for
 radix method?
Message-ID: <CAOsNuxAEmMASsknn3yPRV2z9T3dXLucUa1Dp9r=HxwKEVZhp9Q@mail.gmail.com>

Hi together,

a bit more than a month ago I have released the 'collapse' package for
advanced and fast data transformation in R with an array of fast grouped
and weighted functions and facilities for efficient grouped programming in
R.

As I am preparing the next update of this package I have come across the
following: For grouping, 'collapse' uses the function 'GRP', and efficient
wrapper around data.table:::forderv for fast radix sort based grouping. To
do this the source code for forderv was copied and deparallelized. Now I
realized that an earlier deparallelized version of forderv is already fully
available in base R:
https://github.com/wch/r-source/blob/5a156a0865362bb8381dcd69ac335f5174a4f60c/src/main/radixsort.c

This function is called in base::order(..., method = "radix"). I was mildly
aware that data.table ordering has made it into base R but I first thought
the grouping feature of forder had been removed. However in fact it is
there but disabled. base::order lines 31-35 reads:

  if (method == "radix") {
    decreasing <- rep_len(as.logical(decreasing), length(z))
    return(.Internal(radixsort(na.last, decreasing, FALSE,
      TRUE, ...)))
  }

which is essentially:     return(.Internal(radixsort(na.last, decreasing,
retGrp,
      sortStr, ...))) with the retGrp arguments which returns the group
starts and the maximum group size disabled. sortStr = FALSE can be used to
do unordered groupings.

My request is if it is possible to make available these features to the
user. It would make available extremely fast ordered grouping facilities to
all developers and prevent the need for people like myself to copy this
source code. In R it could be made available through a simple function like:

radixorder <- function(..., na.last = TRUE, decreasing = FALSE, retGrp =
FALSE,  sortStr = TRUE) {
  z <- list(...)
  decreasing <- rep_len(as.logical(decreasing), length(z))
  return(.Internal(radixsort(na.last, decreasing, retGRP,
                             otharg, ...)))
}

Alternatively a macro in the C API like R_orderVector i.e.
R_orderVectorRadix would be great.

Best regards,

Sebastian



<https://www.avast.com/sig-email?utm_medium=email&utm_source=link&utm_campaign=sig-email&utm_content=webmail>
Virenfrei.
www.avast.com
<https://www.avast.com/sig-email?utm_medium=email&utm_source=link&utm_campaign=sig-email&utm_content=webmail>
<#DAB4FAD8-2DD7-40BB-A1B8-4E2AA1F9FDF2>

	[[alternative HTML version deleted]]


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Sun May 10 17:13:07 2020
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Sun, 10 May 2020 15:13:07 +0000 (UTC)
Subject: [Rd] Minor Infelicity in Printing of Objects Nested in Lists
References: <952966889.973899.1589123587774.ref@mail.yahoo.com>
Message-ID: <952966889.973899.1589123587774@mail.yahoo.com>

Currently S3 objects nested in generic vectors cause the tag buffer to be reset.? This feels sub-optimal for those objects that don't have a print method:

> list(a=list(b='hello'))
$a
$a$b???????????????? ### <<<< notice "$a$b"
[1] "hello"


> list(a=structure(list(b='hello'), class='world'))
$a
$b?????????????????? ### <<<< notice "$b", not "$a$b"
[1] "hello"

attr(,"class")
[1] "world"

This happens because the default print method resets the tag buffer anytime it's called[1], whether by a custom print method, or by internal C code as part of the recursion into objects in `printValueRec`[2].

One possible way to "fix" this is to make it the responsibility of `printValueRec` to reset the tag buffer on exit from the top level, but that would mean always having an active context to catch errors instead of just for win32 as is the case now.? Additionally, print method authors may themselves intentionally rely on `print.default` for some parts their output, in which case it may be desirable to reset the tag buffer.

Obviously not a big deal.? In my use case it can make it difficult to identify what part of a complex object caused a difference in a diff with a few neighboring context lines.? Just mentioning it in case there is interest in doing something about it.? If so I'll be happy to create a bugzilla ticket and assist with patches/testing.

Best,

B.

[1]: https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/print.c#L309
[2]: https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/print.c#L570


From ||one| @end|ng |rom r@tud|o@com  Sun May 10 18:22:13 2020
From: ||one| @end|ng |rom r@tud|o@com (Lionel Henry)
Date: Sun, 10 May 2020 18:22:13 +0200
Subject: [Rd] Minor Infelicity in Printing of Objects Nested in Lists
In-Reply-To: <952966889.973899.1589123587774@mail.yahoo.com>
References: <952966889.973899.1589123587774.ref@mail.yahoo.com>
 <952966889.973899.1589123587774@mail.yahoo.com>
Message-ID: <CAJf4E3rYXEQyjaMx8eC=z8GcExsq+ANj_4yPGtd0+JAeON0fLA@mail.gmail.com>

Hello,

The main reason for resetting the tagbuf in `print.default()` and
other entry points to the print routine is that it is currently not
reset on exit. Creating a context to reset it on exit to its last
value might work. This should be done in the entry points rather than
in print-value-rec though, since callers of the latter might write to
the tagbuf.

Another solution to this problem is proposed with the first patch in
https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17610. Maybe I
should extract this patch into its own entry so the discussion can be
separate from the other patches.

The idea is to pass the tag buffer as argument to the `print()`
generic so it can be passed again to `print.default()`. The added
benefit is that print methods can then pass their own tagbuf, which
should be useful for printing special list-like objects.

The downside is that it is technically a breaking change for methods
that pass their dots to other functions (there's a couple of
occurrences of this in the base packages). However I think such usage
is not recommended for print methods because `print()` is a recursive
generic that dispatches on heterogeneous objects. For example the user
might pass `digits = 2` to print a list of objects. The print methods
should make sure they ignore any unknown arguments.

Best,
Lionel

On 5/10/20, brodie gaslam via R-devel <r-devel at r-project.org> wrote:
> Currently S3 objects nested in generic vectors cause the tag buffer to be
> reset.? This feels sub-optimal for those objects that don't have a print
> method:
>
>> list(a=list(b='hello'))
> $a
> $a$b???????????????? ### <<<< notice "$a$b"
> [1] "hello"
>
>
>> list(a=structure(list(b='hello'), class='world'))
> $a
> $b?????????????????? ### <<<< notice "$b", not "$a$b"
> [1] "hello"
>
> attr(,"class")
> [1] "world"
>
> This happens because the default print method resets the tag buffer anytime
> it's called[1], whether by a custom print method, or by internal C code as
> part of the recursion into objects in `printValueRec`[2].
>
> One possible way to "fix" this is to make it the responsibility of
> `printValueRec` to reset the tag buffer on exit from the top level, but that
> would mean always having an active context to catch errors instead of just
> for win32 as is the case now.? Additionally, print method authors may
> themselves intentionally rely on `print.default` for some parts their
> output, in which case it may be desirable to reset the tag buffer.
>
> Obviously not a big deal.? In my use case it can make it difficult to
> identify what part of a complex object caused a difference in a diff with a
> few neighboring context lines.? Just mentioning it in case there is interest
> in doing something about it.? If so I'll be happy to create a bugzilla
> ticket and assist with patches/testing.
>
> Best,
>
> B.
>
> [1]:
> https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/print.c#L309
> [2]:
> https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/print.c#L570
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Sun May 10 20:46:48 2020
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Sun, 10 May 2020 18:46:48 +0000 (UTC)
Subject: [Rd] Minor Infelicity in Printing of Objects Nested in Lists
In-Reply-To: <CAJf4E3rYXEQyjaMx8eC=z8GcExsq+ANj_4yPGtd0+JAeON0fLA@mail.gmail.com>
References: <952966889.973899.1589123587774.ref@mail.yahoo.com>
 <952966889.973899.1589123587774@mail.yahoo.com>
 <CAJf4E3rYXEQyjaMx8eC=z8GcExsq+ANj_4yPGtd0+JAeON0fLA@mail.gmail.com>
Message-ID: <9084527.1033395.1589136408991@mail.yahoo.com>

 > On Sunday, May 10, 2020, 12:24:17 PM EDT, Lionel Henry <lionel at rstudio.com> wrote:
>
> The main reason for resetting the tagbuf in `print.default()` and
> other entry points to the print routine is that it is currently not
> reset on exit. Creating a context to reset it on exit to its last
> value might work. This should be done in the entry points rather than
> in print-value-rec though, since callers of the latter might write to
> the tagbuf.
>
> Another solution to this problem is proposed with the first patch in
> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17610. Maybe I
> should extract this patch into its own entry so the discussion can be
> separate from the other patches.

Ah, looks like the exact same issue, at least the first patch.? I'm not
 wed to any particular solution, but I am happy to help test/work on this
if there is interest in addressing this.

Best,

B.

>On 5/10/20, brodie gaslam via R-devel <r-devel at r-project.org> wrote:
>> Currently S3 objects nested in generic vectors cause the tag buffer to be
>> reset.? This feels sub-optimal for those objects that don't have a print
>> method:
>>
>>> list(a=list(b='hello'))
>> $a
>> $a$b???????????????? ### <<<< notice "$a$b"
>> [1] "hello"
>>
>>
>>> list(a=structure(list(b='hello'), class='world'))
>> $a
>> $b?????????????????? ### <<<< notice "$b", not "$a$b"
>> [1] "hello"
>>
>> attr(,"class")
>> [1] "world"


From Thom@@@SOEIRO @end|ng |rom @p-hm@|r  Mon May 11 00:27:01 2020
From: Thom@@@SOEIRO @end|ng |rom @p-hm@|r (SOEIRO Thomas)
Date: Sun, 10 May 2020 22:27:01 +0000
Subject: [Rd] justify hard coded in format.ftable
Message-ID: <8f85a69cd0474adfa6e77495c961fb2a@SCWPR-EXDAG1-6A.aphm.ap-hm.fr>

Dear all,

justify argument is hard coded in format.ftable:

cbind(apply(LABS, 2L, format, justify = "left"),
      apply(DATA, 2L, format, justify = "right"))

It would be useful to have the possibility to modify the argument between c("left", "right", "centre", "none") as in format.default.

The lines could be changed to:

if(length(justify) != 2)
  stop("justify must be length 2")
cbind(apply(LABS, 2L, format, justify = justify[1]),
      apply(DATA, 2L, format, justify = justify[2]))

The argument justify could defaults to c("left", "right") for backward compatibility.

It could then allow:
ftab <- ftable(wool + tension ~ breaks, warpbreaks)
format.ftable(ftab, justify = c("none", "none"))

Best regards,

Thomas


From irederik m@iii@g oii oib@@et  Wed May  6 21:26:07 2020
From: irederik m@iii@g oii oib@@et (irederik m@iii@g oii oib@@et)
Date: Wed, 6 May 2020 12:26:07 -0700
Subject: [Rd] defining r audio connections
In-Reply-To: <d6158363-d59a-3fa9-7ccd-0a80985094ab@gmail.com>
References: <20200506170919.GA34684@localhost>
 <d6158363-d59a-3fa9-7ccd-0a80985094ab@gmail.com>
Message-ID: <20200506192607.GB34684-3160@localhost>


On Wed, May 06, 2020 at 02:26:34PM -0400, Duncan Murdoch wrote:
>On 06/05/2020 1:09 p.m., frederik at ofb.net wrote:
>>I only want an object that I can use `readBin` and `writeBin` on, to read and write audio data using e.g. `snd_pcm_writei` which is part of the `alsa-lib` package.
>
>I don't think R supports user-defined connections, but probably 
>writing readBin and writeBin equivalents specific to your library 
>wouldn't be any harder than creating a connection.  For those, you 
>will probably want to work with an "external pointer" (see Writing R 
>Extensions). Rcpp probably has support for these if you're working in 
>C++.

Thank you, yes I was following

https://stackoverflow.com/questions/59384221/proper-way-to-return-a-pointer-to-a-new-object-from-an-rcpp-function

which uses XPtr.

I'll forget about making a connection, if it is not supported.

I had this idea that I would be able to use the same code for writing to a file as to an audio device, but I can create my own class for that.

Frederick


From ru@@e|| @end|ng |rom r@|mond@net  Mon May 11 21:40:34 2020
From: ru@@e|| @end|ng |rom r@|mond@net (Russell Almond)
Date: Mon, 11 May 2020 15:40:34 -0400
Subject: [Rd] Segfault on read.socket with long message
Message-ID: <2f337cd2-a94b-e86a-c71d-6d8e4981eceb@ralmond.net>


I'm trying to implement a connection between two processes using a 
simple socket mechanism.  The messages are rather long object stored as 
JSON.

R is crashing with a segmentation fault when I try to read my test 
message (which is 5305 bytes long).  I first send the length in bytes 
and then I send the actual message.

Here is my R code:

library(jsonlite)
library(futile.logger)
listenerloop <- function (port) {
   flog.trace("Opening Socket on port %d",port)
   sock <- make.socket("localhost",port,server=TRUE)
   on.exit({
     close.socket(sock)
     flog.trace("Closing Socket on port %d",port)
     })
   repeat {
     ## Input a hunk of stuff up to a blank line.
     output <- character()
     repeat {
       inlen <- read.socket(sock,loop=TRUE)
       flog.trace("Got message of length %s",inlen)
       if (inlen=="quit") break
       inmess <- fromJSON(read.socket(sock,as.integer(inlen)),false)
       outmess <- doProcess(inmess)
       output <- toJSON(outmess)
       flog.trace("Sending message of length %s",nchar(output))
       write.socket(sock,paste(nchar(output),"\n"))
       write.socket(sock,output)
     }
   }
}

doProcess() is the payload, but it is not getting that far.  Instead I get:

 > listenerloop(12525)
TRACE [2020-05-11 15:21:00] Opening Socket on port 12525
TRACE [2020-05-11 15:21:03] Got message of length 5305
{"StudentRecord":null,"Message":{"_id":624,"app":"ecd://terc.edu/Zoombinis/","uid":2,"context":"PIZZA_PASS1","sender":"DataArcade","mess":"Last 
Transaction","timestamp":"1570279373.109","processed":false,"data":{"PP29_N_Rejects_Current_Z":0,"PP106_Avg

  *** caught segfault ***
address 0x7ffdf533d0a8, cause 'memory not mapped'

Traceback:
  1: read.socket(sock, as.integer(inlen))
  2: fromJSON(read.socket(sock, as.integer(inlen)), false)
  3: listenerloop(12525)

I have two questions:

1) Can somebody file a bug report on this?  I strongly suspect that 
there is an uncaught error in read.socket().  I'm happy to help, but I 
don't have access to bugzilla.

2) Anybody know how to read/write long messages to a socket in R?

Thanks in advance.
   --Russell Almond




-- 
Russell G. Almond
https://ralmond.net
almond at acm.org


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue May 12 11:30:02 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 12 May 2020 11:30:02 +0200
Subject: [Rd] Segfault on read.socket with long message
In-Reply-To: <2f337cd2-a94b-e86a-c71d-6d8e4981eceb@ralmond.net>
References: <2f337cd2-a94b-e86a-c71d-6d8e4981eceb@ralmond.net>
Message-ID: <99e31966-a838-3176-36e1-2d7391077017@gmail.com>

Thanks for the report, but it is unlikely anyone would be able to help 
just based on this code fragment. We need a small and minimal but 
complete reproducible example. That example should not use any 
contributed packages (a contributed package may be corrupting memory, 
which may cause R to crash).

It is easy to get a bugzilla account - please see 
https://www.r-project.org/bugs.html for more and for advice on how to 
write bug reports. You could even send the bug report to this list, but 
the key thing is the reproducible example.

Thanks
Tomas

On 5/11/20 9:40 PM, Russell Almond wrote:
>
> I'm trying to implement a connection between two processes using a 
> simple socket mechanism.? The messages are rather long object stored 
> as JSON.
>
> R is crashing with a segmentation fault when I try to read my test 
> message (which is 5305 bytes long).? I first send the length in bytes 
> and then I send the actual message.
>
> Here is my R code:
>
> library(jsonlite)
> library(futile.logger)
> listenerloop <- function (port) {
> ? flog.trace("Opening Socket on port %d",port)
> ? sock <- make.socket("localhost",port,server=TRUE)
> ? on.exit({
> ??? close.socket(sock)
> ??? flog.trace("Closing Socket on port %d",port)
> ??? })
> ? repeat {
> ??? ## Input a hunk of stuff up to a blank line.
> ??? output <- character()
> ??? repeat {
> ????? inlen <- read.socket(sock,loop=TRUE)
> ????? flog.trace("Got message of length %s",inlen)
> ????? if (inlen=="quit") break
> ????? inmess <- fromJSON(read.socket(sock,as.integer(inlen)),false)
> ????? outmess <- doProcess(inmess)
> ????? output <- toJSON(outmess)
> ????? flog.trace("Sending message of length %s",nchar(output))
> ????? write.socket(sock,paste(nchar(output),"\n"))
> ????? write.socket(sock,output)
> ??? }
> ? }
> }
>
> doProcess() is the payload, but it is not getting that far. Instead I 
> get:
>
> > listenerloop(12525)
> TRACE [2020-05-11 15:21:00] Opening Socket on port 12525
> TRACE [2020-05-11 15:21:03] Got message of length 5305
> {"StudentRecord":null,"Message":{"_id":624,"app":"ecd://terc.edu/Zoombinis/","uid":2,"context":"PIZZA_PASS1","sender":"DataArcade","mess":"Last 
> Transaction","timestamp":"1570279373.109","processed":false,"data":{"PP29_N_Rejects_Current_Z":0,"PP106_Avg 
>
>
> ?*** caught segfault ***
> address 0x7ffdf533d0a8, cause 'memory not mapped'
>
> Traceback:
> ?1: read.socket(sock, as.integer(inlen))
> ?2: fromJSON(read.socket(sock, as.integer(inlen)), false)
> ?3: listenerloop(12525)
>
> I have two questions:
>
> 1) Can somebody file a bug report on this?? I strongly suspect that 
> there is an uncaught error in read.socket().? I'm happy to help, but I 
> don't have access to bugzilla.
>
> 2) Anybody know how to read/write long messages to a socket in R?
>
> Thanks in advance.
> ? --Russell Almond
>
>
>
>


From ru@@e|| @end|ng |rom r@|mond@net  Tue May 12 17:25:00 2020
From: ru@@e|| @end|ng |rom r@|mond@net (Russell Almond)
Date: Tue, 12 May 2020 11:25:00 -0400
Subject: [Rd] Segfault on read.socket with long message
In-Reply-To: <99e31966-a838-3176-36e1-2d7391077017@gmail.com>
References: <2f337cd2-a94b-e86a-c71d-6d8e4981eceb@ralmond.net>
 <99e31966-a838-3176-36e1-2d7391077017@gmail.com>
Message-ID: <d0871d02-af00-4e8c-27bc-016afd44371e@ralmond.net>

Thanks for the link.? Somehow the information about how to join the 
bugzilla site was not available at bugzilla and buried in the CRAN web 
site instructions on reporting bugs (which pointed me at Bugzilla and 
not the page you showed me).

The example is pretty minimal.? I left the tracing statements 
(flog.trace()) and the toJSON, fromJSON in as I thought they might 
provide some context for another method of approaching my problem.

It looks like I'm getting better results using socketConnection() rather 
than read.socket(), so I'll pursue that solution (but still file a bug 
report, as it seg faults are never good).

 ??? --Russell


On 5/12/20 5:30 AM, Tomas Kalibera wrote:
> Thanks for the report, but it is unlikely anyone would be able to help 
> just based on this code fragment. We need a small and minimal but 
> complete reproducible example. That example should not use any 
> contributed packages (a contributed package may be corrupting memory, 
> which may cause R to crash).
>
> It is easy to get a bugzilla account - please see 
> https://www.r-project.org/bugs.html for more and for advice on how to 
> write bug reports. You could even send the bug report to this list, 
> but the key thing is the reproducible example.
>
> Thanks
> Tomas
>
> On 5/11/20 9:40 PM, Russell Almond wrote:
>>
>> I'm trying to implement a connection between two processes using a 
>> simple socket mechanism.? The messages are rather long object stored 
>> as JSON.
>>
>> R is crashing with a segmentation fault when I try to read my test 
>> message (which is 5305 bytes long).? I first send the length in bytes 
>> and then I send the actual message.
>>
>> Here is my R code:
>>
>> library(jsonlite)
>> library(futile.logger)
>> listenerloop <- function (port) {
>> ? flog.trace("Opening Socket on port %d",port)
>> ? sock <- make.socket("localhost",port,server=TRUE)
>> ? on.exit({
>> ??? close.socket(sock)
>> ??? flog.trace("Closing Socket on port %d",port)
>> ??? })
>> ? repeat {
>> ??? ## Input a hunk of stuff up to a blank line.
>> ??? output <- character()
>> ??? repeat {
>> ????? inlen <- read.socket(sock,loop=TRUE)
>> ????? flog.trace("Got message of length %s",inlen)
>> ????? if (inlen=="quit") break
>> ????? inmess <- fromJSON(read.socket(sock,as.integer(inlen)),false)
>> ????? outmess <- doProcess(inmess)
>> ????? output <- toJSON(outmess)
>> ????? flog.trace("Sending message of length %s",nchar(output))
>> ????? write.socket(sock,paste(nchar(output),"\n"))
>> ????? write.socket(sock,output)
>> ??? }
>> ? }
>> }
>>
>> doProcess() is the payload, but it is not getting that far. Instead I 
>> get:
>>
>> > listenerloop(12525)
>> TRACE [2020-05-11 15:21:00] Opening Socket on port 12525
>> TRACE [2020-05-11 15:21:03] Got message of length 5305
>> {"StudentRecord":null,"Message":{"_id":624,"app":"ecd://terc.edu/Zoombinis/","uid":2,"context":"PIZZA_PASS1","sender":"DataArcade","mess":"Last 
>> Transaction","timestamp":"1570279373.109","processed":false,"data":{"PP29_N_Rejects_Current_Z":0,"PP106_Avg 
>>
>>
>> ?*** caught segfault ***
>> address 0x7ffdf533d0a8, cause 'memory not mapped'
>>
>> Traceback:
>> ?1: read.socket(sock, as.integer(inlen))
>> ?2: fromJSON(read.socket(sock, as.integer(inlen)), false)
>> ?3: listenerloop(12525)
>>
>> I have two questions:
>>
>> 1) Can somebody file a bug report on this?? I strongly suspect that 
>> there is an uncaught error in read.socket().? I'm happy to help, but 
>> I don't have access to bugzilla.
>>
>> 2) Anybody know how to read/write long messages to a socket in R?
>>
>> Thanks in advance.
>> ? --Russell Almond
>>
>>
>>
>>
>
-- 
Russell G. Almond
https://ralmond.net
almond at acm.org


	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue May 12 17:41:46 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 12 May 2020 17:41:46 +0200
Subject: [Rd] Segfault on read.socket with long message
In-Reply-To: <d0871d02-af00-4e8c-27bc-016afd44371e@ralmond.net>
References: <2f337cd2-a94b-e86a-c71d-6d8e4981eceb@ralmond.net>
 <99e31966-a838-3176-36e1-2d7391077017@gmail.com>
 <d0871d02-af00-4e8c-27bc-016afd44371e@ralmond.net>
Message-ID: <7345c9ce-dd9d-a080-0b3a-b27f72764770@gmail.com>


On 5/12/20 5:25 PM, Russell Almond wrote:
>
> Thanks for the link.? Somehow the information about how to join the 
> bugzilla site was not available at bugzilla and buried in the CRAN web 
> site instructions on reporting bugs (which pointed me at Bugzilla and 
> not the page you showed me).
>
> The example is pretty minimal.? I left the tracing statements 
> (flog.trace()) and the toJSON, fromJSON in as I thought they might 
> provide some context for another method of approaching my problem.
>
> It looks like I'm getting better results using socketConnection() 
> rather than read.socket(), so I'll pursue that solution (but still 
> file a bug report, as it seg faults are never good).
>
Thanks, a report with that example would be useful - if using 
socketConnection() fixes the problem, I guess it makes it more likely 
that the bug is in R, but one never knows before the case is fully analyzed.

Tomas

> ??? --Russell
>
>
> On 5/12/20 5:30 AM, Tomas Kalibera wrote:
>> Thanks for the report, but it is unlikely anyone would be able to 
>> help just based on this code fragment. We need a small and minimal 
>> but complete reproducible example. That example should not use any 
>> contributed packages (a contributed package may be corrupting memory, 
>> which may cause R to crash).
>>
>> It is easy to get a bugzilla account - please see 
>> https://www.r-project.org/bugs.html for more and for advice on how to 
>> write bug reports. You could even send the bug report to this list, 
>> but the key thing is the reproducible example.
>>
>> Thanks
>> Tomas
>>
>> On 5/11/20 9:40 PM, Russell Almond wrote:
>>>
>>> I'm trying to implement a connection between two processes using a 
>>> simple socket mechanism.? The messages are rather long object stored 
>>> as JSON.
>>>
>>> R is crashing with a segmentation fault when I try to read my test 
>>> message (which is 5305 bytes long).? I first send the length in 
>>> bytes and then I send the actual message.
>>>
>>> Here is my R code:
>>>
>>> library(jsonlite)
>>> library(futile.logger)
>>> listenerloop <- function (port) {
>>> ? flog.trace("Opening Socket on port %d",port)
>>> ? sock <- make.socket("localhost",port,server=TRUE)
>>> ? on.exit({
>>> ??? close.socket(sock)
>>> ??? flog.trace("Closing Socket on port %d",port)
>>> ??? })
>>> ? repeat {
>>> ??? ## Input a hunk of stuff up to a blank line.
>>> ??? output <- character()
>>> ??? repeat {
>>> ????? inlen <- read.socket(sock,loop=TRUE)
>>> ????? flog.trace("Got message of length %s",inlen)
>>> ????? if (inlen=="quit") break
>>> ????? inmess <- fromJSON(read.socket(sock,as.integer(inlen)),false)
>>> ????? outmess <- doProcess(inmess)
>>> ????? output <- toJSON(outmess)
>>> ????? flog.trace("Sending message of length %s",nchar(output))
>>> ????? write.socket(sock,paste(nchar(output),"\n"))
>>> ????? write.socket(sock,output)
>>> ??? }
>>> ? }
>>> }
>>>
>>> doProcess() is the payload, but it is not getting that far. Instead 
>>> I get:
>>>
>>> > listenerloop(12525)
>>> TRACE [2020-05-11 15:21:00] Opening Socket on port 12525
>>> TRACE [2020-05-11 15:21:03] Got message of length 5305
>>> {"StudentRecord":null,"Message":{"_id":624,"app":"ecd://terc.edu/Zoombinis/","uid":2,"context":"PIZZA_PASS1","sender":"DataArcade","mess":"Last 
>>> Transaction","timestamp":"1570279373.109","processed":false,"data":{"PP29_N_Rejects_Current_Z":0,"PP106_Avg 
>>>
>>>
>>> ?*** caught segfault ***
>>> address 0x7ffdf533d0a8, cause 'memory not mapped'
>>>
>>> Traceback:
>>> ?1: read.socket(sock, as.integer(inlen))
>>> ?2: fromJSON(read.socket(sock, as.integer(inlen)), false)
>>> ?3: listenerloop(12525)
>>>
>>> I have two questions:
>>>
>>> 1) Can somebody file a bug report on this?? I strongly suspect that 
>>> there is an uncaught error in read.socket().? I'm happy to help, but 
>>> I don't have access to bugzilla.
>>>
>>> 2) Anybody know how to read/write long messages to a socket in R?
>>>
>>> Thanks in advance.
>>> ? --Russell Almond
>>>
>>>
>>>
>>>
>>
> -- 
> Russell G. Almond
> https://ralmond.net
> almond at acm.org



	[[alternative HTML version deleted]]


From wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n|  Tue May 12 20:05:32 2020
From: wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n| (Viechtbauer, Wolfgang (SP))
Date: Tue, 12 May 2020 18:05:32 +0000
Subject: [Rd] S3 method dispatch for methods in local environments
Message-ID: <eed0ec0eb8e647c49250eae4dc9570db@UM-MAIL3214.unimaas.nl>

Dear All,

In R 3.6.3 (and earlier), method dispatch used to work for methods stored in local environments that are attached to the search path. For example:

myfun <- function(y) {
   out <- list(y=y)
   class(out) <- "myclass"
   return(out)
}

print.myclass <- function(x, ...) print(formatC(x$y, format="f", digits=5))

myfun(1:4)

# prints: [1] "1.00000" "2.00000" "3.00000" "4.00000"

rm(print.myclass)
myenv <- new.env()
myenv$print.myclass <- local(function(x, ...) print(formatC(x$y, format="f", digits=5)), myenv)
attach(myenv)
myfun(1:4)

# still prints: [1] "1.00000" "2.00000" "3.00000" "4.00000"

But since R 4.0.0, this no longer words and the above prints:

$y
[1] 1 2 3 4

attr(,"class")
[1] "myclass"

Is this intended? And is there a way to still make this work?

Best,
Wolfgang


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue May 12 21:05:15 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 12 May 2020 21:05:15 +0200
Subject: [Rd] S3 method dispatch for methods in local environments
In-Reply-To: <eed0ec0eb8e647c49250eae4dc9570db@UM-MAIL3214.unimaas.nl>
References: <eed0ec0eb8e647c49250eae4dc9570db@UM-MAIL3214.unimaas.nl>
Message-ID: <24250.62315.82219.364840@stat.math.ethz.ch>

>>>>> Viechtbauer, Wolfgang (SP) 
>>>>>     on Tue, 12 May 2020 18:05:32 +0000 writes:

    > Dear All,
    > In R 3.6.3 (and earlier), method dispatch used to work for methods stored in local environments that are attached to the search path. For example:

    > myfun <- function(y) {
    > out <- list(y=y)
    > class(out) <- "myclass"
    > return(out)
    > }

    > print.myclass <- function(x, ...) print(formatC(x$y, format="f", digits=5))

    > myfun(1:4)

    > # prints: [1] "1.00000" "2.00000" "3.00000" "4.00000"

    > rm(print.myclass)
    > myenv <- new.env()
    > myenv$print.myclass <- local(function(x, ...) print(formatC(x$y, format="f", digits=5)), myenv)
    > attach(myenv)
    > myfun(1:4)

    > # still prints: [1] "1.00000" "2.00000" "3.00000" "4.00000"

    > But since R 4.0.0, this no longer words and the above prints:

    > $y
    > [1] 1 2 3 4

    > attr(,"class")
    > [1] "myclass"

    > Is this intended? 

yes, most probably, unless

    > And is there a way to still make this work?

Using  the new

       .S3method(<generic>, <class>, <method_function>)

had been intended as substitute.  Can you try it with your
attached-environment (which makes sense!)  approach ?

Best,
Martin


From wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n|  Tue May 12 21:13:01 2020
From: wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n| (Viechtbauer, Wolfgang (SP))
Date: Tue, 12 May 2020 19:13:01 +0000
Subject: [Rd] S3 method dispatch for methods in local environments
In-Reply-To: <24250.62315.82219.364840@stat.math.ethz.ch>
References: <eed0ec0eb8e647c49250eae4dc9570db@UM-MAIL3214.unimaas.nl>
 <24250.62315.82219.364840@stat.math.ethz.ch>
Message-ID: <e830a1384d1940acacc370178464e9ac@UM-MAIL3214.unimaas.nl>

Indeed, that works:

myfun <- function(y) {
   out <- list(y=y)
   class(out) <- "myclass"
   return(out)
}

myenv <- new.env()
myenv$print.myclass <- local(function(x, ...) print(formatC(x$y, format="f", digits=5)), new.env(myenv))
.S3method("print", "myclass", myenv$print.myclass)
attach(myenv)
myfun(1:4)

# [1] "1.00000" "2.00000" "3.00000" "4.00000"

Thanks for the tip!

Best,
Wolfgang

>-----Original Message-----
>From: Martin Maechler [mailto:maechler at stat.math.ethz.ch]
>Sent: Tuesday, 12 May, 2020 21:05
>To: Viechtbauer, Wolfgang (SP)
>Cc: r-devel (r-devel at r-project.org)
>Subject: Re: [Rd] S3 method dispatch for methods in local environments
>
>>>>>> Viechtbauer, Wolfgang (SP)
>>>>>>     on Tue, 12 May 2020 18:05:32 +0000 writes:
>
>    > Dear All,
>    > In R 3.6.3 (and earlier), method dispatch used to work for methods
>stored in local environments that are attached to the search path. For
>example:
>
>    > myfun <- function(y) {
>    > out <- list(y=y)
>    > class(out) <- "myclass"
>    > return(out)
>    > }
>
>    > print.myclass <- function(x, ...) print(formatC(x$y, format="f",
>digits=5))
>
>    > myfun(1:4)
>
>    > # prints: [1] "1.00000" "2.00000" "3.00000" "4.00000"
>
>    > rm(print.myclass)
>    > myenv <- new.env()
>    > myenv$print.myclass <- local(function(x, ...) print(formatC(x$y,
>format="f", digits=5)), myenv)
>    > attach(myenv)
>    > myfun(1:4)
>
>    > # still prints: [1] "1.00000" "2.00000" "3.00000" "4.00000"
>
>    > But since R 4.0.0, this no longer words and the above prints:
>
>    > $y
>    > [1] 1 2 3 4
>
>    > attr(,"class")
>    > [1] "myclass"
>
>    > Is this intended?
>
>yes, most probably, unless
>
>    > And is there a way to still make this work?
>
>Using  the new
>
>       .S3method(<generic>, <class>, <method_function>)
>
>had been intended as substitute.  Can you try it with your
>attached-environment (which makes sense!)  approach ?
>
>Best,
>Martin


From @eb@meyer @end|ng |rom |@u@de  Tue May 12 21:17:25 2020
From: @eb@meyer @end|ng |rom |@u@de (Sebastian Meyer)
Date: Tue, 12 May 2020 21:17:25 +0200
Subject: [Rd] S3 method dispatch for methods in local environments
In-Reply-To: <eed0ec0eb8e647c49250eae4dc9570db@UM-MAIL3214.unimaas.nl>
References: <eed0ec0eb8e647c49250eae4dc9570db@UM-MAIL3214.unimaas.nl>
Message-ID: <c03dbde7-9205-581b-da38-91553074aed2@fau.de>

Dear Wolfgang,

I think this new behaviour is related to the following R 4.0.0 NEWS item:

> S3 method lookup now by default skips the elements of the search path between the global and base environments. 

Your environment "myenv" is attached at position 2 of the search() path
and thus now skipped in S3 method lookup.

I have just noticed that

attr(methods(class="myclass"), "info")
getS3method("print", "myclass")

both still find your function in myenv although the generic's
UseMethod() won't. I find this a bit confusing.

A solution to make R >= 4.0.0 find your method is to register the S3
method using the new function .S3method (intended for R scripts, not
packages). After running

.S3method("print", "myclass", myenv$print.myclass)

your method will be found from the generic.

Best regards,

	Sebastian


Am 12.05.20 um 20:05 schrieb Viechtbauer, Wolfgang (SP):
> Dear All,
> 
> In R 3.6.3 (and earlier), method dispatch used to work for methods stored in local environments that are attached to the search path. For example:
> 
> myfun <- function(y) {
>    out <- list(y=y)
>    class(out) <- "myclass"
>    return(out)
> }
> 
> print.myclass <- function(x, ...) print(formatC(x$y, format="f", digits=5))
> 
> myfun(1:4)
> 
> # prints: [1] "1.00000" "2.00000" "3.00000" "4.00000"
> 
> rm(print.myclass)
> myenv <- new.env()
> myenv$print.myclass <- local(function(x, ...) print(formatC(x$y, format="f", digits=5)), myenv)
> attach(myenv)
> myfun(1:4)
> 
> # still prints: [1] "1.00000" "2.00000" "3.00000" "4.00000"
> 
> But since R 4.0.0, this no longer words and the above prints:
> 
> $y
> [1] 1 2 3 4
> 
> attr(,"class")
> [1] "myclass"
> 
> Is this intended? And is there a way to still make this work?
> 
> Best,
> Wolfgang
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n|  Tue May 12 23:35:32 2020
From: wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n| (Viechtbauer, Wolfgang (SP))
Date: Tue, 12 May 2020 21:35:32 +0000
Subject: [Rd] S3 method dispatch for methods in local environments
In-Reply-To: <c03dbde7-9205-581b-da38-91553074aed2@fau.de>
References: <eed0ec0eb8e647c49250eae4dc9570db@UM-MAIL3214.unimaas.nl>
 <c03dbde7-9205-581b-da38-91553074aed2@fau.de>
Message-ID: <850765b92969497b867d2ac7f630394c@UM-MAIL3214.unimaas.nl>

Thanks, Sebastian, for the pointer to the NEWS item. After some further search, I also found this in the R Blog:

https://developer.r-project.org/Blog/public/2019/08/19/s3-method-lookup/

Best,
Wolfgang

>-----Original Message-----
>From: R-devel [mailto:r-devel-bounces at r-project.org] On Behalf Of Sebastian
>Meyer
>Sent: Tuesday, 12 May, 2020 21:17
>To: r-devel at r-project.org
>Subject: Re: [Rd] S3 method dispatch for methods in local environments
>
>Dear Wolfgang,
>
>I think this new behaviour is related to the following R 4.0.0 NEWS item:
>
>> S3 method lookup now by default skips the elements of the search path
>between the global and base environments.
>
>Your environment "myenv" is attached at position 2 of the search() path
>and thus now skipped in S3 method lookup.
>
>I have just noticed that
>
>attr(methods(class="myclass"), "info")
>getS3method("print", "myclass")
>
>both still find your function in myenv although the generic's
>UseMethod() won't. I find this a bit confusing.
>
>A solution to make R >= 4.0.0 find your method is to register the S3
>method using the new function .S3method (intended for R scripts, not
>packages). After running
>
>.S3method("print", "myclass", myenv$print.myclass)
>
>your method will be found from the generic.
>
>Best regards,
>
>	Sebastian
>
>
>Am 12.05.20 um 20:05 schrieb Viechtbauer, Wolfgang (SP):
>> Dear All,
>>
>> In R 3.6.3 (and earlier), method dispatch used to work for methods stored
>in local environments that are attached to the search path. For example:
>>
>> myfun <- function(y) {
>>    out <- list(y=y)
>>    class(out) <- "myclass"
>>    return(out)
>> }
>>
>> print.myclass <- function(x, ...) print(formatC(x$y, format="f",
>digits=5))
>>
>> myfun(1:4)
>>
>> # prints: [1] "1.00000" "2.00000" "3.00000" "4.00000"
>>
>> rm(print.myclass)
>> myenv <- new.env()
>> myenv$print.myclass <- local(function(x, ...) print(formatC(x$y,
>format="f", digits=5)), myenv)
>> attach(myenv)
>> myfun(1:4)
>>
>> # still prints: [1] "1.00000" "2.00000" "3.00000" "4.00000"
>>
>> But since R 4.0.0, this no longer words and the above prints:
>>
>> $y
>> [1] 1 2 3 4
>>
>> attr(,"class")
>> [1] "myclass"
>>
>> Is this intended? And is there a way to still make this work?
>>
>> Best,
>> Wolfgang


From hp@ge@ @end|ng |rom |redhutch@org  Wed May 13 04:59:16 2020
From: hp@ge@ @end|ng |rom |redhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Tue, 12 May 2020 19:59:16 -0700
Subject: [Rd] "cd" floating in the air in the man page for paste/paste0
Message-ID: <d95d3aa1-a50d-8a00-feff-d730f9ae842d@fredhutch.org>

Hi,

While reading about the new 'recycle0' argument of paste/paste0, I 
spotted a mysterious "cd" floating in the air in the man page:

   recycle0: ?logical? indicating if zero-length character arguments (and
             all zero-length or no arguments when ?collapse? is not
             ?NULL?) should lead to the zero-length ?character(0)?.
        cd
        ^^

This is in R 4.0.0 Patched and R devel.

Cheers,
H.


-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From edd @end|ng |rom deb|@n@org  Wed May 13 05:14:33 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 12 May 2020 22:14:33 -0500
Subject: [Rd] "cd" floating in the air in the man page for paste/paste0
In-Reply-To: <d95d3aa1-a50d-8a00-feff-d730f9ae842d@fredhutch.org>
References: <d95d3aa1-a50d-8a00-feff-d730f9ae842d@fredhutch.org>
Message-ID: <24251.26137.77277.492878@rob.eddelbuettel.com>


On 12 May 2020 at 19:59, Herv? Pag?s wrote:
| While reading about the new 'recycle0' argument of paste/paste0, I 
| spotted a mysterious "cd" floating in the air in the man page:
| 
|    recycle0: ?logical? indicating if zero-length character arguments (and
|              all zero-length or no arguments when ?collapse? is not
|              ?NULL?) should lead to the zero-length ?character(0)?.
|         cd
|         ^^
| 
| This is in R 4.0.0 Patched and R devel.

Also still in r-devel as of svn r78432:

  \item{recycle0}{\code{\link{logical}} indicating if zero-length
    character arguments (and all zero-length or no arguments when
    \code{collapse} is not \code{NULL}) should lead to the zero-length
    \code{\link{character}(0)}.}cd 
                                ^^

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From pd@|gd @end|ng |rom gm@||@com  Wed May 13 08:22:12 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Wed, 13 May 2020 08:22:12 +0200
Subject: [Rd] R 4.0.1
Message-ID: <0FF33D6D-7F75-4647-9232-02A694BC7DE7@gmail.com>

A quick heads-up: We intend to have a 4.0.1 release some time early June, possibly 6/6.

For the R Core Team
Peter D.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed May 13 08:29:23 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 13 May 2020 08:29:23 +0200
Subject: [Rd] "cd" floating in the air in the man page for paste/paste0
In-Reply-To: <24251.26137.77277.492878@rob.eddelbuettel.com>
References: <d95d3aa1-a50d-8a00-feff-d730f9ae842d@fredhutch.org>
 <24251.26137.77277.492878@rob.eddelbuettel.com>
Message-ID: <35956df2-f668-2d0e-255c-5a7d39967d44@gmail.com>

Thanks, fixed.
Tomas

On 5/13/20 5:14 AM, Dirk Eddelbuettel wrote:
> On 12 May 2020 at 19:59, Herv? Pag?s wrote:
> | While reading about the new 'recycle0' argument of paste/paste0, I
> | spotted a mysterious "cd" floating in the air in the man page:
> |
> |    recycle0: ?logical? indicating if zero-length character arguments (and
> |              all zero-length or no arguments when ?collapse? is not
> |              ?NULL?) should lead to the zero-length ?character(0)?.
> |         cd
> |         ^^
> |
> | This is in R 4.0.0 Patched and R devel.
>
> Also still in r-devel as of svn r78432:
>
>    \item{recycle0}{\code{\link{logical}} indicating if zero-length
>      character arguments (and all zero-length or no arguments when
>      \code{collapse} is not \code{NULL}) should lead to the zero-length
>      \code{\link{character}(0)}.}cd
>                                  ^^
>
> Dirk
>


From tdhock5 @end|ng |rom gm@||@com  Wed May 13 20:05:04 2020
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Wed, 13 May 2020 11:05:04 -0700
Subject: [Rd] docs about _R_CHECK_FORCE_SUGGESTS_ ?
Message-ID: <CALK03d0Y9OAWPKg9hqT=-_p5OoB9YxQYnYJU5s_t7bP+o1Yy2g@mail.gmail.com>

Can someone please add documentation for that environment variable to
Writing R Extensions? An appropriate place would be section
https://cloud.r-project.org/doc/manuals/r-release/R-exts.html#Suggested-packages
which already discusses _R_CHECK_DEPENDS_ONLY_=true

	[[alternative HTML version deleted]]


From c@@rd|@g@bor @end|ng |rom gm@||@com  Wed May 13 20:06:49 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Wed, 13 May 2020 19:06:49 +0100
Subject: [Rd] docs about _R_CHECK_FORCE_SUGGESTS_ ?
In-Reply-To: <CALK03d0Y9OAWPKg9hqT=-_p5OoB9YxQYnYJU5s_t7bP+o1Yy2g@mail.gmail.com>
References: <CALK03d0Y9OAWPKg9hqT=-_p5OoB9YxQYnYJU5s_t7bP+o1Yy2g@mail.gmail.com>
Message-ID: <CABtg=KnNEweZcbD7SWiAx9DDD4OF7WDr3t8pFVa9w5LdwueatQ@mail.gmail.com>

See at https://cran.r-project.org/doc/manuals/r-devel/R-ints.html#Tools

Gabor

On Wed, May 13, 2020 at 7:05 PM Toby Hocking <tdhock5 at gmail.com> wrote:
>
> Can someone please add documentation for that environment variable to
> Writing R Extensions? An appropriate place would be section
> https://cloud.r-project.org/doc/manuals/r-release/R-exts.html#Suggested-packages
> which already discusses _R_CHECK_DEPENDS_ONLY_=true
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From g@bembecker @end|ng |rom gm@||@com  Wed May 13 21:55:53 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Wed, 13 May 2020 12:55:53 -0700
Subject: [Rd] docs about _R_CHECK_FORCE_SUGGESTS_ ?
In-Reply-To: <CABtg=KnNEweZcbD7SWiAx9DDD4OF7WDr3t8pFVa9w5LdwueatQ@mail.gmail.com>
References: <CALK03d0Y9OAWPKg9hqT=-_p5OoB9YxQYnYJU5s_t7bP+o1Yy2g@mail.gmail.com>
 <CABtg=KnNEweZcbD7SWiAx9DDD4OF7WDr3t8pFVa9w5LdwueatQ@mail.gmail.com>
Message-ID: <CAD4oTHF0z0Vik5YSFdRH_7zEksoP3YAJU_hM7gptoY=TmM7yWQ@mail.gmail.com>

Hi Toby,

As Gabor pointed out the place where the various levers R CMD check
supports is in the R-internals manual, but there is a link directly to that
section in
https://cloud.r-project.org/doc/manuals/r-release/R-exts.html#Checking-packages

It could perhaps be more prominent, perhaps by moving the paragraph that
appears in to before the detailed list of  exact tests that are performed?
I'm happy to put a patch for that together if there is a) interest, and b)
a patch is preferable to someone on R-core simply doing that migration
themselves.

I do also agree that given that _R_CHECK_DEPENDS_ONLY_ and
_R_CHECK_SUGGESTS_ONLY_
are mentioned in the section you link, it would perhaps make sense to
mention _R_CHECK_FORCE_SUGGESTS_ as well. I can put that in the patch as
well, if there is agreement from R-core that one or both of these changes
make sense.

Best,
~G

On Wed, May 13, 2020 at 11:07 AM G?bor Cs?rdi <csardi.gabor at gmail.com>
wrote:

> See at https://cran.r-project.org/doc/manuals/r-devel/R-ints.html#Tools
>
> Gabor
>
> On Wed, May 13, 2020 at 7:05 PM Toby Hocking <tdhock5 at gmail.com> wrote:
> >
> > Can someone please add documentation for that environment variable to
> > Writing R Extensions? An appropriate place would be section
> >
> https://cloud.r-project.org/doc/manuals/r-release/R-exts.html#Suggested-packages
> > which already discusses _R_CHECK_DEPENDS_ONLY_=true
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From Thom@@@SOEIRO @end|ng |rom @p-hm@|r  Wed May 13 22:27:15 2020
From: Thom@@@SOEIRO @end|ng |rom @p-hm@|r (SOEIRO Thomas)
Date: Wed, 13 May 2020 20:27:15 +0000
Subject: [Rd] justify hard coded in format.ftable
Message-ID: <f391e1ccd3a84fe1885c9e644371707e@SCWPR-EXDAG1-6A.aphm.ap-hm.fr>

Dear all,

I haven't received any feedback so far on my proposal to make "justify" argument available in stats:::format.ftable

Is this list the appropriate place for this kind of proposal?

I hope this follow-up to my message won't be taken as rude. Of course it's not meant to be, but I'm not used to the R mailing lists...

Thank you in advance for your comments,

Best,

Thomas

> Dear all,
>
> justify argument is hard coded in format.ftable:
>
> cbind(apply(LABS, 2L, format, justify = "left"),
>       apply(DATA, 2L, format, justify = "right"))
>
> It would be useful to have the possibility to modify the argument between c("left", "right", "centre", "none") as in format.default.
>
> The lines could be changed to:
>
> if(length(justify) != 2)
>   stop("justify must be length 2")
> cbind(apply(LABS, 2L, format, justify = justify[1]),
>       apply(DATA, 2L, format, justify = justify[2]))
>
> The argument justify could defaults to c("left", "right") for backward compatibility.
>
> It could then allow:
> ftab <- ftable(wool + tension ~ breaks, warpbreaks)
> format.ftable(ftab, justify = c("none", "none"))
>
> Best regards,
>
> Thomas


