From @purd|e@@ @end|ng |rom gm@||@com  Mon Apr  5 22:57:18 2021
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Tue, 6 Apr 2021 08:57:18 +1200
Subject: [Rd] python-based examples within core-package help files
Message-ID: <CAB8pepyMUbsjXgcw+N7MO9TTfkM35BCseDUY-K9dYoNDMhr2ig@mail.gmail.com>

I just noticed the following:
(Within the help file for methods::is).

supers <- extends("PythonInterface")
superRelations <- extends("PythonInterface", fullInfo = TRUE)

I was wondering:
Could we please *not* have python-based examples within core help files.

Furthermore, this example has no obvious relevance to mathematical or
statistical subject matter.

Maybe it could be rewritten to use the Matrix package.
Which would be 1000x better.
:)

I'm happy to add that to my todo list, if no one else volunteers...


From x|@oy@n@yu @end|ng |rom gm@||@com  Tue Apr  6 00:27:10 2021
From: x|@oy@n@yu @end|ng |rom gm@||@com (xiaoyan yu)
Date: Mon, 5 Apr 2021 18:27:10 -0400
Subject: [Rd] R extension memory leak detection question
In-Reply-To: <CAJf4E3pJiF4U=w89P1UH6jDFbNM6Mwxu=r8EDfGjbtNmeLesuw@mail.gmail.com>
References: <CANjVfJ2xXfinnpYgEoH_0dwvG=29FFMinuV+1cOueSrRMNyq9A@mail.gmail.com>
 <b0b80c39-2931-cd4e-ef6f-5cff9e9678c8@gmail.com>
 <CAJf4E3pJiF4U=w89P1UH6jDFbNM6Mwxu=r8EDfGjbtNmeLesuw@mail.gmail.com>
Message-ID: <CANjVfJ3gc7+U2-ep4-CeJWDHa7SivkqvBx2sxkD3tA1mdv5DMQ@mail.gmail.com>

Thank you all for your help.
We embedded R in our program and found the memory in the process
accumulated while our expectation is that the memory will go down after
each R evaluation.
I started to write a test program with only a few lines of R embedded codes
and found the memory never went down even after R library is unloaded.
Please find more details in the readme and test program at
https://github.com/xiaoyanyuvt/RMemTest

Thanks,
Xiaoyan


On Fri, Mar 19, 2021 at 2:21 PM Lionel Henry <lionel at rstudio.com> wrote:

> > Still, memory leaks are possible if the program forgets about a
> > pointer to some piece of memory no longer needed, and keeps that
> > pointer in say some global structure. Such memory leaks would not be
> > found using address sanitizer.
>
> We had a few cases of this in the past. Given the difficulty of
> tracing the leaking references, we wrote this package for taking
> snapshots of the R heap and finding dominators and shortest paths
> between nodes:
>
> Repo: https://github.com/r-lib/memtools
> Vignette: https://memtools.r-lib.org/articles/memtools.html
>
> One issue that complicates taking snapshots is that R doesn't expose
> the GC roots. In practice, only the precious list is needed I think.
> Would you consider a patch that allows retrieving the precious list
> for debugging purposes via a `.Internal()` call?
>
> Best,
> Lionel
>
>
> On 3/15/21, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> > On 3/12/21 7:43 PM, xiaoyan yu wrote:
> >> I am writing C++ program based on R extensions and also try to test the
> >> program with google address sanitizer.
> >>
> >> I thought if I don't protect the variable from the allocation API such
> as
> >> Rf_allocVector, there will be a memory leak. However, the address
> >> sanitizer
> >> didn't report it. Is my understanding correct? Or I will see the memory
> >> leak only if I compile R source code with the address sanitizer.
> >
> > Yes, you should use special options for compilation and linking to use
> > address sanitizer. See Writing R Extensions, section 4.3.3.
> >
> > If you allocate an R object using Rf_allocVector(), but don't protect
> > it, it means this object is available for the garbage collector to
> > reclaim. So it is not a memory leak.
> >
> > Memory leaks with a garbage collector are much less common than without,
> > because if the program loses a pointer to some piece of memory, that
> > piece will automatically be reclaimed (not leaked). Still, memory leaks
> > are possible if the program forgets about a pointer to some piece of
> > memory no longer needed, and keeps that pointer in say some global
> > structure. Such memory leaks would not be found using address sanitizer.
> >
> > Address sanitizer/Undefined behavior sanitizer can sometimes find errors
> > caused by that the program forgets to protect an R object, but this is
> > relatively rare, as they don't understand R heap specifically, so you
> > cannot assume that if you create such example, the error will always be
> > found.
> >
> > Best
> > Tomas
> >
> >>
> >>   Please help!
> >>
> >> Thanks,
> >> Xiaoyan
> >>
> >>      [[alternative HTML version deleted]]
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>

	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Tue Apr  6 00:53:25 2021
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Mon, 5 Apr 2021 17:53:25 -0500
Subject: [Rd] R extension memory leak detection question
In-Reply-To: <CANjVfJ3gc7+U2-ep4-CeJWDHa7SivkqvBx2sxkD3tA1mdv5DMQ@mail.gmail.com>
References: <CANjVfJ2xXfinnpYgEoH_0dwvG=29FFMinuV+1cOueSrRMNyq9A@mail.gmail.com>
 <b0b80c39-2931-cd4e-ef6f-5cff9e9678c8@gmail.com>
 <CAJf4E3pJiF4U=w89P1UH6jDFbNM6Mwxu=r8EDfGjbtNmeLesuw@mail.gmail.com>
 <CANjVfJ3gc7+U2-ep4-CeJWDHa7SivkqvBx2sxkD3tA1mdv5DMQ@mail.gmail.com>
Message-ID: <24683.38117.444899.558821@rob.eddelbuettel.com>


On 5 April 2021 at 18:27, xiaoyan yu wrote:
| Thank you all for your help.
| We embedded R in our program and found the memory in the process
| accumulated while our expectation is that the memory will go down after
| each R evaluation.
| I started to write a test program with only a few lines of R embedded codes
| and found the memory never went down even after R library is unloaded.
| Please find more details in the readme and test program at
| https://github.com/xiaoyanyuvt/RMemTest

You may find the projects RInside (for easily embedding R inside C++
programs) and littler (also embedding R, but using C only, for use in
lightweight cmdline applications) useful.  Those have existed for, give or
take, 10 and 15 years and have not proven to show memory leaks so I feel the
burden of proof is still on you.

Also I got your program to compile (after making the 'makefile' a bit more
general, and fixing two things upsetting current C++ compilers) but I am not
sure we really see memory consumption:

   edd at rob:~$ ps -fv $(pgrep -x foo)
       PID TTY      STAT   TIME  MAJFL   TRS   DRS   RSS %MEM COMMAND
   1456192 pts/9    S+     0:00      0     1  5890  1768  0.0 ./foo
   edd at rob:~$ ps -fv $(pgrep -x foo)
       PID TTY      STAT   TIME  MAJFL   TRS   DRS   RSS %MEM COMMAND
   1456192 pts/9    Sl+    0:00      0     1 1617174 9896  0.0 ./foo
   edd at rob:~$ 

Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From x|@oy@n@yu @end|ng |rom gm@||@com  Tue Apr  6 02:28:17 2021
From: x|@oy@n@yu @end|ng |rom gm@||@com (xiaoyan yu)
Date: Mon, 5 Apr 2021 20:28:17 -0400
Subject: [Rd] R extension memory leak detection question
In-Reply-To: <24683.38117.444899.558821@rob.eddelbuettel.com>
References: <CANjVfJ2xXfinnpYgEoH_0dwvG=29FFMinuV+1cOueSrRMNyq9A@mail.gmail.com>
 <b0b80c39-2931-cd4e-ef6f-5cff9e9678c8@gmail.com>
 <CAJf4E3pJiF4U=w89P1UH6jDFbNM6Mwxu=r8EDfGjbtNmeLesuw@mail.gmail.com>
 <CANjVfJ3gc7+U2-ep4-CeJWDHa7SivkqvBx2sxkD3tA1mdv5DMQ@mail.gmail.com>
 <24683.38117.444899.558821@rob.eddelbuettel.com>
Message-ID: <CANjVfJ3UpC9NdMR3M0SMV9WU2u8GiEXqyz5fQ=tHpKa-7-LZAw@mail.gmail.com>

Thanks for your quick response. It is also surprising for us to notice the
memory accumulation when running our program since it has been years since
we developed our program.
Here is the memory status I observed from 15384k to 234208k to 242024k
without decreasing when running the test program.
[Before the first ENTER]$ps -aux | grep foo
xy 16985  0.0  0.0  *15384*  1312 pts/0    S+   00:09   0:00 ./foo
[After the first ENTER ]$ps -aux | grep foo
xy 16985  0.4  0.2 *234208* 42104 pts/0    S+   00:09   0:00 ./foo
[After the second ENTER and also before the program exit]$ps -aux | grep foo
xy    16985  0.1  0.2 *242024* 42244 pts/0    S+   00:09   0:00 ./foo

The test program is just a small simplified portion of our program. We
observed even more memory in use when running our program. We would like to
try to understand more of the memory life cycle of the embedded R.

Thanks,
Xiaoyan


On Mon, Apr 5, 2021 at 6:53 PM Dirk Eddelbuettel <edd at debian.org> wrote:

>
> On 5 April 2021 at 18:27, xiaoyan yu wrote:
> | Thank you all for your help.
> | We embedded R in our program and found the memory in the process
> | accumulated while our expectation is that the memory will go down after
> | each R evaluation.
> | I started to write a test program with only a few lines of R embedded
> codes
> | and found the memory never went down even after R library is unloaded.
> | Please find more details in the readme and test program at
> | https://github.com/xiaoyanyuvt/RMemTest
>
> You may find the projects RInside (for easily embedding R inside C++
> programs) and littler (also embedding R, but using C only, for use in
> lightweight cmdline applications) useful.  Those have existed for, give or
> take, 10 and 15 years and have not proven to show memory leaks so I feel
> the
> burden of proof is still on you.
>
> Also I got your program to compile (after making the 'makefile' a bit more
> general, and fixing two things upsetting current C++ compilers) but I am
> not
> sure we really see memory consumption:
>
>    edd at rob:~$ ps -fv $(pgrep -x foo)
>        PID TTY      STAT   TIME  MAJFL   TRS   DRS   RSS %MEM COMMAND
>    1456192 pts/9    S+     0:00      0     1  5890  1768  0.0 ./foo
>    edd at rob:~$ ps -fv $(pgrep -x foo)
>        PID TTY      STAT   TIME  MAJFL   TRS   DRS   RSS %MEM COMMAND
>    1456192 pts/9    Sl+    0:00      0     1 1617174 9896  0.0 ./foo
>    edd at rob:~$
>
> Dirk
>
> --
> https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>

	[[alternative HTML version deleted]]


From d@tr7320 @end|ng |rom un|@@ydney@edu@@u  Wed Apr  7 10:00:05 2021
From: d@tr7320 @end|ng |rom un|@@ydney@edu@@u (Dario Strbenac)
Date: Wed, 7 Apr 2021 08:00:05 +0000
Subject: [Rd] SVG Error on Windows if Multiplication Character Present
Message-ID: <SYBPR01MB4761553D4E32733B1A9ABF17CD759@SYBPR01MB4761.ausprd01.prod.outlook.com>

Good day,

The example below fails on Windows with Error in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y: Metric information not available for this family/device.

library(ggplot2)
aPlot <- ggplot(ToothGrowth, aes(x = factor(dose), y = len)) + geom_boxplot() +
         ggtitle("Test", subtitle = ggplot2::expr(paste("p", " = ", "6.23", " ? ", "10"^"-5"))) 
svg("test.svg"); aPlot; dev.off();

but there is no such problem on a Debian Linux server. The plot in Windows appears fine in an R graphics window. The error only occurs when exported as an SVG file. Using %*% instead of ? avoids the error but it's perhaps worth mentioning in case it could be easily handled by R.

--------------------------------------
Dario Strbenac
University of Sydney
Camperdown NSW 2050
Australia

From r-deve| @end|ng |rom @ker@t|ng@de  Wed Apr  7 11:28:35 2021
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Wed, 07 Apr 2021 11:28:35 +0200 (CEST)
Subject: [Rd] memory consumption of nested (un)serialize of sys.frames()
Message-ID: <E1lU4UF-00068N-J1@rmmprod07.runbox>

Hi,

please consider the following minimal reproducible example:

Create a new R package which just contains the following two (exported) objects:


crash_dumps <- new.env()

f <- function() {
  x <- runif(1e5)
  dump <- lapply(1:2, function(i) unserialize(serialize(sys.frames(), NULL)))
  assign("last.dump", dump, crash_dumps)
}


WARNING: the following will probably eat all your RAM!

Attach this package and run:

for (i in 1:100) {
  print(i)
  f()
}

You will notice that with each iteration the execution of f() slows down significantly while the memory consumption of the R process (v4.0.5 on Linux) quickly explodes.

I am having a hard time to understand what exactly is happening here. Something w.r.t. too deeply nested environments? Could someone please enlighten me? Thanks!

Regards,
Andreas


Background:
In an R package I store crash dumps on error in a parallel processes in a way similar to what I have just shown (hence the (un)serialize(), which happens as part of returning the objects to the parent process). The first 2 or 3 times I do so in a session everything is fine, but afterwards it takes very long and I soon run out of memory.

Some more observations:
- If I omit `x <- runif(1e5)`, the issues seem to be less pronounced.
- If I assign to .GlobalEnv instead of crash_dumps, there seems to be no issue - probably because .GlobalEnv is not included in sys.frames(), while crash_dumps is indirectly via the namespace of the package being the parent.env of some of the sys.frames()!?
- If I omit the lapply(...), i.e. use `dump <- unserialize(serialize(sys.frames(), NULL))` directly, there seems to be no issue. The immediate consequence is that there are less sys.frames and - in particular - there is no frame which has the base namespace as its parent.env.
- If I make crash_dumps a list and use assignInMyNamespace() to store the dump in it, there also seems to be no issue. I will probably use this as a workaround:

crash_dumps <- list()

f <- function() {
  x <- runif(1e5)
  dump <- lapply(1:2, function(i) unserialize(serialize(sys.frames(), NULL)))
  crash_dumps[["last.dump"]] <- dump
  assignInMyNamespace("crash_dumps", crash_dumps)
}


From iuke-tier@ey m@iii@g oii uiow@@edu  Wed Apr  7 15:28:00 2021
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Wed, 7 Apr 2021 08:28:00 -0500 (CDT)
Subject: [Rd] [External] memory consumption of nested (un)serialize of
 sys.frames()
In-Reply-To: <E1lU4UF-00068N-J1@rmmprod07.runbox>
References: <E1lU4UF-00068N-J1@rmmprod07.runbox>
Message-ID: <alpine.DEB.2.21.2104070821550.24594@luke-Latitude-7480>


On Wed, 7 Apr 2021, Andreas Kersting wrote:

> Hi,
>
> please consider the following minimal reproducible example:
>
> Create a new R package which just contains the following two (exported) objects:

I would not expect this behavior and I don't see it when I make such a
package (in R 4.0.3 or R-devel on Ubuntu).  You will need to provide a
more complete reproducible example if you want help with what you are
trying to do; also sessionInfo() would help.

Best,

luke

>
>
> crash_dumps <- new.env()
>
> f <- function() {
>  x <- runif(1e5)
>  dump <- lapply(1:2, function(i) unserialize(serialize(sys.frames(), NULL)))
>  assign("last.dump", dump, crash_dumps)
> }
>
>
> WARNING: the following will probably eat all your RAM!
>
> Attach this package and run:
>
> for (i in 1:100) {
>  print(i)
>  f()
> }
>
> You will notice that with each iteration the execution of f() slows down significantly while the memory consumption of the R process (v4.0.5 on Linux) quickly explodes.
>
> I am having a hard time to understand what exactly is happening here. Something w.r.t. too deeply nested environments? Could someone please enlighten me? Thanks!
>
> Regards,
> Andreas
>
>
> Background:
> In an R package I store crash dumps on error in a parallel processes in a way similar to what I have just shown (hence the (un)serialize(), which happens as part of returning the objects to the parent process). The first 2 or 3 times I do so in a session everything is fine, but afterwards it takes very long and I soon run out of memory.
>
> Some more observations:
> - If I omit `x <- runif(1e5)`, the issues seem to be less pronounced.
> - If I assign to .GlobalEnv instead of crash_dumps, there seems to be no issue - probably because .GlobalEnv is not included in sys.frames(), while crash_dumps is indirectly via the namespace of the package being the parent.env of some of the sys.frames()!?
> - If I omit the lapply(...), i.e. use `dump <- unserialize(serialize(sys.frames(), NULL))` directly, there seems to be no issue. The immediate consequence is that there are less sys.frames and - in particular - there is no frame which has the base namespace as its parent.env.
> - If I make crash_dumps a list and use assignInMyNamespace() to store the dump in it, there also seems to be no issue. I will probably use this as a workaround:
>
> crash_dumps <- list()
>
> f <- function() {
>  x <- runif(1e5)
>  dump <- lapply(1:2, function(i) unserialize(serialize(sys.frames(), NULL)))
>  crash_dumps[["last.dump"]] <- dump
>  assignInMyNamespace("crash_dumps", crash_dumps)
> }
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From r-deve| @end|ng |rom @ker@t|ng@de  Wed Apr  7 16:06:23 2021
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Wed, 07 Apr 2021 16:06:23 +0200 (CEST)
Subject: [Rd] [External] memory consumption of nested (un)serialize of
 sys.frames()
In-Reply-To: <alpine.DEB.2.21.2104070821550.24594@luke-Latitude-7480>
Message-ID: <E1lU8p6-0005bY-1M@rmmprod07.runbox>

Hi Luke,

Please see https://github.com/akersting/dumpTest for the package.

Here a session showing my issue:

> library(dumpTest)
> sessionInfo()
R version 4.0.5 (2021-03-31)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Debian GNU/Linux 10 (buster)

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.8.0
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.8.0

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] dumpTest_0.1.0

loaded via a namespace (and not attached):
[1] compiler_4.0.5
> for (i in 1:100) {
+   print(i)
+   print(system.time(f()))
+ }
[1] 1
   user  system elapsed 
  0.028   0.004   0.034 
[1] 2
   user  system elapsed 
  0.067   0.008   0.075 
[1] 3
   user  system elapsed 
  0.176   0.000   0.176 
[1] 4
   user  system elapsed 
  0.335   0.012   0.349 
[1] 5
   user  system elapsed 
  0.745   0.023   0.770 
[1] 6
   user  system elapsed 
  1.495   0.060   1.572 
[1] 7
   user  system elapsed 
  2.902   0.136   3.040 
[1] 8
   user  system elapsed 
  5.753   0.272   6.034 
[1] 9
   user  system elapsed 
 11.807   0.708  12.597 
[1] 10
^C
Timing stopped at: 6.638 0.549 7.214

I had to interrupt in iteration 10 because I was running low on RAM.

Regards,
Andreas

2021-04-07 15:28 GMT+02:00 luke-tierney at uiowa.edu:
> On Wed, 7 Apr 2021, Andreas Kersting wrote:
> 
>> Hi,
>>
>> please consider the following minimal reproducible example:
>>
>> Create a new R package which just contains the following two (exported) objects:
> 
> I would not expect this behavior and I don't see it when I make such a
> package (in R 4.0.3 or R-devel on Ubuntu).  You will need to provide a
> more complete reproducible example if you want help with what you are
> trying to do; also sessionInfo() would help.
> 
> Best,
> 
> luke
> 
>>
>>
>> crash_dumps <- new.env()
>>
>> f <- function() {
>>  x <- runif(1e5)
>>  dump <- lapply(1:2, function(i) unserialize(serialize(sys.frames(), NULL)))
>>  assign("last.dump", dump, crash_dumps)
>> }
>>
>>
>> WARNING: the following will probably eat all your RAM!
>>
>> Attach this package and run:
>>
>> for (i in 1:100) {
>>  print(i)
>>  f()
>> }
>>
>> You will notice that with each iteration the execution of f() slows down significantly while the memory consumption of the R process (v4.0.5 on Linux) quickly explodes.
>>
>> I am having a hard time to understand what exactly is happening here. Something w.r.t. too deeply nested environments? Could someone please enlighten me? Thanks!
>>
>> Regards,
>> Andreas
>>
>>
>> Background:
>> In an R package I store crash dumps on error in a parallel processes in a way similar to what I have just shown (hence the (un)serialize(), which happens as part of returning the objects to the parent process). The first 2 or 3 times I do so in a session everything is fine, but afterwards it takes very long and I soon run out of memory.
>>
>> Some more observations:
>> - If I omit `x <- runif(1e5)`, the issues seem to be less pronounced.
>> - If I assign to .GlobalEnv instead of crash_dumps, there seems to be no issue - probably because .GlobalEnv is not included in sys.frames(), while crash_dumps is indirectly via the namespace of the package being the parent.env of some of the sys.frames()!?
>> - If I omit the lapply(...), i.e. use `dump <- unserialize(serialize(sys.frames(), NULL))` directly, there seems to be no issue. The immediate consequence is that there are less sys.frames and - in particular - there is no frame which has the base namespace as its parent.env.
>> - If I make crash_dumps a list and use assignInMyNamespace() to store the dump in it, there also seems to be no issue. I will probably use this as a workaround:
>>
>> crash_dumps <- list()
>>
>> f <- function() {
>>  x <- runif(1e5)
>>  dump <- lapply(1:2, function(i) unserialize(serialize(sys.frames(), NULL)))
>>  crash_dumps[["last.dump"]] <- dump
>>  assignInMyNamespace("crash_dumps", crash_dumps)
>> }
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> -- 
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>    Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
> 

From edd @end|ng |rom deb|@n@org  Wed Apr  7 16:20:47 2021
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Wed, 7 Apr 2021 09:20:47 -0500
Subject: [Rd] [External] memory consumption of nested (un)serialize of
 sys.frames()
In-Reply-To: <E1lU8p6-0005bY-1M@rmmprod07.runbox>
References: <alpine.DEB.2.21.2104070821550.24594@luke-Latitude-7480>
 <E1lU8p6-0005bY-1M@rmmprod07.runbox>
Message-ID: <24685.49087.102293.830255@rob.eddelbuettel.com>


On 7 April 2021 at 16:06, Andreas Kersting wrote:
| Hi Luke,
| 
| Please see https://github.com/akersting/dumpTest for the package.
| 
| Here a session showing my issue:
| 
| > library(dumpTest)
| > sessionInfo()
| R version 4.0.5 (2021-03-31)
| Platform: x86_64-pc-linux-gnu (64-bit)
| Running under: Debian GNU/Linux 10 (buster)
| 
| Matrix products: default
| BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.8.0
| LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.8.0
| 
| locale:
|  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
|  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
|  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
|  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
|  [9] LC_ADDRESS=C               LC_TELEPHONE=C            
| [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       
| 
| attached base packages:
| [1] stats     graphics  grDevices utils     datasets  methods   base     
| 
| other attached packages:
| [1] dumpTest_0.1.0
| 
| loaded via a namespace (and not attached):
| [1] compiler_4.0.5
| > for (i in 1:100) {
| +   print(i)
| +   print(system.time(f()))
| + }
| [1] 1
|    user  system elapsed 
|   0.028   0.004   0.034 
| [1] 2
|    user  system elapsed 
|   0.067   0.008   0.075 
| [1] 3
|    user  system elapsed 
|   0.176   0.000   0.176 
| [1] 4
|    user  system elapsed 
|   0.335   0.012   0.349 
| [1] 5
|    user  system elapsed 
|   0.745   0.023   0.770 
| [1] 6
|    user  system elapsed 
|   1.495   0.060   1.572 
| [1] 7
|    user  system elapsed 
|   2.902   0.136   3.040 
| [1] 8
|    user  system elapsed 
|   5.753   0.272   6.034 
| [1] 9
|    user  system elapsed 
|  11.807   0.708  12.597 
| [1] 10
| ^C
| Timing stopped at: 6.638 0.549 7.214
| 
| I had to interrupt in iteration 10 because I was running low on RAM.

No issue here.  Ubuntu 20.10, R 4.0.5 'from CRAN' i.e. Michael's PPA build
off my Debian package, hence instrumentation as in the Debian package.

edd at rob:~$ installGithub.r akersting/dumpTest
Using github PAT from envvar GITHUB_PAT
Downloading GitHub repo akersting/dumpTest at HEAD
?  checking for file ?/tmp/remotes3f9af733166ccd/akersting-dumpTest-3bed8e2/DESCRIPTION? ...
?  preparing ?dumpTest?:
?  checking DESCRIPTION meta-information ...
?  checking for LF line-endings in source and make files and shell scripts
?  checking for empty or unneeded directories
?  building ?dumpTest_0.1.0.tar.gz?
   
Installing package into ?/usr/local/lib/R/site-library?
(as ?lib? is unspecified)
* installing *source* package ?dumpTest? ...
** using staged installation
** R
** byte-compile and prepare package for lazy loading
** help
No man pages found in package  ?dumpTest? 
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (dumpTest)
edd at rob:~$ Rscript -e 'system.time({for (i in 1:100) dumpTest::f()})'
   user  system elapsed 
  0.481   0.019   0.500 
edd at rob:~$

(I also ran the variant you showed with the dual print statements, it just
consumes more screen real estate and ends on

[...]
[1] 97                                      
   user  system elapsed     
  0.004   0.000   0.005 
[1] 98                                                                                                   
   user  system elapsed 
  0.004   0.000   0.005                   
[1] 99                     
   user  system elapsed    
  0.004   0.000   0.004                                                                                  
[1] 100                                                                                                  
   user  system elapsed                                                                                  
  0.005   0.000   0.005 
edd at rob:~$ )

Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From iuke-tier@ey m@iii@g oii uiow@@edu  Wed Apr  7 16:39:09 2021
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Wed, 7 Apr 2021 09:39:09 -0500 (CDT)
Subject: [Rd] [External] memory consumption of nested (un)serialize of
 sys.frames()
In-Reply-To: <E1lU8p6-0005bY-1M@rmmprod07.runbox>
References: <E1lU8p6-0005bY-1M@rmmprod07.runbox>
Message-ID: <alpine.DEB.2.21.2104070936190.24594@luke-Latitude-7480>

No issues here with that either. Looks like something is different on
your end.

Best,

luke

On Wed, 7 Apr 2021, Andreas Kersting wrote:

> Hi Luke,
>
> Please see https://github.com/akersting/dumpTest for the package.
>
> Here a session showing my issue:
>
>> library(dumpTest)
>> sessionInfo()
> R version 4.0.5 (2021-03-31)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Debian GNU/Linux 10 (buster)
>
> Matrix products: default
> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.8.0
> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.8.0
>
> locale:
> [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
> [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
> [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
> [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
> [9] LC_ADDRESS=C               LC_TELEPHONE=C
> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> other attached packages:
> [1] dumpTest_0.1.0
>
> loaded via a namespace (and not attached):
> [1] compiler_4.0.5
>> for (i in 1:100) {
> +   print(i)
> +   print(system.time(f()))
> + }
> [1] 1
>   user  system elapsed
>  0.028   0.004   0.034
> [1] 2
>   user  system elapsed
>  0.067   0.008   0.075
> [1] 3
>   user  system elapsed
>  0.176   0.000   0.176
> [1] 4
>   user  system elapsed
>  0.335   0.012   0.349
> [1] 5
>   user  system elapsed
>  0.745   0.023   0.770
> [1] 6
>   user  system elapsed
>  1.495   0.060   1.572
> [1] 7
>   user  system elapsed
>  2.902   0.136   3.040
> [1] 8
>   user  system elapsed
>  5.753   0.272   6.034
> [1] 9
>   user  system elapsed
> 11.807   0.708  12.597
> [1] 10
> ^C
> Timing stopped at: 6.638 0.549 7.214
>
> I had to interrupt in iteration 10 because I was running low on RAM.
>
> Regards,
> Andreas
>
> 2021-04-07 15:28 GMT+02:00 luke-tierney at uiowa.edu:
>> On Wed, 7 Apr 2021, Andreas Kersting wrote:
>>
>>> Hi,
>>>
>>> please consider the following minimal reproducible example:
>>>
>>> Create a new R package which just contains the following two (exported) objects:
>>
>> I would not expect this behavior and I don't see it when I make such a
>> package (in R 4.0.3 or R-devel on Ubuntu).  You will need to provide a
>> more complete reproducible example if you want help with what you are
>> trying to do; also sessionInfo() would help.
>>
>> Best,
>>
>> luke
>>
>>>
>>>
>>> crash_dumps <- new.env()
>>>
>>> f <- function() {
>>>  x <- runif(1e5)
>>>  dump <- lapply(1:2, function(i) unserialize(serialize(sys.frames(), NULL)))
>>>  assign("last.dump", dump, crash_dumps)
>>> }
>>>
>>>
>>> WARNING: the following will probably eat all your RAM!
>>>
>>> Attach this package and run:
>>>
>>> for (i in 1:100) {
>>>  print(i)
>>>  f()
>>> }
>>>
>>> You will notice that with each iteration the execution of f() slows down significantly while the memory consumption of the R process (v4.0.5 on Linux) quickly explodes.
>>>
>>> I am having a hard time to understand what exactly is happening here. Something w.r.t. too deeply nested environments? Could someone please enlighten me? Thanks!
>>>
>>> Regards,
>>> Andreas
>>>
>>>
>>> Background:
>>> In an R package I store crash dumps on error in a parallel processes in a way similar to what I have just shown (hence the (un)serialize(), which happens as part of returning the objects to the parent process). The first 2 or 3 times I do so in a session everything is fine, but afterwards it takes very long and I soon run out of memory.
>>>
>>> Some more observations:
>>> - If I omit `x <- runif(1e5)`, the issues seem to be less pronounced.
>>> - If I assign to .GlobalEnv instead of crash_dumps, there seems to be no issue - probably because .GlobalEnv is not included in sys.frames(), while crash_dumps is indirectly via the namespace of the package being the parent.env of some of the sys.frames()!?
>>> - If I omit the lapply(...), i.e. use `dump <- unserialize(serialize(sys.frames(), NULL))` directly, there seems to be no issue. The immediate consequence is that there are less sys.frames and - in particular - there is no frame which has the base namespace as its parent.env.
>>> - If I make crash_dumps a list and use assignInMyNamespace() to store the dump in it, there also seems to be no issue. I will probably use this as a workaround:
>>>
>>> crash_dumps <- list()
>>>
>>> f <- function() {
>>>  x <- runif(1e5)
>>>  dump <- lapply(1:2, function(i) unserialize(serialize(sys.frames(), NULL)))
>>>  crash_dumps[["last.dump"]] <- dump
>>>  assignInMyNamespace("crash_dumps", crash_dumps)
>>> }
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>> --
>> Luke Tierney
>> Ralph E. Wareham Professor of Mathematical Sciences
>> University of Iowa                  Phone:             319-335-3386
>> Department of Statistics and        Fax:               319-335-3017
>>    Actuarial Science
>> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
>> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From r-deve| @end|ng |rom @ker@t|ng@de  Wed Apr  7 17:09:14 2021
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Wed, 07 Apr 2021 17:09:14 +0200 (CEST)
Subject: [Rd] [External] memory consumption of nested (un)serialize of
 sys.frames()
In-Reply-To: <24685.49087.102293.830255@rob.eddelbuettel.com>
Message-ID: <E1lU9nu-0004lE-Dy@rmmprod07.runbox>

Hi Dirk, hi Luke,

Thanks for checking!

I could narrow it down further. I have the issue only if I install --with-keep.source, i.e.

R CMD INSTALL --with-keep.source dumpTest

Since this is the default in RStudio when clicking "Install and Restart", I was always having the issue - also from base R. If I install using e.g. devtools::install_github() directly it is also fine for me.

Could you please confirm? Thanks!

Regards,
Andreas

2021-04-07 16:20 GMT+02:00 "Dirk Eddelbuettel" <edd at debian.org>:
> 
> On 7 April 2021 at 16:06, Andreas Kersting wrote:
> | Hi Luke,
> | 
> | Please see https://github.com/akersting/dumpTest for the package.
> | 
> | Here a session showing my issue:
> | 
> | > library(dumpTest)
> | > sessionInfo()
> | R version 4.0.5 (2021-03-31)
> | Platform: x86_64-pc-linux-gnu (64-bit)
> | Running under: Debian GNU/Linux 10 (buster)
> | 
> | Matrix products: default
> | BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.8.0
> | LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.8.0
> | 
> | locale:
> |  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
> |  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
> |  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
> |  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
> |  [9] LC_ADDRESS=C               LC_TELEPHONE=C            
> | [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       
> | 
> | attached base packages:
> | [1] stats     graphics  grDevices utils     datasets  methods   base     
> | 
> | other attached packages:
> | [1] dumpTest_0.1.0
> | 
> | loaded via a namespace (and not attached):
> | [1] compiler_4.0.5
> | > for (i in 1:100) {
> | +   print(i)
> | +   print(system.time(f()))
> | + }
> | [1] 1
> |    user  system elapsed 
> |   0.028   0.004   0.034 
> | [1] 2
> |    user  system elapsed 
> |   0.067   0.008   0.075 
> | [1] 3
> |    user  system elapsed 
> |   0.176   0.000   0.176 
> | [1] 4
> |    user  system elapsed 
> |   0.335   0.012   0.349 
> | [1] 5
> |    user  system elapsed 
> |   0.745   0.023   0.770 
> | [1] 6
> |    user  system elapsed 
> |   1.495   0.060   1.572 
> | [1] 7
> |    user  system elapsed 
> |   2.902   0.136   3.040 
> | [1] 8
> |    user  system elapsed 
> |   5.753   0.272   6.034 
> | [1] 9
> |    user  system elapsed 
> |  11.807   0.708  12.597 
> | [1] 10
> | ^C
> | Timing stopped at: 6.638 0.549 7.214
> | 
> | I had to interrupt in iteration 10 because I was running low on RAM.
> 
> No issue here.  Ubuntu 20.10, R 4.0.5 'from CRAN' i.e. Michael's PPA build
> off my Debian package, hence instrumentation as in the Debian package.
> 
> edd at rob:~$ installGithub.r akersting/dumpTest
> Using github PAT from envvar GITHUB_PAT
> Downloading GitHub repo akersting/dumpTest at HEAD
> ?  checking for file ?/tmp/remotes3f9af733166ccd/akersting-dumpTest-3bed8e2/DESCRIPTION? ...
> ?  preparing ?dumpTest?:
> ?  checking DESCRIPTION meta-information ...
> ?  checking for LF line-endings in source and make files and shell scripts
> ?  checking for empty or unneeded directories
> ?  building ?dumpTest_0.1.0.tar.gz?
>    
> Installing package into ?/usr/local/lib/R/site-library?
> (as ?lib? is unspecified)
> * installing *source* package ?dumpTest? ...
> ** using staged installation
> ** R
> ** byte-compile and prepare package for lazy loading
> ** help
> No man pages found in package  ?dumpTest? 
> *** installing help indices
> ** building package indices
> ** testing if installed package can be loaded from temporary location
> ** testing if installed package can be loaded from final location
> ** testing if installed package keeps a record of temporary installation path
> * DONE (dumpTest)
> edd at rob:~$ Rscript -e 'system.time({for (i in 1:100) dumpTest::f()})'
>    user  system elapsed 
>   0.481   0.019   0.500 
> edd at rob:~$
> 
> (I also ran the variant you showed with the dual print statements, it just
> consumes more screen real estate and ends on
> 
> [...]
> [1] 97                                      
>    user  system elapsed     
>   0.004   0.000   0.005 
> [1] 98                                                                                                   
>    user  system elapsed 
>   0.004   0.000   0.005                   
> [1] 99                     
>    user  system elapsed    
>   0.004   0.000   0.004                                                                                  
> [1] 100                                                                                                  
>    user  system elapsed                                                                                  
>   0.005   0.000   0.005 
> edd at rob:~$ )
> 
> Dirk
> 
> -- 
> https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
> 

From r-deve| @end|ng |rom @ker@t|ng@de  Thu Apr  8 10:45:07 2021
From: r-deve| @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Thu, 08 Apr 2021 10:45:07 +0200 (CEST)
Subject: [Rd] [External] memory consumption of nested (un)serialize of
 sys.frames()
In-Reply-To: <E1lU9nu-0004lE-Dy@rmmprod07.runbox>
Message-ID: <E1lUQHj-0000AX-Uh@rmmprod07.runbox>

Hi,

For (hopefully) full reproducibility:

docker run rocker/tidyverse:4.0.5 Rscript -e 'devtools::install_github("akersting/dumpTest", INSTALL_opts = "--with-keep.source"); library(dumpTest); for (i in 1:100) {print(i); print(system.time(f()))}'

Regards,
Andreas

2021-04-07 17:09 GMT+02:00 "Andreas Kersting" <r-devel at akersting.de>:
> Hi Dirk, hi Luke,
> 
> Thanks for checking!
> 
> I could narrow it down further. I have the issue only if I install --with-keep.source, i.e.
> 
> R CMD INSTALL --with-keep.source dumpTest
> 
> Since this is the default in RStudio when clicking "Install and Restart", I was always having the issue - also from base R. If I install using e.g. devtools::install_github() directly it is also fine for me.
> 
> Could you please confirm? Thanks!
> 
> Regards,
> Andreas
> 
> 2021-04-07 16:20 GMT+02:00 "Dirk Eddelbuettel" <edd at debian.org>:
>> 
>> On 7 April 2021 at 16:06, Andreas Kersting wrote:
>> | Hi Luke,
>> | 
>> | Please see https://github.com/akersting/dumpTest for the package.
>> | 
>> | Here a session showing my issue:
>> | 
>> | > library(dumpTest)
>> | > sessionInfo()
>> | R version 4.0.5 (2021-03-31)
>> | Platform: x86_64-pc-linux-gnu (64-bit)
>> | Running under: Debian GNU/Linux 10 (buster)
>> | 
>> | Matrix products: default
>> | BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.8.0
>> | LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.8.0
>> | 
>> | locale:
>> |  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
>> |  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
>> |  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
>> |  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
>> |  [9] LC_ADDRESS=C               LC_TELEPHONE=C            
>> | [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       
>> | 
>> | attached base packages:
>> | [1] stats     graphics  grDevices utils     datasets  methods   base     
>> | 
>> | other attached packages:
>> | [1] dumpTest_0.1.0
>> | 
>> | loaded via a namespace (and not attached):
>> | [1] compiler_4.0.5
>> | > for (i in 1:100) {
>> | +   print(i)
>> | +   print(system.time(f()))
>> | + }
>> | [1] 1
>> |    user  system elapsed 
>> |   0.028   0.004   0.034 
>> | [1] 2
>> |    user  system elapsed 
>> |   0.067   0.008   0.075 
>> | [1] 3
>> |    user  system elapsed 
>> |   0.176   0.000   0.176 
>> | [1] 4
>> |    user  system elapsed 
>> |   0.335   0.012   0.349 
>> | [1] 5
>> |    user  system elapsed 
>> |   0.745   0.023   0.770 
>> | [1] 6
>> |    user  system elapsed 
>> |   1.495   0.060   1.572 
>> | [1] 7
>> |    user  system elapsed 
>> |   2.902   0.136   3.040 
>> | [1] 8
>> |    user  system elapsed 
>> |   5.753   0.272   6.034 
>> | [1] 9
>> |    user  system elapsed 
>> |  11.807   0.708  12.597 
>> | [1] 10
>> | ^C
>> | Timing stopped at: 6.638 0.549 7.214
>> | 
>> | I had to interrupt in iteration 10 because I was running low on RAM.
>> 
>> No issue here.  Ubuntu 20.10, R 4.0.5 'from CRAN' i.e. Michael's PPA build
>> off my Debian package, hence instrumentation as in the Debian package.
>> 
>> edd at rob:~$ installGithub.r akersting/dumpTest
>> Using github PAT from envvar GITHUB_PAT
>> Downloading GitHub repo akersting/dumpTest at HEAD
>> ?  checking for file ?/tmp/remotes3f9af733166ccd/akersting-dumpTest-3bed8e2/DESCRIPTION? ...
>> ?  preparing ?dumpTest?:
>> ?  checking DESCRIPTION meta-information ...
>> ?  checking for LF line-endings in source and make files and shell scripts
>> ?  checking for empty or unneeded directories
>> ?  building ?dumpTest_0.1.0.tar.gz?
>>    
>> Installing package into ?/usr/local/lib/R/site-library?
>> (as ?lib? is unspecified)
>> * installing *source* package ?dumpTest? ...
>> ** using staged installation
>> ** R
>> ** byte-compile and prepare package for lazy loading
>> ** help
>> No man pages found in package  ?dumpTest? 
>> *** installing help indices
>> ** building package indices
>> ** testing if installed package can be loaded from temporary location
>> ** testing if installed package can be loaded from final location
>> ** testing if installed package keeps a record of temporary installation path
>> * DONE (dumpTest)
>> edd at rob:~$ Rscript -e 'system.time({for (i in 1:100) dumpTest::f()})'
>>    user  system elapsed 
>>   0.481   0.019   0.500 
>> edd at rob:~$
>> 
>> (I also ran the variant you showed with the dual print statements, it just
>> consumes more screen real estate and ends on
>> 
>> [...]
>> [1] 97                                      
>>    user  system elapsed     
>>   0.004   0.000   0.005 
>> [1] 98                                                                                                   
>>    user  system elapsed 
>>   0.004   0.000   0.005                   
>> [1] 99                     
>>    user  system elapsed    
>>   0.004   0.000   0.004                                                                                  
>> [1] 100                                                                                                  
>>    user  system elapsed                                                                                  
>>   0.005   0.000   0.005 
>> edd at rob:~$ )
>> 
>> Dirk
>> 
>> -- 
>> https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 

From iuke-tier@ey m@iii@g oii uiow@@edu  Thu Apr  8 16:15:21 2021
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Thu, 8 Apr 2021 09:15:21 -0500 (CDT)
Subject: [Rd] [External] memory consumption of nested (un)serialize of
 sys.frames()
In-Reply-To: <E1lU9nu-0004lE-Dy@rmmprod07.runbox>
References: <E1lU9nu-0004lE-Dy@rmmprod07.runbox>
Message-ID: <alpine.DEB.2.21.2104080913020.24594@luke-Latitude-7480>

I see that now also. Not sure yet what is going on.

One work-around that may work for you is to create a fresh crash dump
in a .onLoad function; somehting like

crash_dumps <- NULL
.onLoad <- function(...) crash_dumps <<- new.env()

Best,

luke

On Wed, 7 Apr 2021, Andreas Kersting wrote:

> Hi Dirk, hi Luke,
>
> Thanks for checking!
>
> I could narrow it down further. I have the issue only if I install --with-keep.source, i.e.
>
> R CMD INSTALL --with-keep.source dumpTest
>
> Since this is the default in RStudio when clicking "Install and Restart", I was always having the issue - also from base R. If I install using e.g. devtools::install_github() directly it is also fine for me.
>
> Could you please confirm? Thanks!
>
> Regards,
> Andreas
>
> 2021-04-07 16:20 GMT+02:00 "Dirk Eddelbuettel" <edd at debian.org>:
>>
>> On 7 April 2021 at 16:06, Andreas Kersting wrote:
>> | Hi Luke,
>> |
>> | Please see https://github.com/akersting/dumpTest for the package.
>> |
>> | Here a session showing my issue:
>> |
>> | > library(dumpTest)
>> | > sessionInfo()
>> | R version 4.0.5 (2021-03-31)
>> | Platform: x86_64-pc-linux-gnu (64-bit)
>> | Running under: Debian GNU/Linux 10 (buster)
>> |
>> | Matrix products: default
>> | BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.8.0
>> | LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.8.0
>> |
>> | locale:
>> |  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
>> |  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
>> |  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
>> |  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
>> |  [9] LC_ADDRESS=C               LC_TELEPHONE=C
>> | [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
>> |
>> | attached base packages:
>> | [1] stats     graphics  grDevices utils     datasets  methods   base
>> |
>> | other attached packages:
>> | [1] dumpTest_0.1.0
>> |
>> | loaded via a namespace (and not attached):
>> | [1] compiler_4.0.5
>> | > for (i in 1:100) {
>> | +   print(i)
>> | +   print(system.time(f()))
>> | + }
>> | [1] 1
>> |    user  system elapsed
>> |   0.028   0.004   0.034
>> | [1] 2
>> |    user  system elapsed
>> |   0.067   0.008   0.075
>> | [1] 3
>> |    user  system elapsed
>> |   0.176   0.000   0.176
>> | [1] 4
>> |    user  system elapsed
>> |   0.335   0.012   0.349
>> | [1] 5
>> |    user  system elapsed
>> |   0.745   0.023   0.770
>> | [1] 6
>> |    user  system elapsed
>> |   1.495   0.060   1.572
>> | [1] 7
>> |    user  system elapsed
>> |   2.902   0.136   3.040
>> | [1] 8
>> |    user  system elapsed
>> |   5.753   0.272   6.034
>> | [1] 9
>> |    user  system elapsed
>> |  11.807   0.708  12.597
>> | [1] 10
>> | ^C
>> | Timing stopped at: 6.638 0.549 7.214
>> |
>> | I had to interrupt in iteration 10 because I was running low on RAM.
>>
>> No issue here.  Ubuntu 20.10, R 4.0.5 'from CRAN' i.e. Michael's PPA build
>> off my Debian package, hence instrumentation as in the Debian package.
>>
>> edd at rob:~$ installGithub.r akersting/dumpTest
>> Using github PAT from envvar GITHUB_PAT
>> Downloading GitHub repo akersting/dumpTest at HEAD
>> ?  checking for file ?/tmp/remotes3f9af733166ccd/akersting-dumpTest-3bed8e2/DESCRIPTION? ...
>> ?  preparing ?dumpTest?:
>> ?  checking DESCRIPTION meta-information ...
>> ?  checking for LF line-endings in source and make files and shell scripts
>> ?  checking for empty or unneeded directories
>> ?  building ?dumpTest_0.1.0.tar.gz?
>>
>> Installing package into ?/usr/local/lib/R/site-library?
>> (as ?lib? is unspecified)
>> * installing *source* package ?dumpTest? ...
>> ** using staged installation
>> ** R
>> ** byte-compile and prepare package for lazy loading
>> ** help
>> No man pages found in package  ?dumpTest?
>> *** installing help indices
>> ** building package indices
>> ** testing if installed package can be loaded from temporary location
>> ** testing if installed package can be loaded from final location
>> ** testing if installed package keeps a record of temporary installation path
>> * DONE (dumpTest)
>> edd at rob:~$ Rscript -e 'system.time({for (i in 1:100) dumpTest::f()})'
>>    user  system elapsed
>>   0.481   0.019   0.500
>> edd at rob:~$
>>
>> (I also ran the variant you showed with the dual print statements, it just
>> consumes more screen real estate and ends on
>>
>> [...]
>> [1] 97
>>    user  system elapsed
>>   0.004   0.000   0.005
>> [1] 98
>>    user  system elapsed
>>   0.004   0.000   0.005
>> [1] 99
>>    user  system elapsed
>>   0.004   0.000   0.004
>> [1] 100
>>    user  system elapsed
>>   0.005   0.000   0.005
>> edd at rob:~$ )
>>
>> Dirk
>>
>> --
>> https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From iuke-tier@ey m@iii@g oii uiow@@edu  Fri Apr  9 02:43:51 2021
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Thu, 8 Apr 2021 19:43:51 -0500 (CDT)
Subject: [Rd] [External] memory consumption of nested (un)serialize of
 sys.frames()
In-Reply-To: <alpine.DEB.2.21.2104080913020.24594@luke-Latitude-7480>
References: <E1lU9nu-0004lE-Dy@rmmprod07.runbox>
 <alpine.DEB.2.21.2104080913020.24594@luke-Latitude-7480>
Message-ID: <alpine.DEB.2.21.2104081937221.24594@luke-Latitude-7480>

Looks like this is an unavoidable interaction between the way source
references and lazy loading are implemented. The link back to the
crash_dumps environment comes though source references on an
unevaluated argument promise. Creating a fresh environment is
.onLoad() avoids this and is probably your best bet.

Having an option to serialize without source references might be nice
but would probably not be high enough on anyone's priority list to get
done anytime soon.

Best,

luke

On Thu, 8 Apr 2021, luke-tierney at uiowa.edu wrote:

> I see that now also. Not sure yet what is going on.
>
> One work-around that may work for you is to create a fresh crash dump
> in a .onLoad function; somehting like
>
> crash_dumps <- NULL
> .onLoad <- function(...) crash_dumps <<- new.env()
>
> Best,
>
> luke
>
> On Wed, 7 Apr 2021, Andreas Kersting wrote:
>
>> Hi Dirk, hi Luke,
>> 
>> Thanks for checking!
>> 
>> I could narrow it down further. I have the issue only if I install 
>> --with-keep.source, i.e.
>> 
>> R CMD INSTALL --with-keep.source dumpTest
>> 
>> Since this is the default in RStudio when clicking "Install and Restart", I 
>> was always having the issue - also from base R. If I install using e.g. 
>> devtools::install_github() directly it is also fine for me.
>> 
>> Could you please confirm? Thanks!
>> 
>> Regards,
>> Andreas
>> 
>> 2021-04-07 16:20 GMT+02:00 "Dirk Eddelbuettel" <edd at debian.org>:
>>> 
>>> On 7 April 2021 at 16:06, Andreas Kersting wrote:
>>> | Hi Luke,
>>> |
>>> | Please see https://github.com/akersting/dumpTest for the package.
>>> |
>>> | Here a session showing my issue:
>>> |
>>> | > library(dumpTest)
>>> | > sessionInfo()
>>> | R version 4.0.5 (2021-03-31)
>>> | Platform: x86_64-pc-linux-gnu (64-bit)
>>> | Running under: Debian GNU/Linux 10 (buster)
>>> |
>>> | Matrix products: default
>>> | BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.8.0
>>> | LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.8.0
>>> |
>>> | locale:
>>> |  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
>>> |  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
>>> |  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
>>> |  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
>>> |  [9] LC_ADDRESS=C               LC_TELEPHONE=C
>>> | [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
>>> |
>>> | attached base packages:
>>> | [1] stats     graphics  grDevices utils     datasets  methods   base
>>> |
>>> | other attached packages:
>>> | [1] dumpTest_0.1.0
>>> |
>>> | loaded via a namespace (and not attached):
>>> | [1] compiler_4.0.5
>>> | > for (i in 1:100) {
>>> | +   print(i)
>>> | +   print(system.time(f()))
>>> | + }
>>> | [1] 1
>>> |    user  system elapsed
>>> |   0.028   0.004   0.034
>>> | [1] 2
>>> |    user  system elapsed
>>> |   0.067   0.008   0.075
>>> | [1] 3
>>> |    user  system elapsed
>>> |   0.176   0.000   0.176
>>> | [1] 4
>>> |    user  system elapsed
>>> |   0.335   0.012   0.349
>>> | [1] 5
>>> |    user  system elapsed
>>> |   0.745   0.023   0.770
>>> | [1] 6
>>> |    user  system elapsed
>>> |   1.495   0.060   1.572
>>> | [1] 7
>>> |    user  system elapsed
>>> |   2.902   0.136   3.040
>>> | [1] 8
>>> |    user  system elapsed
>>> |   5.753   0.272   6.034
>>> | [1] 9
>>> |    user  system elapsed
>>> |  11.807   0.708  12.597
>>> | [1] 10
>>> | ^C
>>> | Timing stopped at: 6.638 0.549 7.214
>>> |
>>> | I had to interrupt in iteration 10 because I was running low on RAM.
>>> 
>>> No issue here.  Ubuntu 20.10, R 4.0.5 'from CRAN' i.e. Michael's PPA build
>>> off my Debian package, hence instrumentation as in the Debian package.
>>> 
>>> edd at rob:~$ installGithub.r akersting/dumpTest
>>> Using github PAT from envvar GITHUB_PAT
>>> Downloading GitHub repo akersting/dumpTest at HEAD
>>> ?  checking for file 
>>> ?/tmp/remotes3f9af733166ccd/akersting-dumpTest-3bed8e2/DESCRIPTION? ...
>>> ?  preparing ?dumpTest?:
>>> ?  checking DESCRIPTION meta-information ...
>>> ?  checking for LF line-endings in source and make files and shell scripts
>>> ?  checking for empty or unneeded directories
>>> ?  building ?dumpTest_0.1.0.tar.gz?
>>> 
>>> Installing package into ?/usr/local/lib/R/site-library?
>>> (as ?lib? is unspecified)
>>> * installing *source* package ?dumpTest? ...
>>> ** using staged installation
>>> ** R
>>> ** byte-compile and prepare package for lazy loading
>>> ** help
>>> No man pages found in package  ?dumpTest?
>>> *** installing help indices
>>> ** building package indices
>>> ** testing if installed package can be loaded from temporary location
>>> ** testing if installed package can be loaded from final location
>>> ** testing if installed package keeps a record of temporary installation 
>>> path
>>> * DONE (dumpTest)
>>> edd at rob:~$ Rscript -e 'system.time({for (i in 1:100) dumpTest::f()})'
>>>    user  system elapsed
>>>   0.481   0.019   0.500
>>> edd at rob:~$
>>> 
>>> (I also ran the variant you showed with the dual print statements, it just
>>> consumes more screen real estate and ends on
>>> 
>>> [...]
>>> [1] 97
>>>    user  system elapsed
>>>   0.004   0.000   0.005
>>> [1] 98
>>>    user  system elapsed
>>>   0.004   0.000   0.005
>>> [1] 99
>>>    user  system elapsed
>>>   0.004   0.000   0.004
>>> [1] 100
>>>    user  system elapsed
>>>   0.005   0.000   0.005
>>> edd at rob:~$ )
>>> 
>>> Dirk
>>> 
>>> --
>>> https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>>> 
>
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

From c@@rd|@g@bor @end|ng |rom gm@||@com  Fri Apr  9 22:03:46 2021
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Fri, 9 Apr 2021 22:03:46 +0200
Subject: [Rd] encodeString converts to UTF-8 on Windows R-devel
In-Reply-To: <CABtg=KkwGA+V81-Z+1LBi69N7cYoRmpbmY4OWYunWh9GM98MOg@mail.gmail.com>
References: <CABtg=KkwGA+V81-Z+1LBi69N7cYoRmpbmY4OWYunWh9GM98MOg@mail.gmail.com>
Message-ID: <CABtg=K=8O7D91KUq1K9r_bGsok6qeXDKXjiwjxitjrkhYFsjjQ@mail.gmail.com>

For the record, this was a bug introduced here:
https://github.com/wch/r-source/commit/1c149eddee9c6d4b87a987a964a611bf8fe43a74
and fixed today here:
https://github.com/wch/r-source/commit/ec0761e63598d38eb5e8ab3fb995da06ab5c91ee

G.

On Fri, Mar 5, 2021 at 2:52 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>
> Which is not necessarily bad news. :)
>
> I wonder if this was intended, because I did not find anything about
> it in the news file. It also breaks a couple of R packages, e.g. desc,
> probably more.
>
> Is this intended?
>
> Thanks!
>
> This is R-devel from yesterday:
>
> > x <- "\xfc"
> > Encoding(x) <- "latin1"
> > charToRaw(encodeString(x))
> [1] c3 bc
> >
> > l10n_info()
> $MBCS
> [1] FALSE
>
> $`UTF-8`
> [1] FALSE
>
> $`Latin-1`
> [1] TRUE
>
> $codepage
> [1] 1252
>
> $system.codepage
> [1] 1252
>
> and this is R-4.0.4:
>
> > x <- "\xfc"
> > Encoding(x) <- "latin1"
> > charToRaw(encodeString(x))
> [1] fc
> >
> > l10n_info()
> $MBCS
> [1] FALSE
>
> $`UTF-8`
> [1] FALSE
>
> $`Latin-1`
> [1] TRUE
>
> $codepage
> [1] 1252
>
> $system.codepage
> [1] 1252


From novo@|rj @end|ng |rom rutger@@edu  Sat Apr 10 01:34:13 2021
From: novo@|rj @end|ng |rom rutger@@edu (Ryan Novosielski)
Date: Fri, 9 Apr 2021 23:34:13 +0000
Subject: [Rd] R 4.0.1-4.0.5 built with Intel Composer 19.0-19.1.1,
 error in "make check" on CentOS 7.7-7.9
In-Reply-To: <20200625150621.3854a233@Tarkus>
References: <70478914-CEB6-4C5A-A7FF-3DB213D449DE@rutgers.edu>
 <20200625150621.3854a233@Tarkus>
Message-ID: <741A52A6-B95D-446E-874B-1498AC3CC776@rutgers.edu>

> On Jun 25, 2020, at 8:06 AM, Ivan Krylov <krylov.r00t at gmail.com> wrote:
> 
> On Wed, 24 Jun 2020 18:56:06 +0000
> Ryan Novosielski <novosirj at rutgers.edu> wrote:
> 
> On my machine, getOption('expressions') is 5000 and the example from
> the test correctly stops with length(traceback()) == 2500. (And the
> simpler example of f <- function() f(); f() stops with
> length(traceback()) == 5000).
> 
>> Traceback:
> 
> <...>
> 
>> 2718: foo()
> 
> This (traceback() being more than 2500 entries long) seems to imply
> that the stack size check is somehow skipped. (Perhaps optimized away?)
> The evaluation depth limit is checked in src/main/eval.c, line 705 [*],
> followed by stack size check. Can you attach the debugger and take a
> look at the values of R_EvalDepth and R_Expressions while executing the
> text? What about R_CStackStart and R_CStackLimit? What is the stack
> size limit (ulimit -s?) on the machine running this test?
> 
> -- 
> Best regards,
> Ivan
> 
> [*]
> https://github.com/wch/r-source/blob/8d7ac4699fba640d030703fa010b66bf26054cbd/src/main/eval.c#L705

Thanks again for your help, Ivan, and also Frederick for pointing out how I might run the debugger with R. 

I?m finally back at this. Here?s what I see, presuming I?ve done this the right way. Anything of use here as far as troubleshooting?

[novosirj at amarel-test2 bin]$ ./R -d gdb-ia

...

Reading symbols from /scratch/novosirj/install-files/R-4.0.5-intel-19.1-build/bin/exec/R...
(gdb) run
Starting program: /scratch/novosirj/install-files/R-4.0.5-intel-19.1-build/bin/exec/R 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".

R version 4.0.5 (2021-03-31) -- "Shake and Throw"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

...

[Detaching after fork from child process 42089]
[Detaching after fork from child process 42091]
> bar <- function() 1+1
> foo <- function() { on.exit(bar()); foo() }
> tryCatch(foo(), error=function(x) TRUE) # now simple "infinite recursion"

Program received signal SIGSEGV, Segmentation fault.
bcEval.R (body=0x3eb7748, rho=0x3f72770, useCache=TRUE) at /scratch/novosirj/install-files/R-4.0.5/src/main/eval.c:6478
6478      codebase = pc = BCCODE(body);
(gdb) print R_EvalDepth
$1 = 2729
(gdb) print R_Expressions
$2 = 5000
(gdb) print R_CStackStart
$3 = 140737488207872
(gdb) print R_CStackLimit
$4 = 7969177
(gdb) quit
A debugging session is active.

        Inferior 1 [process 42083] will be killed.

Quit anyway? (y or n) y

[novosirj at amarel-test2 bin]$ ulimit -s
8192


--
#BlackLivesMatter
____
|| \\UTGERS,  	 |---------------------------*O*---------------------------
||_// the State	 |         Ryan Novosielski - novosirj at rutgers.edu
|| \\ University | Sr. Technologist - 973/972.0922 (2x0922) ~*~ RBHS Campus
||  \\    of NJ	 | Office of Advanced Research Computing - MSB C630, Newark
     `'


From deep@y@n@@@rk@r @end|ng |rom gm@||@com  Sun Apr 11 12:00:55 2021
From: deep@y@n@@@rk@r @end|ng |rom gm@||@com (Deepayan Sarkar)
Date: Sun, 11 Apr 2021 15:30:55 +0530
Subject: [Rd] reshape documentation
In-Reply-To: <3668b25f-4909-c03a-43cf-cc5d6c47d84e@dewey.myzen.co.uk>
References: <1615629058522.60204@ap-hm.fr>
 <3668b25f-4909-c03a-43cf-cc5d6c47d84e@dewey.myzen.co.uk>
Message-ID: <CADfFDC78SmbX5+VwOc2wTWrgqyKUcchJb3_B5dUpLsr9P9VHRQ@mail.gmail.com>

On Wed, Mar 17, 2021 at 7:55 PM Michael Dewey <lists at dewey.myzen.co.uk> wrote:
>
> Comments in line
>
> On 13/03/2021 09:50, SOEIRO Thomas wrote:
> > Dear list,
> >
> > I have some questions/suggestions about reshape.
> >
> > 1) I think a good amount of the popularity of base::reshape alternative is due to the complexity of reshape documentation. It is quite hard (at least it is for me) to figure out what argument is needed for respectively "long to wide" and "wide to long", because reshapeWide and reshapeLong are documented together.
> > - Do you agree with this?
> > - Would you consider a proposal to modify the documentation?
> > - If yes, what approach do you suggest? e.g. split in two pages?
>
> The current documentation is much clearer than it was when I first
> started using R but we should always strive for more.
>
> I would suggest leaving the documentation in one place but it might be
> helpful to add which direction is relevant for each parameter by placing
> (to wide) or (to long) as appropriate. I think having completely
> separate lists is not needed

I have just checked in some updates to the documentation (in R-devel)
which hopefully makes usage clearer. Any further suggestions are
welcome. We are planning to add a short vignette as well, hopefully in
time for R 4.1.0.

> > 2) I do not think the documentation indicates that we can use varying argument to rename variables in reshapeWide.
> > - Is this worth documenting?
> > - Is the construct list(c()) really needed?
>
> Yes, because you may have more than one set of variables which need to
> correspond to a single variable in long format. So in your example if
> you also had 11 variables for the temperature as well as the
> concentration each would need specifying as a separate vector in the list.

That's a valid point, but on the other hand, direction="long" already
supports specifying 'varying' as a vector, and it does simplify the
single variable case. So we decided to be consistent and allow it for
direction="wide" too, hopefully with loud enough warnings in the
documentation about using the feature carelessly.

Best,
-Deepayan

> Michael
>
> >
> > reshape(Indometh,
> >          v.names = "conc",
> >          idvar = "Subject",
> >          timevar = "time",
> >          direction = "wide",
> >          varying = list(c("conc_0.25hr",
> >                           "conc_0.5hr",
> >                           "conc.0.75hr",
> >                           "conc_1hr",
> >                           "conc_1.25hr",
> >                           "conc_2hr",
> >                           "conc_3hr",
> >                           "conc_4hr",
> >                           "conc_5hr",
> >                           "conc_6hr",
> >                           "conc_8hr")))
> >
> > Thanks,
> >
> > Thomas
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> --
> Michael
> http://www.dewey.myzen.co.uk/home.html
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From ggrothend|eck @end|ng |rom gm@||@com  Sun Apr 11 12:43:38 2021
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Sun, 11 Apr 2021 06:43:38 -0400
Subject: [Rd] reshape documentation
In-Reply-To: <CADfFDC78SmbX5+VwOc2wTWrgqyKUcchJb3_B5dUpLsr9P9VHRQ@mail.gmail.com>
References: <1615629058522.60204@ap-hm.fr>
 <3668b25f-4909-c03a-43cf-cc5d6c47d84e@dewey.myzen.co.uk>
 <CADfFDC78SmbX5+VwOc2wTWrgqyKUcchJb3_B5dUpLsr9P9VHRQ@mail.gmail.com>
Message-ID: <CAP01uRkidUXDoGDtYQDjTTxYf8O2LfpXE68bJmzFOge+=tZuBA@mail.gmail.com>

One thing about varying is that reshape ignores the names on the
varying list and makes you
specify them all over again even though it could know what they are.
Note that we  had to
specify that names(varying) is the v.names.

  DF <- structure(list(A1 = 10L, A2 = 5L, B1 = 11L, B2 = 5L, C1 = 21L,
      C2 = 10L), class = "data.frame", row.names = c(NA, -1L))

  let <- gsub("\\d", "", names(DF))
  num <- gsub("\\D", "", names(DF))

  varying <- split(names(DF), num)
  reshape(DF, dir = "long", varying = varying, v.names = names(varying),
    times = unique(let), timevar = "let")[-4]

On Sun, Apr 11, 2021 at 6:01 AM Deepayan Sarkar
<deepayan.sarkar at gmail.com> wrote:
>
> On Wed, Mar 17, 2021 at 7:55 PM Michael Dewey <lists at dewey.myzen.co.uk> wrote:
> >
> > Comments in line
> >
> > On 13/03/2021 09:50, SOEIRO Thomas wrote:
> > > Dear list,
> > >
> > > I have some questions/suggestions about reshape.
> > >
> > > 1) I think a good amount of the popularity of base::reshape alternative is due to the complexity of reshape documentation. It is quite hard (at least it is for me) to figure out what argument is needed for respectively "long to wide" and "wide to long", because reshapeWide and reshapeLong are documented together.
> > > - Do you agree with this?
> > > - Would you consider a proposal to modify the documentation?
> > > - If yes, what approach do you suggest? e.g. split in two pages?
> >
> > The current documentation is much clearer than it was when I first
> > started using R but we should always strive for more.
> >
> > I would suggest leaving the documentation in one place but it might be
> > helpful to add which direction is relevant for each parameter by placing
> > (to wide) or (to long) as appropriate. I think having completely
> > separate lists is not needed
>
> I have just checked in some updates to the documentation (in R-devel)
> which hopefully makes usage clearer. Any further suggestions are
> welcome. We are planning to add a short vignette as well, hopefully in
> time for R 4.1.0.
>
> > > 2) I do not think the documentation indicates that we can use varying argument to rename variables in reshapeWide.
> > > - Is this worth documenting?
> > > - Is the construct list(c()) really needed?
> >
> > Yes, because you may have more than one set of variables which need to
> > correspond to a single variable in long format. So in your example if
> > you also had 11 variables for the temperature as well as the
> > concentration each would need specifying as a separate vector in the list.
>
> That's a valid point, but on the other hand, direction="long" already
> supports specifying 'varying' as a vector, and it does simplify the
> single variable case. So we decided to be consistent and allow it for
> direction="wide" too, hopefully with loud enough warnings in the
> documentation about using the feature carelessly.
>
> Best,
> -Deepayan
>
> > Michael
> >
> > >
> > > reshape(Indometh,
> > >          v.names = "conc",
> > >          idvar = "Subject",
> > >          timevar = "time",
> > >          direction = "wide",
> > >          varying = list(c("conc_0.25hr",
> > >                           "conc_0.5hr",
> > >                           "conc.0.75hr",
> > >                           "conc_1hr",
> > >                           "conc_1.25hr",
> > >                           "conc_2hr",
> > >                           "conc_3hr",
> > >                           "conc_4hr",
> > >                           "conc_5hr",
> > >                           "conc_6hr",
> > >                           "conc_8hr")))
> > >
> > > Thanks,
> > >
> > > Thomas
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> >
> > --
> > Michael
> > http://www.dewey.myzen.co.uk/home.html
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From brenton @end|ng |rom w|ern|k@org  Tue Apr 13 15:15:50 2021
From: brenton @end|ng |rom w|ern|k@org (Brenton Wiernik)
Date: Tue, 13 Apr 2021 09:15:50 -0400
Subject: [Rd] Sys.timezone() fails on Linux under Microsoft WSL
Message-ID: <0LuO6D-1leFVX1GJL-011mQG@mrelay.perfora.net>

In Microsoft?s Windows Subsystem for Linux (WSL or WSL2), there is not system framework, so utilities that depend on it fail. This includes timedatectl which R uses in Sys.timezone(). The timedatectl utility is present on Linux systems installed under WSL/WSL2, but is non-functional. So, when Sys.timezone() checks for Sys.which("timedatectl"), it receives a false positive. The subsequent methods after this if () do work, however.

This can be fixed if line 42 of Sys.timezone() were changed from:
if (nzchar(Sys.which("timedatectl"))) {

to:
if (nzchar(Sys.which("timedatectl")) && !grepl("microsoft", system("uname -r", intern = TRUE), ignore.case = TRUE)) {

"uname -r" returns for example:
"5.4.72-microsoft-standard-WSL2"

So checking for "microsoft" or "WSL" would probably work.


Brenton Wiernik



	[[alternative HTML version deleted]]


From wewo|@k| @end|ng |rom gm@||@com  Tue Apr 13 16:36:32 2021
From: wewo|@k| @end|ng |rom gm@||@com (Witold E Wolski)
Date: Tue, 13 Apr 2021 16:36:32 +0200
Subject: [Rd] R CMD check fails with: During startup - Warning message:
 Setting LC_CTYPE=en_US.UTF-8 failed
Message-ID: <CAAjnpdgw9z9ihiwefoxPy13t8Tp4DLisuD4dCc0kqHFGxVBOBw@mail.gmail.com>

Hello,

I am trying to run a package check on windows 10.
But it fails with the following errors:

```
$ R CMD check prolfqua_0.1.5.3.tar.gz
During startup - Warning message:
Setting LC_CTYPE=en_US.UTF-8 failed
* using log directory 'C:/Users/wewol/__checkout/prolfqua.Rcheck'
* using R version 4.0.3 (2020-10-10)
* using platform: x86_64-w64-mingw32 (64-bit)
* using session charset: ASCII
....
* checking DESCRIPTION meta-information ... WARNING
During startup - Warning message:
Setting LC_CTYPE=en_US.UTF-8 failed
 ERROR
During startup - Warning message:
Setting LC_CTYPE=en_US.UTF-8 failed
* DONE

Status: 1 ERROR, 1 WARNING, 3 NOTEs
See
  'C:/Users/wewol/__checkout/prolfqua.Rcheck/00check.log'
for details.
```

I am puzzled. I did a web search but all I found is:
https://stackoverflow.com/questions/54102869/during-startup-warning-message-setting-lc-ctype-failed-on-windows

I am reluctant to use .Rprofiles because otherwise, my R installation
works just fine.

Best regards
Witek


-- 
Witold Eryk Wolski


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Apr 14 08:34:19 2021
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 14 Apr 2021 08:34:19 +0200
Subject: [Rd] R CMD check fails with: During startup - Warning message:
 Setting LC_CTYPE=en_US.UTF-8 failed
In-Reply-To: <CAAjnpdgw9z9ihiwefoxPy13t8Tp4DLisuD4dCc0kqHFGxVBOBw@mail.gmail.com>
References: <CAAjnpdgw9z9ihiwefoxPy13t8Tp4DLisuD4dCc0kqHFGxVBOBw@mail.gmail.com>
Message-ID: <44ea5485-3979-c7f6-b48e-81518740c7d4@gmail.com>

On 4/13/21 4:36 PM, Witold E Wolski wrote:
> Hello,
>
> I am trying to run a package check on windows 10.
> But it fails with the following errors:
>
> ```
> $ R CMD check prolfqua_0.1.5.3.tar.gz
> During startup - Warning message:
> Setting LC_CTYPE=en_US.UTF-8 failed
> * using log directory 'C:/Users/wewol/__checkout/prolfqua.Rcheck'
> * using R version 4.0.3 (2020-10-10)
> * using platform: x86_64-w64-mingw32 (64-bit)
> * using session charset: ASCII
> ....
> * checking DESCRIPTION meta-information ... WARNING
> During startup - Warning message:
> Setting LC_CTYPE=en_US.UTF-8 failed
>   ERROR
> During startup - Warning message:
> Setting LC_CTYPE=en_US.UTF-8 failed
> * DONE
>
> Status: 1 ERROR, 1 WARNING, 3 NOTEs
> See
>    'C:/Users/wewol/__checkout/prolfqua.Rcheck/00check.log'
> for details.
> ```
>
> I am puzzled. I did a web search but all I found is:
> https://stackoverflow.com/questions/54102869/during-startup-warning-message-setting-lc-ctype-failed-on-windows
>
> I am reluctant to use .Rprofiles because otherwise, my R installation
> works just fine.

I'd just clear the content of LC_CTYPE and LC_ALL before running R (so 
also before installing packages, building packages, checking packages). 
I suppose you are running the checks from Msys2/bash (or cygwin or 
similar), which by default sets LC_CTYPE to this value.

The problem is that R cannot set the current encoding to UTF-8, because 
it is built against MSVCRT. You can set UTF-8 as the current encoding in 
the (experimental) UCRT build of R. But even there, it is better to run 
package checks with the variables cleared/not set, unless your intention 
is to debug the checks to work in different encodings.

Best
Tomas


>
> Best regards
> Witek
>
>


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Apr 14 09:28:38 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 14 Apr 2021 09:28:38 +0200
Subject: [Rd] Sys.timezone() fails on Linux under Microsoft WSL
In-Reply-To: <0LuO6D-1leFVX1GJL-011mQG@mrelay.perfora.net>
References: <0LuO6D-1leFVX1GJL-011mQG@mrelay.perfora.net>
Message-ID: <24694.39334.41561.957614@stat.math.ethz.ch>

>>>>> Brenton Wiernik 
>>>>>     on Tue, 13 Apr 2021 09:15:50 -0400 writes:

    > In Microsoft?s Windows Subsystem for Linux (WSL or WSL2),
    > there is not system framework, so utilities that depend on
    > it fail. This includes timedatectl which R uses in
    > Sys.timezone(). The timedatectl utility is present on
    > Linux systems installed under WSL/WSL2, but is
    > non-functional. So, when Sys.timezone() checks for
    > Sys.which("timedatectl"), it receives a false
    > positive. The subsequent methods after this if () do work,
    > however.

    > This can be fixed if line 42 of Sys.timezone() were changed from:

    > if (nzchar(Sys.which("timedatectl"))) {

    > to:

    > if (nzchar(Sys.which("timedatectl")) && !grepl("microsoft", system("uname -r", intern = TRUE), ignore.case = TRUE)) {

    > "uname -r" returns for example:  "5.4.72-microsoft-standard-WSL2"

    > So checking for "microsoft" or "WSL" would probably work.

    > Brenton Wiernik

Thank you.  This all makes sense.
However,  using system("uname -r")  creates another platform
dependency (it fails, i.e., signals an error, e.g., on our Windows Server).

Could  Sys.info()  be used instead?
What does it give on your platform?



    > [[alternative HTML version deleted]]

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From @|mon@urb@nek @end|ng |rom R-project@org  Wed Apr 14 09:35:27 2021
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 14 Apr 2021 07:35:27 -0000
Subject: [Rd] custom allocators, Valgrind and uninitialized memory
In-Reply-To: <E1lQyKz-0002vU-AF@rmmprod07.runbox>
References: <E1lQyKz-0002vU-AF@rmmprod07.runbox>
Message-ID: <EE9F6C8C-E540-4310-BD97-B65FE14F58A7@R-project.org>


Andres,

correct me if I'm wrong, but the issue here is not initialisation but rather valgrind flagging. You simply have to call VALGRIND_MAKE_MEM_DEFINED() in your code after allocVector3() to declare that you have initialised the memory - or am I missing something?

Cheers,
Simon



> On 30/03/2021, at 9:18 AM, Andreas Kersting <r-devel at akersting.de> wrote:
> 
> Hi Tomas,
> 
> Thanks for sharing your view on this! I understand your point, but still I think that the current situation is somewhat unfortunate:
> 
> I would argue that mmap() is a natural candidate to be used together with allocVector3(); it is even mentioned explicitly here: https://github.com/wch/r-source/blob/trunk/src/main/memory.c#L2575-L2576
> 
> However, when using a non-anonymous mapping, i.e. we want mmap() to initialize the memory e.g. from a file or a POSIX shared memory object, this means that we need to use MAP_FIXED in case we are obliged to initialize the memory AFTER allocVector3() returned it; at least I cannot think of a different way to achieve this.
> 
> The use of MAP_FIXED
> - is discouraged (e.g. https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/mmap.2.html)
> - requires two calls to mmap(): (1) to obtain the (anonymous) memory to be handed out by the custom allocater and (2) to actually map the file "over" the just allocated vector (using MAP_FIXED), which will overwrite the vector header; hence, we need to first back it up to later restore it
> 
> I have implemented my function using MAP_FIXED here: https://github.com/gfkse/bettermc/commit/f34c4f4c45c9ab11abe9b9e9b8b48064f128d731#diff-7098a5dde34efab163bbef27fe32f95c29e76236649479985d09c70100e4c737R278-R323
> 
> This solution, to me, is much more complicated and hacky than my previous one, which assumed it is OK to hand out already initialized memory directly from allocVector3().
> 
> Regards,
> Andreas
> 
> 
> 2021-03-29 10:41 GMT+02:00 "Tomas Kalibera" <tomas.kalibera at gmail.com>:
>> Hi Andreas,
>> On 3/26/21 8:48 PM, Andreas Kersting wrote:
>>> Hi Dirk,  > > Sure, let me try to explain: > > CRAN ran the tests of my package using R which was configured > --with-valgrind-instrumentation > 0. Valgrind reported many errors > related to the use of supposedly uninitialized memory and the CRAN > team asked me to tackle these. > > These errors are false positives, because I pass a custom allocator > to allocVector3() which hands out memory which is already > initialized. However, this memory is explicitly marked for Valgrind > as uninitialized by allocVector3(), and I do not initialize it > subsequently, so Valgrind complains. > > Now I am asking if it is correct that allocVector3() marks memory as > uninitialized/undefined, even if it comes from a custom allocator. > This is because allocVector3() cannot know if the memory might > already by initialized.
>> I think the semantics of allocVector/allocVector3 should be the same regardless of whether custom allocators are used. The semantics of allocVector is to provide uninitialized memory (non-pointer types, Writing R Extensions 5.9.2). Therefore, it is the caller who needs to take care of initialization. This is also the semantics of "malloc" and Rallocators.h says "custom_alloc_t mem_alloc; /* malloc equivalent */".
>> 
>> So I think that your code using your custom allocator needs to initialize allocated memory to be correct. If your allocator initializes the memory, that is fine, but unnecessary.
>> 
>> So technically speaking, the valgrind reports are not false alarms. I think your call sites should initialize.
>> 
>> Best
>> Tomas
>> 
>> 
>> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From kry|ov@r00t @end|ng |rom gm@||@com  Wed Apr 14 09:36:14 2021
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Wed, 14 Apr 2021 07:36:14 -0000
Subject: [Rd] 
 [Solved] Possible x11 window manager window aggregation under
 one icon?
In-Reply-To: <24669.59012.651091.193661@stat.math.ethz.ch>
References: <24662.10270.163829.883433@rob.eddelbuettel.com>
 <20210322223254.5434ff0d@Tarkus>
 <b225821d-3a86-49b9-51de-7dda280f0492@gmail.com>
 <20210323000121.66c76f27@Tarkus>
 <24665.4828.899674.534062@rob.eddelbuettel.com>
 <24665.24387.615121.367408@rob.eddelbuettel.com>
 <20210323131858.4776a571@Tarkus>
 <4db182f4-d282-ff22-d0ee-8bf79abf3035@gmail.com>
 <20210323185407.76115f1b@arachnoid>
 <a2e0f28c-b118-1a38-65a6-819d974ae9f2@gmail.com>
 <24666.10031.444487.469197@rob.eddelbuettel.com>
 <24667.1747.993142.397629@stat.math.ethz.ch>
 <24668.36274.53383.514330@rob.eddelbuettel.com>
 <ca146334-92de-2328-db73-2556f2649144@gmail.com>
 <24669.59012.651091.193661@stat.math.ethz.ch>
Message-ID: <20210326210646.70f3a21c-5966@Tarkus>


On Fri, 26 Mar 2021 14:49:56 +0100
Martin Maechler <maechler at stat.math.ethz.ch> wrote:

> I concluded I liked the first [patch] because it would achieve
> what's considered "uniformly better" in the sense that it makes
> R graphics behave like "all other" desktop applications *and* it
> would do so for all possible window manager scheme without any
> need of some desktop setting (which a typical user would not
> know about, nor know that s?he should/could change).

Martin, here is some information on how X11 (and rgl) windows are
grouped on different platforms, depending on the presence of the first
patch and the .desktop file:

 - GNOME [1] needs a .desktop file to group windows by their WM_CLASS
   and otherwise groups windows by their WM_HINTS.window_group only,
   which makes different configurations possible:
   * no window_group, no .desktop file: no grouping
   * window_group patch, no .desktop file: plot windows grouped
     per-process, x11 and rgl separately
   * StartupWMClass in .desktop file: x11 and rgl windows from all R
     processes grouped together
 - the XQuartz window manager apparently uses WM_HINTS.window_group but
   not WM_CLASS to group windows [2] (patch is only relevant for
   rgl, .desktop files aren't relevant)
 - Xfce groups windows by WM_CLASS [3], so adding WM_HINTS.window_group
   or changing the .desktop file doesn't group them any more
 - KDE seems to follow the .desktop file (if StartupWMClass is
   present) and group by WM_CLASS otherwise [4], but I don't have it
   installed to check. On the other hand, KDE might be ignoring
   WM_HINTS.window_group, judging by the absence of "WM2GroupLeader" in
   the source code of Plasma Workspace. This implies no changes in
   window grouping from patching window_group or changing the .desktop
   file. [5]

To summarise, the patch to x11() leads to visible window grouping in
GNOME-based environments. My impression is that most environments group
windows by WM_CLASS (which had been happening without the patch), but
there are far too many window managers to check that impression.

-- 
Best regards,
Ivan

[1] Including Cinammon:
https://github.com/linuxmint/cinnamon/blob/72732da43e971b83d926af56998c83ee8d000394/src/cinnamon-window-tracker.c#L482

Likely Unity forks too.

[2] Judging by
https://stat.ethz.ch/pipermail/r-devel/2021-March/080571.html

[3] With minor inconsistencies regarding x11 vs rgl windows between
Win+Tab "switch between application windows" and the window buttons on
the task bar, but let's not focus on that.

[4]
https://invent.kde.org/plasma/plasma-workspace/-/blob/7c49a0ae/libtaskmanager/xwindowtasksmodel.cpp#L439

[5] Strictly speaking, StartupWMClass= in the .desktop file lets the
desktop environment associate the plot windows with the R launcher
button if it's also present on the task bar.


From brenton @end|ng |rom w|ern|k@org  Wed Apr 14 15:19:53 2021
From: brenton @end|ng |rom w|ern|k@org (Brenton Wiernik)
Date: Wed, 14 Apr 2021 09:19:53 -0400
Subject: [Rd] Sys.timezone() fails on Linux under Microsoft WSL
In-Reply-To: <24694.39334.41561.957614@stat.math.ethz.ch>
References: <0LuO6D-1leFVX1GJL-011mQG@mrelay.perfora.net>
 <24694.39334.41561.957614@stat.math.ethz.ch>
Message-ID: <1M6DvY-1lUTZJ1HBo-006bPO@mrelay.perfora.net>

That would work.

Sys.info()['release']
#                          release 
# "5.4.72-microsoft-standard-WSL2"

Brenton


From: Martin Maechler
Sent: Wednesday, April 14, 2021 03:28
To: Brenton Wiernik
Cc: r-devel at r-project.org
Subject: Re: [Rd] Sys.timezone() fails on Linux under Microsoft WSL

>>>>> Brenton Wiernik 
>>>>>     on Tue, 13 Apr 2021 09:15:50 -0400 writes:

    > In Microsoft?s Windows Subsystem for Linux (WSL or WSL2),
    > there is not system framework, so utilities that depend on
    > it fail. This includes timedatectl which R uses in
    > Sys.timezone(). The timedatectl utility is present on
    > Linux systems installed under WSL/WSL2, but is
    > non-functional. So, when Sys.timezone() checks for
    > Sys.which("timedatectl"), it receives a false
    > positive. The subsequent methods after this if () do work,
    > however.

    > This can be fixed if line 42 of Sys.timezone() were changed from:

    > if (nzchar(Sys.which("timedatectl"))) {

    > to:

    > if (nzchar(Sys.which("timedatectl")) && !grepl("microsoft", system("uname -r", intern = TRUE), ignore.case = TRUE)) {

    > "uname -r" returns for example:  "5.4.72-microsoft-standard-WSL2"

    > So checking for "microsoft" or "WSL" would probably work.

    > Brenton Wiernik

Thank you.  This all makes sense.
However,  using system("uname -r")  creates another platform
dependency (it fails, i.e., signals an error, e.g., on our Windows Server).

Could  Sys.info()  be used instead?
What does it give on your platform?



    > [[alternative HTML version deleted]]

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


	[[alternative HTML version deleted]]


