From irederik m@iii@g oii oib@@et  Wed Jan  1 03:56:52 2020
From: irederik m@iii@g oii oib@@et (irederik m@iii@g oii oib@@et)
Date: Tue, 31 Dec 2019 18:56:52 -0800
Subject: [Rd] best way to build from Git
In-Reply-To: <CABtg=Kkr9P9=go2XCCZ5h9=hGipAo16Cw0ccCDWcogHwZsxV0Q@mail.gmail.com>
References: <20191226013717.GA320941@localhost>
 <CABtg=K=XO8+Ti6UGAGraaufh5T_ua7cFnC_tUnTE=vsmX4Dgyg@mail.gmail.com>
 <24068.43472.496118.798873@stat.math.ethz.ch>
 <CABtg=Kkr9P9=go2XCCZ5h9=hGipAo16Cw0ccCDWcogHwZsxV0Q@mail.gmail.com>
Message-ID: <20200101025652.GF466999@localhost>

Thank you all for your replies.

On Thu, Dec 26, 2019 at 01:06:48PM +0000, G?bor Cs?rdi wrote:
>On Thu, Dec 26, 2019 at 12:39 PM Martin Maechler
>> ...
>> It would probably really be useful, if Lionel (or someone else)
>> updated his nice write-up and auxiliary {script / make} - files
>> so things work too when build with "src-dir != build-dir".
>
>I am not sure what you mean, what is wrong with this build directory?
>https://bookdown.org/lionel/contributing/building-r.html#sec:build

Yes it seems that Lionel's instructions successfully build a Git repo
containing R into a separate build directory. Thank you Lionel.

I've adapted these instructions, together with Lionel's GNUmakefile
and make-svn-revision script, to suit my (Linux-based) environment. I
put it in a little GitHub repository. Currently the following commands
work for me to download and install R in my home directory:

     git clone https://github.com/navarum/tweaks
     PREFIX=~/.local ./tweaks/r/BUILD install

For now it applies one example patch on top of a fixed recent commit
to the upstream repo https://github.com/wch/r-source/ . I noticed that
the first commit hash I selected from 'git log' was not stable, so I'm
not sure if this script will work tomorrow or next week. However, I
thought I ought to share it in case others find it useful. I tried to
make the (Bash) code concise enough that it would be possible for
others to see what it is doing and adapt it to maintaining their own
patch series on top of some version of R. I've been using this tool to
maintain custom versions of other software packages as well, so there
may be a little "too much information" in there - but someone could
obviously fork it and keep just what they need. The system tries to be
somewhat intelligent about remembering whether configure was run,
checking if the patches need to be reapplied, not overwriting any
changes I might have made to the cloned r-source git repo, and so on.

Just for the record, my original question on this thread was about the
reasons for not having R's default build system work with different
revision control systems, as well as some apparent typos in the
Makefile that comes with R.

Thank you,

Frederick


From j@goreck| @end|ng |rom w|t@edu@p|  Wed Jan  1 07:16:31 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Wed, 1 Jan 2020 11:46:31 +0530
Subject: [Rd] New R function is.nana = is.na & !is.nan
Message-ID: <CAOO9MKU3XO+whkOUhEAY5ymJPphL=3snc5JB949Y3tNLw4tang@mail.gmail.com>

Hello R-devel,

Best wishes in the new year. I am writing to kindly request new R
function so NA_real_ can be more easily detected.
Currently if one wants to test for NA_real_ (but not NaN) then extra
work has to be done: `is.na(x) & !is.nan(x)`
Required functionality is already at C level so to address my request
there is not that much to do.
Kevin Ushey made a nice summary of current R C api in:
https://stackoverflow.com/a/26262984/2490497
Pasting related part below, extra row added by me is a requested feature.

    +---------------------+
    | C fun    | NaN | NA | R fun
    +---------------------+
    | ISNAN    |  t  | t  | is.na
    | R_IsNaN  |  t  | f  | is.nan
    | ISNA     |  f  | t  | is.na && !is.nan
    | R_IsNA   |  f  | t  | is.na && !is.nan
    +---------------------+
    +---------------------+
    | R fun    | NaN | NA | C fun
    +---------------------+
    | is.na    |  t  | t  | ISNAN
    | is.nan   |  t  | f  | R_IsNaN
    +---------------------+
    | is.nana  |  f  | t  | R_IsNA
    +---------------------+

Strictly speaking, I am asking for a new R function:

    is.nana <- function(x) if (typeof(x)=="numeric")
.Primitive("is.nana") else .Primitive("is.na")

Then probably a copy of C function `do_isnan` as `do_isnana` with a
minor change from `R_IsNaN` to `R_IsNA`.

Best,
Jan Gorecki


From hp@ge@ @end|ng |rom |redhutch@org  Wed Jan  1 23:08:26 2020
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Wed, 1 Jan 2020 22:08:26 +0000
Subject: [Rd] New R function is.nana = is.na & !is.nan
In-Reply-To: <CAOO9MKU3XO+whkOUhEAY5ymJPphL=3snc5JB949Y3tNLw4tang@mail.gmail.com>
References: <CAOO9MKU3XO+whkOUhEAY5ymJPphL=3snc5JB949Y3tNLw4tang@mail.gmail.com>
Message-ID: <584ae6fa-f537-c996-d135-96b06aa758b4@fredhutch.org>

Happy New Year everybody!

The name (is.nana) doesn't make much sense to me. Can you explain it?

One alternative would be to add an extra argument (e.g. 'strict') to 
is.na(). FALSE by default, and ignored (with or w/o a warning) when the 
type of 'x' is not "numeric".

H.


On 12/31/19 22:16, Jan Gorecki wrote:
> Hello R-devel,
> 
> Best wishes in the new year. I am writing to kindly request new R
> function so NA_real_ can be more easily detected.
> Currently if one wants to test for NA_real_ (but not NaN) then extra
> work has to be done: `is.na(x) & !is.nan(x)`
> Required functionality is already at C level so to address my request
> there is not that much to do.
> Kevin Ushey made a nice summary of current R C api in:
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stackoverflow.com_a_26262984_2490497&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=oWT1wDiy7pogVlJHGtdOoM3zdB45t9zZVyGYU8qcOgo&s=zFj3lh-N_YlNBRlDKeO-aTs0Bf2qtWLUHKlw_nh2Q4o&e=
> Pasting related part below, extra row added by me is a requested feature.
> 
>      +---------------------+
>      | C fun    | NaN | NA | R fun
>      +---------------------+
>      | ISNAN    |  t  | t  | is.na
>      | R_IsNaN  |  t  | f  | is.nan
>      | ISNA     |  f  | t  | is.na && !is.nan
>      | R_IsNA   |  f  | t  | is.na && !is.nan
>      +---------------------+
>      +---------------------+
>      | R fun    | NaN | NA | C fun
>      +---------------------+
>      | is.na    |  t  | t  | ISNAN
>      | is.nan   |  t  | f  | R_IsNaN
>      +---------------------+
>      | is.nana  |  f  | t  | R_IsNA
>      +---------------------+
> 
> Strictly speaking, I am asking for a new R function:
> 
>      is.nana <- function(x) if (typeof(x)=="numeric")
> .Primitive("is.nana") else .Primitive("is.na")
> 
> Then probably a copy of C function `do_isnan` as `do_isnana` with a
> minor change from `R_IsNaN` to `R_IsNA`.
> 
> Best,
> Jan Gorecki
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=oWT1wDiy7pogVlJHGtdOoM3zdB45t9zZVyGYU8qcOgo&s=tCCxZtQj30QrtAYORMODT-OnjeKiXxiF0qlZtgyj1Mc&e=
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From j@goreck| @end|ng |rom w|t@edu@p|  Thu Jan  2 03:09:02 2020
From: j@goreck| @end|ng |rom w|t@edu@p| (Jan Gorecki)
Date: Thu, 2 Jan 2020 07:39:02 +0530
Subject: [Rd] New R function is.nana = is.na & !is.nan
In-Reply-To: <584ae6fa-f537-c996-d135-96b06aa758b4@fredhutch.org>
References: <CAOO9MKU3XO+whkOUhEAY5ymJPphL=3snc5JB949Y3tNLw4tang@mail.gmail.com>
 <584ae6fa-f537-c996-d135-96b06aa758b4@fredhutch.org>
Message-ID: <CAOO9MKVbNVWd6s+qwtshbst267HPfQCh3_bPTNmH=f7f21rViQ@mail.gmail.com>

"nana" is meant to express "NA, really NA".
Your suggestion sounds good.

On Thu 2 Jan, 2020, 3:38 AM Pages, Herve, <hpages at fredhutch.org> wrote:

> Happy New Year everybody!
>
> The name (is.nana) doesn't make much sense to me. Can you explain it?
>
> One alternative would be to add an extra argument (e.g. 'strict') to
> is.na(). FALSE by default, and ignored (with or w/o a warning) when the
> type of 'x' is not "numeric".
>
> H.
>
>
> On 12/31/19 22:16, Jan Gorecki wrote:
> > Hello R-devel,
> >
> > Best wishes in the new year. I am writing to kindly request new R
> > function so NA_real_ can be more easily detected.
> > Currently if one wants to test for NA_real_ (but not NaN) then extra
> > work has to be done: `is.na(x) & !is.nan(x)`
> > Required functionality is already at C level so to address my request
> > there is not that much to do.
> > Kevin Ushey made a nice summary of current R C api in:
> >
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stackoverflow.com_a_26262984_2490497&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=oWT1wDiy7pogVlJHGtdOoM3zdB45t9zZVyGYU8qcOgo&s=zFj3lh-N_YlNBRlDKeO-aTs0Bf2qtWLUHKlw_nh2Q4o&e=
> > Pasting related part below, extra row added by me is a requested feature.
> >
> >      +---------------------+
> >      | C fun    | NaN | NA | R fun
> >      +---------------------+
> >      | ISNAN    |  t  | t  | is.na
> >      | R_IsNaN  |  t  | f  | is.nan
> >      | ISNA     |  f  | t  | is.na && !is.nan
> >      | R_IsNA   |  f  | t  | is.na && !is.nan
> >      +---------------------+
> >      +---------------------+
> >      | R fun    | NaN | NA | C fun
> >      +---------------------+
> >      | is.na    |  t  | t  | ISNAN
> >      | is.nan   |  t  | f  | R_IsNaN
> >      +---------------------+
> >      | is.nana  |  f  | t  | R_IsNA
> >      +---------------------+
> >
> > Strictly speaking, I am asking for a new R function:
> >
> >      is.nana <- function(x) if (typeof(x)=="numeric")
> > .Primitive("is.nana") else .Primitive("is.na")
> >
> > Then probably a copy of C function `do_isnan` as `do_isnana` with a
> > minor change from `R_IsNaN` to `R_IsNA`.
> >
> > Best,
> > Jan Gorecki
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> >
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=oWT1wDiy7pogVlJHGtdOoM3zdB45t9zZVyGYU8qcOgo&s=tCCxZtQj30QrtAYORMODT-OnjeKiXxiF0qlZtgyj1Mc&e=
> >
>
> --
> Herv? Pag?s
>
> Program in Computational Biology
> Division of Public Health Sciences
> Fred Hutchinson Cancer Research Center
> 1100 Fairview Ave. N, M1-B514
> P.O. Box 19024
> Seattle, WA 98109-1024
>
> E-mail: hpages at fredhutch.org
> Phone:  (206) 667-5791
> Fax:    (206) 667-1319
>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Jan  2 21:11:56 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 2 Jan 2020 21:11:56 +0100
Subject: [Rd] New R function is.nana = is.na & !is.nan
In-Reply-To: <CAOO9MKVbNVWd6s+qwtshbst267HPfQCh3_bPTNmH=f7f21rViQ@mail.gmail.com>
References: <CAOO9MKU3XO+whkOUhEAY5ymJPphL=3snc5JB949Y3tNLw4tang@mail.gmail.com>
 <584ae6fa-f537-c996-d135-96b06aa758b4@fredhutch.org>
 <CAOO9MKVbNVWd6s+qwtshbst267HPfQCh3_bPTNmH=f7f21rViQ@mail.gmail.com>
Message-ID: <b4fa0b85-9e27-05cb-b0aa-b3ef1a61abb3@gmail.com>

Please note that ?NaN says

"Computations involving ?NaN? will return ?NaN? or perhaps ?NA?: which 
of those two is not guaranteed and may depend on the R platform (since 
compilers may re-order computations)."

It is not reliable to depend on the distinction between NA and (non-NA) 
NaN. Part of the problem is that on some current systems it is not 
specified what the NaN payload will be after even simple arithmetic 
operations. Unfortunately changing R to make such distinction reliable? 
would be a major effort, most likely incur performance overhead even for 
computations where the distinction is not needed, and code changes would 
be required also in packages.

I think given this it is better not to offer a function to directly 
differentiate between NaN and NA.

Best
Tomas

On 1/2/20 3:09 AM, Jan Gorecki wrote:
> "nana" is meant to express "NA, really NA".
> Your suggestion sounds good.
>
> On Thu 2 Jan, 2020, 3:38 AM Pages, Herve, <hpages at fredhutch.org> wrote:
>
>> Happy New Year everybody!
>>
>> The name (is.nana) doesn't make much sense to me. Can you explain it?
>>
>> One alternative would be to add an extra argument (e.g. 'strict') to
>> is.na(). FALSE by default, and ignored (with or w/o a warning) when the
>> type of 'x' is not "numeric".
>>
>> H.
>>
>>
>> On 12/31/19 22:16, Jan Gorecki wrote:
>>> Hello R-devel,
>>>
>>> Best wishes in the new year. I am writing to kindly request new R
>>> function so NA_real_ can be more easily detected.
>>> Currently if one wants to test for NA_real_ (but not NaN) then extra
>>> work has to be done: `is.na(x) & !is.nan(x)`
>>> Required functionality is already at C level so to address my request
>>> there is not that much to do.
>>> Kevin Ushey made a nice summary of current R C api in:
>>>
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stackoverflow.com_a_26262984_2490497&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=oWT1wDiy7pogVlJHGtdOoM3zdB45t9zZVyGYU8qcOgo&s=zFj3lh-N_YlNBRlDKeO-aTs0Bf2qtWLUHKlw_nh2Q4o&e=
>>> Pasting related part below, extra row added by me is a requested feature.
>>>
>>>       +---------------------+
>>>       | C fun    | NaN | NA | R fun
>>>       +---------------------+
>>>       | ISNAN    |  t  | t  | is.na
>>>       | R_IsNaN  |  t  | f  | is.nan
>>>       | ISNA     |  f  | t  | is.na && !is.nan
>>>       | R_IsNA   |  f  | t  | is.na && !is.nan
>>>       +---------------------+
>>>       +---------------------+
>>>       | R fun    | NaN | NA | C fun
>>>       +---------------------+
>>>       | is.na    |  t  | t  | ISNAN
>>>       | is.nan   |  t  | f  | R_IsNaN
>>>       +---------------------+
>>>       | is.nana  |  f  | t  | R_IsNA
>>>       +---------------------+
>>>
>>> Strictly speaking, I am asking for a new R function:
>>>
>>>       is.nana <- function(x) if (typeof(x)=="numeric")
>>> .Primitive("is.nana") else .Primitive("is.na")
>>>
>>> Then probably a copy of C function `do_isnan` as `do_isnana` with a
>>> minor change from `R_IsNaN` to `R_IsNA`.
>>>
>>> Best,
>>> Jan Gorecki
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>>
>> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=oWT1wDiy7pogVlJHGtdOoM3zdB45t9zZVyGYU8qcOgo&s=tCCxZtQj30QrtAYORMODT-OnjeKiXxiF0qlZtgyj1Mc&e=
>> --
>> Herv? Pag?s
>>
>> Program in Computational Biology
>> Division of Public Health Sciences
>> Fred Hutchinson Cancer Research Center
>> 1100 Fairview Ave. N, M1-B514
>> P.O. Box 19024
>> Seattle, WA 98109-1024
>>
>> E-mail: hpages at fredhutch.org
>> Phone:  (206) 667-5791
>> Fax:    (206) 667-1319
>>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @nto|ne@|@br| @end|ng |rom gm@||@com  Thu Jan  2 23:10:36 2020
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Antoine Fabri)
Date: Thu, 2 Jan 2020 23:10:36 +0100
Subject: [Rd] Bug/unhelpful error message when rbinding data frames
 containing data frame columns
Message-ID: <CAEKh8uj1QXrM+f30P_VnAomZWZ-nPLWH2bpOC6AjsduXkyAJ2g@mail.gmail.com>

Dear rdevel,

See the example below :

x <- data.frame(a=1)
x$b <- data.frame(z=1)
y <- x
rbind(x,y)
# Error in `.rowNamesDF<-`(x, value = value) :
#   duplicate 'row.names' are not allowed
# In addition: Warning message:
#   non-unique value when setting 'row.names': ?1?

I believe, that either it is a bug, and the data frame columns should be
rbind-ed themselves, or
an error should explicitly state that we can't use rbind on data frames
containing data frame columns (and it should be documented).

Thanks and happy 2020!

Antoine

	[[alternative HTML version deleted]]


From @ko@ty@h@k @end|ng |rom u||@edu  Sat Jan  4 22:35:23 2020
From: @ko@ty@h@k @end|ng |rom u||@edu (Scott Kostyshak)
Date: Sat, 4 Jan 2020 16:35:23 -0500
Subject: [Rd] [patch] add sanity checks to quantile()
In-Reply-To: <20190531052855.5zzdb2x7i4et3vyb@boogie>
References: <20190531052855.5zzdb2x7i4et3vyb@boogie>
Message-ID: <20200104213523.xl4v4772qtiqbe7o@tallinn>

On Fri, May 31, 2019 at 01:28:55AM -0400, Scott Kostyshak wrote:
> The attached patch adds some sanity checks to the "type" argument of
> quantile(). Output from the following commands show the change of
> behavior with the current patch:
> 
>   vec <- 1:10
>   quantile(vec, type = c(1, 2))
>   quantile(vec, type = 10)
>   quantile(vec, type = "aaa")
>   quantile(vec, type = NA_real_)
>   quantile(vec, type = 4.3)
>   quantile(vec, type = -1)
> 
> Current behavior (i.e., without the patch):
> 
>   > vec <- 1:10
>   > quantile(vec, type = c(1, 2))
>   Error in switch(type, (nppm > j), ((nppm > j) + 1)/2, (nppm != j) | ((j%%2L) ==  : 
>     EXPR must be a length 1 vector
>   In addition: Warning messages:
>   1: In if (type == 7) { :
>     the condition has length > 1 and only the first element will be used
>   2: In if (type <= 3) { :
>     the condition has length > 1 and only the first element will be used
>   3: In if (type == 3) n * probs - 0.5 else n * probs :
>     the condition has length > 1 and only the first element will be used
>   > quantile(vec, type = 10)
>   Error in quantile.default(vec, type = 10) : object 'a' not found
>   > quantile(vec, type = "aaa")
>   Error in type - 3 : non-numeric argument to binary operator
>   > quantile(vec, type = NA_real_)
>   Error in if (type == 7) { : missing value where TRUE/FALSE needed
>   > quantile(vec, type = 4.3)
>     0%  25%  50%  75% 100% 
>    1.0  2.5  5.0  7.5 10.0 
>   > quantile(vec, type = -1)
>     0%  25%  50%  75% 100% 
>      1    2    5    7   10 
> 
> 
> Behavior with the patch:
> 
>   > vec <- 1:10
>   > quantile(vec, type = c(1, 2))
>   Error in quantile.default(vec, type = c(1, 2)) : 
>     'type' must be of length 1
>   > quantile(vec, type = 10)
>   Error in quantile.default(vec, type = 10) : 
>     'type' must be an integer between 1 and 9
>   > quantile(vec, type = "aaa")
>   Error in quantile.default(vec, type = "aaa") : 
>     'type' must be an integer between 1 and 9
>   > quantile(vec, type = NA_real_)
>   Error in quantile.default(vec, type = NA_real_) : 
>     'type' must be an integer between 1 and 9
>   > quantile(vec, type = 4.3)
>   Error in quantile.default(vec, type = 4.3) : 
>     'type' must be an integer between 1 and 9
>   > quantile(vec, type = -1)
>   Error in quantile.default(vec, type = -1) : 
>     'type' must be an integer between 1 and 9
> 
> 
> Note that with the patch, quantile() gives an error in some cases where
> the current code does not. Specifically, the following two calls to
> quantile() do not give an error without the patch:
> 
>   quantile(vec, type = 4.3)
>   quantile(vec, type = -1)
> 
> Thus, this patch could cause current code to give an error. If it is
> desired, I could change the patch such that it only gives an error when
> current R gives an error (i.e., the only benefit of the patch would be
> better error messages), or I can change the patch to give a warning in
> these cases.
> 
> Scott
> 
> 
> -- 
> Scott Kostyshak
> Assistant Professor of Economics
> University of Florida
> https://people.clas.ufl.edu/skostyshak/
> 

Bump. For this type of patch proposal, is it better to use the
bug tracker?

Thanks,

Scott


-- 
Scott Kostyshak
Assistant Professor of Economics
University of Florida
https://people.clas.ufl.edu/skostyshak/


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Jan  5 00:32:15 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 4 Jan 2020 18:32:15 -0500
Subject: [Rd] [patch] add sanity checks to quantile()
In-Reply-To: <20200104213523.xl4v4772qtiqbe7o@tallinn>
References: <20190531052855.5zzdb2x7i4et3vyb@boogie>
 <20200104213523.xl4v4772qtiqbe7o@tallinn>
Message-ID: <a445f4ee-04cb-7746-58c9-37982a327cf2@gmail.com>

On 04/01/2020 4:35 p.m., Scott Kostyshak wrote:
> On Fri, May 31, 2019 at 01:28:55AM -0400, Scott Kostyshak wrote:
>> The attached patch adds some sanity checks to the "type" argument of
...
> Bump. For this type of patch proposal, is it better to use the
> bug tracker?

For almost any patch proposal it is.  Certainly if you don't get action 
(or at least discussion) within a few days, any other proposal will be 
forgotten.

Duncan Murdoch


From @ko@ty@h@k @end|ng |rom u||@edu  Sun Jan  5 05:08:23 2020
From: @ko@ty@h@k @end|ng |rom u||@edu (Scott Kostyshak)
Date: Sat, 4 Jan 2020 23:08:23 -0500
Subject: [Rd] [patch] add sanity checks to quantile()
In-Reply-To: <a445f4ee-04cb-7746-58c9-37982a327cf2@gmail.com>
References: <20190531052855.5zzdb2x7i4et3vyb@boogie>
 <20200104213523.xl4v4772qtiqbe7o@tallinn>
 <a445f4ee-04cb-7746-58c9-37982a327cf2@gmail.com>
Message-ID: <20200105040823.egrytyujuq6rtj4h@tallinn>

On Sat, Jan 04, 2020 at 06:32:15PM -0500, Duncan Murdoch wrote:
> 
> On 04/01/2020 4:35 p.m., Scott Kostyshak wrote:
> > On Fri, May 31, 2019 at 01:28:55AM -0400, Scott Kostyshak wrote:
> > > The attached patch adds some sanity checks to the "type" argument of
> ...
> > Bump. For this type of patch proposal, is it better to use the
> > bug tracker?
> 
> For almost any patch proposal it is.  Certainly if you don't get action
> (or at least discussion) within a few days, any other proposal will be
> forgotten.
> 
> Duncan Murdoch

That makes sense. Thanks for the quick reply and advice. Here is the
ticket:

  https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17683

Scott


-- 
Scott Kostyshak
Assistant Professor of Economics
University of Florida
https://people.clas.ufl.edu/skostyshak/


From @dutky @end|ng |rom gm@||@com  Wed Jan  1 17:46:19 2020
From: @dutky @end|ng |rom gm@||@com (Steve Dutky)
Date: Wed, 1 Jan 2020 11:46:19 -0500
Subject: [Rd] standard naming for components of R data structures
Message-ID: <CAF6+P4e6COJgrNEMKfM9w+_Yx=uR5jD-8F8Jb+fyErTQBg=2Jw-5030@mail.gmail.com>

I need to write some documentation:

I'm looking for a standard, consistent way of referring  to the components
and attributes of R data structures.   Googling and Stackoverflow yield a
variety of github sites that do not seem to be particularly authoritative.

I was hoping to find a BNF/ABNF grammar for R.

I've looked at the output of bison -v ./R-3.6.2/src/main/gram.y but it does
not appear helpful.

I appreciate any suggestions for where to look or what to do.

Thanks, Steve

-- 

Ever tried, Ever failed, No Matter:

Try again, Fail again, Fail Better.

Samuel Beckett *Worstward Ho*

	[[alternative HTML version deleted]]


From @purd|e@@ @end|ng |rom gm@||@com  Mon Jan  6 21:18:23 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Tue, 7 Jan 2020 09:18:23 +1300
Subject: [Rd] standard naming for components of R data structures
In-Reply-To: <CAF6+P4e6COJgrNEMKfM9w+_Yx=uR5jD-8F8Jb+fyErTQBg=2Jw-5030@mail.gmail.com>
References: <CAF6+P4e6COJgrNEMKfM9w+_Yx=uR5jD-8F8Jb+fyErTQBg=2Jw-5030@mail.gmail.com>
Message-ID: <CAB8pepyJxQ5XBhyQhj6xhM5=QTHy01Q2aK8B1jdgc-5q4HFHwQ@mail.gmail.com>

Do you just need something on pen and paper?
(In which case, I don't see why it needs to be "standard").

Or do you need something that can be used with bison/yacc/cup/etc to
produce a parser?

On a side note, I would say that the R Language Definition is the
"standard" way.
But I do recognize that this has a different flavour to modern
language implementation *theory*.

https://cran.r-project.org/doc/manuals/r-release/R-lang.html


On Tue, Jan 7, 2020 at 5:17 AM Steve Dutky <sdutky at gmail.com> wrote:
>
> I need to write some documentation:
>
> I'm looking for a standard, consistent way of referring  to the components
> and attributes of R data structures.   Googling and Stackoverflow yield a
> variety of github sites that do not seem to be particularly authoritative.
>
> I was hoping to find a BNF/ABNF grammar for R.
>
> I've looked at the output of bison -v ./R-3.6.2/src/main/gram.y but it does
> not appear helpful.
>
> I appreciate any suggestions for where to look or what to do.
>
> Thanks, Steve
>
> --
>
> Ever tried, Ever failed, No Matter:
>
> Try again, Fail again, Fail Better.
>
> Samuel Beckett *Worstward Ho*
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From neon|r@ @end|ng |rom gm@||@com  Mon Jan  6 23:19:07 2020
From: neon|r@ @end|ng |rom gm@||@com (neonira Arinoem)
Date: Mon, 6 Jan 2020 23:19:07 +0100
Subject: [Rd] standard naming for components of R data structures
In-Reply-To: <CAB8pepyJxQ5XBhyQhj6xhM5=QTHy01Q2aK8B1jdgc-5q4HFHwQ@mail.gmail.com>
References: <CAF6+P4e6COJgrNEMKfM9w+_Yx=uR5jD-8F8Jb+fyErTQBg=2Jw-5030@mail.gmail.com>
 <CAB8pepyJxQ5XBhyQhj6xhM5=QTHy01Q2aK8B1jdgc-5q4HFHwQ@mail.gmail.com>
Message-ID: <CAN--Dz0naS+k+e5rNFgXi_sCptUUQuhK3nFJzCZm1A3rsN6OcQ@mail.gmail.com>

@steve

Seek for online document named "writing R extensions" chapter 2. It tells
how to describe a list structure using item markup for R documentation
files, if indeed this matches your search, thing I am not sure. Something
that looks like...

value{
The \\code{list} owns following names
\\item{alpha}{double vector}
\\item{beta}{integer vector}
\\item{delta}{raw vector}
}

Best

Le lun. 6 janv. 2020 ? 21:18, Abby Spurdle <spurdle.a at gmail.com> a ?crit :

> Do you just need something on pen and paper?
> (In which case, I don't see why it needs to be "standard").
>
> Or do you need something that can be used with bison/yacc/cup/etc to
> produce a parser?
>
> On a side note, I would say that the R Language Definition is the
> "standard" way.
> But I do recognize that this has a different flavour to modern
> language implementation *theory*.
>
> https://cran.r-project.org/doc/manuals/r-release/R-lang.html
>
>
> On Tue, Jan 7, 2020 at 5:17 AM Steve Dutky <sdutky at gmail.com> wrote:
> >
> > I need to write some documentation:
> >
> > I'm looking for a standard, consistent way of referring  to the
> components
> > and attributes of R data structures.   Googling and Stackoverflow yield a
> > variety of github sites that do not seem to be particularly
> authoritative.
> >
> > I was hoping to find a BNF/ABNF grammar for R.
> >
> > I've looked at the output of bison -v ./R-3.6.2/src/main/gram.y but it
> does
> > not appear helpful.
> >
> > I appreciate any suggestions for where to look or what to do.
> >
> > Thanks, Steve
> >
> > --
> >
> > Ever tried, Ever failed, No Matter:
> >
> > Try again, Fail again, Fail Better.
> >
> > Samuel Beckett *Worstward Ho*
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Jan  6 23:40:02 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 6 Jan 2020 17:40:02 -0500
Subject: [Rd] standard naming for components of R data structures
In-Reply-To: <CAN--Dz0naS+k+e5rNFgXi_sCptUUQuhK3nFJzCZm1A3rsN6OcQ@mail.gmail.com>
References: <CAF6+P4e6COJgrNEMKfM9w+_Yx=uR5jD-8F8Jb+fyErTQBg=2Jw-5030@mail.gmail.com>
 <CAB8pepyJxQ5XBhyQhj6xhM5=QTHy01Q2aK8B1jdgc-5q4HFHwQ@mail.gmail.com>
 <CAN--Dz0naS+k+e5rNFgXi_sCptUUQuhK3nFJzCZm1A3rsN6OcQ@mail.gmail.com>
Message-ID: <bc009c7b-6c9f-cff8-2983-85ae7838ca88@gmail.com>

On 06/01/2020 5:19 p.m., neonira Arinoem wrote:
> @steve
> 
> Seek for online document named "writing R extensions" chapter 2. It tells

You hardly need to look for it online:  it is included with every copy 
of R.  Just run help.start() in R (or look in the menus for the GUI 
versions).

Duncan Murdoch

> how to describe a list structure using item markup for R documentation
> files, if indeed this matches your search, thing I am not sure. Something
> that looks like...
> 
> value{
> The \\code{list} owns following names
> \\item{alpha}{double vector}
> \\item{beta}{integer vector}
> \\item{delta}{raw vector}
> }
> 
> Best
> 
> Le lun. 6 janv. 2020 ? 21:18, Abby Spurdle <spurdle.a at gmail.com> a ?crit :
> 
>> Do you just need something on pen and paper?
>> (In which case, I don't see why it needs to be "standard").
>>
>> Or do you need something that can be used with bison/yacc/cup/etc to
>> produce a parser?
>>
>> On a side note, I would say that the R Language Definition is the
>> "standard" way.
>> But I do recognize that this has a different flavour to modern
>> language implementation *theory*.
>>
>> https://cran.r-project.org/doc/manuals/r-release/R-lang.html
>>
>>
>> On Tue, Jan 7, 2020 at 5:17 AM Steve Dutky <sdutky at gmail.com> wrote:
>>>
>>> I need to write some documentation:
>>>
>>> I'm looking for a standard, consistent way of referring  to the
>> components
>>> and attributes of R data structures.   Googling and Stackoverflow yield a
>>> variety of github sites that do not seem to be particularly
>> authoritative.
>>>
>>> I was hoping to find a BNF/ABNF grammar for R.
>>>
>>> I've looked at the output of bison -v ./R-3.6.2/src/main/gram.y but it
>> does
>>> not appear helpful.
>>>
>>> I appreciate any suggestions for where to look or what to do.
>>>
>>> Thanks, Steve
>>>
>>> --
>>>
>>> Ever tried, Ever failed, No Matter:
>>>
>>> Try again, Fail again, Fail Better.
>>>
>>> Samuel Beckett *Worstward Ho*
>>>
>>>          [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Jan  7 12:58:15 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 7 Jan 2020 12:58:15 +0100
Subject: [Rd] Another wish (?) for R 4.0.0:  print(*,  width = <n>)
Message-ID: <24084.29271.786439.788271@stat.math.ethz.ch>

One of the things I often wish R would work with:

When calling print() explicitly --- as I do not so rarely, e.g.,
specifying  digits = <nd> ---
it sometimes seems awkward that from the printing options() ,
one can specify 'digits' and it has default  digits = NULL which is
documented to be equivalent to  digits = getOption("digits"),
but one cannot specify 'width'
... well "even worse": one *can* specify 'width = .' but it is
silently ignored - as well documented  on  ?print.default

Before considering to add this for R 4.0.0, doing the work
myself, I'd quickly wanted to hear opinions / caveats / .. about this.

wishing you all a  Happy New Year,
Martin

Martin Maechler
ETH Zurich and R Core Team


From @dutky @end|ng |rom gm@||@com  Mon Jan  6 21:40:31 2020
From: @dutky @end|ng |rom gm@||@com (Steve Dutky)
Date: Mon, 6 Jan 2020 15:40:31 -0500
Subject: [Rd] standard naming for components of R data structures
In-Reply-To: <CAB8pepyJxQ5XBhyQhj6xhM5=QTHy01Q2aK8B1jdgc-5q4HFHwQ@mail.gmail.com>
References: <CAF6+P4e6COJgrNEMKfM9w+_Yx=uR5jD-8F8Jb+fyErTQBg=2Jw-5030@mail.gmail.com>
 <CAB8pepyJxQ5XBhyQhj6xhM5=QTHy01Q2aK8B1jdgc-5q4HFHwQ@mail.gmail.com>
Message-ID: <CAF6+P4dtgTWFRvyX9XbjkOSuXEuyMYOPZvnusMLnnAWW_8cOxA@mail.gmail.com>

Thank you: the R Language Definition is very helpful.

On Mon, Jan 6, 2020 at 3:18 PM Abby Spurdle <spurdle.a at gmail.com> wrote:

> Do you just need something on pen and paper?
> (In which case, I don't see why it needs to be "standard").
>
> Or do you need something that can be used with bison/yacc/cup/etc to
> produce a parser?
>
> On a side note, I would say that the R Language Definition is the
> "standard" way.
> But I do recognize that this has a different flavour to modern
> language implementation *theory*.
>
> https://cran.r-project.org/doc/manuals/r-release/R-lang.html
>
>
> On Tue, Jan 7, 2020 at 5:17 AM Steve Dutky <sdutky at gmail.com> wrote:
> >
> > I need to write some documentation:
> >
> > I'm looking for a standard, consistent way of referring  to the
> components
> > and attributes of R data structures.   Googling and Stackoverflow yield a
> > variety of github sites that do not seem to be particularly
> authoritative.
> >
> > I was hoping to find a BNF/ABNF grammar for R.
> >
> > I've looked at the output of bison -v ./R-3.6.2/src/main/gram.y but it
> does
> > not appear helpful.
> >
> > I appreciate any suggestions for where to look or what to do.
> >
> > Thanks, Steve
> >
> > --
> >
> > Ever tried, Ever failed, No Matter:
> >
> > Try again, Fail again, Fail Better.
> >
> > Samuel Beckett *Worstward Ho*
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 

Ever tried, Ever failed, No Matter:

Try again, Fail again, Fail Better.

Samuel Beckett *Worstward Ho*

	[[alternative HTML version deleted]]


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Tue Jan  7 15:13:29 2020
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Tue, 7 Jan 2020 14:13:29 +0000 (UTC)
Subject: [Rd] Another wish (?) for R 4.0.0:  print(*,  width = <n>)
In-Reply-To: <24084.29271.786439.788271@stat.math.ethz.ch>
References: <24084.29271.786439.788271@stat.math.ethz.ch>
Message-ID: <176003077.7828620.1578406409268@mail.yahoo.com>

 For whatever my 2c are worth I think this would be nice.? I'm still uncomfortable at having to call `options` in my package `diffobj` to set output width.

And since the topic is here, what about `show`?? Feels like it should accept `...` so that it too could be given some set of standard or non standard parameters, including `width`.
Happy new decade.
B.

    On Tuesday, January 7, 2020, 6:58:32 AM EST, Martin Maechler <maechler at stat.math.ethz.ch> wrote:  
 
 One of the things I often wish R would work with:

When calling print() explicitly --- as I do not so rarely, e.g.,
specifying? digits = <nd> ---
it sometimes seems awkward that from the printing options() ,
one can specify 'digits' and it has default? digits = NULL which is
documented to be equivalent to? digits = getOption("digits"),
but one cannot specify 'width'
... well "even worse": one *can* specify 'width = .' but it is
silently ignored - as well documented? on? ?print.default

Before considering to add this for R 4.0.0, doing the work
myself, I'd quickly wanted to hear opinions / caveats / .. about this.

wishing you all a? Happy New Year,
Martin

Martin Maechler
ETH Zurich and R Core Team

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel
  
	[[alternative HTML version deleted]]


From henr|k@bengt@@on @end|ng |rom gm@||@com  Tue Jan  7 22:31:18 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Tue, 7 Jan 2020 13:31:18 -0800
Subject: [Rd] Another wish (?) for R 4.0.0: print(*, width = <n>)
In-Reply-To: <176003077.7828620.1578406409268@mail.yahoo.com>
References: <24084.29271.786439.788271@stat.math.ethz.ch>
 <176003077.7828620.1578406409268@mail.yahoo.com>
Message-ID: <CAFDcVCTgwTbPzPtb4aLOs_2uAVVa0t3SL1dauKMXubU2_OiftQ@mail.gmail.com>

On Tue, Jan 7, 2020 at 6:14 AM brodie gaslam via R-devel
<r-devel at r-project.org> wrote:
>
>  For whatever my 2c are worth I think this would be nice.  I'm still uncomfortable at having to call `options` in my package `diffobj` to set output width.

Adding a few more cents: It might be worth considering "who" should be
allow to control the 'width' argument.  In an interactive session,
it's neat for the user to quickly be able to adjust 'width'.  But in
what cases should this be controlled by a (package) developer?  What
assumptions can the developer safely make about the 'width' of the end
user?  I don't know the answer to this and I'm sure one can find valid
cases where it makes sense to set the 'width' in a package - maybe
like width = 0.90 * getOption("width", 80)?

Could it be that print() ignoring 'width' has protected us from
packages producing output with a fixed, hardcoded width that is set by
the developer?  If print() us updated to acknowledge 'width', will we
start seeing print(..., width = 120) and so on in package code?  Is
this good or bad?  This might be a complementary problem to what we
have with 'stringsAsFactors' where the user's settings can override
the intention of the developer.

/Henrik





>
> And since the topic is here, what about `show`?  Feels like it should accept `...` so that it too could be given some set of standard or non standard parameters, including `width`.
> Happy new decade.
> B.
>
>     On Tuesday, January 7, 2020, 6:58:32 AM EST, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
>
>  One of the things I often wish R would work with:
>
> When calling print() explicitly --- as I do not so rarely, e.g.,
> specifying  digits = <nd> ---
> it sometimes seems awkward that from the printing options() ,
> one can specify 'digits' and it has default  digits = NULL which is
> documented to be equivalent to  digits = getOption("digits"),
> but one cannot specify 'width'
> ... well "even worse": one *can* specify 'width = .' but it is
> silently ignored - as well documented  on  ?print.default
>
> Before considering to add this for R 4.0.0, doing the work
> myself, I'd quickly wanted to hear opinions / caveats / .. about this.
>
> wishing you all a  Happy New Year,
> Martin
>
> Martin Maechler
> ETH Zurich and R Core Team
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From hp@ge@ @end|ng |rom |redhutch@org  Wed Jan  8 02:04:51 2020
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Wed, 8 Jan 2020 01:04:51 +0000
Subject: [Rd] Another wish (?) for R 4.0.0: print(*, width = <n>)
In-Reply-To: <176003077.7828620.1578406409268@mail.yahoo.com>
References: <24084.29271.786439.788271@stat.math.ethz.ch>
 <176003077.7828620.1578406409268@mail.yahoo.com>
Message-ID: <200dd96b-bfac-dc07-f9ff-65b651d8d1c4@fredhutch.org>

On 1/7/20 06:13, brodie gaslam via R-devel wrote:
...
> Happy new decade.

  *** caught segfault ***
conflicting decade boundaries

Traceback:
  1: new_decade <- 2020:2029
  2: previous_decade <- 2011:2020
  3: previous_previous_decade <- 2001:2010
  4: current_millenium <- 2001:3000
  5: previous_millenium <- 1001:2000
  6: previous_previous_millenium <- 1:1000

Cheers,
H.


-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From |uc@r @end|ng |rom |edor@project@org  Wed Jan  8 08:29:31 2020
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Wed, 8 Jan 2020 08:29:31 +0100
Subject: [Rd] Another wish (?) for R 4.0.0: print(*, width = <n>)
In-Reply-To: <200dd96b-bfac-dc07-f9ff-65b651d8d1c4@fredhutch.org>
References: <24084.29271.786439.788271@stat.math.ethz.ch>
 <176003077.7828620.1578406409268@mail.yahoo.com>
 <200dd96b-bfac-dc07-f9ff-65b651d8d1c4@fredhutch.org>
Message-ID: <CALEXWq1qHD5f=MgOJW3FWYurRwntaL6q3wNstj8aXZTSjYupmA@mail.gmail.com>

On Wed, 8 Jan 2020 at 02:05, Pages, Herve <hpages at fredhutch.org> wrote:
>
> On 1/7/20 06:13, brodie gaslam via R-devel wrote:
> ...
> > Happy new decade.
>
>   *** caught segfault ***
> conflicting decade boundaries

https://xkcd.com/2249/ ;-)

>
> Traceback:
>   1: new_decade <- 2020:2029
>   2: previous_decade <- 2011:2020
>   3: previous_previous_decade <- 2001:2010
>   4: current_millenium <- 2001:3000
>   5: previous_millenium <- 1001:2000
>   6: previous_previous_millenium <- 1:1000
>
> Cheers,
> H.

I?aki


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Jan  8 09:42:34 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 8 Jan 2020 09:42:34 +0100
Subject: [Rd] Another wish (?) for R 4.0.0: print(*, width = <n>)
In-Reply-To: <CAFDcVCTgwTbPzPtb4aLOs_2uAVVa0t3SL1dauKMXubU2_OiftQ@mail.gmail.com>
References: <24084.29271.786439.788271@stat.math.ethz.ch>
 <176003077.7828620.1578406409268@mail.yahoo.com>
 <CAFDcVCTgwTbPzPtb4aLOs_2uAVVa0t3SL1dauKMXubU2_OiftQ@mail.gmail.com>
Message-ID: <24085.38394.272781.364321@stat.math.ethz.ch>

>>>>> Henrik Bengtsson 
>>>>>     on Tue, 7 Jan 2020 13:31:18 -0800 writes:

    > On Tue, Jan 7, 2020 at 6:14 AM brodie gaslam via R-devel
    > <r-devel at r-project.org> wrote:
    >> 
    >> For whatever my 2c are worth I think this would be nice.  I'm still uncomfortable at having to call `options` in my package `diffobj` to set output width.

    > Adding a few more cents: It might be worth considering "who" should be
    > allow to control the 'width' argument.  

Well, I tend to disagree; this is not about control (and playing
police .. ;-).
Everbody can set  options() even now and that is a pretty bad
thing unless they are properly localized
{with which I mean: It's +- okay, if you use

- in a function

   op <- options(..) ; on.exit(options(op))

- in a script

   op <- options(..)

   ................
   ................

   options(op)

}
and yes I know people even invented  withOptions(...) etc.

Good programmring style for *functions* according to my book is
to have them depend only on their arguments, and if a global
option really (reall? think twice!) should influence behavior,
there should be arguments of the function which have a default
determined by the global option. 

{ And then in my personal style book, global options should never
  influence anything but "output" {print, plot, ..} and so the
  stringsAsFactors global option is an atrocity and horror ......}


    > In an interactive session,
    > it's neat for the user to quickly be able to adjust 'width'.  But in
    > what cases should this be controlled by a (package) developer?  

packages can set global options now which is much worse than
using it explicitly in some function calls.

Making 'width' an explicit argument {only in some cases, you
cannot do it for auto-printing of course!}

    > What assumptions can the developer safely make about the 'width' of the end
    > user?  I don't know the answer to this and I'm sure one can find valid
    > cases where it makes sense to set the 'width' in a package - maybe
    > like width = 0.90 * getOption("width", 80)?

Indeed.
I also would want to set width in  tests/*.R where I use *.Rout.save
or even more often in \examples{..} in help pages
when printing things that look best, say with  width=111
rather than the default 80.


    > Could it be that print() ignoring 'width' has protected us from
    > packages producing output with a fixed, hardcoded width that is set by
    > the developer?  If print() us updated to acknowledge 'width', will we
    > start seeing print(..., width = 120) and so on in package code?  Is
    > this good or bad?  This might be a complementary problem to what we
    > have with 'stringsAsFactors' where the user's settings can override
    > the intention of the developer.

    > /Henrik

A good package developer will think many times before doing that
(but maybe do it in examples, as I mentioned); careless package
developers do all kind of things anyway.
R (and free software in general) is also about giving freedom to
useRs ..  .. and some of us old folks know that with freedom
comes responsibility .. 

Thank you, Henrik, for your valuable thoughts!


[Brodie G.:]
    >> And since the topic is here, what about `show`?  Feels like it should accept `...` so that it too could be given some set of standard or non standard parameters, including `width`.

I'm not proposing to touch show().
Very often when working with S4 objects, I devise a
sophisticated print() method, with defaults, (often times "smart",
i.e. depending on other arguments) for all but the first
argument and then the show() method just calls that print method.

Best, Martin


    >> Happy new decade.
    >> B.
    >> 
    >> On Tuesday, January 7, 2020, 6:58:32 AM EST, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
    >> 
    >> One of the things I often wish R would work with:
    >> 
    >> When calling print() explicitly --- as I do not so rarely, e.g.,
    >> specifying  digits = <nd> ---
    >> it sometimes seems awkward that from the printing options() ,
    >> one can specify 'digits' and it has default  digits = NULL which is
    >> documented to be equivalent to  digits = getOption("digits"),
    >> but one cannot specify 'width'
    >> ... well "even worse": one *can* specify 'width = .' but it is
    >> silently ignored - as well documented  on  ?print.default
    >> 
    >> Before considering to add this for R 4.0.0, doing the work
    >> myself, I'd quickly wanted to hear opinions / caveats / .. about this.
    >> 
    >> wishing you all a  Happy New Year,
    >> Martin
    >> 
    >> Martin Maechler
    >> ETH Zurich and R Core Team


From |r|end|y @end|ng |rom yorku@c@  Wed Jan  8 16:06:09 2020
From: |r|end|y @end|ng |rom yorku@c@ (Michael Friendly)
Date: Wed, 8 Jan 2020 10:06:09 -0500
Subject: [Rd] re-submission of package after CRAN-pretest notes
Message-ID: <b626aafe-7897-66fa-045a-66bda6bb9565@yorku.ca>

It used to be the case that when I submitted a package and it gave notes 
or warnings in the CRAN checks, I was required to bump the package 
version before re-submission.

I hope this is no longer the case.? I recently submitted a package that 
gave one fairly trivial NOTE, fixed that, and would like to re-submit.

-Michael


-- 
Michael Friendly     Email: friendly AT yorku DOT ca
Professor, Psychology Dept. & Chair, ASA Statistical Graphics Section
York University      Voice: 416 736-2100 x66249
4700 Keele Street    Web: http://www.datavis.ca | @datavisFriendly
Toronto, ONT  M3J 1P3 CANADA


From edd @end|ng |rom deb|@n@org  Wed Jan  8 16:09:29 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Wed, 8 Jan 2020 09:09:29 -0600
Subject: [Rd] re-submission of package after CRAN-pretest notes
In-Reply-To: <b626aafe-7897-66fa-045a-66bda6bb9565@yorku.ca>
References: <b626aafe-7897-66fa-045a-66bda6bb9565@yorku.ca>
Message-ID: <24085.61609.924436.538862@rob.eddelbuettel.com>


On 8 January 2020 at 10:06, Michael Friendly wrote:
| It used to be the case that when I submitted a package and it gave notes 
| or warnings in the CRAN checks, I was required to bump the package 
| version before re-submission.
| 
| I hope this is no longer the case.? I recently submitted a package that 
| gave one fairly trivial NOTE, fixed that, and would like to re-submit.

Quoting from the bottom of the current CRAN Repo Policy:

   Re-submission

      Re-submission is done in the same way as submission, using the ?Optional
      comment? field on the webform (and not a separate email) to explain how
      the feedback on previous submission(s) has been addressed.

      Updates to previously-published packages must have an increased version.
      Increasing the version number at each submission reduces confusion so is
      preferred even when a previous submission was not accepted.

      [...]

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From tdhock5 @end|ng |rom gm@||@com  Wed Jan  8 19:20:55 2020
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Wed, 8 Jan 2020 08:20:55 -1000
Subject: [Rd] add jsslogo.jpg to R sources?
Message-ID: <CALK03d0h7P2TB8L8Xj8mKttuAfvWas7zWndm7Hr+EyDQAPodLg@mail.gmail.com>

Hi R-core, I was wondering if somebody could please add jsslogo.jpg to the
R sources? (as I reported yesterday in this bug)

https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17687

R already includes jss.cls which is the document class file for Journal of
Statistical Software. Actually, for the jss.cls file to be useful, it also
requires jsslogo.jpg in order to compile JSS articles without error.

This is an issue for me because I am writing a JSS paper that includes
figures created using tikzDevice, which I am telling to use the jss class
for computing metrics. On debian/ubuntu the R-src/share/texmf directory is
copied to /usr/share/texmf/tex/latex/R, so tikzDevice is finding jss.cls in
/usr/share/texmf/tex/latex/R/tex/latex/jss.cls but it is failing with a
'jsslogo not found' error -- the fix is to also include jsslogo.jpg in the
R sources (in the same directory as jss.cls).

thanks and happy new year
Toby

	[[alternative HTML version deleted]]


From |uc@r @end|ng |rom |edor@project@org  Wed Jan  8 19:44:50 2020
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Wed, 8 Jan 2020 19:44:50 +0100
Subject: [Rd] add jsslogo.jpg to R sources?
In-Reply-To: <CALK03d0h7P2TB8L8Xj8mKttuAfvWas7zWndm7Hr+EyDQAPodLg@mail.gmail.com>
References: <CALK03d0h7P2TB8L8Xj8mKttuAfvWas7zWndm7Hr+EyDQAPodLg@mail.gmail.com>
Message-ID: <CALEXWq3Ze7PMO2CZ+4LXpejeKVW4gq+0SAiebsoR28373NCJqw@mail.gmail.com>

On Wed, 8 Jan 2020 at 19:21, Toby Hocking <tdhock5 at gmail.com> wrote:
>
> Hi R-core, I was wondering if somebody could please add jsslogo.jpg to the
> R sources? (as I reported yesterday in this bug)
>
> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17687
>
> R already includes jss.cls which is the document class file for Journal of
> Statistical Software. Actually, for the jss.cls file to be useful, it also
> requires jsslogo.jpg in order to compile JSS articles without error.
>
> This is an issue for me because I am writing a JSS paper that includes
> figures created using tikzDevice, which I am telling to use the jss class
> for computing metrics. On debian/ubuntu the R-src/share/texmf directory is
> copied to /usr/share/texmf/tex/latex/R, so tikzDevice is finding jss.cls in
> /usr/share/texmf/tex/latex/R/tex/latex/jss.cls but it is failing with a
> 'jsslogo not found' error -- the fix is to also include jsslogo.jpg in the
> R sources (in the same directory as jss.cls).

Why don't you just include jsslogo.jpg in your working directory?
jss.cls is included in the R sources because there are many vignettes
with the JSS style, but always *without* the logo. The logo should
only be used for actual JSS publication, so I think that the R sources
are no place for it.

-- 
I?aki ?car


From Ach|m@Ze||e|@ @end|ng |rom u|bk@@c@@t  Wed Jan  8 20:16:45 2020
From: Ach|m@Ze||e|@ @end|ng |rom u|bk@@c@@t (Achim Zeileis)
Date: Wed, 8 Jan 2020 20:16:45 +0100 (CET)
Subject: [Rd] add jsslogo.jpg to R sources?
In-Reply-To: <CALEXWq3Ze7PMO2CZ+4LXpejeKVW4gq+0SAiebsoR28373NCJqw@mail.gmail.com>
References: <CALK03d0h7P2TB8L8Xj8mKttuAfvWas7zWndm7Hr+EyDQAPodLg@mail.gmail.com>
 <CALEXWq3Ze7PMO2CZ+4LXpejeKVW4gq+0SAiebsoR28373NCJqw@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2001082009310.4109@paninaro>

On Wed, 8 Jan 2020, I?aki Ucar wrote:

> On Wed, 8 Jan 2020 at 19:21, Toby Hocking <tdhock5 at gmail.com> wrote:
>>
>> Hi R-core, I was wondering if somebody could please add jsslogo.jpg to the
>> R sources? (as I reported yesterday in this bug)
>>
>> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17687
>>
>> R already includes jss.cls which is the document class file for Journal of
>> Statistical Software. Actually, for the jss.cls file to be useful, it also
>> requires jsslogo.jpg in order to compile JSS articles without error.
>>
>> This is an issue for me because I am writing a JSS paper that includes
>> figures created using tikzDevice, which I am telling to use the jss class
>> for computing metrics. On debian/ubuntu the R-src/share/texmf directory is
>> copied to /usr/share/texmf/tex/latex/R, so tikzDevice is finding jss.cls in
>> /usr/share/texmf/tex/latex/R/tex/latex/jss.cls but it is failing with a
>> 'jsslogo not found' error -- the fix is to also include jsslogo.jpg in the
>> R sources (in the same directory as jss.cls).
>
> Why don't you just include jsslogo.jpg in your working directory?
> jss.cls is included in the R sources because there are many vignettes
> with the JSS style, but always *without* the logo. The logo should
> only be used for actual JSS publication, so I think that the R sources
> are no place for it.

Thanks, I?aki, you are right. The motivation for including jss.cls and 
jss.bst in the R sources was to facilitate turning JSS papers into 
vignettes (see the FAQ at https://www.jstatsoft.org/pages/view/style) with 
\documentclass[nojss]{jss}. Before jss.cls/bst were shipped along with 
base R many packages shipped with their own copy which seemed like a waste 
of resources and source of confusion.

When preparing new papers for submission in JSS you can also use the 
"nojss" option, this is also accepted by the journal.

Hope that helps,
Achim

P.S.: Toby, if you plan on discussing an such an issue anyway, I would 
recommend to wait with the bug report. Cross-posting on different channels 
is always a bit of a nuisance.

From g@bembecker @end|ng |rom gm@||@com  Wed Jan  8 21:28:53 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Wed, 8 Jan 2020 12:28:53 -0800
Subject: [Rd] re-submission of package after CRAN-pretest notes
In-Reply-To: <24085.61609.924436.538862@rob.eddelbuettel.com>
References: <b626aafe-7897-66fa-045a-66bda6bb9565@yorku.ca>
 <24085.61609.924436.538862@rob.eddelbuettel.com>
Message-ID: <CAD4oTHG2-wywDx_j5JF3aVr5TJSmkpYmFWQeEZxskBwePmi8+A@mail.gmail.com>

Hi Michael,

At the risk of sounding like I'm just name-dropping, R. Gentleman once told
me something along the lines of "version numbers are cheap, don't be afrai
to use a lot of them".

I get that its a bit annoying but its for good reason, imho. Any change, no
matter how trivial will change the MD5 of the package tarball. And as
someone who has administered a large shared R platform, I don't really ever
want 2 (source) tarballs of the "same version" of a package to differ like
that. Bumping the smallest portion of the version number doesn't seem a
very high price to avoid any possibility of that kind of confusion, to me
at least.

Obviously this only holds for published package versions, installing
directly from source control is a different story all together (which is
why, imho, it is so dangerous and should be avoided whenever its not
absolutely necessary, e.g., developing your own package against dev
versions of other packages). I could go on a lot more about that, but I'll
spare everyone the rant :)

Just my 2c

Best,
~G

On Wed, Jan 8, 2020 at 7:09 AM Dirk Eddelbuettel <edd at debian.org> wrote:

>
> On 8 January 2020 at 10:06, Michael Friendly wrote:
> | It used to be the case that when I submitted a package and it gave notes
> | or warnings in the CRAN checks, I was required to bump the package
> | version before re-submission.
> |
> | I hope this is no longer the case.  I recently submitted a package that
> | gave one fairly trivial NOTE, fixed that, and would like to re-submit.
>
> Quoting from the bottom of the current CRAN Repo Policy:
>
>    Re-submission
>
>       Re-submission is done in the same way as submission, using the
> ?Optional
>       comment? field on the webform (and not a separate email) to explain
> how
>       the feedback on previous submission(s) has been addressed.
>
>       Updates to previously-published packages must have an increased
> version.
>       Increasing the version number at each submission reduces confusion
> so is
>       preferred even when a previous submission was not accepted.
>
>       [...]
>
> Dirk
>
> --
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From ||||e@@tor @end|ng |rom gmx@com  Thu Jan  9 12:48:24 2020
From: ||||e@@tor @end|ng |rom gmx@com (lille stor)
Date: Thu, 9 Jan 2020 12:48:24 +0100
Subject: [Rd] Get memory address of an R data frame
Message-ID: <trinity-a73adb6e-7025-4545-9108-870c1a66fbfa-1578570504114@3c-app-mailcom-bs15>

Hello,

I would like for my C function to be able to manipulate some values stored in an R data frame.

To achieve this, a need the (real) memory address where the R data frame stores its data (hopefully in a contiguous way). Then, from R, I call the C function and passing this memory address as a parameter.

The question: how can we get the memory address of the R data frame?

Thank you!

L.


From ezztucker @end|ng |rom gm@||@com  Thu Jan  9 13:03:39 2020
From: ezztucker @end|ng |rom gm@||@com (Ezra Tucker)
Date: Thu, 9 Jan 2020 07:03:39 -0500
Subject: [Rd] Get memory address of an R data frame
In-Reply-To: <trinity-a73adb6e-7025-4545-9108-870c1a66fbfa-1578570504114@3c-app-mailcom-bs15>
References: <trinity-a73adb6e-7025-4545-9108-870c1a66fbfa-1578570504114@3c-app-mailcom-bs15>
Message-ID: <CAP0QTermHXvc4acercTa-Nrxnx0y5RcqaZyt5=5-bwh90QBWvA@mail.gmail.com>

Hi Lille,

Is it possible you're looking for tracemem() or inspect() ?

> x <- data.frame(z = 1:10)> tracemem(x)[1] "<0x55aa743e0bc0>"

> x[1] <- 2Ltracemem[0x55aa743e0bc0 -> 0x55aa778f6ad0]:
tracemem[0x55aa778f6ad0 -> 0x55aa778f6868]: [<-.data.frame [<-
tracemem[0x55aa778f6868 -> 0x55aa778f5b48]: [<-.data.frame [<-

> .Internal(inspect(x)) @55aa743e0bc0 19 VECSXP g0c1
[OBJ,MARK,NAM(7),TR,ATT] (len=1, tl=0) @55aa7440d420 13 INTSXP g0c0
[MARK,NAM(7)] 1 : 10 (compact) ATTRIB: @55aa743f9ea0 02 LISTSXP g0c0 [MARK]
TAG: @55aa72ac98a0 01 SYMSXP g0c0 [MARK,NAM(7),LCK,gp=0x6000] "names" (has
value) @55aa743e0fb0 16 STRSXP g0c1 [MARK,NAM(7)] (len=1, tl=0)
@55aa72be1c70 09 CHARSXP g0c1 [MARK,gp=0x61] [ASCII] [cached] "z" TAG:
@55aa72ac9d70 01 SYMSXP g0c0 [MARK,NAM(7),LCK,gp=0x4000] "class" (has
value) @55aa73ca59b8 16 STRSXP g0c1 [MARK,NAM(7)] (len=1, tl=0)
@55aa72b562b8 09 CHARSXP g0c2 [MARK,gp=0x61,ATT] [ASCII] [cached]
"data.frame" TAG: @55aa72ac9670 01 SYMSXP g0c0 [MARK,NAM(7),LCK,gp=0x4000]
"row.names" (has value) @55aa743e1c98 13 INTSXP g0c1 [MARK,NAM(7)] (len=2,
tl=0) -2147483648,-10



On Thu, Jan 9, 2020 at 6:48 AM lille stor <lille.stor at gmx.com> wrote:

> Hello,
>
> I would like for my C function to be able to manipulate some values stored
> in an R data frame.
>
> To achieve this, a need the (real) memory address where the R data frame
> stores its data (hopefully in a contiguous way). Then, from R, I call the C
> function and passing this memory address as a parameter.
>
> The question: how can we get the memory address of the R data frame?
>
> Thank you!
>
> L.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From je@n-|uc@||p@tz @end|ng |rom |n@ee@|r  Thu Jan  9 13:40:57 2020
From: je@n-|uc@||p@tz @end|ng |rom |n@ee@|r (Lipatz Jean-Luc)
Date: Thu, 9 Jan 2020 12:40:57 +0000
Subject: [Rd] mean
Message-ID: <FEF25E56AFC7064784FA97C576467E0A020580ACD1@pdexchbalwst01.ad.insee.intra>

Hello,

Is there a reason for the following behaviour?
> mean(c("1","2","3"))
[1] NA
Warning message:
In mean.default(c("1", "2", "3")) :
  l'argument n'est ni num?rique, ni logique : renvoi de NA

But:
> var(c("1","2","3"))
[1] 1

And also:
> median(c("1","2","3"))
[1] "2"

But:
> quantile(c("1","2","3"),p=.5)
Error in (1 - h) * qs[i] : 
  argument non num?rique pour un op?rateur binaire

It sounds like a lack of symetry. 
Best regards.


Jean-Luc LIPATZ
Insee - Direction g?n?rale
Responsable de la coordination sur le d?veloppement de R et la mise en oeuvre d'alternatives ? SAS


From jor|@mey@ @end|ng |rom gm@||@com  Thu Jan  9 13:58:19 2020
From: jor|@mey@ @end|ng |rom gm@||@com (Joris Meys)
Date: Thu, 9 Jan 2020 13:58:19 +0100
Subject: [Rd] Get memory address of an R data frame
In-Reply-To: <trinity-a73adb6e-7025-4545-9108-870c1a66fbfa-1578570504114@3c-app-mailcom-bs15>
References: <trinity-a73adb6e-7025-4545-9108-870c1a66fbfa-1578570504114@3c-app-mailcom-bs15>
Message-ID: <CAO1zAVabrcDK1S1Fr_e55NX8EkkV3a+EmD+457b-r7e+8Ad9TQ@mail.gmail.com>

Hi Lille,

To my understanding, there's no need to get the actual memory address of
the R data frame, as using .Call() or .External() can be used in a "call by
reference" way as well. This would be contrary to standard R behaviour, so
if you use that in a package, make sure you indicate this!

There's a detailed explanation on how to deal with R objects in C code in
the manual "Writing R extensions" here :

https://cran.r-project.org/doc/manuals/R-exts.html#Handling-R-objects-in-C

Especially check the section "Named objects and copying", which explains in
more detail how to control the standard R behaviour. Also keep in mind that
data frames are list-like structures, which are handled differently from
atomic vectors.

Hope this helps.
Kind regards
Joris

On Thu, Jan 9, 2020 at 12:48 PM lille stor <lille.stor at gmx.com> wrote:

> Hello,
>
> I would like for my C function to be able to manipulate some values stored
> in an R data frame.
>
> To achieve this, a need the (real) memory address where the R data frame
> stores its data (hopefully in a contiguous way). Then, from R, I call the C
> function and passing this memory address as a parameter.
>
> The question: how can we get the memory address of the R data frame?
>
> Thank you!
>
> L.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 
Joris Meys
Statistical consultant

Department of Data Analysis and Mathematical Modelling
Ghent University
Coupure Links 653, B-9000 Gent (Belgium)
<https://maps.google.com/?q=Coupure+links+653,%C2%A0B-9000+Gent,%C2%A0Belgium&entry=gmail&source=g>
-------------------------------
Disclaimer : http://helpdesk.ugent.be/e-maildisclaimer.php

	[[alternative HTML version deleted]]


From m@rc_@chw@rtz @end|ng |rom me@com  Thu Jan  9 14:18:39 2020
From: m@rc_@chw@rtz @end|ng |rom me@com (Marc Schwartz)
Date: Thu, 9 Jan 2020 08:18:39 -0500
Subject: [Rd] mean
In-Reply-To: <FEF25E56AFC7064784FA97C576467E0A020580ACD1@pdexchbalwst01.ad.insee.intra>
References: <FEF25E56AFC7064784FA97C576467E0A020580ACD1@pdexchbalwst01.ad.insee.intra>
Message-ID: <8A0E38C4-A2EA-4342-930B-503ECFE00D59@me.com>


> On Jan 9, 2020, at 7:40 AM, Lipatz Jean-Luc <jean-luc.lipatz at insee.fr> wrote:
> 
> Hello,
> 
> Is there a reason for the following behaviour?
>> mean(c("1","2","3"))
> [1] NA
> Warning message:
> In mean.default(c("1", "2", "3")) :
>  l'argument n'est ni num?rique, ni logique : renvoi de NA
> 
> But:
>> var(c("1","2","3"))
> [1] 1
> 
> And also:
>> median(c("1","2","3"))
> [1] "2"
> 
> But:
>> quantile(c("1","2","3"),p=.5)
> Error in (1 - h) * qs[i] : 
>  argument non num?rique pour un op?rateur binaire
> 
> It sounds like a lack of symetry. 
> Best regards.
> 
> 
> Jean-Luc LIPATZ
> Insee - Direction g?n?rale
> Responsable de la coordination sur le d?veloppement de R et la mise en oeuvre d'alternatives ? SAS


Hi,

It would appear, whether by design or just inconsistent implementations, perhaps by different authors over time, that the checks for whether or not the input vector is numeric differ across the functions.

A further inconsistency is for median(), where:

> median(c("1", "2", "3", "4"))
[1] NA
Warning message:
In mean.default(sort(x, partial = half + 0L:1L)[half + 0L:1L]) :
  argument is not numeric or logical: returning NA

as a result of there being 4 elements, rather than 3, and the internal checks in the code, where in the case of the input vector having an even number of elements, mean() is used:

    if (n%%2L == 1L) 
        sort(x, partial = half)[half]
    else mean(sort(x, partial = half + 0L:1L)[half + 0L:1L])


Similarly:

> median(factor(c("1", "2", "3")))
Error in median.default(factor(c("1", "2", "3"))) : need numeric data

because the input vector is a factor, rather than character, and the initial check has:

  if (is.factor(x) || is.data.frame(x)) 
          stop("need numeric data")


Regards,

Marc Schwartz


From m@rc_@chw@rtz @end|ng |rom me@com  Thu Jan  9 14:49:48 2020
From: m@rc_@chw@rtz @end|ng |rom me@com (Marc Schwartz)
Date: Thu, 9 Jan 2020 08:49:48 -0500
Subject: [Rd] mean
In-Reply-To: <FEF25E56AFC7064784FA97C576467E0A020580AD4F@pdexchbalwst01.ad.insee.intra>
References: <FEF25E56AFC7064784FA97C576467E0A020580ACD1@pdexchbalwst01.ad.insee.intra>
 <8A0E38C4-A2EA-4342-930B-503ECFE00D59@me.com>
 <FEF25E56AFC7064784FA97C576467E0A020580AD4F@pdexchbalwst01.ad.insee.intra>
Message-ID: <FC19B55E-5208-469A-91DC-93E5ACD2AD69@me.com>

Jean-Luc,

Please keep the communications on the list, for the benefit of others, now and in the future, via the list archive. I am adding r-devel back here.

I can't speak to the rationale in some of these cases. As I noted, it may be (is likely) due to differing authors over time, and there may have been relevant use cases at the time that the code was written, resulting in the various checks. Presumably, the additional checks were not incorporated into the other functions to enforce a level of consistency.

We will need to wait for someone from R Core to comment.

Regards,

Marc

> On Jan 9, 2020, at 8:34 AM, Lipatz Jean-Luc <jean-luc.lipatz at insee.fr> wrote:
> 
> Ok, inconstencies.
> 
> The last test you wrote is a bit strange. I agree that it is useful to warn about a computation that have no sense in the case of factors. But why testing data;frames? If you go that way using random structures, you can also try :
> 
>> median(list(1,2),list(3,4),list(4,5))
> Error in if (na.rm) x <- x[!is.na(x)] else if (any(is.na(x))) return(x[FALSE][NA]) : 
>  l'argument n'est pas interpr?table comme une valeur logique
> De plus : Warning message:
> In if (na.rm) x <- x[!is.na(x)] else if (any(is.na(x))) return(x[FALSE][NA]) :
>  la condition a une longueur > 1 et seul le premier ?l?ment est utilis?
> 
> giving a message which, despite of his length, doesn't really explain the reason of the error.
> 
> Why not a test on arguments like?
>  if (!is.numeric(x)) 
>          stop("need numeric data")
> 
> 
> -----Message d'origine-----
> De : Marc Schwartz <marc_schwartz at me.com> 
> Envoy? : jeudi 9 janvier 2020 14:19
> ? : Lipatz Jean-Luc <jean-luc.lipatz at insee.fr>
> Cc : R-Devel <r-devel at r-project.org>
> Objet : Re: [Rd] mean
> 
> 
>> On Jan 9, 2020, at 7:40 AM, Lipatz Jean-Luc <jean-luc.lipatz at insee.fr> wrote:
>> 
>> Hello,
>> 
>> Is there a reason for the following behaviour?
>>> mean(c("1","2","3"))
>> [1] NA
>> Warning message:
>> In mean.default(c("1", "2", "3")) :
>> l'argument n'est ni num?rique, ni logique : renvoi de NA
>> 
>> But:
>>> var(c("1","2","3"))
>> [1] 1
>> 
>> And also:
>>> median(c("1","2","3"))
>> [1] "2"
>> 
>> But:
>>> quantile(c("1","2","3"),p=.5)
>> Error in (1 - h) * qs[i] : 
>> argument non num?rique pour un op?rateur binaire
>> 
>> It sounds like a lack of symetry. 
>> Best regards.
>> 
>> 
>> Jean-Luc LIPATZ
>> Insee - Direction g?n?rale
>> Responsable de la coordination sur le d?veloppement de R et la mise en oeuvre d'alternatives ? SAS
> 
> 
> Hi,
> 
> It would appear, whether by design or just inconsistent implementations, perhaps by different authors over time, that the checks for whether or not the input vector is numeric differ across the functions.
> 
> A further inconsistency is for median(), where:
> 
>> median(c("1", "2", "3", "4"))
> [1] NA
> Warning message:
> In mean.default(sort(x, partial = half + 0L:1L)[half + 0L:1L]) :
>  argument is not numeric or logical: returning NA
> 
> as a result of there being 4 elements, rather than 3, and the internal checks in the code, where in the case of the input vector having an even number of elements, mean() is used:
> 
>    if (n%%2L == 1L) 
>        sort(x, partial = half)[half]
>    else mean(sort(x, partial = half + 0L:1L)[half + 0L:1L])
> 
> 
> Similarly:
> 
>> median(factor(c("1", "2", "3")))
> Error in median.default(factor(c("1", "2", "3"))) : need numeric data
> 
> because the input vector is a factor, rather than character, and the initial check has:
> 
>  if (is.factor(x) || is.data.frame(x)) 
>          stop("need numeric data")
> 
> 
> Regards,
> 
> Marc Schwartz
> 
> 


From @tep@n@@|nde|@r @end|ng |rom or@c|e@com  Thu Jan  9 15:05:26 2020
From: @tep@n@@|nde|@r @end|ng |rom or@c|e@com (Stepan)
Date: Thu, 9 Jan 2020 15:05:26 +0100
Subject: [Rd] Get memory address of an R data frame
In-Reply-To: <trinity-a73adb6e-7025-4545-9108-870c1a66fbfa-1578570504114@3c-app-mailcom-bs15>
References: <trinity-a73adb6e-7025-4545-9108-870c1a66fbfa-1578570504114@3c-app-mailcom-bs15>
Message-ID: <830d3acf-aa30-5f26-408d-f35b5f0cc2d9@oracle.com>

Hello Lille,

raw data of a data.frame (or more precisely a list, because data.frame 
is just a list with "data.frame" class) is an array of R specific data 
structures (SEXP), so a generic C function will not be able to work with 
them.

As a per-processing step, you may allocate an array for the pointers to 
the raw data of the columns yourself (there will be hopefully only a few 
compared to the size of the columns themselves). For this you'll need 
functions VECTOR_ELT to access the columns and DATAPTR to get their raw 
data (eventually TYPEOF to find out their type). Note that this won't 
work for a data frame that contains another list. If this memory layout 
doesn't work for you, then you may need to copy the whole data frame.

If you want to update the data from C, then keep in mind that

1) R vectors have value semantics and you should not be altering raw 
data of any vector unless you know that its not referenced from anywhere 
else -- otherwise you should make a copy, alter that copy instead and 
return it as the result from your C function.

2) R has generational garbage collector, so it *must* know about 
references between R objects and so you should use SET_VECTOR_ELT to 
update the data of a list (some would say that you can update the raw 
data if you really understand how the GC and R internals work, I would 
say: just don't)

Best,
Stepan

On 09. 01. 20 12:48, lille stor wrote:
> Hello,
>
> I would like for my C function to be able to manipulate some values stored in an R data frame.
>
> To achieve this, a need the (real) memory address where the R data frame stores its data (hopefully in a contiguous way). Then, from R, I call the C function and passing this memory address as a parameter.
>
> The question: how can we get the memory address of the R data frame?
>
> Thank you!
>
> L.
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwICAg&c=RoP1YumCXCgaWHvlZYR8PZh8Bv7qIrMUB65eapI_JnE&r=neKFCw86thQe2E2-61NAgpDMw4cC7oD_tUTTzraOkQM&m=ob3rEYy-Pk9cOE-VcE6_0TaHPYjGJ4kHYZru_jqXf38&s=AV2V5CyECZzyfSMZdViD_co5mAGurLNEu4jhA_CTDsk&e=


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Jan  9 15:16:27 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 9 Jan 2020 15:16:27 +0100
Subject: [Rd] Get memory address of an R data frame
In-Reply-To: <CAP0QTermHXvc4acercTa-Nrxnx0y5RcqaZyt5=5-bwh90QBWvA@mail.gmail.com>
References: <trinity-a73adb6e-7025-4545-9108-870c1a66fbfa-1578570504114@3c-app-mailcom-bs15>
 <CAP0QTermHXvc4acercTa-Nrxnx0y5RcqaZyt5=5-bwh90QBWvA@mail.gmail.com>
Message-ID: <510b5943-af48-0010-dd2c-da2ed48f425e@gmail.com>

On 1/9/20 1:03 PM, Ezra Tucker wrote:
> Hi Lille,
>
> Is it possible you're looking for tracemem() or inspect() ?

Please note these functions are only for debugging. They should never be 
called from programs or packages. One should never try to manipulate 
pointers from R directly or even hold them (except for what "external 
pointer" objects allow and is described in Writing R Extensions).

Tomas
>
>> x <- data.frame(z = 1:10)> tracemem(x)[1] "<0x55aa743e0bc0>"
>> x[1] <- 2Ltracemem[0x55aa743e0bc0 -> 0x55aa778f6ad0]:
> tracemem[0x55aa778f6ad0 -> 0x55aa778f6868]: [<-.data.frame [<-
> tracemem[0x55aa778f6868 -> 0x55aa778f5b48]: [<-.data.frame [<-
>
>> .Internal(inspect(x)) @55aa743e0bc0 19 VECSXP g0c1
> [OBJ,MARK,NAM(7),TR,ATT] (len=1, tl=0) @55aa7440d420 13 INTSXP g0c0
> [MARK,NAM(7)] 1 : 10 (compact) ATTRIB: @55aa743f9ea0 02 LISTSXP g0c0 [MARK]
> TAG: @55aa72ac98a0 01 SYMSXP g0c0 [MARK,NAM(7),LCK,gp=0x6000] "names" (has
> value) @55aa743e0fb0 16 STRSXP g0c1 [MARK,NAM(7)] (len=1, tl=0)
> @55aa72be1c70 09 CHARSXP g0c1 [MARK,gp=0x61] [ASCII] [cached] "z" TAG:
> @55aa72ac9d70 01 SYMSXP g0c0 [MARK,NAM(7),LCK,gp=0x4000] "class" (has
> value) @55aa73ca59b8 16 STRSXP g0c1 [MARK,NAM(7)] (len=1, tl=0)
> @55aa72b562b8 09 CHARSXP g0c2 [MARK,gp=0x61,ATT] [ASCII] [cached]
> "data.frame" TAG: @55aa72ac9670 01 SYMSXP g0c0 [MARK,NAM(7),LCK,gp=0x4000]
> "row.names" (has value) @55aa743e1c98 13 INTSXP g0c1 [MARK,NAM(7)] (len=2,
> tl=0) -2147483648,-10
>
>
>
> On Thu, Jan 9, 2020 at 6:48 AM lille stor <lille.stor at gmx.com> wrote:
>
>> Hello,
>>
>> I would like for my C function to be able to manipulate some values stored
>> in an R data frame.
>>
>> To achieve this, a need the (real) memory address where the R data frame
>> stores its data (hopefully in a contiguous way). Then, from R, I call the C
>> function and passing this memory address as a parameter.
>>
>> The question: how can we get the memory address of the R data frame?
>>
>> Thank you!
>>
>> L.
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @tep@n@@|nde|@r @end|ng |rom or@c|e@com  Thu Jan  9 15:56:45 2020
From: @tep@n@@|nde|@r @end|ng |rom or@c|e@com (Stepan)
Date: Thu, 9 Jan 2020 15:56:45 +0100
Subject: [Rd] Get memory address of an R data frame
In-Reply-To: <trinity-6d5c6b7f-e9e8-4cdf-90ca-b9ec4b97a11a-1578580918843@3c-app-mailcom-bs07>
References: <trinity-a73adb6e-7025-4545-9108-870c1a66fbfa-1578570504114@3c-app-mailcom-bs15>
 <830d3acf-aa30-5f26-408d-f35b5f0cc2d9@oracle.com>
 <trinity-6d5c6b7f-e9e8-4cdf-90ca-b9ec4b97a11a-1578580918843@3c-app-mailcom-bs07>
Message-ID: <736437f6-22b9-da92-8fb3-e931a83de39d@oracle.com>

On 09. 01. 20 15:41, lille stor wrote:

> I believe this could be done without creating side effects (e.g. 
> crash) as we are just talking about changing values.

that is exactly the issue that my last two points warn about. Example:

a <- mtcars
.Call("my_innocent_function", a)

Would you expect that mtcars data.frame would be altered after this code 
is executed? What if some existing code relies on mtcars always 
containing the same data, which is a perfectly valid assumption given R 
specification.

If what you are trying to do is to have mutable data frame, then this 
goes against the philosophy of R. You can get mutability with 
environments and other R types that are intentionally mutable and their 
mutability is documented.

You can get data.frame mutability with the data.table package, but the 
tricks it's doing under the hood may bite back. In its source code you 
can also see how these things can be done, but unless you really need 
to, I would advise against implementing this yourself.

Best,
Stepan


From pd@|gd @end|ng |rom gm@||@com  Thu Jan  9 16:46:01 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Thu, 9 Jan 2020 16:46:01 +0100
Subject: [Rd] mean
In-Reply-To: <FC19B55E-5208-469A-91DC-93E5ACD2AD69@me.com>
References: <FEF25E56AFC7064784FA97C576467E0A020580ACD1@pdexchbalwst01.ad.insee.intra>
 <8A0E38C4-A2EA-4342-930B-503ECFE00D59@me.com>
 <FEF25E56AFC7064784FA97C576467E0A020580AD4F@pdexchbalwst01.ad.insee.intra>
 <FC19B55E-5208-469A-91DC-93E5ACD2AD69@me.com>
Message-ID: <692FB5BD-523B-4498-9F95-78B17866B5E3@gmail.com>

I think median() behaves as designed: As long as the argument can be ordered, the "middle observation" makes sense, except when the middle falls between two categories, and you can't define and average of the two candidates for a median.

The "sick man" would seem to be var(). Notice that it is also inconsistent with cov():

> cov(c("1","2","3","4"),c("1","2","3","4") )
Error in cov(c("1", "2", "3", "4"), c("1", "2", "3", "4")) : 
  is.numeric(x) || is.logical(x) is not TRUE
> var(c("1","2","3","4"),c("1","2","3","4") )
[1] 1.666667

-pd


> On 9 Jan 2020, at 14:49 , Marc Schwartz via R-devel <r-devel at r-project.org> wrote:
> 
> Jean-Luc,
> 
> Please keep the communications on the list, for the benefit of others, now and in the future, via the list archive. I am adding r-devel back here.
> 
> I can't speak to the rationale in some of these cases. As I noted, it may be (is likely) due to differing authors over time, and there may have been relevant use cases at the time that the code was written, resulting in the various checks. Presumably, the additional checks were not incorporated into the other functions to enforce a level of consistency.
> 
> We will need to wait for someone from R Core to comment.
> 
> Regards,
> 
> Marc
> 
>> On Jan 9, 2020, at 8:34 AM, Lipatz Jean-Luc <jean-luc.lipatz at insee.fr> wrote:
>> 
>> Ok, inconstencies.
>> 
>> The last test you wrote is a bit strange. I agree that it is useful to warn about a computation that have no sense in the case of factors. But why testing data;frames? If you go that way using random structures, you can also try :
>> 
>>> median(list(1,2),list(3,4),list(4,5))
>> Error in if (na.rm) x <- x[!is.na(x)] else if (any(is.na(x))) return(x[FALSE][NA]) : 
>> l'argument n'est pas interpr?table comme une valeur logique
>> De plus : Warning message:
>> In if (na.rm) x <- x[!is.na(x)] else if (any(is.na(x))) return(x[FALSE][NA]) :
>> la condition a une longueur > 1 et seul le premier ?l?ment est utilis?
>> 
>> giving a message which, despite of his length, doesn't really explain the reason of the error.
>> 
>> Why not a test on arguments like?
>> if (!is.numeric(x)) 
>>         stop("need numeric data")
>> 
>> 
>> -----Message d'origine-----
>> De : Marc Schwartz <marc_schwartz at me.com> 
>> Envoy? : jeudi 9 janvier 2020 14:19
>> ? : Lipatz Jean-Luc <jean-luc.lipatz at insee.fr>
>> Cc : R-Devel <r-devel at r-project.org>
>> Objet : Re: [Rd] mean
>> 
>> 
>>> On Jan 9, 2020, at 7:40 AM, Lipatz Jean-Luc <jean-luc.lipatz at insee.fr> wrote:
>>> 
>>> Hello,
>>> 
>>> Is there a reason for the following behaviour?
>>>> mean(c("1","2","3"))
>>> [1] NA
>>> Warning message:
>>> In mean.default(c("1", "2", "3")) :
>>> l'argument n'est ni num?rique, ni logique : renvoi de NA
>>> 
>>> But:
>>>> var(c("1","2","3"))
>>> [1] 1
>>> 
>>> And also:
>>>> median(c("1","2","3"))
>>> [1] "2"
>>> 
>>> But:
>>>> quantile(c("1","2","3"),p=.5)
>>> Error in (1 - h) * qs[i] : 
>>> argument non num?rique pour un op?rateur binaire
>>> 
>>> It sounds like a lack of symetry. 
>>> Best regards.
>>> 
>>> 
>>> Jean-Luc LIPATZ
>>> Insee - Direction g?n?rale
>>> Responsable de la coordination sur le d?veloppement de R et la mise en oeuvre d'alternatives ? SAS
>> 
>> 
>> Hi,
>> 
>> It would appear, whether by design or just inconsistent implementations, perhaps by different authors over time, that the checks for whether or not the input vector is numeric differ across the functions.
>> 
>> A further inconsistency is for median(), where:
>> 
>>> median(c("1", "2", "3", "4"))
>> [1] NA
>> Warning message:
>> In mean.default(sort(x, partial = half + 0L:1L)[half + 0L:1L]) :
>> argument is not numeric or logical: returning NA
>> 
>> as a result of there being 4 elements, rather than 3, and the internal checks in the code, where in the case of the input vector having an even number of elements, mean() is used:
>> 
>>   if (n%%2L == 1L) 
>>       sort(x, partial = half)[half]
>>   else mean(sort(x, partial = half + 0L:1L)[half + 0L:1L])
>> 
>> 
>> Similarly:
>> 
>>> median(factor(c("1", "2", "3")))
>> Error in median.default(factor(c("1", "2", "3"))) : need numeric data
>> 
>> because the input vector is a factor, rather than character, and the initial check has:
>> 
>> if (is.factor(x) || is.data.frame(x)) 
>>         stop("need numeric data")
>> 
>> 
>> Regards,
>> 
>> Marc Schwartz
>> 
>> 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From m@rc_@chw@rtz @end|ng |rom me@com  Thu Jan  9 17:52:19 2020
From: m@rc_@chw@rtz @end|ng |rom me@com (Marc Schwartz)
Date: Thu, 9 Jan 2020 11:52:19 -0500
Subject: [Rd] mean
In-Reply-To: <692FB5BD-523B-4498-9F95-78B17866B5E3@gmail.com>
References: <FEF25E56AFC7064784FA97C576467E0A020580ACD1@pdexchbalwst01.ad.insee.intra>
 <8A0E38C4-A2EA-4342-930B-503ECFE00D59@me.com>
 <FEF25E56AFC7064784FA97C576467E0A020580AD4F@pdexchbalwst01.ad.insee.intra>
 <FC19B55E-5208-469A-91DC-93E5ACD2AD69@me.com>
 <692FB5BD-523B-4498-9F95-78B17866B5E3@gmail.com>
Message-ID: <753F0139-3672-4D36-BC59-DA0877C054FE@me.com>

Peter,

Thanks for the reply.

If that were the case, then should not the following be allowed to work with ordered factors?

> median(factor(c("1", "2", "3"), ordered = TRUE))
Error in median.default(factor(c("1", "2", "3"), ordered = TRUE)) : 
  need numeric data

At least on the surface, if you can lexically order a character vector:

> median(c("red", "blue", "green"))
[1] "green"

you can also order a factor, or ordered factor, and if the number of elements is odd, return a median value.

Regards,

Marc


> On Jan 9, 2020, at 10:46 AM, peter dalgaard <pdalgd at gmail.com> wrote:
> 
> I think median() behaves as designed: As long as the argument can be ordered, the "middle observation" makes sense, except when the middle falls between two categories, and you can't define and average of the two candidates for a median.
> 
> The "sick man" would seem to be var(). Notice that it is also inconsistent with cov():
> 
>> cov(c("1","2","3","4"),c("1","2","3","4") )
> Error in cov(c("1", "2", "3", "4"), c("1", "2", "3", "4")) : 
>  is.numeric(x) || is.logical(x) is not TRUE
>> var(c("1","2","3","4"),c("1","2","3","4") )
> [1] 1.666667
> 
> -pd
> 
> 
>> On 9 Jan 2020, at 14:49 , Marc Schwartz via R-devel <r-devel at r-project.org> wrote:
>> 
>> Jean-Luc,
>> 
>> Please keep the communications on the list, for the benefit of others, now and in the future, via the list archive. I am adding r-devel back here.
>> 
>> I can't speak to the rationale in some of these cases. As I noted, it may be (is likely) due to differing authors over time, and there may have been relevant use cases at the time that the code was written, resulting in the various checks. Presumably, the additional checks were not incorporated into the other functions to enforce a level of consistency.
>> 
>> We will need to wait for someone from R Core to comment.
>> 
>> Regards,
>> 
>> Marc
>> 
>>> On Jan 9, 2020, at 8:34 AM, Lipatz Jean-Luc <jean-luc.lipatz at insee.fr> wrote:
>>> 
>>> Ok, inconstencies.
>>> 
>>> The last test you wrote is a bit strange. I agree that it is useful to warn about a computation that have no sense in the case of factors. But why testing data;frames? If you go that way using random structures, you can also try :
>>> 
>>>> median(list(1,2),list(3,4),list(4,5))
>>> Error in if (na.rm) x <- x[!is.na(x)] else if (any(is.na(x))) return(x[FALSE][NA]) : 
>>> l'argument n'est pas interpr?table comme une valeur logique
>>> De plus : Warning message:
>>> In if (na.rm) x <- x[!is.na(x)] else if (any(is.na(x))) return(x[FALSE][NA]) :
>>> la condition a une longueur > 1 et seul le premier ?l?ment est utilis?
>>> 
>>> giving a message which, despite of his length, doesn't really explain the reason of the error.
>>> 
>>> Why not a test on arguments like?
>>> if (!is.numeric(x)) 
>>>        stop("need numeric data")
>>> 
>>> 
>>> -----Message d'origine-----
>>> De : Marc Schwartz <marc_schwartz at me.com> 
>>> Envoy? : jeudi 9 janvier 2020 14:19
>>> ? : Lipatz Jean-Luc <jean-luc.lipatz at insee.fr>
>>> Cc : R-Devel <r-devel at r-project.org>
>>> Objet : Re: [Rd] mean
>>> 
>>> 
>>>> On Jan 9, 2020, at 7:40 AM, Lipatz Jean-Luc <jean-luc.lipatz at insee.fr> wrote:
>>>> 
>>>> Hello,
>>>> 
>>>> Is there a reason for the following behaviour?
>>>>> mean(c("1","2","3"))
>>>> [1] NA
>>>> Warning message:
>>>> In mean.default(c("1", "2", "3")) :
>>>> l'argument n'est ni num?rique, ni logique : renvoi de NA
>>>> 
>>>> But:
>>>>> var(c("1","2","3"))
>>>> [1] 1
>>>> 
>>>> And also:
>>>>> median(c("1","2","3"))
>>>> [1] "2"
>>>> 
>>>> But:
>>>>> quantile(c("1","2","3"),p=.5)
>>>> Error in (1 - h) * qs[i] : 
>>>> argument non num?rique pour un op?rateur binaire
>>>> 
>>>> It sounds like a lack of symetry. 
>>>> Best regards.
>>>> 
>>>> 
>>>> Jean-Luc LIPATZ
>>>> Insee - Direction g?n?rale
>>>> Responsable de la coordination sur le d?veloppement de R et la mise en oeuvre d'alternatives ? SAS
>>> 
>>> 
>>> Hi,
>>> 
>>> It would appear, whether by design or just inconsistent implementations, perhaps by different authors over time, that the checks for whether or not the input vector is numeric differ across the functions.
>>> 
>>> A further inconsistency is for median(), where:
>>> 
>>>> median(c("1", "2", "3", "4"))
>>> [1] NA
>>> Warning message:
>>> In mean.default(sort(x, partial = half + 0L:1L)[half + 0L:1L]) :
>>> argument is not numeric or logical: returning NA
>>> 
>>> as a result of there being 4 elements, rather than 3, and the internal checks in the code, where in the case of the input vector having an even number of elements, mean() is used:
>>> 
>>>  if (n%%2L == 1L) 
>>>      sort(x, partial = half)[half]
>>>  else mean(sort(x, partial = half + 0L:1L)[half + 0L:1L])
>>> 
>>> 
>>> Similarly:
>>> 
>>>> median(factor(c("1", "2", "3")))
>>> Error in median.default(factor(c("1", "2", "3"))) : need numeric data
>>> 
>>> because the input vector is a factor, rather than character, and the initial check has:
>>> 
>>> if (is.factor(x) || is.data.frame(x)) 
>>>        stop("need numeric data")
>>> 
>>> 
>>> Regards,
>>> 
>>> Marc Schwartz
>>> 
>>> 
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> -- 
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> 
> 
> 
> 
> 
> 
> 
> 
> 


From S@E|||@on @end|ng |rom LGCGroup@com  Thu Jan  9 18:03:16 2020
From: S@E|||@on @end|ng |rom LGCGroup@com (Stephen Ellison)
Date: Thu, 9 Jan 2020 17:03:16 +0000
Subject: [Rd] mean
In-Reply-To: <FEF25E56AFC7064784FA97C576467E0A020580ACD1@pdexchbalwst01.ad.insee.intra>
References: <FEF25E56AFC7064784FA97C576467E0A020580ACD1@pdexchbalwst01.ad.insee.intra>
Message-ID: <15997474164944d2874c0d00359d18be@GBDCVPEXC04.corp.lgc-group.com>

Note that in 

> > quantile(c("1","2","3"),p=.5)
> Error in (1 - h) * qs[i] : 
>  argument non num?rique pour un op?rateur binaire
the default quantile type (7) does not work for non-numerics.

Quantile types 1 and 3 work as expected:

> quantile(c("1","2","3"),p=.5, type=1)
50% 
"2" 
> quantile(c("1","2","3"),p=.5, type=3)
50% 
"2"


Steve E



*******************************************************************
This email and any attachments are confidential. Any use, copying or
disclosure other than by the intended recipient is unauthorised. If 
you have received this message in error, please notify the sender 
immediately via +44(0)20 8943 7000 or notify postmaster at lgcgroup.com 
and delete this message and any copies from your computer and network. 
LGC Limited. Registered in England 2991879. 
Registered office: Queens Road, Teddington, Middlesex, TW11 0LY, UK

From hp@ge@ @end|ng |rom |redhutch@org  Thu Jan  9 18:31:54 2020
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Thu, 9 Jan 2020 17:31:54 +0000
Subject: [Rd] Get memory address of an R data frame
In-Reply-To: <736437f6-22b9-da92-8fb3-e931a83de39d@oracle.com>
References: <trinity-a73adb6e-7025-4545-9108-870c1a66fbfa-1578570504114@3c-app-mailcom-bs15>
 <830d3acf-aa30-5f26-408d-f35b5f0cc2d9@oracle.com>
 <trinity-6d5c6b7f-e9e8-4cdf-90ca-b9ec4b97a11a-1578580918843@3c-app-mailcom-bs07>
 <736437f6-22b9-da92-8fb3-e931a83de39d@oracle.com>
Message-ID: <b81a3e70-9bc9-bcc7-8d8f-843413bb64b5@fredhutch.org>

On 1/9/20 06:56, Stepan wrote:
> On 09. 01. 20 15:41, lille stor wrote:
> 
>> I believe this could be done without creating side effects (e.g. 
>> crash) as we are just talking about changing values.

A crash would certainly be an annoying "side effect" ;-)

As Stepan explained, data.frame objects like most objects in R should 
never be modified in-place. If you're looking for a data-frame-like 
structure with a reference semantic where in-place modifications are 
allowed, please take a look at the data.table package.

H.

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From henr|k@bengt@@on @end|ng |rom gm@||@com  Fri Jan 10 07:33:51 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Thu, 9 Jan 2020 22:33:51 -0800
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <2a64a85b-97d5-b35e-66e6-3ac2de8b4800@gmail.com>
References: <CAFDcVCSPzMYE9A9V==Gs2yYTuH+YDqWhT_q=WU4AU5JL0WzX=A@mail.gmail.com>
 <CALEXWq3RapiDCTOFUerzxfiawYBu3LFxpCQpYRwmL3MQBh-S4g@mail.gmail.com>
 <CAPLMX9E6rcPNR0MMmaRPRQOBbhopiC43EBDEaHE56tWFGu5ZTQ@mail.gmail.com>
 <CALEXWq2gkuDW48SmGT+YWjn-GmuEjW56bsXj28xTRO=E-tZ48Q@mail.gmail.com>
 <CAPLMX9Fxe1T+npHdkXAzugApuopXN9F+5HgRSk0MyosRngopsw@mail.gmail.com>
 <CAJXgQP1i0EGEmHj2UAqY-H3QnYfspsJ3BkhY8fGE6oOKCb9vnw@mail.gmail.com>
 <CALEXWq2NzM7tLJ4kNTF=D=wKdDFe2xu2nw6mXYbbFJgp9Q1q2g@mail.gmail.com>
 <4a46e1e6-d584-9dc6-1699-973b56c95c98@gmail.com>
 <CALEXWq0R4Z=Q=BWLiSG-Suag5rYhSVoWfry24_s_ZM-Ahy1CWA@mail.gmail.com>
 <2a64a85b-97d5-b35e-66e6-3ac2de8b4800@gmail.com>
Message-ID: <CAFDcVCRo8WaP6EM=OmjjkYpahe_4XyXLGB0xLcVKJqpycv+P6Q@mail.gmail.com>

I'd like to pick up this thread started on 2019-04-11
(https://hypatia.math.ethz.ch/pipermail/r-devel/2019-April/077632.html).
Modulo all the other suggestions in this thread, would my proposal of
being able to disable forked processing via an option or an
environment variable make sense?  I've prototyped a working patch that
works like:

> options(fork.allowed = FALSE)
> unlist(parallel::mclapply(1:2, FUN = function(x) Sys.getpid()))
[1] 14058 14058
> parallel::mcmapply(1:2, FUN = function(x) Sys.getpid())
[1] 14058 14058
> parallel::pvec(1:2, FUN = function(x) Sys.getpid() + x/10)
[1] 14058.1 14058.2
> f <- parallel::mcparallel(Sys.getpid())
Error in allowFork(assert = TRUE) :
  Forked processing is not allowed per option ?fork.allowed? or
environment variable ?R_FORK_ALLOWED?
> cl <- parallel::makeForkCluster(1L)
Error in allowFork(assert = TRUE) :
  Forked processing is not allowed per option ?fork.allowed? or
environment variable ?R_FORK_ALLOWED?
>


The patch is:

Index: src/library/parallel/R/unix/forkCluster.R
===================================================================
--- src/library/parallel/R/unix/forkCluster.R (revision 77648)
+++ src/library/parallel/R/unix/forkCluster.R (working copy)
@@ -30,6 +30,7 @@

 newForkNode <- function(..., options = defaultClusterOptions, rank)
 {
+    allowFork(assert = TRUE)
     options <- addClusterOptions(options, list(...))
     outfile <- getClusterOption("outfile", options)
     port <- getClusterOption("port", options)
Index: src/library/parallel/R/unix/mclapply.R
===================================================================
--- src/library/parallel/R/unix/mclapply.R (revision 77648)
+++ src/library/parallel/R/unix/mclapply.R (working copy)
@@ -28,7 +28,7 @@
         stop("'mc.cores' must be >= 1")
     .check_ncores(cores)

-    if (isChild() && !isTRUE(mc.allow.recursive))
+    if (!allowFork() || (isChild() && !isTRUE(mc.allow.recursive)))
         return(lapply(X = X, FUN = FUN, ...))

     ## Follow lapply
Index: src/library/parallel/R/unix/mcparallel.R
===================================================================
--- src/library/parallel/R/unix/mcparallel.R (revision 77648)
+++ src/library/parallel/R/unix/mcparallel.R (working copy)
@@ -20,6 +20,7 @@

 mcparallel <- function(expr, name, mc.set.seed = TRUE, silent =
FALSE, mc.affinity = NULL, mc.interactive = FALSE, detached = FALSE)
 {
+    allowFork(assert = TRUE)
     f <- mcfork(detached)
     env <- parent.frame()
     if (isTRUE(mc.set.seed)) mc.advance.stream()
Index: src/library/parallel/R/unix/pvec.R
===================================================================
--- src/library/parallel/R/unix/pvec.R (revision 77648)
+++ src/library/parallel/R/unix/pvec.R (working copy)
@@ -25,7 +25,7 @@

     cores <- as.integer(mc.cores)
     if(cores < 1L) stop("'mc.cores' must be >= 1")
-    if(cores == 1L) return(FUN(v, ...))
+    if(cores == 1L || !allowFork()) return(FUN(v, ...))
     .check_ncores(cores)

     if(mc.set.seed) mc.reset.stream()

with a new file src/library/parallel/R/unix/allowFork.R:

allowFork <- function(assert = FALSE) {
    value <- Sys.getenv("R_FORK_ALLOWED")
    if (nzchar(value)) {
        value <- switch(value,
           "1"=, "TRUE"=, "true"=, "True"=, "yes"=, "Yes"= TRUE,
           "0"=, "FALSE"=,"false"=,"False"=, "no"=, "No" = FALSE,
            stop(gettextf("invalid environment variable value: %s==%s",
           "R_FORK_ALLOWED", value)))
value <- as.logical(value)
    } else {
        value <- TRUE
    }
    value <- getOption("fork.allowed", value)
    if (is.na(value)) {
        stop(gettextf("invalid option value: %s==%s", "fork.allowed", value))
    }
    if (assert && !value) {
      stop(gettextf("Forked processing is not allowed per option %s or
environment variable %s", sQuote("fork.allowed"),
sQuote("R_FORK_ALLOWED")))
    }
    value
}

/Henrik

On Mon, Apr 15, 2019 at 3:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>
> On 4/15/19 11:02 AM, I?aki Ucar wrote:
> > On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >> On 4/13/19 12:05 PM, I?aki Ucar wrote:
> >>> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
> >>>> I think it's worth saying that mclapply() works as documented
> >>> Mostly, yes. But it says nothing about fork's copy-on-write and memory
> >>> overcommitment, and that this means that it may work nicely or fail
> >>> spectacularly depending on whether, e.g., you operate on a long
> >>> vector.
> >> R cannot possibly replicate documentation of the underlying operating
> >> systems. It clearly says that fork() is used and readers who may not
> >> know what fork() is need to learn it from external sources.
> >> Copy-on-write is an elementary property of fork().
> > Just to be precise, copy-on-write is an optimization widely deployed
> > in most modern *nixes, particularly for the architectures in which R
> > usually runs. But it is not an elementary property; it is not even
> > possible without an MMU.
>
> Yes, old Unix systems without virtual memory had fork eagerly copying.
> Not relevant today, and certainly not for systems that run R, but indeed
> people interested in OS internals can look elsewhere for more precise
> information.
>
> Tomas
>


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Jan 10 10:34:28 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 10 Jan 2020 10:34:28 +0100
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <CAFDcVCRo8WaP6EM=OmjjkYpahe_4XyXLGB0xLcVKJqpycv+P6Q@mail.gmail.com>
References: <CAFDcVCSPzMYE9A9V==Gs2yYTuH+YDqWhT_q=WU4AU5JL0WzX=A@mail.gmail.com>
 <CALEXWq3RapiDCTOFUerzxfiawYBu3LFxpCQpYRwmL3MQBh-S4g@mail.gmail.com>
 <CAPLMX9E6rcPNR0MMmaRPRQOBbhopiC43EBDEaHE56tWFGu5ZTQ@mail.gmail.com>
 <CALEXWq2gkuDW48SmGT+YWjn-GmuEjW56bsXj28xTRO=E-tZ48Q@mail.gmail.com>
 <CAPLMX9Fxe1T+npHdkXAzugApuopXN9F+5HgRSk0MyosRngopsw@mail.gmail.com>
 <CAJXgQP1i0EGEmHj2UAqY-H3QnYfspsJ3BkhY8fGE6oOKCb9vnw@mail.gmail.com>
 <CALEXWq2NzM7tLJ4kNTF=D=wKdDFe2xu2nw6mXYbbFJgp9Q1q2g@mail.gmail.com>
 <4a46e1e6-d584-9dc6-1699-973b56c95c98@gmail.com>
 <CALEXWq0R4Z=Q=BWLiSG-Suag5rYhSVoWfry24_s_ZM-Ahy1CWA@mail.gmail.com>
 <2a64a85b-97d5-b35e-66e6-3ac2de8b4800@gmail.com>
 <CAFDcVCRo8WaP6EM=OmjjkYpahe_4XyXLGB0xLcVKJqpycv+P6Q@mail.gmail.com>
Message-ID: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>

On 1/10/20 7:33 AM, Henrik Bengtsson wrote:
> I'd like to pick up this thread started on 2019-04-11
> (https://hypatia.math.ethz.ch/pipermail/r-devel/2019-April/077632.html).
> Modulo all the other suggestions in this thread, would my proposal of
> being able to disable forked processing via an option or an
> environment variable make sense?

I don't think R should be doing that. There are caveats with using fork, 
and they are mentioned in the documentation of the parallel package, so 
people can easily avoid functions that use it, and this all has been 
discussed here recently.

If it is the case, we can expand the documentation in parallel package, 
add a warning against the use of forking with RStudio, but for that I it 
would be good to know at least why it is not working. From the github 
issue I have the impression that it is not really known why, whether it 
could be fixed, and if so, where. The same github issue reflects also 
that some people want to use forking for performance reasons, and even 
with RStudio, at least on Linux. Perhaps it could be fixed? Perhaps it 
is just some race condition somewhere?

Tomas

>   I've prototyped a working patch that
> works like:
>
>> options(fork.allowed = FALSE)
>> unlist(parallel::mclapply(1:2, FUN = function(x) Sys.getpid()))
> [1] 14058 14058
>> parallel::mcmapply(1:2, FUN = function(x) Sys.getpid())
> [1] 14058 14058
>> parallel::pvec(1:2, FUN = function(x) Sys.getpid() + x/10)
> [1] 14058.1 14058.2
>> f <- parallel::mcparallel(Sys.getpid())
> Error in allowFork(assert = TRUE) :
>    Forked processing is not allowed per option ?fork.allowed? or
> environment variable ?R_FORK_ALLOWED?
>> cl <- parallel::makeForkCluster(1L)
> Error in allowFork(assert = TRUE) :
>    Forked processing is not allowed per option ?fork.allowed? or
> environment variable ?R_FORK_ALLOWED?
>
> The patch is:
>
> Index: src/library/parallel/R/unix/forkCluster.R
> ===================================================================
> --- src/library/parallel/R/unix/forkCluster.R (revision 77648)
> +++ src/library/parallel/R/unix/forkCluster.R (working copy)
> @@ -30,6 +30,7 @@
>
>   newForkNode <- function(..., options = defaultClusterOptions, rank)
>   {
> +    allowFork(assert = TRUE)
>       options <- addClusterOptions(options, list(...))
>       outfile <- getClusterOption("outfile", options)
>       port <- getClusterOption("port", options)
> Index: src/library/parallel/R/unix/mclapply.R
> ===================================================================
> --- src/library/parallel/R/unix/mclapply.R (revision 77648)
> +++ src/library/parallel/R/unix/mclapply.R (working copy)
> @@ -28,7 +28,7 @@
>           stop("'mc.cores' must be >= 1")
>       .check_ncores(cores)
>
> -    if (isChild() && !isTRUE(mc.allow.recursive))
> +    if (!allowFork() || (isChild() && !isTRUE(mc.allow.recursive)))
>           return(lapply(X = X, FUN = FUN, ...))
>
>       ## Follow lapply
> Index: src/library/parallel/R/unix/mcparallel.R
> ===================================================================
> --- src/library/parallel/R/unix/mcparallel.R (revision 77648)
> +++ src/library/parallel/R/unix/mcparallel.R (working copy)
> @@ -20,6 +20,7 @@
>
>   mcparallel <- function(expr, name, mc.set.seed = TRUE, silent =
> FALSE, mc.affinity = NULL, mc.interactive = FALSE, detached = FALSE)
>   {
> +    allowFork(assert = TRUE)
>       f <- mcfork(detached)
>       env <- parent.frame()
>       if (isTRUE(mc.set.seed)) mc.advance.stream()
> Index: src/library/parallel/R/unix/pvec.R
> ===================================================================
> --- src/library/parallel/R/unix/pvec.R (revision 77648)
> +++ src/library/parallel/R/unix/pvec.R (working copy)
> @@ -25,7 +25,7 @@
>
>       cores <- as.integer(mc.cores)
>       if(cores < 1L) stop("'mc.cores' must be >= 1")
> -    if(cores == 1L) return(FUN(v, ...))
> +    if(cores == 1L || !allowFork()) return(FUN(v, ...))
>       .check_ncores(cores)
>
>       if(mc.set.seed) mc.reset.stream()
>
> with a new file src/library/parallel/R/unix/allowFork.R:
>
> allowFork <- function(assert = FALSE) {
>      value <- Sys.getenv("R_FORK_ALLOWED")
>      if (nzchar(value)) {
>          value <- switch(value,
>             "1"=, "TRUE"=, "true"=, "True"=, "yes"=, "Yes"= TRUE,
>             "0"=, "FALSE"=,"false"=,"False"=, "no"=, "No" = FALSE,
>              stop(gettextf("invalid environment variable value: %s==%s",
>             "R_FORK_ALLOWED", value)))
> value <- as.logical(value)
>      } else {
>          value <- TRUE
>      }
>      value <- getOption("fork.allowed", value)
>      if (is.na(value)) {
>          stop(gettextf("invalid option value: %s==%s", "fork.allowed", value))
>      }
>      if (assert && !value) {
>        stop(gettextf("Forked processing is not allowed per option %s or
> environment variable %s", sQuote("fork.allowed"),
> sQuote("R_FORK_ALLOWED")))
>      }
>      value
> }
>
> /Henrik
>
> On Mon, Apr 15, 2019 at 3:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>> On 4/15/19 11:02 AM, I?aki Ucar wrote:
>>> On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>> On 4/13/19 12:05 PM, I?aki Ucar wrote:
>>>>> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
>>>>>> I think it's worth saying that mclapply() works as documented
>>>>> Mostly, yes. But it says nothing about fork's copy-on-write and memory
>>>>> overcommitment, and that this means that it may work nicely or fail
>>>>> spectacularly depending on whether, e.g., you operate on a long
>>>>> vector.
>>>> R cannot possibly replicate documentation of the underlying operating
>>>> systems. It clearly says that fork() is used and readers who may not
>>>> know what fork() is need to learn it from external sources.
>>>> Copy-on-write is an elementary property of fork().
>>> Just to be precise, copy-on-write is an optimization widely deployed
>>> in most modern *nixes, particularly for the architectures in which R
>>> usually runs. But it is not an elementary property; it is not even
>>> possible without an MMU.
>> Yes, old Unix systems without virtual memory had fork eagerly copying.
>> Not relevant today, and certainly not for systems that run R, but indeed
>> people interested in OS internals can look elsewhere for more precise
>> information.
>>
>> Tomas
>>


From konr@d@rudo|ph @end|ng |rom gm@||@com  Fri Jan 10 11:59:16 2020
From: konr@d@rudo|ph @end|ng |rom gm@||@com (Konrad Rudolph)
Date: Fri, 10 Jan 2020 10:59:16 +0000
Subject: [Rd] Operator precedence of =, <- and ?
Message-ID: <CAM2gKPZ6PjQBqFGsmbsUXMRtZWFBRzAf=w2DQUFOhNBwMewieg@mail.gmail.com>

The documentation (help("Syntax")) gives the operator precedence of the
assignment operators and help, from highest to lowest, as:

       ?<- <<-?           assignment (right to left)
       ?=?                assignment (right to left)
       ???                help (unary and binary)

If I understand correctly this implies that `a = b ? c` and `a <- b ? c`
should parse identically. Or, if using the unary version, `?a = b` and `?a
<- b` should parse identically.

However, as noted by Antoine Fabri on Stack Overflow [1], they have
different parses (on R 3.5.3 and 3.6.1, at least), which puts the
precedence of `?` *between* that of `<-` and `=`. In fact, src/main/gram.y
[2] appears to show the same precedence table as the documentation;
presumably the parser at some point rewrites the parse tree manually.

At any rate, should this be fixed in the documentation? Or is the
documentation ?correct?, and there?s a bug in the parser (in some versions
of R)?

[1] <
https://stackoverflow.com/questions/1741820/51564252#comment105506343_51564252
>
[2] <
https://github.com/wch/r-source/blob/386c3a93cbcaf95017fa6ae52453530fb95149f4/src/main/gram.y#L384-L390
>

--
Konrad Rudolph

	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Fri Jan 10 13:37:05 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Fri, 10 Jan 2020 06:37:05 -0600
Subject: [Rd] Get memory address of an R data frame
In-Reply-To: <b81a3e70-9bc9-bcc7-8d8f-843413bb64b5@fredhutch.org>
References: <trinity-a73adb6e-7025-4545-9108-870c1a66fbfa-1578570504114@3c-app-mailcom-bs15>
 <830d3acf-aa30-5f26-408d-f35b5f0cc2d9@oracle.com>
 <trinity-6d5c6b7f-e9e8-4cdf-90ca-b9ec4b97a11a-1578580918843@3c-app-mailcom-bs07>
 <736437f6-22b9-da92-8fb3-e931a83de39d@oracle.com>
 <b81a3e70-9bc9-bcc7-8d8f-843413bb64b5@fredhutch.org>
Message-ID: <24088.28657.733498.962304@rob.eddelbuettel.com>


lille stor,

As a general rule, please do not cross-post.

And almost certainly do not simultaneously as you did here and on
https://stackoverflow.com/questions/59663174/get-memory-address-of-an-r-data-frame

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From @|mon@urb@nek @end|ng |rom r-project@org  Fri Jan 10 14:31:10 2020
From: @|mon@urb@nek @end|ng |rom r-project@org (Simon Urbanek)
Date: Fri, 10 Jan 2020 08:31:10 -0500
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
Message-ID: <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>

If I understand the thread correctly this is an RStudio issue and I would suggest that the developers consider using pthread_atfork() so RStudio can handle forking as they deem fit (bail out with an error or make RStudio work).  Note that in principle the functionality requested here can be easily implemented in a package so R doesn?t need to be modified.

Cheers,
Simon

Sent from my iPhone

>> On Jan 10, 2020, at 04:34, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>> 
>> ?On 1/10/20 7:33 AM, Henrik Bengtsson wrote:
>> I'd like to pick up this thread started on 2019-04-11
>> (https://hypatia.math.ethz.ch/pipermail/r-devel/2019-April/077632.html).
>> Modulo all the other suggestions in this thread, would my proposal of
>> being able to disable forked processing via an option or an
>> environment variable make sense?
> 
> I don't think R should be doing that. There are caveats with using fork, and they are mentioned in the documentation of the parallel package, so people can easily avoid functions that use it, and this all has been discussed here recently.
> 
> If it is the case, we can expand the documentation in parallel package, add a warning against the use of forking with RStudio, but for that I it would be good to know at least why it is not working. From the github issue I have the impression that it is not really known why, whether it could be fixed, and if so, where. The same github issue reflects also that some people want to use forking for performance reasons, and even with RStudio, at least on Linux. Perhaps it could be fixed? Perhaps it is just some race condition somewhere?
> 
> Tomas
> 
>> I've prototyped a working patch that
>> works like:
>>> options(fork.allowed = FALSE)
>>> unlist(parallel::mclapply(1:2, FUN = function(x) Sys.getpid()))
>> [1] 14058 14058
>>> parallel::mcmapply(1:2, FUN = function(x) Sys.getpid())
>> [1] 14058 14058
>>> parallel::pvec(1:2, FUN = function(x) Sys.getpid() + x/10)
>> [1] 14058.1 14058.2
>>> f <- parallel::mcparallel(Sys.getpid())
>> Error in allowFork(assert = TRUE) :
>>  Forked processing is not allowed per option ?fork.allowed? or
>> environment variable ?R_FORK_ALLOWED?
>>> cl <- parallel::makeForkCluster(1L)
>> Error in allowFork(assert = TRUE) :
>>  Forked processing is not allowed per option ?fork.allowed? or
>> environment variable ?R_FORK_ALLOWED?
>> The patch is:
>> Index: src/library/parallel/R/unix/forkCluster.R
>> ===================================================================
>> --- src/library/parallel/R/unix/forkCluster.R (revision 77648)
>> +++ src/library/parallel/R/unix/forkCluster.R (working copy)
>> @@ -30,6 +30,7 @@
>> newForkNode <- function(..., options = defaultClusterOptions, rank)
>> {
>> +    allowFork(assert = TRUE)
>>     options <- addClusterOptions(options, list(...))
>>     outfile <- getClusterOption("outfile", options)
>>     port <- getClusterOption("port", options)
>> Index: src/library/parallel/R/unix/mclapply.R
>> ===================================================================
>> --- src/library/parallel/R/unix/mclapply.R (revision 77648)
>> +++ src/library/parallel/R/unix/mclapply.R (working copy)
>> @@ -28,7 +28,7 @@
>>         stop("'mc.cores' must be >= 1")
>>     .check_ncores(cores)
>> -    if (isChild() && !isTRUE(mc.allow.recursive))
>> +    if (!allowFork() || (isChild() && !isTRUE(mc.allow.recursive)))
>>         return(lapply(X = X, FUN = FUN, ...))
>>     ## Follow lapply
>> Index: src/library/parallel/R/unix/mcparallel.R
>> ===================================================================
>> --- src/library/parallel/R/unix/mcparallel.R (revision 77648)
>> +++ src/library/parallel/R/unix/mcparallel.R (working copy)
>> @@ -20,6 +20,7 @@
>> mcparallel <- function(expr, name, mc.set.seed = TRUE, silent =
>> FALSE, mc.affinity = NULL, mc.interactive = FALSE, detached = FALSE)
>> {
>> +    allowFork(assert = TRUE)
>>     f <- mcfork(detached)
>>     env <- parent.frame()
>>     if (isTRUE(mc.set.seed)) mc.advance.stream()
>> Index: src/library/parallel/R/unix/pvec.R
>> ===================================================================
>> --- src/library/parallel/R/unix/pvec.R (revision 77648)
>> +++ src/library/parallel/R/unix/pvec.R (working copy)
>> @@ -25,7 +25,7 @@
>>     cores <- as.integer(mc.cores)
>>     if(cores < 1L) stop("'mc.cores' must be >= 1")
>> -    if(cores == 1L) return(FUN(v, ...))
>> +    if(cores == 1L || !allowFork()) return(FUN(v, ...))
>>     .check_ncores(cores)
>>     if(mc.set.seed) mc.reset.stream()
>> with a new file src/library/parallel/R/unix/allowFork.R:
>> allowFork <- function(assert = FALSE) {
>>    value <- Sys.getenv("R_FORK_ALLOWED")
>>    if (nzchar(value)) {
>>        value <- switch(value,
>>           "1"=, "TRUE"=, "true"=, "True"=, "yes"=, "Yes"= TRUE,
>>           "0"=, "FALSE"=,"false"=,"False"=, "no"=, "No" = FALSE,
>>            stop(gettextf("invalid environment variable value: %s==%s",
>>           "R_FORK_ALLOWED", value)))
>> value <- as.logical(value)
>>    } else {
>>        value <- TRUE
>>    }
>>    value <- getOption("fork.allowed", value)
>>    if (is.na(value)) {
>>        stop(gettextf("invalid option value: %s==%s", "fork.allowed", value))
>>    }
>>    if (assert && !value) {
>>      stop(gettextf("Forked processing is not allowed per option %s or
>> environment variable %s", sQuote("fork.allowed"),
>> sQuote("R_FORK_ALLOWED")))
>>    }
>>    value
>> }
>> /Henrik
>>> On Mon, Apr 15, 2019 at 3:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>> On 4/15/19 11:02 AM, I?aki Ucar wrote:
>>>> On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>> On 4/13/19 12:05 PM, I?aki Ucar wrote:
>>>>>> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
>>>>>>> I think it's worth saying that mclapply() works as documented
>>>>>> Mostly, yes. But it says nothing about fork's copy-on-write and memory
>>>>>> overcommitment, and that this means that it may work nicely or fail
>>>>>> spectacularly depending on whether, e.g., you operate on a long
>>>>>> vector.
>>>>> R cannot possibly replicate documentation of the underlying operating
>>>>> systems. It clearly says that fork() is used and readers who may not
>>>>> know what fork() is need to learn it from external sources.
>>>>> Copy-on-write is an elementary property of fork().
>>>> Just to be precise, copy-on-write is an optimization widely deployed
>>>> in most modern *nixes, particularly for the architectures in which R
>>>> usually runs. But it is not an elementary property; it is not even
>>>> possible without an MMU.
>>> Yes, old Unix systems without virtual memory had fork eagerly copying.
>>> Not relevant today, and certainly not for systems that run R, but indeed
>>> people interested in OS internals can look elsewhere for more precise
>>> information.
>>> Tomas
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From henr|k@bengt@@on @end|ng |rom gm@||@com  Fri Jan 10 16:58:13 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Fri, 10 Jan 2020 07:58:13 -0800
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
 <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
Message-ID: <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>

The RStudio GUI was just one example.  AFAIK, and please correct me if
I'm wrong, another example is where multi-threaded code is used in
forked processing and that's sometimes unstable.  Yes another, which
might be multi-thread related or not, is
https://stat.ethz.ch/pipermail/r-devel/2018-September/076845.html:

res <- parallel::mclapply(urls, function(url) {
  download.file(url, basename(url))
})

That was reported to fail on macOS with the default method="libcurl"
but not for method="curl" or method="wget".

Further documentation is needed and would help but I don't believe
it's sufficient to solve everyday problems.  The argument for
introducing an option/env var to disable forking is to give the end
user a quick workaround for newly introduced bugs.  Neither the
develop nor the end user have full control of the R package stack,
which is always in flux.  For instance, above mclapply() code might
have been in a package on CRAN and then all of a sudden
method="libcurl" became the new default in base R.  The above
mclapply() code is now buggy on macOS, and not necessarily caught by
CRAN checks.  The package developer might not notice this because they
are on Linux or Windows.  It can take a very long time before this
problem is even noticed and even further before it is tracked down and
fixed.   Similarly, as more and more code turn to native code and it
becomes easier and easier to implement multi-threading, more and more
of these bugs across package dependencies risk sneaking in the
backdoor wherever forked processing is in place.

For the end user, but also higher-up upstream package developers, the
quickest workaround would be disable forking.  If you're conservative,
you could even disable it all of your R processing.  Being able to
quickly disable forking will also provide a mechanism for quickly
testing the hypothesis that forking is the underlying problem, i.e.
"Please retry with options(fork.allowed = FALSE)" will become handy
for troubleshooting.

/Henrik

On Fri, Jan 10, 2020 at 5:31 AM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
>
> If I understand the thread correctly this is an RStudio issue and I would suggest that the developers consider using pthread_atfork() so RStudio can handle forking as they deem fit (bail out with an error or make RStudio work).  Note that in principle the functionality requested here can be easily implemented in a package so R doesn?t need to be modified.
>
> Cheers,
> Simon
>
> Sent from my iPhone
>
> >> On Jan 10, 2020, at 04:34, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>
> >> ?On 1/10/20 7:33 AM, Henrik Bengtsson wrote:
> >> I'd like to pick up this thread started on 2019-04-11
> >> (https://hypatia.math.ethz.ch/pipermail/r-devel/2019-April/077632.html).
> >> Modulo all the other suggestions in this thread, would my proposal of
> >> being able to disable forked processing via an option or an
> >> environment variable make sense?
> >
> > I don't think R should be doing that. There are caveats with using fork, and they are mentioned in the documentation of the parallel package, so people can easily avoid functions that use it, and this all has been discussed here recently.
> >
> > If it is the case, we can expand the documentation in parallel package, add a warning against the use of forking with RStudio, but for that I it would be good to know at least why it is not working. From the github issue I have the impression that it is not really known why, whether it could be fixed, and if so, where. The same github issue reflects also that some people want to use forking for performance reasons, and even with RStudio, at least on Linux. Perhaps it could be fixed? Perhaps it is just some race condition somewhere?
> >
> > Tomas
> >
> >> I've prototyped a working patch that
> >> works like:
> >>> options(fork.allowed = FALSE)
> >>> unlist(parallel::mclapply(1:2, FUN = function(x) Sys.getpid()))
> >> [1] 14058 14058
> >>> parallel::mcmapply(1:2, FUN = function(x) Sys.getpid())
> >> [1] 14058 14058
> >>> parallel::pvec(1:2, FUN = function(x) Sys.getpid() + x/10)
> >> [1] 14058.1 14058.2
> >>> f <- parallel::mcparallel(Sys.getpid())
> >> Error in allowFork(assert = TRUE) :
> >>  Forked processing is not allowed per option ?fork.allowed? or
> >> environment variable ?R_FORK_ALLOWED?
> >>> cl <- parallel::makeForkCluster(1L)
> >> Error in allowFork(assert = TRUE) :
> >>  Forked processing is not allowed per option ?fork.allowed? or
> >> environment variable ?R_FORK_ALLOWED?
> >> The patch is:
> >> Index: src/library/parallel/R/unix/forkCluster.R
> >> ===================================================================
> >> --- src/library/parallel/R/unix/forkCluster.R (revision 77648)
> >> +++ src/library/parallel/R/unix/forkCluster.R (working copy)
> >> @@ -30,6 +30,7 @@
> >> newForkNode <- function(..., options = defaultClusterOptions, rank)
> >> {
> >> +    allowFork(assert = TRUE)
> >>     options <- addClusterOptions(options, list(...))
> >>     outfile <- getClusterOption("outfile", options)
> >>     port <- getClusterOption("port", options)
> >> Index: src/library/parallel/R/unix/mclapply.R
> >> ===================================================================
> >> --- src/library/parallel/R/unix/mclapply.R (revision 77648)
> >> +++ src/library/parallel/R/unix/mclapply.R (working copy)
> >> @@ -28,7 +28,7 @@
> >>         stop("'mc.cores' must be >= 1")
> >>     .check_ncores(cores)
> >> -    if (isChild() && !isTRUE(mc.allow.recursive))
> >> +    if (!allowFork() || (isChild() && !isTRUE(mc.allow.recursive)))
> >>         return(lapply(X = X, FUN = FUN, ...))
> >>     ## Follow lapply
> >> Index: src/library/parallel/R/unix/mcparallel.R
> >> ===================================================================
> >> --- src/library/parallel/R/unix/mcparallel.R (revision 77648)
> >> +++ src/library/parallel/R/unix/mcparallel.R (working copy)
> >> @@ -20,6 +20,7 @@
> >> mcparallel <- function(expr, name, mc.set.seed = TRUE, silent =
> >> FALSE, mc.affinity = NULL, mc.interactive = FALSE, detached = FALSE)
> >> {
> >> +    allowFork(assert = TRUE)
> >>     f <- mcfork(detached)
> >>     env <- parent.frame()
> >>     if (isTRUE(mc.set.seed)) mc.advance.stream()
> >> Index: src/library/parallel/R/unix/pvec.R
> >> ===================================================================
> >> --- src/library/parallel/R/unix/pvec.R (revision 77648)
> >> +++ src/library/parallel/R/unix/pvec.R (working copy)
> >> @@ -25,7 +25,7 @@
> >>     cores <- as.integer(mc.cores)
> >>     if(cores < 1L) stop("'mc.cores' must be >= 1")
> >> -    if(cores == 1L) return(FUN(v, ...))
> >> +    if(cores == 1L || !allowFork()) return(FUN(v, ...))
> >>     .check_ncores(cores)
> >>     if(mc.set.seed) mc.reset.stream()
> >> with a new file src/library/parallel/R/unix/allowFork.R:
> >> allowFork <- function(assert = FALSE) {
> >>    value <- Sys.getenv("R_FORK_ALLOWED")
> >>    if (nzchar(value)) {
> >>        value <- switch(value,
> >>           "1"=, "TRUE"=, "true"=, "True"=, "yes"=, "Yes"= TRUE,
> >>           "0"=, "FALSE"=,"false"=,"False"=, "no"=, "No" = FALSE,
> >>            stop(gettextf("invalid environment variable value: %s==%s",
> >>           "R_FORK_ALLOWED", value)))
> >> value <- as.logical(value)
> >>    } else {
> >>        value <- TRUE
> >>    }
> >>    value <- getOption("fork.allowed", value)
> >>    if (is.na(value)) {
> >>        stop(gettextf("invalid option value: %s==%s", "fork.allowed", value))
> >>    }
> >>    if (assert && !value) {
> >>      stop(gettextf("Forked processing is not allowed per option %s or
> >> environment variable %s", sQuote("fork.allowed"),
> >> sQuote("R_FORK_ALLOWED")))
> >>    }
> >>    value
> >> }
> >> /Henrik
> >>> On Mon, Apr 15, 2019 at 3:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>> On 4/15/19 11:02 AM, I?aki Ucar wrote:
> >>>> On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>> On 4/13/19 12:05 PM, I?aki Ucar wrote:
> >>>>>> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
> >>>>>>> I think it's worth saying that mclapply() works as documented
> >>>>>> Mostly, yes. But it says nothing about fork's copy-on-write and memory
> >>>>>> overcommitment, and that this means that it may work nicely or fail
> >>>>>> spectacularly depending on whether, e.g., you operate on a long
> >>>>>> vector.
> >>>>> R cannot possibly replicate documentation of the underlying operating
> >>>>> systems. It clearly says that fork() is used and readers who may not
> >>>>> know what fork() is need to learn it from external sources.
> >>>>> Copy-on-write is an elementary property of fork().
> >>>> Just to be precise, copy-on-write is an optimization widely deployed
> >>>> in most modern *nixes, particularly for the architectures in which R
> >>>> usually runs. But it is not an elementary property; it is not even
> >>>> possible without an MMU.
> >>> Yes, old Unix systems without virtual memory had fork eagerly copying.
> >>> Not relevant today, and certainly not for systems that run R, but indeed
> >>> people interested in OS internals can look elsewhere for more precise
> >>> information.
> >>> Tomas
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @|mon@urb@nek @end|ng |rom R-project@org  Fri Jan 10 20:23:00 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 10 Jan 2020 14:23:00 -0500
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
 <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
 <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>
Message-ID: <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>

Henrik,

the example from the post works just fine in CRAN R for me - the post was about homebrew build so it's conceivably a bug in their libraries. That's exactly why I was proposing a more general solution where you can simply define a function in user-space that will issue a warning or stop on fork, it doesn't have to be part of core R, there are other packages that use fork() as well, so what I proposed is much safer than hacking the parallel package.

Cheers,
Simon
 


> On Jan 10, 2020, at 10:58 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
> 
> The RStudio GUI was just one example.  AFAIK, and please correct me if
> I'm wrong, another example is where multi-threaded code is used in
> forked processing and that's sometimes unstable.  Yes another, which
> might be multi-thread related or not, is
> https://stat.ethz.ch/pipermail/r-devel/2018-September/076845.html:
> 
> res <- parallel::mclapply(urls, function(url) {
>  download.file(url, basename(url))
> })
> 
> That was reported to fail on macOS with the default method="libcurl"
> but not for method="curl" or method="wget".
> 
> Further documentation is needed and would help but I don't believe
> it's sufficient to solve everyday problems.  The argument for
> introducing an option/env var to disable forking is to give the end
> user a quick workaround for newly introduced bugs.  Neither the
> develop nor the end user have full control of the R package stack,
> which is always in flux.  For instance, above mclapply() code might
> have been in a package on CRAN and then all of a sudden
> method="libcurl" became the new default in base R.  The above
> mclapply() code is now buggy on macOS, and not necessarily caught by
> CRAN checks.  The package developer might not notice this because they
> are on Linux or Windows.  It can take a very long time before this
> problem is even noticed and even further before it is tracked down and
> fixed.   Similarly, as more and more code turn to native code and it
> becomes easier and easier to implement multi-threading, more and more
> of these bugs across package dependencies risk sneaking in the
> backdoor wherever forked processing is in place.
> 
> For the end user, but also higher-up upstream package developers, the
> quickest workaround would be disable forking.  If you're conservative,
> you could even disable it all of your R processing.  Being able to
> quickly disable forking will also provide a mechanism for quickly
> testing the hypothesis that forking is the underlying problem, i.e.
> "Please retry with options(fork.allowed = FALSE)" will become handy
> for troubleshooting.
> 
> /Henrik
> 
> On Fri, Jan 10, 2020 at 5:31 AM Simon Urbanek
> <simon.urbanek at r-project.org> wrote:
>> 
>> If I understand the thread correctly this is an RStudio issue and I would suggest that the developers consider using pthread_atfork() so RStudio can handle forking as they deem fit (bail out with an error or make RStudio work).  Note that in principle the functionality requested here can be easily implemented in a package so R doesn?t need to be modified.
>> 
>> Cheers,
>> Simon
>> 
>> Sent from my iPhone
>> 
>>>> On Jan 10, 2020, at 04:34, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>> 
>>>> ?On 1/10/20 7:33 AM, Henrik Bengtsson wrote:
>>>> I'd like to pick up this thread started on 2019-04-11
>>>> (https://hypatia.math.ethz.ch/pipermail/r-devel/2019-April/077632.html).
>>>> Modulo all the other suggestions in this thread, would my proposal of
>>>> being able to disable forked processing via an option or an
>>>> environment variable make sense?
>>> 
>>> I don't think R should be doing that. There are caveats with using fork, and they are mentioned in the documentation of the parallel package, so people can easily avoid functions that use it, and this all has been discussed here recently.
>>> 
>>> If it is the case, we can expand the documentation in parallel package, add a warning against the use of forking with RStudio, but for that I it would be good to know at least why it is not working. From the github issue I have the impression that it is not really known why, whether it could be fixed, and if so, where. The same github issue reflects also that some people want to use forking for performance reasons, and even with RStudio, at least on Linux. Perhaps it could be fixed? Perhaps it is just some race condition somewhere?
>>> 
>>> Tomas
>>> 
>>>> I've prototyped a working patch that
>>>> works like:
>>>>> options(fork.allowed = FALSE)
>>>>> unlist(parallel::mclapply(1:2, FUN = function(x) Sys.getpid()))
>>>> [1] 14058 14058
>>>>> parallel::mcmapply(1:2, FUN = function(x) Sys.getpid())
>>>> [1] 14058 14058
>>>>> parallel::pvec(1:2, FUN = function(x) Sys.getpid() + x/10)
>>>> [1] 14058.1 14058.2
>>>>> f <- parallel::mcparallel(Sys.getpid())
>>>> Error in allowFork(assert = TRUE) :
>>>> Forked processing is not allowed per option ?fork.allowed? or
>>>> environment variable ?R_FORK_ALLOWED?
>>>>> cl <- parallel::makeForkCluster(1L)
>>>> Error in allowFork(assert = TRUE) :
>>>> Forked processing is not allowed per option ?fork.allowed? or
>>>> environment variable ?R_FORK_ALLOWED?
>>>> The patch is:
>>>> Index: src/library/parallel/R/unix/forkCluster.R
>>>> ===================================================================
>>>> --- src/library/parallel/R/unix/forkCluster.R (revision 77648)
>>>> +++ src/library/parallel/R/unix/forkCluster.R (working copy)
>>>> @@ -30,6 +30,7 @@
>>>> newForkNode <- function(..., options = defaultClusterOptions, rank)
>>>> {
>>>> +    allowFork(assert = TRUE)
>>>>    options <- addClusterOptions(options, list(...))
>>>>    outfile <- getClusterOption("outfile", options)
>>>>    port <- getClusterOption("port", options)
>>>> Index: src/library/parallel/R/unix/mclapply.R
>>>> ===================================================================
>>>> --- src/library/parallel/R/unix/mclapply.R (revision 77648)
>>>> +++ src/library/parallel/R/unix/mclapply.R (working copy)
>>>> @@ -28,7 +28,7 @@
>>>>        stop("'mc.cores' must be >= 1")
>>>>    .check_ncores(cores)
>>>> -    if (isChild() && !isTRUE(mc.allow.recursive))
>>>> +    if (!allowFork() || (isChild() && !isTRUE(mc.allow.recursive)))
>>>>        return(lapply(X = X, FUN = FUN, ...))
>>>>    ## Follow lapply
>>>> Index: src/library/parallel/R/unix/mcparallel.R
>>>> ===================================================================
>>>> --- src/library/parallel/R/unix/mcparallel.R (revision 77648)
>>>> +++ src/library/parallel/R/unix/mcparallel.R (working copy)
>>>> @@ -20,6 +20,7 @@
>>>> mcparallel <- function(expr, name, mc.set.seed = TRUE, silent =
>>>> FALSE, mc.affinity = NULL, mc.interactive = FALSE, detached = FALSE)
>>>> {
>>>> +    allowFork(assert = TRUE)
>>>>    f <- mcfork(detached)
>>>>    env <- parent.frame()
>>>>    if (isTRUE(mc.set.seed)) mc.advance.stream()
>>>> Index: src/library/parallel/R/unix/pvec.R
>>>> ===================================================================
>>>> --- src/library/parallel/R/unix/pvec.R (revision 77648)
>>>> +++ src/library/parallel/R/unix/pvec.R (working copy)
>>>> @@ -25,7 +25,7 @@
>>>>    cores <- as.integer(mc.cores)
>>>>    if(cores < 1L) stop("'mc.cores' must be >= 1")
>>>> -    if(cores == 1L) return(FUN(v, ...))
>>>> +    if(cores == 1L || !allowFork()) return(FUN(v, ...))
>>>>    .check_ncores(cores)
>>>>    if(mc.set.seed) mc.reset.stream()
>>>> with a new file src/library/parallel/R/unix/allowFork.R:
>>>> allowFork <- function(assert = FALSE) {
>>>>   value <- Sys.getenv("R_FORK_ALLOWED")
>>>>   if (nzchar(value)) {
>>>>       value <- switch(value,
>>>>          "1"=, "TRUE"=, "true"=, "True"=, "yes"=, "Yes"= TRUE,
>>>>          "0"=, "FALSE"=,"false"=,"False"=, "no"=, "No" = FALSE,
>>>>           stop(gettextf("invalid environment variable value: %s==%s",
>>>>          "R_FORK_ALLOWED", value)))
>>>> value <- as.logical(value)
>>>>   } else {
>>>>       value <- TRUE
>>>>   }
>>>>   value <- getOption("fork.allowed", value)
>>>>   if (is.na(value)) {
>>>>       stop(gettextf("invalid option value: %s==%s", "fork.allowed", value))
>>>>   }
>>>>   if (assert && !value) {
>>>>     stop(gettextf("Forked processing is not allowed per option %s or
>>>> environment variable %s", sQuote("fork.allowed"),
>>>> sQuote("R_FORK_ALLOWED")))
>>>>   }
>>>>   value
>>>> }
>>>> /Henrik
>>>>> On Mon, Apr 15, 2019 at 3:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>> On 4/15/19 11:02 AM, I?aki Ucar wrote:
>>>>>> On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>>> On 4/13/19 12:05 PM, I?aki Ucar wrote:
>>>>>>>> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
>>>>>>>>> I think it's worth saying that mclapply() works as documented
>>>>>>>> Mostly, yes. But it says nothing about fork's copy-on-write and memory
>>>>>>>> overcommitment, and that this means that it may work nicely or fail
>>>>>>>> spectacularly depending on whether, e.g., you operate on a long
>>>>>>>> vector.
>>>>>>> R cannot possibly replicate documentation of the underlying operating
>>>>>>> systems. It clearly says that fork() is used and readers who may not
>>>>>>> know what fork() is need to learn it from external sources.
>>>>>>> Copy-on-write is an elementary property of fork().
>>>>>> Just to be precise, copy-on-write is an optimization widely deployed
>>>>>> in most modern *nixes, particularly for the architectures in which R
>>>>>> usually runs. But it is not an elementary property; it is not even
>>>>>> possible without an MMU.
>>>>> Yes, old Unix systems without virtual memory had fork eagerly copying.
>>>>> Not relevant today, and certainly not for systems that run R, but indeed
>>>>> people interested in OS internals can look elsewhere for more precise
>>>>> information.
>>>>> Tomas
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From c@@rd|@g@bor @end|ng |rom gm@||@com  Fri Jan 10 21:10:55 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Fri, 10 Jan 2020 20:10:55 +0000
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
 <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
 <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>
 <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
Message-ID: <CABtg=Km4GdMC5vGOs0PqvOjqABqcrhOZOqPv=81DuoX75zm8HQ@mail.gmail.com>

On Fri, Jan 10, 2020 at 7:23 PM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
>
> Henrik,
>
> the example from the post works just fine in CRAN R for me - the post was about homebrew build so it's conceivably a bug in their libraries.

I think it works now, because Apple switched to a different SSL
library for libcurl. It usually crashes or fails on older macOS
versions, with the CRAN build of R as well.

It is not a bug in any library, it is just that macOS does not support
fork() without an immediate exec().

In general, any code that calls the macOS system libraries might
crash. (Except for CoreFoundation, which seems to be fine, but AFAIR
there is no guarantee for that, either.)

You get crashes in the terminal as well, without multithreading. E.g.
the keyring package links for the Security library on macOS, so you
get:

? R --vanilla -q
> .libPaths("~/R/3.6")
> keyring::key_list()[1:2,]
        service                                                  username
1    CommCenter                             kEntitlementsUniqueIDCacheKey
2           ids                                   identity-rsa-public-key
> parallel::mclapply(1:10, function(i) keyring::key_list()[1:2,])

 *** caught segfault ***
address 0x110, cause 'memory not mapped'

 *** caught segfault ***
address 0x110, cause 'memory not mapped'

AFAICT only Apple can do anything about this, and they won't.

Gabor

> That's exactly why I was proposing a more general solution where you can simply define a function in user-space that will issue a warning or stop on fork, it doesn't have to be part of core R, there are other packages that use fork() as well, so what I proposed is much safer than hacking the parallel package.
>
> Cheers,
> Simon
>
>
>
> > On Jan 10, 2020, at 10:58 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
> >
> > The RStudio GUI was just one example.  AFAIK, and please correct me if
> > I'm wrong, another example is where multi-threaded code is used in
> > forked processing and that's sometimes unstable.  Yes another, which
> > might be multi-thread related or not, is
> > https://stat.ethz.ch/pipermail/r-devel/2018-September/076845.html:
> >
> > res <- parallel::mclapply(urls, function(url) {
> >  download.file(url, basename(url))
> > })
> >
> > That was reported to fail on macOS with the default method="libcurl"
> > but not for method="curl" or method="wget".
> >
> > Further documentation is needed and would help but I don't believe
> > it's sufficient to solve everyday problems.  The argument for
> > introducing an option/env var to disable forking is to give the end
> > user a quick workaround for newly introduced bugs.  Neither the
> > develop nor the end user have full control of the R package stack,
> > which is always in flux.  For instance, above mclapply() code might
> > have been in a package on CRAN and then all of a sudden
> > method="libcurl" became the new default in base R.  The above
> > mclapply() code is now buggy on macOS, and not necessarily caught by
> > CRAN checks.  The package developer might not notice this because they
> > are on Linux or Windows.  It can take a very long time before this
> > problem is even noticed and even further before it is tracked down and
> > fixed.   Similarly, as more and more code turn to native code and it
> > becomes easier and easier to implement multi-threading, more and more
> > of these bugs across package dependencies risk sneaking in the
> > backdoor wherever forked processing is in place.
> >
> > For the end user, but also higher-up upstream package developers, the
> > quickest workaround would be disable forking.  If you're conservative,
> > you could even disable it all of your R processing.  Being able to
> > quickly disable forking will also provide a mechanism for quickly
> > testing the hypothesis that forking is the underlying problem, i.e.
> > "Please retry with options(fork.allowed = FALSE)" will become handy
> > for troubleshooting.
> >
> > /Henrik
> >
> > On Fri, Jan 10, 2020 at 5:31 AM Simon Urbanek
> > <simon.urbanek at r-project.org> wrote:
> >>
> >> If I understand the thread correctly this is an RStudio issue and I would suggest that the developers consider using pthread_atfork() so RStudio can handle forking as they deem fit (bail out with an error or make RStudio work).  Note that in principle the functionality requested here can be easily implemented in a package so R doesn?t need to be modified.
> >>
> >> Cheers,
> >> Simon
> >>
> >> Sent from my iPhone
> >>
> >>>> On Jan 10, 2020, at 04:34, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>
> >>>> ?On 1/10/20 7:33 AM, Henrik Bengtsson wrote:
> >>>> I'd like to pick up this thread started on 2019-04-11
> >>>> (https://hypatia.math.ethz.ch/pipermail/r-devel/2019-April/077632.html).
> >>>> Modulo all the other suggestions in this thread, would my proposal of
> >>>> being able to disable forked processing via an option or an
> >>>> environment variable make sense?
> >>>
> >>> I don't think R should be doing that. There are caveats with using fork, and they are mentioned in the documentation of the parallel package, so people can easily avoid functions that use it, and this all has been discussed here recently.
> >>>
> >>> If it is the case, we can expand the documentation in parallel package, add a warning against the use of forking with RStudio, but for that I it would be good to know at least why it is not working. From the github issue I have the impression that it is not really known why, whether it could be fixed, and if so, where. The same github issue reflects also that some people want to use forking for performance reasons, and even with RStudio, at least on Linux. Perhaps it could be fixed? Perhaps it is just some race condition somewhere?
> >>>
> >>> Tomas
> >>>
> >>>> I've prototyped a working patch that
> >>>> works like:
> >>>>> options(fork.allowed = FALSE)
> >>>>> unlist(parallel::mclapply(1:2, FUN = function(x) Sys.getpid()))
> >>>> [1] 14058 14058
> >>>>> parallel::mcmapply(1:2, FUN = function(x) Sys.getpid())
> >>>> [1] 14058 14058
> >>>>> parallel::pvec(1:2, FUN = function(x) Sys.getpid() + x/10)
> >>>> [1] 14058.1 14058.2
> >>>>> f <- parallel::mcparallel(Sys.getpid())
> >>>> Error in allowFork(assert = TRUE) :
> >>>> Forked processing is not allowed per option ?fork.allowed? or
> >>>> environment variable ?R_FORK_ALLOWED?
> >>>>> cl <- parallel::makeForkCluster(1L)
> >>>> Error in allowFork(assert = TRUE) :
> >>>> Forked processing is not allowed per option ?fork.allowed? or
> >>>> environment variable ?R_FORK_ALLOWED?
> >>>> The patch is:
> >>>> Index: src/library/parallel/R/unix/forkCluster.R
> >>>> ===================================================================
> >>>> --- src/library/parallel/R/unix/forkCluster.R (revision 77648)
> >>>> +++ src/library/parallel/R/unix/forkCluster.R (working copy)
> >>>> @@ -30,6 +30,7 @@
> >>>> newForkNode <- function(..., options = defaultClusterOptions, rank)
> >>>> {
> >>>> +    allowFork(assert = TRUE)
> >>>>    options <- addClusterOptions(options, list(...))
> >>>>    outfile <- getClusterOption("outfile", options)
> >>>>    port <- getClusterOption("port", options)
> >>>> Index: src/library/parallel/R/unix/mclapply.R
> >>>> ===================================================================
> >>>> --- src/library/parallel/R/unix/mclapply.R (revision 77648)
> >>>> +++ src/library/parallel/R/unix/mclapply.R (working copy)
> >>>> @@ -28,7 +28,7 @@
> >>>>        stop("'mc.cores' must be >= 1")
> >>>>    .check_ncores(cores)
> >>>> -    if (isChild() && !isTRUE(mc.allow.recursive))
> >>>> +    if (!allowFork() || (isChild() && !isTRUE(mc.allow.recursive)))
> >>>>        return(lapply(X = X, FUN = FUN, ...))
> >>>>    ## Follow lapply
> >>>> Index: src/library/parallel/R/unix/mcparallel.R
> >>>> ===================================================================
> >>>> --- src/library/parallel/R/unix/mcparallel.R (revision 77648)
> >>>> +++ src/library/parallel/R/unix/mcparallel.R (working copy)
> >>>> @@ -20,6 +20,7 @@
> >>>> mcparallel <- function(expr, name, mc.set.seed = TRUE, silent =
> >>>> FALSE, mc.affinity = NULL, mc.interactive = FALSE, detached = FALSE)
> >>>> {
> >>>> +    allowFork(assert = TRUE)
> >>>>    f <- mcfork(detached)
> >>>>    env <- parent.frame()
> >>>>    if (isTRUE(mc.set.seed)) mc.advance.stream()
> >>>> Index: src/library/parallel/R/unix/pvec.R
> >>>> ===================================================================
> >>>> --- src/library/parallel/R/unix/pvec.R (revision 77648)
> >>>> +++ src/library/parallel/R/unix/pvec.R (working copy)
> >>>> @@ -25,7 +25,7 @@
> >>>>    cores <- as.integer(mc.cores)
> >>>>    if(cores < 1L) stop("'mc.cores' must be >= 1")
> >>>> -    if(cores == 1L) return(FUN(v, ...))
> >>>> +    if(cores == 1L || !allowFork()) return(FUN(v, ...))
> >>>>    .check_ncores(cores)
> >>>>    if(mc.set.seed) mc.reset.stream()
> >>>> with a new file src/library/parallel/R/unix/allowFork.R:
> >>>> allowFork <- function(assert = FALSE) {
> >>>>   value <- Sys.getenv("R_FORK_ALLOWED")
> >>>>   if (nzchar(value)) {
> >>>>       value <- switch(value,
> >>>>          "1"=, "TRUE"=, "true"=, "True"=, "yes"=, "Yes"= TRUE,
> >>>>          "0"=, "FALSE"=,"false"=,"False"=, "no"=, "No" = FALSE,
> >>>>           stop(gettextf("invalid environment variable value: %s==%s",
> >>>>          "R_FORK_ALLOWED", value)))
> >>>> value <- as.logical(value)
> >>>>   } else {
> >>>>       value <- TRUE
> >>>>   }
> >>>>   value <- getOption("fork.allowed", value)
> >>>>   if (is.na(value)) {
> >>>>       stop(gettextf("invalid option value: %s==%s", "fork.allowed", value))
> >>>>   }
> >>>>   if (assert && !value) {
> >>>>     stop(gettextf("Forked processing is not allowed per option %s or
> >>>> environment variable %s", sQuote("fork.allowed"),
> >>>> sQuote("R_FORK_ALLOWED")))
> >>>>   }
> >>>>   value
> >>>> }
> >>>> /Henrik
> >>>>> On Mon, Apr 15, 2019 at 3:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>> On 4/15/19 11:02 AM, I?aki Ucar wrote:
> >>>>>> On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>>>> On 4/13/19 12:05 PM, I?aki Ucar wrote:
> >>>>>>>> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
> >>>>>>>>> I think it's worth saying that mclapply() works as documented
> >>>>>>>> Mostly, yes. But it says nothing about fork's copy-on-write and memory
> >>>>>>>> overcommitment, and that this means that it may work nicely or fail
> >>>>>>>> spectacularly depending on whether, e.g., you operate on a long
> >>>>>>>> vector.
> >>>>>>> R cannot possibly replicate documentation of the underlying operating
> >>>>>>> systems. It clearly says that fork() is used and readers who may not
> >>>>>>> know what fork() is need to learn it from external sources.
> >>>>>>> Copy-on-write is an elementary property of fork().
> >>>>>> Just to be precise, copy-on-write is an optimization widely deployed
> >>>>>> in most modern *nixes, particularly for the architectures in which R
> >>>>>> usually runs. But it is not an elementary property; it is not even
> >>>>>> possible without an MMU.
> >>>>> Yes, old Unix systems without virtual memory had fork eagerly copying.
> >>>>> Not relevant today, and certainly not for systems that run R, but indeed
> >>>>> people interested in OS internals can look elsewhere for more precise
> >>>>> information.
> >>>>> Tomas
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From henr|k@bengt@@on @end|ng |rom gm@||@com  Fri Jan 10 21:34:19 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Fri, 10 Jan 2020 12:34:19 -0800
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
 <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
 <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>
 <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
Message-ID: <CAFDcVCR-aMss6QNrscaYgVfYANYkznFTxRdqxUVeu51qTFTnDg@mail.gmail.com>

On Fri, Jan 10, 2020 at 11:23 AM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
>
> Henrik,
>
> the example from the post works just fine in CRAN R for me - the post was about homebrew build so it's conceivably a bug in their libraries.

Thanks for ruling that example out.

> That's exactly why I was proposing a more general solution where you can simply define a function in user-space that will issue a warning or stop on fork, it doesn't have to be part of core R, there are other packages that use fork() as well, so what I proposed is much safer than hacking the parallel package.

I think this is worth pursuing and will help improve and stabilize
things.  But issuing a warning or stop on fork will not allow end
users from running the pipeline, or am I missing something?

I'm trying to argue that this is still a real problem that users and
developers run into on a regular basis.  Since parallel::mclapply() is
such a common and readily available solution it is also a low hanging
fruit to make it possible to have those forking functions fall back to
sequential processing.  The only(*) way to achieve this fall back
right now is to run the same pipeline on MS Windows - I just think it
would be very useful to have the same fallback option available on
Unix and macOS.  Having this in base R could also serve as standard
for other parallel/forking packages/implementations who also wish to
have a fallback to sequential processing.

==> What would the disadvantages be to provide a mechanism/setting for
disabling forking in the parallel::mc*** API? <==

(*) One can also somewhat disable forking in 'parallel' by using
'cgroups' limiting the process to a single core (see also
https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17641).  That will
handle code that uses mc.cores = parallel::detectCores(), which there
is a lot of.  I guess it will cause run-time error (on 'mc.cores' must
be >= 1) for code that uses the second most common used mc.cores =
parallel::detectCores() - 1, which is unfortunately also very common.
I find the use of hardcoded detectCores() unfortunate but that is a
slightly different topic.  OTH, if there would a standardized option
in R for disabling all types of parallel processing by forcing a
single core, one could imagine other parallel APIs to implement
fallbacks to sequential processing as well. (I'm aware that not all
use cases of async processing is about parallelization, so it might
not apply everywhere).

Cheers,

Henrik

>
> Cheers,
> Simon
>
>
>
> > On Jan 10, 2020, at 10:58 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
> >
> > The RStudio GUI was just one example.  AFAIK, and please correct me if
> > I'm wrong, another example is where multi-threaded code is used in
> > forked processing and that's sometimes unstable.  Yes another, which
> > might be multi-thread related or not, is
> > https://stat.ethz.ch/pipermail/r-devel/2018-September/076845.html:
> >
> > res <- parallel::mclapply(urls, function(url) {
> >  download.file(url, basename(url))
> > })
> >
> > That was reported to fail on macOS with the default method="libcurl"
> > but not for method="curl" or method="wget".
> >
> > Further documentation is needed and would help but I don't believe
> > it's sufficient to solve everyday problems.  The argument for
> > introducing an option/env var to disable forking is to give the end
> > user a quick workaround for newly introduced bugs.  Neither the
> > develop nor the end user have full control of the R package stack,
> > which is always in flux.  For instance, above mclapply() code might
> > have been in a package on CRAN and then all of a sudden
> > method="libcurl" became the new default in base R.  The above
> > mclapply() code is now buggy on macOS, and not necessarily caught by
> > CRAN checks.  The package developer might not notice this because they
> > are on Linux or Windows.  It can take a very long time before this
> > problem is even noticed and even further before it is tracked down and
> > fixed.   Similarly, as more and more code turn to native code and it
> > becomes easier and easier to implement multi-threading, more and more
> > of these bugs across package dependencies risk sneaking in the
> > backdoor wherever forked processing is in place.
> >
> > For the end user, but also higher-up upstream package developers, the
> > quickest workaround would be disable forking.  If you're conservative,
> > you could even disable it all of your R processing.  Being able to
> > quickly disable forking will also provide a mechanism for quickly
> > testing the hypothesis that forking is the underlying problem, i.e.
> > "Please retry with options(fork.allowed = FALSE)" will become handy
> > for troubleshooting.
> >
> > /Henrik
> >
> > On Fri, Jan 10, 2020 at 5:31 AM Simon Urbanek
> > <simon.urbanek at r-project.org> wrote:
> >>
> >> If I understand the thread correctly this is an RStudio issue and I would suggest that the developers consider using pthread_atfork() so RStudio can handle forking as they deem fit (bail out with an error or make RStudio work).  Note that in principle the functionality requested here can be easily implemented in a package so R doesn?t need to be modified.
> >>
> >> Cheers,
> >> Simon
> >>
> >> Sent from my iPhone
> >>
> >>>> On Jan 10, 2020, at 04:34, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>
> >>>> ?On 1/10/20 7:33 AM, Henrik Bengtsson wrote:
> >>>> I'd like to pick up this thread started on 2019-04-11
> >>>> (https://hypatia.math.ethz.ch/pipermail/r-devel/2019-April/077632.html).
> >>>> Modulo all the other suggestions in this thread, would my proposal of
> >>>> being able to disable forked processing via an option or an
> >>>> environment variable make sense?
> >>>
> >>> I don't think R should be doing that. There are caveats with using fork, and they are mentioned in the documentation of the parallel package, so people can easily avoid functions that use it, and this all has been discussed here recently.
> >>>
> >>> If it is the case, we can expand the documentation in parallel package, add a warning against the use of forking with RStudio, but for that I it would be good to know at least why it is not working. From the github issue I have the impression that it is not really known why, whether it could be fixed, and if so, where. The same github issue reflects also that some people want to use forking for performance reasons, and even with RStudio, at least on Linux. Perhaps it could be fixed? Perhaps it is just some race condition somewhere?
> >>>
> >>> Tomas
> >>>
> >>>> I've prototyped a working patch that
> >>>> works like:
> >>>>> options(fork.allowed = FALSE)
> >>>>> unlist(parallel::mclapply(1:2, FUN = function(x) Sys.getpid()))
> >>>> [1] 14058 14058
> >>>>> parallel::mcmapply(1:2, FUN = function(x) Sys.getpid())
> >>>> [1] 14058 14058
> >>>>> parallel::pvec(1:2, FUN = function(x) Sys.getpid() + x/10)
> >>>> [1] 14058.1 14058.2
> >>>>> f <- parallel::mcparallel(Sys.getpid())
> >>>> Error in allowFork(assert = TRUE) :
> >>>> Forked processing is not allowed per option ?fork.allowed? or
> >>>> environment variable ?R_FORK_ALLOWED?
> >>>>> cl <- parallel::makeForkCluster(1L)
> >>>> Error in allowFork(assert = TRUE) :
> >>>> Forked processing is not allowed per option ?fork.allowed? or
> >>>> environment variable ?R_FORK_ALLOWED?
> >>>> The patch is:
> >>>> Index: src/library/parallel/R/unix/forkCluster.R
> >>>> ===================================================================
> >>>> --- src/library/parallel/R/unix/forkCluster.R (revision 77648)
> >>>> +++ src/library/parallel/R/unix/forkCluster.R (working copy)
> >>>> @@ -30,6 +30,7 @@
> >>>> newForkNode <- function(..., options = defaultClusterOptions, rank)
> >>>> {
> >>>> +    allowFork(assert = TRUE)
> >>>>    options <- addClusterOptions(options, list(...))
> >>>>    outfile <- getClusterOption("outfile", options)
> >>>>    port <- getClusterOption("port", options)
> >>>> Index: src/library/parallel/R/unix/mclapply.R
> >>>> ===================================================================
> >>>> --- src/library/parallel/R/unix/mclapply.R (revision 77648)
> >>>> +++ src/library/parallel/R/unix/mclapply.R (working copy)
> >>>> @@ -28,7 +28,7 @@
> >>>>        stop("'mc.cores' must be >= 1")
> >>>>    .check_ncores(cores)
> >>>> -    if (isChild() && !isTRUE(mc.allow.recursive))
> >>>> +    if (!allowFork() || (isChild() && !isTRUE(mc.allow.recursive)))
> >>>>        return(lapply(X = X, FUN = FUN, ...))
> >>>>    ## Follow lapply
> >>>> Index: src/library/parallel/R/unix/mcparallel.R
> >>>> ===================================================================
> >>>> --- src/library/parallel/R/unix/mcparallel.R (revision 77648)
> >>>> +++ src/library/parallel/R/unix/mcparallel.R (working copy)
> >>>> @@ -20,6 +20,7 @@
> >>>> mcparallel <- function(expr, name, mc.set.seed = TRUE, silent =
> >>>> FALSE, mc.affinity = NULL, mc.interactive = FALSE, detached = FALSE)
> >>>> {
> >>>> +    allowFork(assert = TRUE)
> >>>>    f <- mcfork(detached)
> >>>>    env <- parent.frame()
> >>>>    if (isTRUE(mc.set.seed)) mc.advance.stream()
> >>>> Index: src/library/parallel/R/unix/pvec.R
> >>>> ===================================================================
> >>>> --- src/library/parallel/R/unix/pvec.R (revision 77648)
> >>>> +++ src/library/parallel/R/unix/pvec.R (working copy)
> >>>> @@ -25,7 +25,7 @@
> >>>>    cores <- as.integer(mc.cores)
> >>>>    if(cores < 1L) stop("'mc.cores' must be >= 1")
> >>>> -    if(cores == 1L) return(FUN(v, ...))
> >>>> +    if(cores == 1L || !allowFork()) return(FUN(v, ...))
> >>>>    .check_ncores(cores)
> >>>>    if(mc.set.seed) mc.reset.stream()
> >>>> with a new file src/library/parallel/R/unix/allowFork.R:
> >>>> allowFork <- function(assert = FALSE) {
> >>>>   value <- Sys.getenv("R_FORK_ALLOWED")
> >>>>   if (nzchar(value)) {
> >>>>       value <- switch(value,
> >>>>          "1"=, "TRUE"=, "true"=, "True"=, "yes"=, "Yes"= TRUE,
> >>>>          "0"=, "FALSE"=,"false"=,"False"=, "no"=, "No" = FALSE,
> >>>>           stop(gettextf("invalid environment variable value: %s==%s",
> >>>>          "R_FORK_ALLOWED", value)))
> >>>> value <- as.logical(value)
> >>>>   } else {
> >>>>       value <- TRUE
> >>>>   }
> >>>>   value <- getOption("fork.allowed", value)
> >>>>   if (is.na(value)) {
> >>>>       stop(gettextf("invalid option value: %s==%s", "fork.allowed", value))
> >>>>   }
> >>>>   if (assert && !value) {
> >>>>     stop(gettextf("Forked processing is not allowed per option %s or
> >>>> environment variable %s", sQuote("fork.allowed"),
> >>>> sQuote("R_FORK_ALLOWED")))
> >>>>   }
> >>>>   value
> >>>> }
> >>>> /Henrik
> >>>>> On Mon, Apr 15, 2019 at 3:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>> On 4/15/19 11:02 AM, I?aki Ucar wrote:
> >>>>>> On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>>>> On 4/13/19 12:05 PM, I?aki Ucar wrote:
> >>>>>>>> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
> >>>>>>>>> I think it's worth saying that mclapply() works as documented
> >>>>>>>> Mostly, yes. But it says nothing about fork's copy-on-write and memory
> >>>>>>>> overcommitment, and that this means that it may work nicely or fail
> >>>>>>>> spectacularly depending on whether, e.g., you operate on a long
> >>>>>>>> vector.
> >>>>>>> R cannot possibly replicate documentation of the underlying operating
> >>>>>>> systems. It clearly says that fork() is used and readers who may not
> >>>>>>> know what fork() is need to learn it from external sources.
> >>>>>>> Copy-on-write is an elementary property of fork().
> >>>>>> Just to be precise, copy-on-write is an optimization widely deployed
> >>>>>> in most modern *nixes, particularly for the architectures in which R
> >>>>>> usually runs. But it is not an elementary property; it is not even
> >>>>>> possible without an MMU.
> >>>>> Yes, old Unix systems without virtual memory had fork eagerly copying.
> >>>>> Not relevant today, and certainly not for systems that run R, but indeed
> >>>>> people interested in OS internals can look elsewhere for more precise
> >>>>> information.
> >>>>> Tomas
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From c@@rd|@g@bor @end|ng |rom gm@||@com  Fri Jan 10 21:43:15 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Fri, 10 Jan 2020 20:43:15 +0000
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
 <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
 <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>
 <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
Message-ID: <CABtg=Kkkernz+QCSopbCt7MFUL9fZ-5igs8GObDvJ6Wg1viB-Q@mail.gmail.com>

On Fri, Jan 10, 2020 at 7:23 PM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
>
> Henrik,
>
> the example from the post works just fine in CRAN R for me - the post was about homebrew build so it's conceivably a bug in their libraries. That's exactly why I was proposing a more general solution where you can simply define a function in user-space that will issue a warning or stop on fork, it doesn't have to be part of core R, there are other packages that use fork() as well, so what I proposed is much safer than hacking the parallel package.

Btw. what other packages do fork() without an exec() call()?

Gbaor
[...]


From @|mon@urb@nek @end|ng |rom R-project@org  Sat Jan 11 04:23:52 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 10 Jan 2020 22:23:52 -0500
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <CAFDcVCR-aMss6QNrscaYgVfYANYkznFTxRdqxUVeu51qTFTnDg@mail.gmail.com>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
 <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
 <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>
 <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
 <CAFDcVCR-aMss6QNrscaYgVfYANYkznFTxRdqxUVeu51qTFTnDg@mail.gmail.com>
Message-ID: <EA77CEE0-1018-4667-856D-1F3C98D015BB@R-project.org>

Henrik,

the whole point and only purpose of mc* functions is to fork. That's what the multicore package was about, so if you don't want to fork, don't use mc* functions - they don't have any other purpose. I really fail to see the point - if you use mc* functions you're very explicitly asking for forking - so your argument is like saying that print() should have an option to not print anything - it just makes no sense. If you have code that is fork-incompatilble, you clearly cannot use it in mcparallel - that's why there is a very explicit warning in the documentation. As I said, if you have some software that embeds R and has issue with forks, then that software should be use pthread_atfork() to control the behavior.

Cheers,
Simon



> On Jan 10, 2020, at 3:34 PM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
> 
> On Fri, Jan 10, 2020 at 11:23 AM Simon Urbanek
> <simon.urbanek at r-project.org> wrote:
>> 
>> Henrik,
>> 
>> the example from the post works just fine in CRAN R for me - the post was about homebrew build so it's conceivably a bug in their libraries.
> 
> Thanks for ruling that example out.
> 
>> That's exactly why I was proposing a more general solution where you can simply define a function in user-space that will issue a warning or stop on fork, it doesn't have to be part of core R, there are other packages that use fork() as well, so what I proposed is much safer than hacking the parallel package.
> 
> I think this is worth pursuing and will help improve and stabilize
> things.  But issuing a warning or stop on fork will not allow end
> users from running the pipeline, or am I missing something?
> 
> I'm trying to argue that this is still a real problem that users and
> developers run into on a regular basis.  Since parallel::mclapply() is
> such a common and readily available solution it is also a low hanging
> fruit to make it possible to have those forking functions fall back to
> sequential processing.  The only(*) way to achieve this fall back
> right now is to run the same pipeline on MS Windows - I just think it
> would be very useful to have the same fallback option available on
> Unix and macOS.  Having this in base R could also serve as standard
> for other parallel/forking packages/implementations who also wish to
> have a fallback to sequential processing.
> 
> ==> What would the disadvantages be to provide a mechanism/setting for
> disabling forking in the parallel::mc*** API? <==
> 
> (*) One can also somewhat disable forking in 'parallel' by using
> 'cgroups' limiting the process to a single core (see also
> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17641).  That will
> handle code that uses mc.cores = parallel::detectCores(), which there
> is a lot of.  I guess it will cause run-time error (on 'mc.cores' must
> be >= 1) for code that uses the second most common used mc.cores =
> parallel::detectCores() - 1, which is unfortunately also very common.
> I find the use of hardcoded detectCores() unfortunate but that is a
> slightly different topic.  OTH, if there would a standardized option
> in R for disabling all types of parallel processing by forcing a
> single core, one could imagine other parallel APIs to implement
> fallbacks to sequential processing as well. (I'm aware that not all
> use cases of async processing is about parallelization, so it might
> not apply everywhere).
> 
> Cheers,
> 
> Henrik
> 
>> 
>> Cheers,
>> Simon
>> 
>> 
>> 
>>> On Jan 10, 2020, at 10:58 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
>>> 
>>> The RStudio GUI was just one example.  AFAIK, and please correct me if
>>> I'm wrong, another example is where multi-threaded code is used in
>>> forked processing and that's sometimes unstable.  Yes another, which
>>> might be multi-thread related or not, is
>>> https://stat.ethz.ch/pipermail/r-devel/2018-September/076845.html:
>>> 
>>> res <- parallel::mclapply(urls, function(url) {
>>> download.file(url, basename(url))
>>> })
>>> 
>>> That was reported to fail on macOS with the default method="libcurl"
>>> but not for method="curl" or method="wget".
>>> 
>>> Further documentation is needed and would help but I don't believe
>>> it's sufficient to solve everyday problems.  The argument for
>>> introducing an option/env var to disable forking is to give the end
>>> user a quick workaround for newly introduced bugs.  Neither the
>>> develop nor the end user have full control of the R package stack,
>>> which is always in flux.  For instance, above mclapply() code might
>>> have been in a package on CRAN and then all of a sudden
>>> method="libcurl" became the new default in base R.  The above
>>> mclapply() code is now buggy on macOS, and not necessarily caught by
>>> CRAN checks.  The package developer might not notice this because they
>>> are on Linux or Windows.  It can take a very long time before this
>>> problem is even noticed and even further before it is tracked down and
>>> fixed.   Similarly, as more and more code turn to native code and it
>>> becomes easier and easier to implement multi-threading, more and more
>>> of these bugs across package dependencies risk sneaking in the
>>> backdoor wherever forked processing is in place.
>>> 
>>> For the end user, but also higher-up upstream package developers, the
>>> quickest workaround would be disable forking.  If you're conservative,
>>> you could even disable it all of your R processing.  Being able to
>>> quickly disable forking will also provide a mechanism for quickly
>>> testing the hypothesis that forking is the underlying problem, i.e.
>>> "Please retry with options(fork.allowed = FALSE)" will become handy
>>> for troubleshooting.
>>> 
>>> /Henrik
>>> 
>>> On Fri, Jan 10, 2020 at 5:31 AM Simon Urbanek
>>> <simon.urbanek at r-project.org> wrote:
>>>> 
>>>> If I understand the thread correctly this is an RStudio issue and I would suggest that the developers consider using pthread_atfork() so RStudio can handle forking as they deem fit (bail out with an error or make RStudio work).  Note that in principle the functionality requested here can be easily implemented in a package so R doesn?t need to be modified.
>>>> 
>>>> Cheers,
>>>> Simon
>>>> 
>>>> Sent from my iPhone
>>>> 
>>>>>> On Jan 10, 2020, at 04:34, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>> 
>>>>>> ?On 1/10/20 7:33 AM, Henrik Bengtsson wrote:
>>>>>> I'd like to pick up this thread started on 2019-04-11
>>>>>> (https://hypatia.math.ethz.ch/pipermail/r-devel/2019-April/077632.html).
>>>>>> Modulo all the other suggestions in this thread, would my proposal of
>>>>>> being able to disable forked processing via an option or an
>>>>>> environment variable make sense?
>>>>> 
>>>>> I don't think R should be doing that. There are caveats with using fork, and they are mentioned in the documentation of the parallel package, so people can easily avoid functions that use it, and this all has been discussed here recently.
>>>>> 
>>>>> If it is the case, we can expand the documentation in parallel package, add a warning against the use of forking with RStudio, but for that I it would be good to know at least why it is not working. From the github issue I have the impression that it is not really known why, whether it could be fixed, and if so, where. The same github issue reflects also that some people want to use forking for performance reasons, and even with RStudio, at least on Linux. Perhaps it could be fixed? Perhaps it is just some race condition somewhere?
>>>>> 
>>>>> Tomas
>>>>> 
>>>>>> I've prototyped a working patch that
>>>>>> works like:
>>>>>>> options(fork.allowed = FALSE)
>>>>>>> unlist(parallel::mclapply(1:2, FUN = function(x) Sys.getpid()))
>>>>>> [1] 14058 14058
>>>>>>> parallel::mcmapply(1:2, FUN = function(x) Sys.getpid())
>>>>>> [1] 14058 14058
>>>>>>> parallel::pvec(1:2, FUN = function(x) Sys.getpid() + x/10)
>>>>>> [1] 14058.1 14058.2
>>>>>>> f <- parallel::mcparallel(Sys.getpid())
>>>>>> Error in allowFork(assert = TRUE) :
>>>>>> Forked processing is not allowed per option ?fork.allowed? or
>>>>>> environment variable ?R_FORK_ALLOWED?
>>>>>>> cl <- parallel::makeForkCluster(1L)
>>>>>> Error in allowFork(assert = TRUE) :
>>>>>> Forked processing is not allowed per option ?fork.allowed? or
>>>>>> environment variable ?R_FORK_ALLOWED?
>>>>>> The patch is:
>>>>>> Index: src/library/parallel/R/unix/forkCluster.R
>>>>>> ===================================================================
>>>>>> --- src/library/parallel/R/unix/forkCluster.R (revision 77648)
>>>>>> +++ src/library/parallel/R/unix/forkCluster.R (working copy)
>>>>>> @@ -30,6 +30,7 @@
>>>>>> newForkNode <- function(..., options = defaultClusterOptions, rank)
>>>>>> {
>>>>>> +    allowFork(assert = TRUE)
>>>>>>   options <- addClusterOptions(options, list(...))
>>>>>>   outfile <- getClusterOption("outfile", options)
>>>>>>   port <- getClusterOption("port", options)
>>>>>> Index: src/library/parallel/R/unix/mclapply.R
>>>>>> ===================================================================
>>>>>> --- src/library/parallel/R/unix/mclapply.R (revision 77648)
>>>>>> +++ src/library/parallel/R/unix/mclapply.R (working copy)
>>>>>> @@ -28,7 +28,7 @@
>>>>>>       stop("'mc.cores' must be >= 1")
>>>>>>   .check_ncores(cores)
>>>>>> -    if (isChild() && !isTRUE(mc.allow.recursive))
>>>>>> +    if (!allowFork() || (isChild() && !isTRUE(mc.allow.recursive)))
>>>>>>       return(lapply(X = X, FUN = FUN, ...))
>>>>>>   ## Follow lapply
>>>>>> Index: src/library/parallel/R/unix/mcparallel.R
>>>>>> ===================================================================
>>>>>> --- src/library/parallel/R/unix/mcparallel.R (revision 77648)
>>>>>> +++ src/library/parallel/R/unix/mcparallel.R (working copy)
>>>>>> @@ -20,6 +20,7 @@
>>>>>> mcparallel <- function(expr, name, mc.set.seed = TRUE, silent =
>>>>>> FALSE, mc.affinity = NULL, mc.interactive = FALSE, detached = FALSE)
>>>>>> {
>>>>>> +    allowFork(assert = TRUE)
>>>>>>   f <- mcfork(detached)
>>>>>>   env <- parent.frame()
>>>>>>   if (isTRUE(mc.set.seed)) mc.advance.stream()
>>>>>> Index: src/library/parallel/R/unix/pvec.R
>>>>>> ===================================================================
>>>>>> --- src/library/parallel/R/unix/pvec.R (revision 77648)
>>>>>> +++ src/library/parallel/R/unix/pvec.R (working copy)
>>>>>> @@ -25,7 +25,7 @@
>>>>>>   cores <- as.integer(mc.cores)
>>>>>>   if(cores < 1L) stop("'mc.cores' must be >= 1")
>>>>>> -    if(cores == 1L) return(FUN(v, ...))
>>>>>> +    if(cores == 1L || !allowFork()) return(FUN(v, ...))
>>>>>>   .check_ncores(cores)
>>>>>>   if(mc.set.seed) mc.reset.stream()
>>>>>> with a new file src/library/parallel/R/unix/allowFork.R:
>>>>>> allowFork <- function(assert = FALSE) {
>>>>>>  value <- Sys.getenv("R_FORK_ALLOWED")
>>>>>>  if (nzchar(value)) {
>>>>>>      value <- switch(value,
>>>>>>         "1"=, "TRUE"=, "true"=, "True"=, "yes"=, "Yes"= TRUE,
>>>>>>         "0"=, "FALSE"=,"false"=,"False"=, "no"=, "No" = FALSE,
>>>>>>          stop(gettextf("invalid environment variable value: %s==%s",
>>>>>>         "R_FORK_ALLOWED", value)))
>>>>>> value <- as.logical(value)
>>>>>>  } else {
>>>>>>      value <- TRUE
>>>>>>  }
>>>>>>  value <- getOption("fork.allowed", value)
>>>>>>  if (is.na(value)) {
>>>>>>      stop(gettextf("invalid option value: %s==%s", "fork.allowed", value))
>>>>>>  }
>>>>>>  if (assert && !value) {
>>>>>>    stop(gettextf("Forked processing is not allowed per option %s or
>>>>>> environment variable %s", sQuote("fork.allowed"),
>>>>>> sQuote("R_FORK_ALLOWED")))
>>>>>>  }
>>>>>>  value
>>>>>> }
>>>>>> /Henrik
>>>>>>> On Mon, Apr 15, 2019 at 3:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>>> On 4/15/19 11:02 AM, I?aki Ucar wrote:
>>>>>>>> On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>>>>> On 4/13/19 12:05 PM, I?aki Ucar wrote:
>>>>>>>>>> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
>>>>>>>>>>> I think it's worth saying that mclapply() works as documented
>>>>>>>>>> Mostly, yes. But it says nothing about fork's copy-on-write and memory
>>>>>>>>>> overcommitment, and that this means that it may work nicely or fail
>>>>>>>>>> spectacularly depending on whether, e.g., you operate on a long
>>>>>>>>>> vector.
>>>>>>>>> R cannot possibly replicate documentation of the underlying operating
>>>>>>>>> systems. It clearly says that fork() is used and readers who may not
>>>>>>>>> know what fork() is need to learn it from external sources.
>>>>>>>>> Copy-on-write is an elementary property of fork().
>>>>>>>> Just to be precise, copy-on-write is an optimization widely deployed
>>>>>>>> in most modern *nixes, particularly for the architectures in which R
>>>>>>>> usually runs. But it is not an elementary property; it is not even
>>>>>>>> possible without an MMU.
>>>>>>> Yes, old Unix systems without virtual memory had fork eagerly copying.
>>>>>>> Not relevant today, and certainly not for systems that run R, but indeed
>>>>>>> people interested in OS internals can look elsewhere for more precise
>>>>>>> information.
>>>>>>> Tomas
>>>>> 
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From @|mon@urb@nek @end|ng |rom R-project@org  Sat Jan 11 04:27:50 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 10 Jan 2020 22:27:50 -0500
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <CABtg=Km4GdMC5vGOs0PqvOjqABqcrhOZOqPv=81DuoX75zm8HQ@mail.gmail.com>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
 <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
 <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>
 <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
 <CABtg=Km4GdMC5vGOs0PqvOjqABqcrhOZOqPv=81DuoX75zm8HQ@mail.gmail.com>
Message-ID: <51292B2D-56D6-44B5-B64A-78408C452503@R-project.org>



> On Jan 10, 2020, at 3:10 PM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> 
> On Fri, Jan 10, 2020 at 7:23 PM Simon Urbanek
> <simon.urbanek at r-project.org> wrote:
>> 
>> Henrik,
>> 
>> the example from the post works just fine in CRAN R for me - the post was about homebrew build so it's conceivably a bug in their libraries.
> 
> I think it works now, because Apple switched to a different SSL
> library for libcurl. It usually crashes or fails on older macOS
> versions, with the CRAN build of R as well.
> 

That is not true - Apple has not changed the SSL back-end for many years. The issue in that post is presumably in the homebrew version of SSL.

Cheers,
Simon


> It is not a bug in any library, it is just that macOS does not support
> fork() without an immediate exec().
> 
> In general, any code that calls the macOS system libraries might
> crash. (Except for CoreFoundation, which seems to be fine, but AFAIR
> there is no guarantee for that, either.)
> 
> You get crashes in the terminal as well, without multithreading. E.g.
> the keyring package links for the Security library on macOS, so you
> get:
> 
> ? R --vanilla -q
>> .libPaths("~/R/3.6")
>> keyring::key_list()[1:2,]
>        service                                                  username
> 1    CommCenter                             kEntitlementsUniqueIDCacheKey
> 2           ids                                   identity-rsa-public-key
>> parallel::mclapply(1:10, function(i) keyring::key_list()[1:2,])
> 
> *** caught segfault ***
> address 0x110, cause 'memory not mapped'
> 
> *** caught segfault ***
> address 0x110, cause 'memory not mapped'
> 
> AFAICT only Apple can do anything about this, and they won't.
> 
> Gabor
> 
>> That's exactly why I was proposing a more general solution where you can simply define a function in user-space that will issue a warning or stop on fork, it doesn't have to be part of core R, there are other packages that use fork() as well, so what I proposed is much safer than hacking the parallel package.
>> 
>> Cheers,
>> Simon
>> 
>> 
>> 
>>> On Jan 10, 2020, at 10:58 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
>>> 
>>> The RStudio GUI was just one example.  AFAIK, and please correct me if
>>> I'm wrong, another example is where multi-threaded code is used in
>>> forked processing and that's sometimes unstable.  Yes another, which
>>> might be multi-thread related or not, is
>>> https://stat.ethz.ch/pipermail/r-devel/2018-September/076845.html:
>>> 
>>> res <- parallel::mclapply(urls, function(url) {
>>> download.file(url, basename(url))
>>> })
>>> 
>>> That was reported to fail on macOS with the default method="libcurl"
>>> but not for method="curl" or method="wget".
>>> 
>>> Further documentation is needed and would help but I don't believe
>>> it's sufficient to solve everyday problems.  The argument for
>>> introducing an option/env var to disable forking is to give the end
>>> user a quick workaround for newly introduced bugs.  Neither the
>>> develop nor the end user have full control of the R package stack,
>>> which is always in flux.  For instance, above mclapply() code might
>>> have been in a package on CRAN and then all of a sudden
>>> method="libcurl" became the new default in base R.  The above
>>> mclapply() code is now buggy on macOS, and not necessarily caught by
>>> CRAN checks.  The package developer might not notice this because they
>>> are on Linux or Windows.  It can take a very long time before this
>>> problem is even noticed and even further before it is tracked down and
>>> fixed.   Similarly, as more and more code turn to native code and it
>>> becomes easier and easier to implement multi-threading, more and more
>>> of these bugs across package dependencies risk sneaking in the
>>> backdoor wherever forked processing is in place.
>>> 
>>> For the end user, but also higher-up upstream package developers, the
>>> quickest workaround would be disable forking.  If you're conservative,
>>> you could even disable it all of your R processing.  Being able to
>>> quickly disable forking will also provide a mechanism for quickly
>>> testing the hypothesis that forking is the underlying problem, i.e.
>>> "Please retry with options(fork.allowed = FALSE)" will become handy
>>> for troubleshooting.
>>> 
>>> /Henrik
>>> 
>>> On Fri, Jan 10, 2020 at 5:31 AM Simon Urbanek
>>> <simon.urbanek at r-project.org> wrote:
>>>> 
>>>> If I understand the thread correctly this is an RStudio issue and I would suggest that the developers consider using pthread_atfork() so RStudio can handle forking as they deem fit (bail out with an error or make RStudio work).  Note that in principle the functionality requested here can be easily implemented in a package so R doesn?t need to be modified.
>>>> 
>>>> Cheers,
>>>> Simon
>>>> 
>>>> Sent from my iPhone
>>>> 
>>>>>> On Jan 10, 2020, at 04:34, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>> 
>>>>>> ?On 1/10/20 7:33 AM, Henrik Bengtsson wrote:
>>>>>> I'd like to pick up this thread started on 2019-04-11
>>>>>> (https://hypatia.math.ethz.ch/pipermail/r-devel/2019-April/077632.html).
>>>>>> Modulo all the other suggestions in this thread, would my proposal of
>>>>>> being able to disable forked processing via an option or an
>>>>>> environment variable make sense?
>>>>> 
>>>>> I don't think R should be doing that. There are caveats with using fork, and they are mentioned in the documentation of the parallel package, so people can easily avoid functions that use it, and this all has been discussed here recently.
>>>>> 
>>>>> If it is the case, we can expand the documentation in parallel package, add a warning against the use of forking with RStudio, but for that I it would be good to know at least why it is not working. From the github issue I have the impression that it is not really known why, whether it could be fixed, and if so, where. The same github issue reflects also that some people want to use forking for performance reasons, and even with RStudio, at least on Linux. Perhaps it could be fixed? Perhaps it is just some race condition somewhere?
>>>>> 
>>>>> Tomas
>>>>> 
>>>>>> I've prototyped a working patch that
>>>>>> works like:
>>>>>>> options(fork.allowed = FALSE)
>>>>>>> unlist(parallel::mclapply(1:2, FUN = function(x) Sys.getpid()))
>>>>>> [1] 14058 14058
>>>>>>> parallel::mcmapply(1:2, FUN = function(x) Sys.getpid())
>>>>>> [1] 14058 14058
>>>>>>> parallel::pvec(1:2, FUN = function(x) Sys.getpid() + x/10)
>>>>>> [1] 14058.1 14058.2
>>>>>>> f <- parallel::mcparallel(Sys.getpid())
>>>>>> Error in allowFork(assert = TRUE) :
>>>>>> Forked processing is not allowed per option ?fork.allowed? or
>>>>>> environment variable ?R_FORK_ALLOWED?
>>>>>>> cl <- parallel::makeForkCluster(1L)
>>>>>> Error in allowFork(assert = TRUE) :
>>>>>> Forked processing is not allowed per option ?fork.allowed? or
>>>>>> environment variable ?R_FORK_ALLOWED?
>>>>>> The patch is:
>>>>>> Index: src/library/parallel/R/unix/forkCluster.R
>>>>>> ===================================================================
>>>>>> --- src/library/parallel/R/unix/forkCluster.R (revision 77648)
>>>>>> +++ src/library/parallel/R/unix/forkCluster.R (working copy)
>>>>>> @@ -30,6 +30,7 @@
>>>>>> newForkNode <- function(..., options = defaultClusterOptions, rank)
>>>>>> {
>>>>>> +    allowFork(assert = TRUE)
>>>>>>   options <- addClusterOptions(options, list(...))
>>>>>>   outfile <- getClusterOption("outfile", options)
>>>>>>   port <- getClusterOption("port", options)
>>>>>> Index: src/library/parallel/R/unix/mclapply.R
>>>>>> ===================================================================
>>>>>> --- src/library/parallel/R/unix/mclapply.R (revision 77648)
>>>>>> +++ src/library/parallel/R/unix/mclapply.R (working copy)
>>>>>> @@ -28,7 +28,7 @@
>>>>>>       stop("'mc.cores' must be >= 1")
>>>>>>   .check_ncores(cores)
>>>>>> -    if (isChild() && !isTRUE(mc.allow.recursive))
>>>>>> +    if (!allowFork() || (isChild() && !isTRUE(mc.allow.recursive)))
>>>>>>       return(lapply(X = X, FUN = FUN, ...))
>>>>>>   ## Follow lapply
>>>>>> Index: src/library/parallel/R/unix/mcparallel.R
>>>>>> ===================================================================
>>>>>> --- src/library/parallel/R/unix/mcparallel.R (revision 77648)
>>>>>> +++ src/library/parallel/R/unix/mcparallel.R (working copy)
>>>>>> @@ -20,6 +20,7 @@
>>>>>> mcparallel <- function(expr, name, mc.set.seed = TRUE, silent =
>>>>>> FALSE, mc.affinity = NULL, mc.interactive = FALSE, detached = FALSE)
>>>>>> {
>>>>>> +    allowFork(assert = TRUE)
>>>>>>   f <- mcfork(detached)
>>>>>>   env <- parent.frame()
>>>>>>   if (isTRUE(mc.set.seed)) mc.advance.stream()
>>>>>> Index: src/library/parallel/R/unix/pvec.R
>>>>>> ===================================================================
>>>>>> --- src/library/parallel/R/unix/pvec.R (revision 77648)
>>>>>> +++ src/library/parallel/R/unix/pvec.R (working copy)
>>>>>> @@ -25,7 +25,7 @@
>>>>>>   cores <- as.integer(mc.cores)
>>>>>>   if(cores < 1L) stop("'mc.cores' must be >= 1")
>>>>>> -    if(cores == 1L) return(FUN(v, ...))
>>>>>> +    if(cores == 1L || !allowFork()) return(FUN(v, ...))
>>>>>>   .check_ncores(cores)
>>>>>>   if(mc.set.seed) mc.reset.stream()
>>>>>> with a new file src/library/parallel/R/unix/allowFork.R:
>>>>>> allowFork <- function(assert = FALSE) {
>>>>>>  value <- Sys.getenv("R_FORK_ALLOWED")
>>>>>>  if (nzchar(value)) {
>>>>>>      value <- switch(value,
>>>>>>         "1"=, "TRUE"=, "true"=, "True"=, "yes"=, "Yes"= TRUE,
>>>>>>         "0"=, "FALSE"=,"false"=,"False"=, "no"=, "No" = FALSE,
>>>>>>          stop(gettextf("invalid environment variable value: %s==%s",
>>>>>>         "R_FORK_ALLOWED", value)))
>>>>>> value <- as.logical(value)
>>>>>>  } else {
>>>>>>      value <- TRUE
>>>>>>  }
>>>>>>  value <- getOption("fork.allowed", value)
>>>>>>  if (is.na(value)) {
>>>>>>      stop(gettextf("invalid option value: %s==%s", "fork.allowed", value))
>>>>>>  }
>>>>>>  if (assert && !value) {
>>>>>>    stop(gettextf("Forked processing is not allowed per option %s or
>>>>>> environment variable %s", sQuote("fork.allowed"),
>>>>>> sQuote("R_FORK_ALLOWED")))
>>>>>>  }
>>>>>>  value
>>>>>> }
>>>>>> /Henrik
>>>>>>> On Mon, Apr 15, 2019 at 3:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>>> On 4/15/19 11:02 AM, I?aki Ucar wrote:
>>>>>>>> On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>>>>> On 4/13/19 12:05 PM, I?aki Ucar wrote:
>>>>>>>>>> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
>>>>>>>>>>> I think it's worth saying that mclapply() works as documented
>>>>>>>>>> Mostly, yes. But it says nothing about fork's copy-on-write and memory
>>>>>>>>>> overcommitment, and that this means that it may work nicely or fail
>>>>>>>>>> spectacularly depending on whether, e.g., you operate on a long
>>>>>>>>>> vector.
>>>>>>>>> R cannot possibly replicate documentation of the underlying operating
>>>>>>>>> systems. It clearly says that fork() is used and readers who may not
>>>>>>>>> know what fork() is need to learn it from external sources.
>>>>>>>>> Copy-on-write is an elementary property of fork().
>>>>>>>> Just to be precise, copy-on-write is an optimization widely deployed
>>>>>>>> in most modern *nixes, particularly for the architectures in which R
>>>>>>>> usually runs. But it is not an elementary property; it is not even
>>>>>>>> possible without an MMU.
>>>>>>> Yes, old Unix systems without virtual memory had fork eagerly copying.
>>>>>>> Not relevant today, and certainly not for systems that run R, but indeed
>>>>>>> people interested in OS internals can look elsewhere for more precise
>>>>>>> information.
>>>>>>> Tomas
>>>>> 
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From @|mon@urb@nek @end|ng |rom R-project@org  Sat Jan 11 05:14:07 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 10 Jan 2020 23:14:07 -0500
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <CABtg=Km4GdMC5vGOs0PqvOjqABqcrhOZOqPv=81DuoX75zm8HQ@mail.gmail.com>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
 <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
 <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>
 <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
 <CABtg=Km4GdMC5vGOs0PqvOjqABqcrhOZOqPv=81DuoX75zm8HQ@mail.gmail.com>
Message-ID: <606FA782-721B-443A-9399-9B6CE8AF47DD@R-project.org>



> On Jan 10, 2020, at 3:10 PM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> 
> On Fri, Jan 10, 2020 at 7:23 PM Simon Urbanek
> <simon.urbanek at r-project.org> wrote:
>> 
>> Henrik,
>> 
>> the example from the post works just fine in CRAN R for me - the post was about homebrew build so it's conceivably a bug in their libraries.
> 
> I think it works now, because Apple switched to a different SSL
> library for libcurl. It usually crashes or fails on older macOS
> versions, with the CRAN build of R as well.
> 
> It is not a bug in any library, it is just that macOS does not support
> fork() without an immediate exec().
> 
> In general, any code that calls the macOS system libraries might
> crash. (Except for CoreFoundation, which seems to be fine, but AFAIR
> there is no guarantee for that, either.)
> 

That is not true, either. macOS itself is fork-safe (it is POSIX-certified after all), but libraries may or may not. The rules are pretty clear - fork() shares open descriptors and only inherits the main thread (see the POSIX documentation for pthread_atfork() - it illustrates the issues nicely). So as a user of APIs it may be your responsibility to make sure things are handled properly - again, that's what pthread_atfork() is for. Most libraries don't allow duplicated fds or have rules about thread safety, so it is your responsibility in the package to abide by those rules if you want it to function after forking. Some libraries don't allow forking at all, e.g., JVMs cannot be forked (because they are too complex to make them fork-safe). In general, you cannot assume that (non-R) code is fork-safe unless it has been designed to be. That's why mcparallel() should only be used for pure R code (and even that is with I/O limitations) and C code that is explicitly fork-safe. As I said, using mc* functions explicitly says that you are ok with forking, so you if you run code that is not fork-safe it is clearly a user error.

That's exactly why we have the long "Warning" section in the documentation. If you have suggestions for its improvements, please feel free to supply patches.

Cheers,
Simon


> You get crashes in the terminal as well, without multithreading. E.g.
> the keyring package links for the Security library on macOS, so you
> get:
> 
> ? R --vanilla -q
>> .libPaths("~/R/3.6")
>> keyring::key_list()[1:2,]
>        service                                                  username
> 1    CommCenter                             kEntitlementsUniqueIDCacheKey
> 2           ids                                   identity-rsa-public-key
>> parallel::mclapply(1:10, function(i) keyring::key_list()[1:2,])
> 
> *** caught segfault ***
> address 0x110, cause 'memory not mapped'
> 
> *** caught segfault ***
> address 0x110, cause 'memory not mapped'
> 
> AFAICT only Apple can do anything about this, and they won't.
> 
> Gabor
> 
>> That's exactly why I was proposing a more general solution where you can simply define a function in user-space that will issue a warning or stop on fork, it doesn't have to be part of core R, there are other packages that use fork() as well, so what I proposed is much safer than hacking the parallel package.
>> 
>> Cheers,
>> Simon
>> 
>> 
>> 
>>> On Jan 10, 2020, at 10:58 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
>>> 
>>> The RStudio GUI was just one example.  AFAIK, and please correct me if
>>> I'm wrong, another example is where multi-threaded code is used in
>>> forked processing and that's sometimes unstable.  Yes another, which
>>> might be multi-thread related or not, is
>>> https://stat.ethz.ch/pipermail/r-devel/2018-September/076845.html:
>>> 
>>> res <- parallel::mclapply(urls, function(url) {
>>> download.file(url, basename(url))
>>> })
>>> 
>>> That was reported to fail on macOS with the default method="libcurl"
>>> but not for method="curl" or method="wget".
>>> 
>>> Further documentation is needed and would help but I don't believe
>>> it's sufficient to solve everyday problems.  The argument for
>>> introducing an option/env var to disable forking is to give the end
>>> user a quick workaround for newly introduced bugs.  Neither the
>>> develop nor the end user have full control of the R package stack,
>>> which is always in flux.  For instance, above mclapply() code might
>>> have been in a package on CRAN and then all of a sudden
>>> method="libcurl" became the new default in base R.  The above
>>> mclapply() code is now buggy on macOS, and not necessarily caught by
>>> CRAN checks.  The package developer might not notice this because they
>>> are on Linux or Windows.  It can take a very long time before this
>>> problem is even noticed and even further before it is tracked down and
>>> fixed.   Similarly, as more and more code turn to native code and it
>>> becomes easier and easier to implement multi-threading, more and more
>>> of these bugs across package dependencies risk sneaking in the
>>> backdoor wherever forked processing is in place.
>>> 
>>> For the end user, but also higher-up upstream package developers, the
>>> quickest workaround would be disable forking.  If you're conservative,
>>> you could even disable it all of your R processing.  Being able to
>>> quickly disable forking will also provide a mechanism for quickly
>>> testing the hypothesis that forking is the underlying problem, i.e.
>>> "Please retry with options(fork.allowed = FALSE)" will become handy
>>> for troubleshooting.
>>> 
>>> /Henrik
>>> 
>>> On Fri, Jan 10, 2020 at 5:31 AM Simon Urbanek
>>> <simon.urbanek at r-project.org> wrote:
>>>> 
>>>> If I understand the thread correctly this is an RStudio issue and I would suggest that the developers consider using pthread_atfork() so RStudio can handle forking as they deem fit (bail out with an error or make RStudio work).  Note that in principle the functionality requested here can be easily implemented in a package so R doesn?t need to be modified.
>>>> 
>>>> Cheers,
>>>> Simon
>>>> 
>>>> Sent from my iPhone
>>>> 
>>>>>> On Jan 10, 2020, at 04:34, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>> 
>>>>>> ?On 1/10/20 7:33 AM, Henrik Bengtsson wrote:
>>>>>> I'd like to pick up this thread started on 2019-04-11
>>>>>> (https://hypatia.math.ethz.ch/pipermail/r-devel/2019-April/077632.html).
>>>>>> Modulo all the other suggestions in this thread, would my proposal of
>>>>>> being able to disable forked processing via an option or an
>>>>>> environment variable make sense?
>>>>> 
>>>>> I don't think R should be doing that. There are caveats with using fork, and they are mentioned in the documentation of the parallel package, so people can easily avoid functions that use it, and this all has been discussed here recently.
>>>>> 
>>>>> If it is the case, we can expand the documentation in parallel package, add a warning against the use of forking with RStudio, but for that I it would be good to know at least why it is not working. From the github issue I have the impression that it is not really known why, whether it could be fixed, and if so, where. The same github issue reflects also that some people want to use forking for performance reasons, and even with RStudio, at least on Linux. Perhaps it could be fixed? Perhaps it is just some race condition somewhere?
>>>>> 
>>>>> Tomas
>>>>> 
>>>>>> I've prototyped a working patch that
>>>>>> works like:
>>>>>>> options(fork.allowed = FALSE)
>>>>>>> unlist(parallel::mclapply(1:2, FUN = function(x) Sys.getpid()))
>>>>>> [1] 14058 14058
>>>>>>> parallel::mcmapply(1:2, FUN = function(x) Sys.getpid())
>>>>>> [1] 14058 14058
>>>>>>> parallel::pvec(1:2, FUN = function(x) Sys.getpid() + x/10)
>>>>>> [1] 14058.1 14058.2
>>>>>>> f <- parallel::mcparallel(Sys.getpid())
>>>>>> Error in allowFork(assert = TRUE) :
>>>>>> Forked processing is not allowed per option ?fork.allowed? or
>>>>>> environment variable ?R_FORK_ALLOWED?
>>>>>>> cl <- parallel::makeForkCluster(1L)
>>>>>> Error in allowFork(assert = TRUE) :
>>>>>> Forked processing is not allowed per option ?fork.allowed? or
>>>>>> environment variable ?R_FORK_ALLOWED?
>>>>>> The patch is:
>>>>>> Index: src/library/parallel/R/unix/forkCluster.R
>>>>>> ===================================================================
>>>>>> --- src/library/parallel/R/unix/forkCluster.R (revision 77648)
>>>>>> +++ src/library/parallel/R/unix/forkCluster.R (working copy)
>>>>>> @@ -30,6 +30,7 @@
>>>>>> newForkNode <- function(..., options = defaultClusterOptions, rank)
>>>>>> {
>>>>>> +    allowFork(assert = TRUE)
>>>>>>   options <- addClusterOptions(options, list(...))
>>>>>>   outfile <- getClusterOption("outfile", options)
>>>>>>   port <- getClusterOption("port", options)
>>>>>> Index: src/library/parallel/R/unix/mclapply.R
>>>>>> ===================================================================
>>>>>> --- src/library/parallel/R/unix/mclapply.R (revision 77648)
>>>>>> +++ src/library/parallel/R/unix/mclapply.R (working copy)
>>>>>> @@ -28,7 +28,7 @@
>>>>>>       stop("'mc.cores' must be >= 1")
>>>>>>   .check_ncores(cores)
>>>>>> -    if (isChild() && !isTRUE(mc.allow.recursive))
>>>>>> +    if (!allowFork() || (isChild() && !isTRUE(mc.allow.recursive)))
>>>>>>       return(lapply(X = X, FUN = FUN, ...))
>>>>>>   ## Follow lapply
>>>>>> Index: src/library/parallel/R/unix/mcparallel.R
>>>>>> ===================================================================
>>>>>> --- src/library/parallel/R/unix/mcparallel.R (revision 77648)
>>>>>> +++ src/library/parallel/R/unix/mcparallel.R (working copy)
>>>>>> @@ -20,6 +20,7 @@
>>>>>> mcparallel <- function(expr, name, mc.set.seed = TRUE, silent =
>>>>>> FALSE, mc.affinity = NULL, mc.interactive = FALSE, detached = FALSE)
>>>>>> {
>>>>>> +    allowFork(assert = TRUE)
>>>>>>   f <- mcfork(detached)
>>>>>>   env <- parent.frame()
>>>>>>   if (isTRUE(mc.set.seed)) mc.advance.stream()
>>>>>> Index: src/library/parallel/R/unix/pvec.R
>>>>>> ===================================================================
>>>>>> --- src/library/parallel/R/unix/pvec.R (revision 77648)
>>>>>> +++ src/library/parallel/R/unix/pvec.R (working copy)
>>>>>> @@ -25,7 +25,7 @@
>>>>>>   cores <- as.integer(mc.cores)
>>>>>>   if(cores < 1L) stop("'mc.cores' must be >= 1")
>>>>>> -    if(cores == 1L) return(FUN(v, ...))
>>>>>> +    if(cores == 1L || !allowFork()) return(FUN(v, ...))
>>>>>>   .check_ncores(cores)
>>>>>>   if(mc.set.seed) mc.reset.stream()
>>>>>> with a new file src/library/parallel/R/unix/allowFork.R:
>>>>>> allowFork <- function(assert = FALSE) {
>>>>>>  value <- Sys.getenv("R_FORK_ALLOWED")
>>>>>>  if (nzchar(value)) {
>>>>>>      value <- switch(value,
>>>>>>         "1"=, "TRUE"=, "true"=, "True"=, "yes"=, "Yes"= TRUE,
>>>>>>         "0"=, "FALSE"=,"false"=,"False"=, "no"=, "No" = FALSE,
>>>>>>          stop(gettextf("invalid environment variable value: %s==%s",
>>>>>>         "R_FORK_ALLOWED", value)))
>>>>>> value <- as.logical(value)
>>>>>>  } else {
>>>>>>      value <- TRUE
>>>>>>  }
>>>>>>  value <- getOption("fork.allowed", value)
>>>>>>  if (is.na(value)) {
>>>>>>      stop(gettextf("invalid option value: %s==%s", "fork.allowed", value))
>>>>>>  }
>>>>>>  if (assert && !value) {
>>>>>>    stop(gettextf("Forked processing is not allowed per option %s or
>>>>>> environment variable %s", sQuote("fork.allowed"),
>>>>>> sQuote("R_FORK_ALLOWED")))
>>>>>>  }
>>>>>>  value
>>>>>> }
>>>>>> /Henrik
>>>>>>> On Mon, Apr 15, 2019 at 3:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>>> On 4/15/19 11:02 AM, I?aki Ucar wrote:
>>>>>>>> On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
>>>>>>>>> On 4/13/19 12:05 PM, I?aki Ucar wrote:
>>>>>>>>>> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
>>>>>>>>>>> I think it's worth saying that mclapply() works as documented
>>>>>>>>>> Mostly, yes. But it says nothing about fork's copy-on-write and memory
>>>>>>>>>> overcommitment, and that this means that it may work nicely or fail
>>>>>>>>>> spectacularly depending on whether, e.g., you operate on a long
>>>>>>>>>> vector.
>>>>>>>>> R cannot possibly replicate documentation of the underlying operating
>>>>>>>>> systems. It clearly says that fork() is used and readers who may not
>>>>>>>>> know what fork() is need to learn it from external sources.
>>>>>>>>> Copy-on-write is an elementary property of fork().
>>>>>>>> Just to be precise, copy-on-write is an optimization widely deployed
>>>>>>>> in most modern *nixes, particularly for the architectures in which R
>>>>>>>> usually runs. But it is not an elementary property; it is not even
>>>>>>>> possible without an MMU.
>>>>>>> Yes, old Unix systems without virtual memory had fork eagerly copying.
>>>>>>> Not relevant today, and certainly not for systems that run R, but indeed
>>>>>>> people interested in OS internals can look elsewhere for more precise
>>>>>>> information.
>>>>>>> Tomas
>>>>> 
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From tdhock5 @end|ng |rom gm@||@com  Sat Jan 11 06:22:11 2020
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Fri, 10 Jan 2020 19:22:11 -1000
Subject: [Rd] add jsslogo.jpg to R sources?
In-Reply-To: <alpine.DEB.2.21.2001082009310.4109@paninaro>
References: <CALK03d0h7P2TB8L8Xj8mKttuAfvWas7zWndm7Hr+EyDQAPodLg@mail.gmail.com>
 <CALEXWq3Ze7PMO2CZ+4LXpejeKVW4gq+0SAiebsoR28373NCJqw@mail.gmail.com>
 <alpine.DEB.2.21.2001082009310.4109@paninaro>
Message-ID: <CALK03d1B9K+Xi71qn3xwvOckgofTtW_99586X0kTKBhS4-aygw@mail.gmail.com>

hi there, thanks for the feedback, sorry about the cross-posting, and that
makes sense given the nojss option, which I was not aware of.

On Wed, Jan 8, 2020 at 9:16 AM Achim Zeileis <Achim.Zeileis at uibk.ac.at>
wrote:

> On Wed, 8 Jan 2020, I?aki Ucar wrote:
>
> > On Wed, 8 Jan 2020 at 19:21, Toby Hocking <tdhock5 at gmail.com> wrote:
> >>
> >> Hi R-core, I was wondering if somebody could please add jsslogo.jpg to
> the
> >> R sources? (as I reported yesterday in this bug)
> >>
> >> https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17687
> >>
> >> R already includes jss.cls which is the document class file for Journal
> of
> >> Statistical Software. Actually, for the jss.cls file to be useful, it
> also
> >> requires jsslogo.jpg in order to compile JSS articles without error.
> >>
> >> This is an issue for me because I am writing a JSS paper that includes
> >> figures created using tikzDevice, which I am telling to use the jss
> class
> >> for computing metrics. On debian/ubuntu the R-src/share/texmf directory
> is
> >> copied to /usr/share/texmf/tex/latex/R, so tikzDevice is finding
> jss.cls in
> >> /usr/share/texmf/tex/latex/R/tex/latex/jss.cls but it is failing with a
> >> 'jsslogo not found' error -- the fix is to also include jsslogo.jpg in
> the
> >> R sources (in the same directory as jss.cls).
> >
> > Why don't you just include jsslogo.jpg in your working directory?
> > jss.cls is included in the R sources because there are many vignettes
> > with the JSS style, but always *without* the logo. The logo should
> > only be used for actual JSS publication, so I think that the R sources
> > are no place for it.
>
> Thanks, I?aki, you are right. The motivation for including jss.cls and
> jss.bst in the R sources was to facilitate turning JSS papers into
> vignettes (see the FAQ at https://www.jstatsoft.org/pages/view/style)
> with
> \documentclass[nojss]{jss}. Before jss.cls/bst were shipped along with
> base R many packages shipped with their own copy which seemed like a waste
> of resources and source of confusion.
>
> When preparing new papers for submission in JSS you can also use the
> "nojss" option, this is also accepted by the journal.
>
> Hope that helps,
> Achim
>
> P.S.: Toby, if you plan on discussing an such an issue anyway, I would
> recommend to wait with the bug report. Cross-posting on different channels
> is always a bit of a nuisance.

	[[alternative HTML version deleted]]


From c@@rd|@g@bor @end|ng |rom gm@||@com  Sat Jan 11 09:59:19 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Sat, 11 Jan 2020 08:59:19 +0000
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <606FA782-721B-443A-9399-9B6CE8AF47DD@R-project.org>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
 <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
 <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>
 <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
 <CABtg=Km4GdMC5vGOs0PqvOjqABqcrhOZOqPv=81DuoX75zm8HQ@mail.gmail.com>
 <606FA782-721B-443A-9399-9B6CE8AF47DD@R-project.org>
Message-ID: <CABtg=K=QAkuXE6RL3KJzkxeBGYr6ThBVRVew5z6SfzRCUG=2oQ@mail.gmail.com>

On Sat, Jan 11, 2020 at 4:14 AM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
[...]
> > In general, any code that calls the macOS system libraries might
> > crash. (Except for CoreFoundation, which seems to be fine, but AFAIR
> > there is no guarantee for that, either.)
> >
>
> That is not true, either. macOS itself is fork-safe (it is POSIX-certified after all), but libraries may or may not.

Right, so CoreFoundation should be fine. Well, as much as it can be.

[...]
>  As I said, using mc* functions explicitly says that you are ok with forking, so you if you run code that is not fork-safe it is clearly a user error.

Just to clarify, this basically means that you cannot use mc* in
portable code. Even base R functions might fail, see e.g. the previous
crashes with libcurl.

> That's exactly why we have the long "Warning" section in the documentation. If you have suggestions for its improvements, please feel free to supply patches.

One suggestion would be to export the parallel::isChild(), so that we
can guard against crashes.

Best,
Gabor

> Cheers,
> Simon
>
>
> > You get crashes in the terminal as well, without multithreading. E.g.
> > the keyring package links for the Security library on macOS, so you
> > get:
> >
> > ? R --vanilla -q
> >> .libPaths("~/R/3.6")
> >> keyring::key_list()[1:2,]
> >        service                                                  username
> > 1    CommCenter                             kEntitlementsUniqueIDCacheKey
> > 2           ids                                   identity-rsa-public-key
> >> parallel::mclapply(1:10, function(i) keyring::key_list()[1:2,])
> >
> > *** caught segfault ***
> > address 0x110, cause 'memory not mapped'
> >
> > *** caught segfault ***
> > address 0x110, cause 'memory not mapped'
> >
> > AFAICT only Apple can do anything about this, and they won't.
> >
> > Gabor
> >
> >> That's exactly why I was proposing a more general solution where you can simply define a function in user-space that will issue a warning or stop on fork, it doesn't have to be part of core R, there are other packages that use fork() as well, so what I proposed is much safer than hacking the parallel package.
> >>
> >> Cheers,
> >> Simon
> >>
> >>
> >>
> >>> On Jan 10, 2020, at 10:58 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
> >>>
> >>> The RStudio GUI was just one example.  AFAIK, and please correct me if
> >>> I'm wrong, another example is where multi-threaded code is used in
> >>> forked processing and that's sometimes unstable.  Yes another, which
> >>> might be multi-thread related or not, is
> >>> https://stat.ethz.ch/pipermail/r-devel/2018-September/076845.html:
> >>>
> >>> res <- parallel::mclapply(urls, function(url) {
> >>> download.file(url, basename(url))
> >>> })
> >>>
> >>> That was reported to fail on macOS with the default method="libcurl"
> >>> but not for method="curl" or method="wget".
> >>>
> >>> Further documentation is needed and would help but I don't believe
> >>> it's sufficient to solve everyday problems.  The argument for
> >>> introducing an option/env var to disable forking is to give the end
> >>> user a quick workaround for newly introduced bugs.  Neither the
> >>> develop nor the end user have full control of the R package stack,
> >>> which is always in flux.  For instance, above mclapply() code might
> >>> have been in a package on CRAN and then all of a sudden
> >>> method="libcurl" became the new default in base R.  The above
> >>> mclapply() code is now buggy on macOS, and not necessarily caught by
> >>> CRAN checks.  The package developer might not notice this because they
> >>> are on Linux or Windows.  It can take a very long time before this
> >>> problem is even noticed and even further before it is tracked down and
> >>> fixed.   Similarly, as more and more code turn to native code and it
> >>> becomes easier and easier to implement multi-threading, more and more
> >>> of these bugs across package dependencies risk sneaking in the
> >>> backdoor wherever forked processing is in place.
> >>>
> >>> For the end user, but also higher-up upstream package developers, the
> >>> quickest workaround would be disable forking.  If you're conservative,
> >>> you could even disable it all of your R processing.  Being able to
> >>> quickly disable forking will also provide a mechanism for quickly
> >>> testing the hypothesis that forking is the underlying problem, i.e.
> >>> "Please retry with options(fork.allowed = FALSE)" will become handy
> >>> for troubleshooting.
> >>>
> >>> /Henrik
> >>>
> >>> On Fri, Jan 10, 2020 at 5:31 AM Simon Urbanek
> >>> <simon.urbanek at r-project.org> wrote:
> >>>>
> >>>> If I understand the thread correctly this is an RStudio issue and I would suggest that the developers consider using pthread_atfork() so RStudio can handle forking as they deem fit (bail out with an error or make RStudio work).  Note that in principle the functionality requested here can be easily implemented in a package so R doesn?t need to be modified.
> >>>>
> >>>> Cheers,
> >>>> Simon
> >>>>
> >>>> Sent from my iPhone
> >>>>
> >>>>>> On Jan 10, 2020, at 04:34, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>>>
> >>>>>> ?On 1/10/20 7:33 AM, Henrik Bengtsson wrote:
> >>>>>> I'd like to pick up this thread started on 2019-04-11
> >>>>>> (https://hypatia.math.ethz.ch/pipermail/r-devel/2019-April/077632.html).
> >>>>>> Modulo all the other suggestions in this thread, would my proposal of
> >>>>>> being able to disable forked processing via an option or an
> >>>>>> environment variable make sense?
> >>>>>
> >>>>> I don't think R should be doing that. There are caveats with using fork, and they are mentioned in the documentation of the parallel package, so people can easily avoid functions that use it, and this all has been discussed here recently.
> >>>>>
> >>>>> If it is the case, we can expand the documentation in parallel package, add a warning against the use of forking with RStudio, but for that I it would be good to know at least why it is not working. From the github issue I have the impression that it is not really known why, whether it could be fixed, and if so, where. The same github issue reflects also that some people want to use forking for performance reasons, and even with RStudio, at least on Linux. Perhaps it could be fixed? Perhaps it is just some race condition somewhere?
> >>>>>
> >>>>> Tomas
> >>>>>
> >>>>>> I've prototyped a working patch that
> >>>>>> works like:
> >>>>>>> options(fork.allowed = FALSE)
> >>>>>>> unlist(parallel::mclapply(1:2, FUN = function(x) Sys.getpid()))
> >>>>>> [1] 14058 14058
> >>>>>>> parallel::mcmapply(1:2, FUN = function(x) Sys.getpid())
> >>>>>> [1] 14058 14058
> >>>>>>> parallel::pvec(1:2, FUN = function(x) Sys.getpid() + x/10)
> >>>>>> [1] 14058.1 14058.2
> >>>>>>> f <- parallel::mcparallel(Sys.getpid())
> >>>>>> Error in allowFork(assert = TRUE) :
> >>>>>> Forked processing is not allowed per option ?fork.allowed? or
> >>>>>> environment variable ?R_FORK_ALLOWED?
> >>>>>>> cl <- parallel::makeForkCluster(1L)
> >>>>>> Error in allowFork(assert = TRUE) :
> >>>>>> Forked processing is not allowed per option ?fork.allowed? or
> >>>>>> environment variable ?R_FORK_ALLOWED?
> >>>>>> The patch is:
> >>>>>> Index: src/library/parallel/R/unix/forkCluster.R
> >>>>>> ===================================================================
> >>>>>> --- src/library/parallel/R/unix/forkCluster.R (revision 77648)
> >>>>>> +++ src/library/parallel/R/unix/forkCluster.R (working copy)
> >>>>>> @@ -30,6 +30,7 @@
> >>>>>> newForkNode <- function(..., options = defaultClusterOptions, rank)
> >>>>>> {
> >>>>>> +    allowFork(assert = TRUE)
> >>>>>>   options <- addClusterOptions(options, list(...))
> >>>>>>   outfile <- getClusterOption("outfile", options)
> >>>>>>   port <- getClusterOption("port", options)
> >>>>>> Index: src/library/parallel/R/unix/mclapply.R
> >>>>>> ===================================================================
> >>>>>> --- src/library/parallel/R/unix/mclapply.R (revision 77648)
> >>>>>> +++ src/library/parallel/R/unix/mclapply.R (working copy)
> >>>>>> @@ -28,7 +28,7 @@
> >>>>>>       stop("'mc.cores' must be >= 1")
> >>>>>>   .check_ncores(cores)
> >>>>>> -    if (isChild() && !isTRUE(mc.allow.recursive))
> >>>>>> +    if (!allowFork() || (isChild() && !isTRUE(mc.allow.recursive)))
> >>>>>>       return(lapply(X = X, FUN = FUN, ...))
> >>>>>>   ## Follow lapply
> >>>>>> Index: src/library/parallel/R/unix/mcparallel.R
> >>>>>> ===================================================================
> >>>>>> --- src/library/parallel/R/unix/mcparallel.R (revision 77648)
> >>>>>> +++ src/library/parallel/R/unix/mcparallel.R (working copy)
> >>>>>> @@ -20,6 +20,7 @@
> >>>>>> mcparallel <- function(expr, name, mc.set.seed = TRUE, silent =
> >>>>>> FALSE, mc.affinity = NULL, mc.interactive = FALSE, detached = FALSE)
> >>>>>> {
> >>>>>> +    allowFork(assert = TRUE)
> >>>>>>   f <- mcfork(detached)
> >>>>>>   env <- parent.frame()
> >>>>>>   if (isTRUE(mc.set.seed)) mc.advance.stream()
> >>>>>> Index: src/library/parallel/R/unix/pvec.R
> >>>>>> ===================================================================
> >>>>>> --- src/library/parallel/R/unix/pvec.R (revision 77648)
> >>>>>> +++ src/library/parallel/R/unix/pvec.R (working copy)
> >>>>>> @@ -25,7 +25,7 @@
> >>>>>>   cores <- as.integer(mc.cores)
> >>>>>>   if(cores < 1L) stop("'mc.cores' must be >= 1")
> >>>>>> -    if(cores == 1L) return(FUN(v, ...))
> >>>>>> +    if(cores == 1L || !allowFork()) return(FUN(v, ...))
> >>>>>>   .check_ncores(cores)
> >>>>>>   if(mc.set.seed) mc.reset.stream()
> >>>>>> with a new file src/library/parallel/R/unix/allowFork.R:
> >>>>>> allowFork <- function(assert = FALSE) {
> >>>>>>  value <- Sys.getenv("R_FORK_ALLOWED")
> >>>>>>  if (nzchar(value)) {
> >>>>>>      value <- switch(value,
> >>>>>>         "1"=, "TRUE"=, "true"=, "True"=, "yes"=, "Yes"= TRUE,
> >>>>>>         "0"=, "FALSE"=,"false"=,"False"=, "no"=, "No" = FALSE,
> >>>>>>          stop(gettextf("invalid environment variable value: %s==%s",
> >>>>>>         "R_FORK_ALLOWED", value)))
> >>>>>> value <- as.logical(value)
> >>>>>>  } else {
> >>>>>>      value <- TRUE
> >>>>>>  }
> >>>>>>  value <- getOption("fork.allowed", value)
> >>>>>>  if (is.na(value)) {
> >>>>>>      stop(gettextf("invalid option value: %s==%s", "fork.allowed", value))
> >>>>>>  }
> >>>>>>  if (assert && !value) {
> >>>>>>    stop(gettextf("Forked processing is not allowed per option %s or
> >>>>>> environment variable %s", sQuote("fork.allowed"),
> >>>>>> sQuote("R_FORK_ALLOWED")))
> >>>>>>  }
> >>>>>>  value
> >>>>>> }
> >>>>>> /Henrik
> >>>>>>> On Mon, Apr 15, 2019 at 3:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>>>> On 4/15/19 11:02 AM, I?aki Ucar wrote:
> >>>>>>>> On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>>>>>> On 4/13/19 12:05 PM, I?aki Ucar wrote:
> >>>>>>>>>> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
> >>>>>>>>>>> I think it's worth saying that mclapply() works as documented
> >>>>>>>>>> Mostly, yes. But it says nothing about fork's copy-on-write and memory
> >>>>>>>>>> overcommitment, and that this means that it may work nicely or fail
> >>>>>>>>>> spectacularly depending on whether, e.g., you operate on a long
> >>>>>>>>>> vector.
> >>>>>>>>> R cannot possibly replicate documentation of the underlying operating
> >>>>>>>>> systems. It clearly says that fork() is used and readers who may not
> >>>>>>>>> know what fork() is need to learn it from external sources.
> >>>>>>>>> Copy-on-write is an elementary property of fork().
> >>>>>>>> Just to be precise, copy-on-write is an optimization widely deployed
> >>>>>>>> in most modern *nixes, particularly for the architectures in which R
> >>>>>>>> usually runs. But it is not an elementary property; it is not even
> >>>>>>>> possible without an MMU.
> >>>>>>> Yes, old Unix systems without virtual memory had fork eagerly copying.
> >>>>>>> Not relevant today, and certainly not for systems that run R, but indeed
> >>>>>>> people interested in OS internals can look elsewhere for more precise
> >>>>>>> information.
> >>>>>>> Tomas
> >>>>>
> >>>>> ______________________________________________
> >>>>> R-devel at r-project.org mailing list
> >>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>>
> >>>> ______________________________________________
> >>>> R-devel at r-project.org mailing list
> >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>


From c@@rd|@g@bor @end|ng |rom gm@||@com  Sat Jan 11 15:09:39 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Sat, 11 Jan 2020 14:09:39 +0000
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <51292B2D-56D6-44B5-B64A-78408C452503@R-project.org>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
 <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
 <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>
 <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
 <CABtg=Km4GdMC5vGOs0PqvOjqABqcrhOZOqPv=81DuoX75zm8HQ@mail.gmail.com>
 <51292B2D-56D6-44B5-B64A-78408C452503@R-project.org>
Message-ID: <CABtg=KkTjF4YCmmQ68D=cOVYK9k6vB2o-Zrx_d3=6dRs--VY3g@mail.gmail.com>

On Sat, Jan 11, 2020 at 12:53 PM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
[...]
> > I think it works now, because Apple switched to a different SSL
> > library for libcurl. It usually crashes or fails on older macOS
> > versions, with the CRAN build of R as well.
> >
>
> That is not true - Apple has not changed the SSL back-end for many years. The issue in that post is presumably in the homebrew version of SSL.

This is CRAN R 3.6.2 on El Capitan crashing for HTTPS. Homebrew is not
installed on the machine.

> download.file("https://httpbin.org/status/200", tempfile(), method = "libcurl")
trying URL 'https://httpbin.org/status/200'
downloaded 0 bytes

> parallel::mclapply(1:10, function(x) download.file("https://httpbin.org/status/200", tempfile(), method = "libcurl"))
trying URL 'https://httpbin.org/status/200'
trying URL 'https://httpbin.org/status/200'

 *** caught segfault ***

address 0x110, cause 'memory not mapped'

I assume the crash is coming from the SSL library/ies because it does
work for HTTP, only crashes for HTTPS.

FWIW these are the libraries the system libcurl uses on El Capitan:

Rhubs-Mac-3:macoscheck rhub$ otool -L /usr/lib/libcurl.4.dylib
/usr/lib/libcurl.4.dylib:
     /usr/lib/libcurl.4.dylib (compatibility version 7.0.0, current
version 8.0.0)
     /System/Library/Frameworks/Security.framework/Versions/A/Security
(compatibility version 1.0.0, current version 57332.0.0)
     /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation
(compatibility version 150.0.0, current version 1231.0.0)
     /System/Library/Frameworks/LDAP.framework/Versions/A/LDAP
(compatibility version 1.0.0, current version 2.4.0)
     /System/Library/Frameworks/Kerberos.framework/Versions/A/Kerberos
(compatibility version 5.0.0, current version 6.0.0)
     /usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.5)
     /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current
version 1225.0.0)

and this is Mojave:

? otool -L /usr/lib/libcurl.4.dylib
/usr/lib/libcurl.4.dylib:
     /usr/lib/libcurl.4.dylib (compatibility version 7.0.0, current
version 9.0.0)
     /usr/lib/libcrypto.42.dylib (compatibility version 43.0.0,
current version 43.0.0)
     /usr/lib/libssl.44.dylib (compatibility version 45.0.0, current
version 45.1.0)
     /System/Library/Frameworks/LDAP.framework/Versions/A/LDAP
(compatibility version 1.0.0, current version 2.4.0)
     /System/Library/Frameworks/Kerberos.framework/Versions/A/Kerberos
(compatibility version 5.0.0, current version 6.0.0)
     /usr/lib/libapple_nghttp2.dylib (compatibility version 1.0.0,
current version 1.24.1)
     /usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.11)
     /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current
version 1252.250.1)

So the SSL libs do look different to me, but please FIXME. Relatedly,
on El Capitan an HTTPS download with download.file() starts up extra
threads, whereas on Mojave it does not.

Gabor

> Cheers,
> Simon
[...]


From henr|k@bengt@@on @end|ng |rom gm@||@com  Sun Jan 12 00:48:33 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Sat, 11 Jan 2020 15:48:33 -0800
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <EA77CEE0-1018-4667-856D-1F3C98D015BB@R-project.org>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
 <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
 <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>
 <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
 <CAFDcVCR-aMss6QNrscaYgVfYANYkznFTxRdqxUVeu51qTFTnDg@mail.gmail.com>
 <EA77CEE0-1018-4667-856D-1F3C98D015BB@R-project.org>
Message-ID: <CAFDcVCRg7Ygr1F+=fgaHq2NaJsM5RsUTLUsNdC3=6x=agigJ1Q@mail.gmail.com>

On Fri, Jan 10, 2020 at 7:23 PM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
>
> Henrik,
>
> the whole point and only purpose of mc* functions is to fork. That's what the multicore package was about, so if you don't want to fork, don't use mc* functions - they don't have any other purpose.

But, with that same argument I'm surprised we have fake
implementations of the mc***() functions for MS Windows.

> I really fail to see the point - if you use mc* functions you're very explicitly asking for forking - so your argument is like saying that print() should have an option to not print anything - it just makes no sense. If you have code that is fork-incompatilble, you clearly cannot use it in mcparallel - that's why there is a very explicit warning in the documentation.

I think you're casting the word "you" too wide here - what I've been
trying to argue is that users don't always have this control - the
length of loadedNamespaces() can easily be 100's of packages these
days.  Usage of forking will come and go in that software stack
completely out of control to the user. They could be in control if
there was an option to disable it.

I don't think the analogue to print() is relevant here.

> As I said, if you have some software that embeds R and has issue with forks, then that software should be use pthread_atfork() to control the behavior.

If I understand this correctly, this only applies to discussions such
as RStudio and similar.  It is not a relevant solution to ordinary
users of R, correct?

I'm not sure if you're playing devils advocate here, or I'm really
really bad at explaining the problem, but here's my last attempt of an
example:

Consider PkgA::train() that calls mclapply(..., PkgB::estimate). Life
is good. Then PkgB fixes a bug in the estimator + optimizes some the
internals/native code - unfortunately, the latter is not meant to work
in forked parallel processing.  Author of PkgB have not idea that this
change will affect PkgA negatively. When PkgB hits CRAN, the problem
in PkgA might go undetected, e.g. low code coverage in package tests
or for other reasons.  Now CRAN distributes an unstable software
stack.  All code bases relying on PkgA::train() is now completely
useless to some or all users.  Only after major troubleshooting and
responsive package maintainers, these type of problems can be resolved
quickly - until then, users will have to turn to complicated
workarounds such as installing old versions of PkgA + backporting bug
fixes, etc.   A lot of users don't even consider this as an option.

Usage of 'parallel::mc***()' functions is very common; 357 packages on
CRAN call them directly, and even more indirectly via doMC and
doParallel.  I expect the risk for instability to happen for at least
some of these.

If the stance on this is that mclapply() and friends should only be
used when you are 100% sure that it is fork safe, then I'd like to
argue that those functions should never ever be allowed to call other
packages, because you are not in full control of such code.  This
should certainly be documented and it shouldn't be too hard to add
assertions for this in 'R CMD check'.

A final plead: Adding an option to disable forking, at least in the
'parallel' package only, will spare people (end users, developers,
sysadms, ...) many many hours of troubleshooting and eventually trying
to find workarounds. Those hours adds up quickly given the number of R
users we have out there.  We have more important things to spend our
time on.  I can easily count days wasted due to troubleshooting and
helping others remotely on problems related to instability of forked
processing. Being able to disable it, would have shortcut this quite a
bit.

/Henrik

>
> Cheers,
> Simon
>
>
>
> > On Jan 10, 2020, at 3:34 PM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
> >
> > On Fri, Jan 10, 2020 at 11:23 AM Simon Urbanek
> > <simon.urbanek at r-project.org> wrote:
> >>
> >> Henrik,
> >>
> >> the example from the post works just fine in CRAN R for me - the post was about homebrew build so it's conceivably a bug in their libraries.
> >
> > Thanks for ruling that example out.
> >
> >> That's exactly why I was proposing a more general solution where you can simply define a function in user-space that will issue a warning or stop on fork, it doesn't have to be part of core R, there are other packages that use fork() as well, so what I proposed is much safer than hacking the parallel package.
> >
> > I think this is worth pursuing and will help improve and stabilize
> > things.  But issuing a warning or stop on fork will not allow end
> > users from running the pipeline, or am I missing something?
> >
> > I'm trying to argue that this is still a real problem that users and
> > developers run into on a regular basis.  Since parallel::mclapply() is
> > such a common and readily available solution it is also a low hanging
> > fruit to make it possible to have those forking functions fall back to
> > sequential processing.  The only(*) way to achieve this fall back
> > right now is to run the same pipeline on MS Windows - I just think it
> > would be very useful to have the same fallback option available on
> > Unix and macOS.  Having this in base R could also serve as standard
> > for other parallel/forking packages/implementations who also wish to
> > have a fallback to sequential processing.
> >
> > ==> What would the disadvantages be to provide a mechanism/setting for
> > disabling forking in the parallel::mc*** API? <==
> >
> > (*) One can also somewhat disable forking in 'parallel' by using
> > 'cgroups' limiting the process to a single core (see also
> > https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17641).  That will
> > handle code that uses mc.cores = parallel::detectCores(), which there
> > is a lot of.  I guess it will cause run-time error (on 'mc.cores' must
> > be >= 1) for code that uses the second most common used mc.cores =
> > parallel::detectCores() - 1, which is unfortunately also very common.
> > I find the use of hardcoded detectCores() unfortunate but that is a
> > slightly different topic.  OTH, if there would a standardized option
> > in R for disabling all types of parallel processing by forcing a
> > single core, one could imagine other parallel APIs to implement
> > fallbacks to sequential processing as well. (I'm aware that not all
> > use cases of async processing is about parallelization, so it might
> > not apply everywhere).
> >
> > Cheers,
> >
> > Henrik
> >
> >>
> >> Cheers,
> >> Simon
> >>
> >>
> >>
> >>> On Jan 10, 2020, at 10:58 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
> >>>
> >>> The RStudio GUI was just one example.  AFAIK, and please correct me if
> >>> I'm wrong, another example is where multi-threaded code is used in
> >>> forked processing and that's sometimes unstable.  Yes another, which
> >>> might be multi-thread related or not, is
> >>> https://stat.ethz.ch/pipermail/r-devel/2018-September/076845.html:
> >>>
> >>> res <- parallel::mclapply(urls, function(url) {
> >>> download.file(url, basename(url))
> >>> })
> >>>
> >>> That was reported to fail on macOS with the default method="libcurl"
> >>> but not for method="curl" or method="wget".
> >>>
> >>> Further documentation is needed and would help but I don't believe
> >>> it's sufficient to solve everyday problems.  The argument for
> >>> introducing an option/env var to disable forking is to give the end
> >>> user a quick workaround for newly introduced bugs.  Neither the
> >>> develop nor the end user have full control of the R package stack,
> >>> which is always in flux.  For instance, above mclapply() code might
> >>> have been in a package on CRAN and then all of a sudden
> >>> method="libcurl" became the new default in base R.  The above
> >>> mclapply() code is now buggy on macOS, and not necessarily caught by
> >>> CRAN checks.  The package developer might not notice this because they
> >>> are on Linux or Windows.  It can take a very long time before this
> >>> problem is even noticed and even further before it is tracked down and
> >>> fixed.   Similarly, as more and more code turn to native code and it
> >>> becomes easier and easier to implement multi-threading, more and more
> >>> of these bugs across package dependencies risk sneaking in the
> >>> backdoor wherever forked processing is in place.
> >>>
> >>> For the end user, but also higher-up upstream package developers, the
> >>> quickest workaround would be disable forking.  If you're conservative,
> >>> you could even disable it all of your R processing.  Being able to
> >>> quickly disable forking will also provide a mechanism for quickly
> >>> testing the hypothesis that forking is the underlying problem, i.e.
> >>> "Please retry with options(fork.allowed = FALSE)" will become handy
> >>> for troubleshooting.
> >>>
> >>> /Henrik
> >>>
> >>> On Fri, Jan 10, 2020 at 5:31 AM Simon Urbanek
> >>> <simon.urbanek at r-project.org> wrote:
> >>>>
> >>>> If I understand the thread correctly this is an RStudio issue and I would suggest that the developers consider using pthread_atfork() so RStudio can handle forking as they deem fit (bail out with an error or make RStudio work).  Note that in principle the functionality requested here can be easily implemented in a package so R doesn?t need to be modified.
> >>>>
> >>>> Cheers,
> >>>> Simon
> >>>>
> >>>> Sent from my iPhone
> >>>>
> >>>>>> On Jan 10, 2020, at 04:34, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>>>
> >>>>>> ?On 1/10/20 7:33 AM, Henrik Bengtsson wrote:
> >>>>>> I'd like to pick up this thread started on 2019-04-11
> >>>>>> (https://hypatia.math.ethz.ch/pipermail/r-devel/2019-April/077632.html).
> >>>>>> Modulo all the other suggestions in this thread, would my proposal of
> >>>>>> being able to disable forked processing via an option or an
> >>>>>> environment variable make sense?
> >>>>>
> >>>>> I don't think R should be doing that. There are caveats with using fork, and they are mentioned in the documentation of the parallel package, so people can easily avoid functions that use it, and this all has been discussed here recently.
> >>>>>
> >>>>> If it is the case, we can expand the documentation in parallel package, add a warning against the use of forking with RStudio, but for that I it would be good to know at least why it is not working. From the github issue I have the impression that it is not really known why, whether it could be fixed, and if so, where. The same github issue reflects also that some people want to use forking for performance reasons, and even with RStudio, at least on Linux. Perhaps it could be fixed? Perhaps it is just some race condition somewhere?
> >>>>>
> >>>>> Tomas
> >>>>>
> >>>>>> I've prototyped a working patch that
> >>>>>> works like:
> >>>>>>> options(fork.allowed = FALSE)
> >>>>>>> unlist(parallel::mclapply(1:2, FUN = function(x) Sys.getpid()))
> >>>>>> [1] 14058 14058
> >>>>>>> parallel::mcmapply(1:2, FUN = function(x) Sys.getpid())
> >>>>>> [1] 14058 14058
> >>>>>>> parallel::pvec(1:2, FUN = function(x) Sys.getpid() + x/10)
> >>>>>> [1] 14058.1 14058.2
> >>>>>>> f <- parallel::mcparallel(Sys.getpid())
> >>>>>> Error in allowFork(assert = TRUE) :
> >>>>>> Forked processing is not allowed per option ?fork.allowed? or
> >>>>>> environment variable ?R_FORK_ALLOWED?
> >>>>>>> cl <- parallel::makeForkCluster(1L)
> >>>>>> Error in allowFork(assert = TRUE) :
> >>>>>> Forked processing is not allowed per option ?fork.allowed? or
> >>>>>> environment variable ?R_FORK_ALLOWED?
> >>>>>> The patch is:
> >>>>>> Index: src/library/parallel/R/unix/forkCluster.R
> >>>>>> ===================================================================
> >>>>>> --- src/library/parallel/R/unix/forkCluster.R (revision 77648)
> >>>>>> +++ src/library/parallel/R/unix/forkCluster.R (working copy)
> >>>>>> @@ -30,6 +30,7 @@
> >>>>>> newForkNode <- function(..., options = defaultClusterOptions, rank)
> >>>>>> {
> >>>>>> +    allowFork(assert = TRUE)
> >>>>>>   options <- addClusterOptions(options, list(...))
> >>>>>>   outfile <- getClusterOption("outfile", options)
> >>>>>>   port <- getClusterOption("port", options)
> >>>>>> Index: src/library/parallel/R/unix/mclapply.R
> >>>>>> ===================================================================
> >>>>>> --- src/library/parallel/R/unix/mclapply.R (revision 77648)
> >>>>>> +++ src/library/parallel/R/unix/mclapply.R (working copy)
> >>>>>> @@ -28,7 +28,7 @@
> >>>>>>       stop("'mc.cores' must be >= 1")
> >>>>>>   .check_ncores(cores)
> >>>>>> -    if (isChild() && !isTRUE(mc.allow.recursive))
> >>>>>> +    if (!allowFork() || (isChild() && !isTRUE(mc.allow.recursive)))
> >>>>>>       return(lapply(X = X, FUN = FUN, ...))
> >>>>>>   ## Follow lapply
> >>>>>> Index: src/library/parallel/R/unix/mcparallel.R
> >>>>>> ===================================================================
> >>>>>> --- src/library/parallel/R/unix/mcparallel.R (revision 77648)
> >>>>>> +++ src/library/parallel/R/unix/mcparallel.R (working copy)
> >>>>>> @@ -20,6 +20,7 @@
> >>>>>> mcparallel <- function(expr, name, mc.set.seed = TRUE, silent =
> >>>>>> FALSE, mc.affinity = NULL, mc.interactive = FALSE, detached = FALSE)
> >>>>>> {
> >>>>>> +    allowFork(assert = TRUE)
> >>>>>>   f <- mcfork(detached)
> >>>>>>   env <- parent.frame()
> >>>>>>   if (isTRUE(mc.set.seed)) mc.advance.stream()
> >>>>>> Index: src/library/parallel/R/unix/pvec.R
> >>>>>> ===================================================================
> >>>>>> --- src/library/parallel/R/unix/pvec.R (revision 77648)
> >>>>>> +++ src/library/parallel/R/unix/pvec.R (working copy)
> >>>>>> @@ -25,7 +25,7 @@
> >>>>>>   cores <- as.integer(mc.cores)
> >>>>>>   if(cores < 1L) stop("'mc.cores' must be >= 1")
> >>>>>> -    if(cores == 1L) return(FUN(v, ...))
> >>>>>> +    if(cores == 1L || !allowFork()) return(FUN(v, ...))
> >>>>>>   .check_ncores(cores)
> >>>>>>   if(mc.set.seed) mc.reset.stream()
> >>>>>> with a new file src/library/parallel/R/unix/allowFork.R:
> >>>>>> allowFork <- function(assert = FALSE) {
> >>>>>>  value <- Sys.getenv("R_FORK_ALLOWED")
> >>>>>>  if (nzchar(value)) {
> >>>>>>      value <- switch(value,
> >>>>>>         "1"=, "TRUE"=, "true"=, "True"=, "yes"=, "Yes"= TRUE,
> >>>>>>         "0"=, "FALSE"=,"false"=,"False"=, "no"=, "No" = FALSE,
> >>>>>>          stop(gettextf("invalid environment variable value: %s==%s",
> >>>>>>         "R_FORK_ALLOWED", value)))
> >>>>>> value <- as.logical(value)
> >>>>>>  } else {
> >>>>>>      value <- TRUE
> >>>>>>  }
> >>>>>>  value <- getOption("fork.allowed", value)
> >>>>>>  if (is.na(value)) {
> >>>>>>      stop(gettextf("invalid option value: %s==%s", "fork.allowed", value))
> >>>>>>  }
> >>>>>>  if (assert && !value) {
> >>>>>>    stop(gettextf("Forked processing is not allowed per option %s or
> >>>>>> environment variable %s", sQuote("fork.allowed"),
> >>>>>> sQuote("R_FORK_ALLOWED")))
> >>>>>>  }
> >>>>>>  value
> >>>>>> }
> >>>>>> /Henrik
> >>>>>>> On Mon, Apr 15, 2019 at 3:12 AM Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>>>> On 4/15/19 11:02 AM, I?aki Ucar wrote:
> >>>>>>>> On Mon, 15 Apr 2019 at 08:44, Tomas Kalibera <tomas.kalibera at gmail.com> wrote:
> >>>>>>>>> On 4/13/19 12:05 PM, I?aki Ucar wrote:
> >>>>>>>>>> On Sat, 13 Apr 2019 at 03:51, Kevin Ushey <kevinushey at gmail.com> wrote:
> >>>>>>>>>>> I think it's worth saying that mclapply() works as documented
> >>>>>>>>>> Mostly, yes. But it says nothing about fork's copy-on-write and memory
> >>>>>>>>>> overcommitment, and that this means that it may work nicely or fail
> >>>>>>>>>> spectacularly depending on whether, e.g., you operate on a long
> >>>>>>>>>> vector.
> >>>>>>>>> R cannot possibly replicate documentation of the underlying operating
> >>>>>>>>> systems. It clearly says that fork() is used and readers who may not
> >>>>>>>>> know what fork() is need to learn it from external sources.
> >>>>>>>>> Copy-on-write is an elementary property of fork().
> >>>>>>>> Just to be precise, copy-on-write is an optimization widely deployed
> >>>>>>>> in most modern *nixes, particularly for the architectures in which R
> >>>>>>>> usually runs. But it is not an elementary property; it is not even
> >>>>>>>> possible without an MMU.
> >>>>>>> Yes, old Unix systems without virtual memory had fork eagerly copying.
> >>>>>>> Not relevant today, and certainly not for systems that run R, but indeed
> >>>>>>> people interested in OS internals can look elsewhere for more precise
> >>>>>>> information.
> >>>>>>> Tomas
> >>>>>
> >>>>> ______________________________________________
> >>>>> R-devel at r-project.org mailing list
> >>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>>
> >>>> ______________________________________________
> >>>> R-devel at r-project.org mailing list
> >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>


From |uc@r @end|ng |rom |edor@project@org  Sun Jan 12 16:03:06 2020
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Sun, 12 Jan 2020 16:03:06 +0100
Subject: [Rd] SUGGESTION: Settings to disable forked processing in R,
 e.g. parallel::mclapply()
In-Reply-To: <CAFDcVCRg7Ygr1F+=fgaHq2NaJsM5RsUTLUsNdC3=6x=agigJ1Q@mail.gmail.com>
References: <84d162f5-dd0d-64e6-e9bf-54b65a10faa6@gmail.com>
 <DCF5422D-5237-48C1-BE51-486CA3C1DD60@r-project.org>
 <CAFDcVCS0RwA0-64FTY6kiOk6=yxy8w4OweVbESa-3G6JHtV6Xg@mail.gmail.com>
 <6D7F010F-60B4-4C51-99B3-D8B51BE7572A@R-project.org>
 <CAFDcVCR-aMss6QNrscaYgVfYANYkznFTxRdqxUVeu51qTFTnDg@mail.gmail.com>
 <EA77CEE0-1018-4667-856D-1F3C98D015BB@R-project.org>
 <CAFDcVCRg7Ygr1F+=fgaHq2NaJsM5RsUTLUsNdC3=6x=agigJ1Q@mail.gmail.com>
Message-ID: <CALEXWq2NvtwHFMhbCV5y4d-aG-M25V7aoD_CKJyfGtYn5jDZ-w@mail.gmail.com>

On Sun, 12 Jan 2020 at 00:49, Henrik Bengtsson
<henrik.bengtsson at gmail.com> wrote:
>
> [snip]
>
> A final plead: Adding an option to disable forking, at least in the
> 'parallel' package only, will spare people (end users, developers,
> sysadms, ...) many many hours of troubleshooting and eventually trying
> to find workarounds. Those hours adds up quickly given the number of R
> users we have out there.  We have more important things to spend our
> time on.  I can easily count days wasted due to troubleshooting and
> helping others remotely on problems related to instability of forked
> processing. Being able to disable it, would have shortcut this quite a
> bit.

+1 to such an option. I don't see how this could be implemented in
another package. One could do something like

stop_on_fork <- inline::cfunction(
  body='pthread_atfork(stop, NULL, NULL);',
  includes='#include <pthread.h>', convention=".C",
  otherdefs='void stop() { Rf_error("Fork disabled"); }')
stop_on_fork()
parallel::mclapply(1:2, force)

which works nice in a standalone R session, but freezes RStudio.
Another workaround would be

unlockBinding("mclapply", getNamespace("parallel"))
assignInNamespace("mclapply", function(...) stop("Fork disabled"), "parallel")
parallel::mclapply(1:2, force)

(plus several more bindings to cover all the cases), but that's not
allowed, and shouldn't be allowed, on CRAN.

I?aki


From therne@u @end|ng |rom m@yo@edu  Mon Jan 13 17:02:06 2020
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Mon, 13 Jan 2020 10:02:06 -0600
Subject: [Rd] as-cran issue
Message-ID: <28fddd$d2evua@ironport10.mayo.edu>

Where can I find out (and replicate) what options as-cran turns on?

The issue: the following lines generate an error in R CMD check --as-cran? for coxme.? But 
there is no error without as-cran nor is there one when I run the code in a terminal window.

ismat <- function(x)? inherits(x, "matrix") || inherits(x, "bdsmatrix") || inherits(x, 
"Matrix")
if (ismat(kmat)? ) ....

(The second line is repeated multiple times for multiple arguments.? The ismat function is 
defined simply to save typing.)

The check log contains multiple instances of the lines below:

< Warning message:
< In if (ismat(kmat)) { :
<?? the condition has length > 1 and only the first element will be used

I don't see how the error could arise, but if I know what as-cran is doing perhaps I can 
replicate it.

 >sessionInfo()
R Under development (unstable) (2020-01-13 r77659)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.3 LTS

Matrix products: default
BLAS:?? /usr/local/src/R-devel/lib/libRblas.so
LAPACK: /usr/local/src/R-devel/lib/libRlapack.so

locale:
 ?[1] LC_CTYPE=en_US.UTF-8?????? LC_NUMERIC=C
 ?[3] LC_TIME=en_US.UTF-8??????? LC_COLLATE=C
 ?[5] LC_MONETARY=en_US.UTF-8??? LC_MESSAGES=en_US.UTF-8
 ?[7] LC_PAPER=en_US.UTF-8?????? LC_NAME=C
 ?[9] LC_ADDRESS=C?????????????? LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats???? graphics? grDevices utils???? datasets? methods base

loaded via a namespace (and not attached):
[1] compiler_4.0.0 tools_4.0.0
 >



	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Mon Jan 13 17:22:15 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Mon, 13 Jan 2020 10:22:15 -0600
Subject: [Rd] as-cran issue
In-Reply-To: <28fddd$d2evua@ironport10.mayo.edu>
References: <28fddd$d2evua@ironport10.mayo.edu>
Message-ID: <24092.39223.677206.772099@rob.eddelbuettel.com>


On 13 January 2020 at 10:02, Therneau, Terry M., Ph.D. via R-devel wrote:
| Where can I find out (and replicate) what options as-cran turns on?

See the file src/library/tools/R/check.R in the R sources, and grep for
as_cran which is the internal variable controlled by the --as-cran option

[...]

| The check log contains multiple instances of the lines below:
| 
| < Warning message:
| < In if (ismat(kmat)) { :
| <?? the condition has length > 1 and only the first element will be used
| 
| I don't see how the error could arise, but if I know what as-cran is doing perhaps I can 
| replicate it.

This was widely discussed on this list and should also be in the NEWS file.

The change is about what the message says: the if () tests a scalar logical,
it appears that ismat(kmat) returns more than a scalar.

There has always been an opt-in for this to error -- cf many messages by Henrik
over the years as he tried to convince us all to use it more.


Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From therne@u @end|ng |rom m@yo@edu  Mon Jan 13 17:28:32 2020
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Mon, 13 Jan 2020 10:28:32 -0600
Subject: [Rd] Error in R CMD check --as-cran ?
Message-ID: <28fddd$d2fabs@ironport10.mayo.edu>

I've been fighting a CMD check error for coxme this morning.?? I thought I had it fixed, 
but instead I had forgotton --as-cran on my last test run.? So the version just submitted 
to CRAN has warning messages in the log.

I think it is an issue with CRAN.?? I've sent a message to R-devel asking for help.?? 
Since then, as a guess, I renamed my internal "ismat" function to something else and the 
error went away.

Here is the code block in coxme,? it is part of the "check user arguments for validity" 
block at the start of the function.?? Run coxme in a terminal and all is well, run R CMD 
check without as-cran and all is well, but with --as-cran the ismat function gives 
warnings.? Changing the name to something else fixes the issue.?? The function exists only 
to save some typing.? (No need to really read the block, just notice the multiple calls to 
ismat()

 ??? ismat <- function (x) {
 ??????? inherits(x, c("matrix", "bdsmatrix", "Matrix"), which=FALSE)
 ??? }
 ??? if (missing(varlist) || is.null(varlist)) {
 ??????? varlist <- vector('list', nrandom)
 ??????? for (i in 1:nrandom) varlist[[i]] <- coxmeFull() #default
 ??? }
 ??? else {
 ??????? if (is.function(varlist)) varlist <- varlist()
 ??????? if (inherits(varlist, 'coxmevar')) varlist <- list(varlist)
 ??????? else if (ismat(varlist))
 ??????????? varlist <- list(coxmeMlist(list(varlist)))
 ??????? else {
 ??????????? if (!is.list(varlist)) stop("Invalid varlist argument")
 ??????????? if (all(sapply(varlist, ismat))) {
 ??????????????? # A list of matrices
 ??????????????? if (nrandom >1)
 ??????????????????? stop(paste("An unlabeled list of matrices is",
 ?????????????????????????????? "ambiguous when there are multiple random terms"))
 ??????????????? else varlist <- list(coxmeMlist(varlist))
 ??????????? }
 ??????????? else {? #the user gave me a list, not all matrices
 ??????????????? for (i in 1:length(varlist)) {
 ??????????????????? if (is.function(varlist[[i]]))
 ??????????????????????? varlist[[i]] <-varlist[[i]]()
 ??????????????????? if (ismat(varlist[[i]]))
 ??????????????????????? varlist[[i]] <- coxmeMlist(list(varlist[[i]]))
 ??????????????????? if (class(varlist[[i]]) != 'coxmevar') {
 ??????????????????????? if (is.list(varlist[[i]])) {
 ??????????????????????????? if (all(sapply(varlist[[i]], ismat)))
 ??????????????????????????????? varlist[[i]] <- coxmeMlist(varlist[[i]])
 ??????????????????????????? else stop("Invalid varlist element")
 ??????????????????????? }
 ??????????????????????? else stop("Invalid varlist element")
 ??????????????????? }
 ??????????????? }
 ??????????? }
 ??????? }
 ??????? while(length(varlist) < nrandom) varlist <- c(varlist, list(coxmeFull()))
 ??? }


	[[alternative HTML version deleted]]


From therne@u @end|ng |rom m@yo@edu  Mon Jan 13 17:46:18 2020
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Mon, 13 Jan 2020 10:46:18 -0600
Subject: [Rd] as-cran issue
In-Reply-To: <24092.39223.677206.772099@rob.eddelbuettel.com>
References: <28fddd$d2evua@ironport10.mayo.edu>
 <24092.39223.677206.772099@rob.eddelbuettel.com>
Message-ID: <28fddd$d2fh9r@ironport10.mayo.edu>

Thanks for the feedback Dirk.   I sent my follow-up before I saw it.

Looking at the source code, it appears that there is no options() call to turn this on. 
Nor does "R --help" reveal a command line option.
How then does a user turn this on outside of the R CMD check envirionment, so as to chase 
things like this down?

The fact that 1. renaming my function makes the error go away, 2. my function is just a 
wrapper to inherits(), and 3. its a new error in code that hasn't changed, all point me 
towards some oddity with the check function.

Terry


On 1/13/20 10:22 AM, Dirk Eddelbuettel wrote:
> 
> On 13 January 2020 at 10:02, Therneau, Terry M., Ph.D. via R-devel wrote:
> | Where can I find out (and replicate) what options as-cran turns on?
> 
> See the file src/library/tools/R/check.R in the R sources, and grep for
> as_cran which is the internal variable controlled by the --as-cran option
> 
> [...]
> 
> | The check log contains multiple instances of the lines below:
> |
> | < Warning message:
> | < In if (ismat(kmat)) { :
> | <?? the condition has length > 1 and only the first element will be used
> |
> | I don't see how the error could arise, but if I know what as-cran is doing perhaps I can
> | replicate it.
> 
> This was widely discussed on this list and should also be in the NEWS file.
> 
> The change is about what the message says: the if () tests a scalar logical,
> it appears that ismat(kmat) returns more than a scalar.
> 
> There has always been an opt-in for this to error -- cf many messages by Henrik
> over the years as he tried to convince us all to use it more.
> 
> 
> Dirk
>


From bbo|ker @end|ng |rom gm@||@com  Mon Jan 13 17:49:09 2020
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Mon, 13 Jan 2020 11:49:09 -0500
Subject: [Rd] as-cran issue
In-Reply-To: <28fddd$d2fh9r@ironport10.mayo.edu>
References: <28fddd$d2evua@ironport10.mayo.edu>
 <24092.39223.677206.772099@rob.eddelbuettel.com>
 <28fddd$d2fh9r@ironport10.mayo.edu>
Message-ID: <31cc1c66-dad4-96ee-d5df-2ac1d86215b6@gmail.com>

  From R NEWS (changes in 3.6.0)

Experimentally, setting environment variable _R_CHECK_LENGTH_1_LOGIC2_
will lead to warnings (or errors if the variable is set to a ?true?
value) when && or || encounter and use arguments of length more than one.

On 2020-01-13 11:46 a.m., Therneau, Terry M., Ph.D. via R-devel wrote:
> Thanks for the feedback Dirk.?? I sent my follow-up before I saw it.
> 
> Looking at the source code, it appears that there is no options() call
> to turn this on. Nor does "R --help" reveal a command line option.
> How then does a user turn this on outside of the R CMD check
> envirionment, so as to chase things like this down?
> 
> The fact that 1. renaming my function makes the error go away, 2. my
> function is just a wrapper to inherits(), and 3. its a new error in code
> that hasn't changed, all point me towards some oddity with the check
> function.
> 
> Terry
> 
> 
> On 1/13/20 10:22 AM, Dirk Eddelbuettel wrote:
>>
>> On 13 January 2020 at 10:02, Therneau, Terry M., Ph.D. via R-devel wrote:
>> | Where can I find out (and replicate) what options as-cran turns on?
>>
>> See the file src/library/tools/R/check.R in the R sources, and grep for
>> as_cran which is the internal variable controlled by the --as-cran option
>>
>> [...]
>>
>> | The check log contains multiple instances of the lines below:
>> |
>> | < Warning message:
>> | < In if (ismat(kmat)) { :
>> | <?? the condition has length > 1 and only the first element will be
>> used
>> |
>> | I don't see how the error could arise, but if I know what as-cran is
>> doing perhaps I can
>> | replicate it.
>>
>> This was widely discussed on this list and should also be in the NEWS
>> file.
>>
>> The change is about what the message says: the if () tests a scalar
>> logical,
>> it appears that ismat(kmat) returns more than a scalar.
>>
>> There has always been an opt-in for this to error -- cf many messages
>> by Henrik
>> over the years as he tried to convince us all to use it more.
>>
>>
>> Dirk
>>
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Jan 13 18:02:08 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 13 Jan 2020 12:02:08 -0500
Subject: [Rd] as-cran issue
In-Reply-To: <28fddd$d2evua@ironport10.mayo.edu>
References: <28fddd$d2evua@ironport10.mayo.edu>
Message-ID: <4d4df998-9a1c-ce8b-7abf-7c4bc476165f@gmail.com>

On 13/01/2020 11:02 a.m., Therneau, Terry M., Ph.D. via R-devel wrote:
> Where can I find out (and replicate) what options as-cran turns on?
> 
> The issue: the following lines generate an error in R CMD check --as-cran? for coxme.? But
> there is no error without as-cran nor is there one when I run the code in a terminal window.
> 
> ismat <- function(x)? inherits(x, "matrix") || inherits(x, "bdsmatrix") || inherits(x,
> "Matrix")
> if (ismat(kmat)? ) ....
> 
> (The second line is repeated multiple times for multiple arguments.? The ismat function is
> defined simply to save typing.)
> 
> The check log contains multiple instances of the lines below:
> 
> < Warning message:
> < In if (ismat(kmat)) { :
> <?? the condition has length > 1 and only the first element will be used
> 
> I don't see how the error could arise, but if I know what as-cran is doing perhaps I can
> replicate it.
> 
>   >sessionInfo()
> R Under development (unstable) (2020-01-13 r77659)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Ubuntu 18.04.3 LTS
> 
> Matrix products: default
> BLAS:?? /usr/local/src/R-devel/lib/libRblas.so
> LAPACK: /usr/local/src/R-devel/lib/libRlapack.so
> 
> locale:
>   ?[1] LC_CTYPE=en_US.UTF-8?????? LC_NUMERIC=C
>   ?[3] LC_TIME=en_US.UTF-8??????? LC_COLLATE=C
>   ?[5] LC_MONETARY=en_US.UTF-8??? LC_MESSAGES=en_US.UTF-8
>   ?[7] LC_PAPER=en_US.UTF-8?????? LC_NAME=C
>   ?[9] LC_ADDRESS=C?????????????? LC_TELEPHONE=C
> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C
> 
> attached base packages:
> [1] stats???? graphics? grDevices utils???? datasets? methods base
> 
> loaded via a namespace (and not attached):
> [1] compiler_4.0.0 tools_4.0.0

You have ismat() defined in two places in the package.  In the 
definition in coxme.R, you've got a typo:

     ismat <- function (x) {
         inherits(x, "matrix") || inherits(x, "bdsmatrix") | inherits(x, 
"Matrix")
     }

Notice the "|" instead of "||".  I can't see how this would lead to the 
issue you saw, but it should be fixed.

It's not easy to say what --as-cran does, other than to look at the 
function that implements R CMD check.  That function is the huge 
tools:::.check_packages.  You can run it in an R session using

   options(warn = 2, error = recover)
   tools:::.check_packages(c("--as-cran", "coxme_2.2-14.tar.gz"))

When I do that I get a different error report; it reports this test instead:

    if(class(varlist) == "coxmevar")

That appears in a number of places in the coxme source, and clearly 
needs to be updated to use inherits().

Duncan Murdoch


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Jan 13 18:24:17 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 13 Jan 2020 18:24:17 +0100
Subject: [Rd] as-cran issue ==> set _R_CHECK_LENGTH_1_* settings!
In-Reply-To: <31cc1c66-dad4-96ee-d5df-2ac1d86215b6@gmail.com>
References: <28fddd$d2evua@ironport10.mayo.edu>
 <24092.39223.677206.772099@rob.eddelbuettel.com>
 <28fddd$d2fh9r@ironport10.mayo.edu>
 <31cc1c66-dad4-96ee-d5df-2ac1d86215b6@gmail.com>
Message-ID: <24092.42945.719678.758685@stat.math.ethz.ch>

>>>>> Ben Bolker 
>>>>>     on Mon, 13 Jan 2020 11:49:09 -0500 writes:

    > From R NEWS (changes in 3.6.0)
    > Experimentally, setting environment variable _R_CHECK_LENGTH_1_LOGIC2_
    > will lead to warnings (or errors if the variable is set to a ?true?
    > value) when && or || encounter and use arguments of length more than one.

Indeed,  thank you, Ben.

Note (Dirk) this is not just something 
  "by Henrik (..) as he tried to convince us all to use it more"

I've activated this (and the other
  _R_CHECK_LENGTH_1_CONDITION_ ! )
for years (maybe not many years, it just feels like it), and *EVERY TIME*
it triggers, it's been revealing a programmeR's thinko / bug / ..,
something where the code was clearly suboptimal and should've been improved.
(Unfortunately, the bug has often been in packages, and sometimes I had to
 disable the setting when I wanted that "buggy" package to work ..)

Occasionally being puristic, let me state this:
   __________________________________________________________________
  /------------------------------------------------------------------\
  |                                                                  | 
  | Every careful R programmer should use (something like "true",    | 
  | "verbose", or even package=... )                                 | 
  |                                                                  | 
  | export _R_CHECK_LENGTH_1_CONDITION_=true                         | 
  | export _R_CHECK_LENGTH_1_LOGIC2_=verbose                         | 
  |                                                                  | 
  | in her/his ~/.profile equivalent (*)                             | 
  \__________________________________________________________________/


*) well assuming a careful R programmer would never develop on
   Windows anyway (where you need different means to set such
   environment variables). 



    > On 2020-01-13 11:46 a.m., Therneau, Terry M., Ph.D. via R-devel wrote:
    >> Thanks for the feedback Dirk.?? I sent my follow-up before I saw it.
    >> 
    >> Looking at the source code, it appears that there is no options() call
    >> to turn this on. Nor does "R --help" reveal a command line option.
    >> How then does a user turn this on outside of the R CMD check
    >> envirionment, so as to chase things like this down?
    >> 
    >> The fact that 1. renaming my function makes the error go away, 2. my
    >> function is just a wrapper to inherits(), and 3. its a new error in code
    >> that hasn't changed, all point me towards some oddity with the check
    >> function.
    >> 
    >> Terry
    >> 
    >> 
    >> On 1/13/20 10:22 AM, Dirk Eddelbuettel wrote:
    >>> 
    >>> On 13 January 2020 at 10:02, Therneau, Terry M., Ph.D. via R-devel wrote:
    >>> | Where can I find out (and replicate) what options as-cran turns on?
    >>> 
    >>> See the file src/library/tools/R/check.R in the R sources, and grep for
    >>> as_cran which is the internal variable controlled by the --as-cran option
    >>> 
    >>> [...]
    >>> 
    >>> | The check log contains multiple instances of the lines below:
    >>> |
    >>> | < Warning message:
    >>> | < In if (ismat(kmat)) { :
    >>> | <?? the condition has length > 1 and only the first element will be
    >>> used
    >>> |
    >>> | I don't see how the error could arise, but if I know what as-cran is
    >>> doing perhaps I can
    >>> | replicate it.
    >>> 
    >>> This was widely discussed on this list and should also be in the NEWS
    >>> file.
    >>> 
    >>> The change is about what the message says: the if () tests a scalar
    >>> logical,
    >>> it appears that ismat(kmat) returns more than a scalar.
    >>> 
    >>> There has always been an opt-in for this to error -- cf many messages
    >>> by Henrik
    >>> over the years as he tried to convince us all to use it more.
    >>> 
    >>> 
    >>> Dirk
    >>> 
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Mon Jan 13 20:38:12 2020
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Mon, 13 Jan 2020 14:38:12 -0500
Subject: [Rd] as-cran issue ==> set _R_CHECK_LENGTH_1_* settings!
In-Reply-To: <24092.42945.719678.758685@stat.math.ethz.ch>
References: <28fddd$d2evua@ironport10.mayo.edu>
 <24092.39223.677206.772099@rob.eddelbuettel.com>
 <28fddd$d2fh9r@ironport10.mayo.edu>
 <31cc1c66-dad4-96ee-d5df-2ac1d86215b6@gmail.com>
 <24092.42945.719678.758685@stat.math.ethz.ch>
Message-ID: <CAL6gwn+CYvZ63ZxreQn0BzLBT-zK2Y0uQ4VNUF0BEKMS3_XtGw@mail.gmail.com>

Those of us stuck on Windows but who attempt to develop properly are
wounded to the quick, sir!

:)

Avi

On Mon, Jan 13, 2020 at 12:24 PM Martin Maechler <maechler at stat.math.ethz.ch>
wrote:

> >>>>> Ben Bolker
> >>>>>     on Mon, 13 Jan 2020 11:49:09 -0500 writes:
>
>     > From R NEWS (changes in 3.6.0)
>     > Experimentally, setting environment variable
> _R_CHECK_LENGTH_1_LOGIC2_
>     > will lead to warnings (or errors if the variable is set to a ?true?
>     > value) when && or || encounter and use arguments of length more than
> one.
>
> Indeed,  thank you, Ben.
>
> Note (Dirk) this is not just something
>   "by Henrik (..) as he tried to convince us all to use it more"
>
> I've activated this (and the other
>   _R_CHECK_LENGTH_1_CONDITION_ ! )
> for years (maybe not many years, it just feels like it), and *EVERY TIME*
> it triggers, it's been revealing a programmeR's thinko / bug / ..,
> something where the code was clearly suboptimal and should've been
> improved.
> (Unfortunately, the bug has often been in packages, and sometimes I had to
>  disable the setting when I wanted that "buggy" package to work ..)
>
> Occasionally being puristic, let me state this:
>    __________________________________________________________________
>   /------------------------------------------------------------------\
>   |                                                                  |
>   | Every careful R programmer should use (something like "true",    |
>   | "verbose", or even package=... )                                 |
>   |                                                                  |
>   | export _R_CHECK_LENGTH_1_CONDITION_=true                         |
>   | export _R_CHECK_LENGTH_1_LOGIC2_=verbose                         |
>   |                                                                  |
>   | in her/his ~/.profile equivalent (*)                             |
>   \__________________________________________________________________/
>
>
> *) well assuming a careful R programmer would never develop on
>    Windows anyway (where you need different means to set such
>    environment variables).
>
>
>
>     > On 2020-01-13 11:46 a.m., Therneau, Terry M., Ph.D. via R-devel
> wrote:
>     >> Thanks for the feedback Dirk.   I sent my follow-up before I saw it.
>     >>
>     >> Looking at the source code, it appears that there is no options()
> call
>     >> to turn this on. Nor does "R --help" reveal a command line option.
>     >> How then does a user turn this on outside of the R CMD check
>     >> envirionment, so as to chase things like this down?
>     >>
>     >> The fact that 1. renaming my function makes the error go away, 2. my
>     >> function is just a wrapper to inherits(), and 3. its a new error in
> code
>     >> that hasn't changed, all point me towards some oddity with the check
>     >> function.
>     >>
>     >> Terry
>     >>
>     >>
>     >> On 1/13/20 10:22 AM, Dirk Eddelbuettel wrote:
>     >>>
>     >>> On 13 January 2020 at 10:02, Therneau, Terry M., Ph.D. via R-devel
> wrote:
>     >>> | Where can I find out (and replicate) what options as-cran turns
> on?
>     >>>
>     >>> See the file src/library/tools/R/check.R in the R sources, and
> grep for
>     >>> as_cran which is the internal variable controlled by the --as-cran
> option
>     >>>
>     >>> [...]
>     >>>
>     >>> | The check log contains multiple instances of the lines below:
>     >>> |
>     >>> | < Warning message:
>     >>> | < In if (ismat(kmat)) { :
>     >>> | <   the condition has length > 1 and only the first element will
> be
>     >>> used
>     >>> |
>     >>> | I don't see how the error could arise, but if I know what
> as-cran is
>     >>> doing perhaps I can
>     >>> | replicate it.
>     >>>
>     >>> This was widely discussed on this list and should also be in the
> NEWS
>     >>> file.
>     >>>
>     >>> The change is about what the message says: the if () tests a scalar
>     >>> logical,
>     >>> it appears that ismat(kmat) returns more than a scalar.
>     >>>
>     >>> There has always been an opt-in for this to error -- cf many
> messages
>     >>> by Henrik
>     >>> over the years as he tried to convince us all to use it more.
>     >>>
>     >>>
>     >>> Dirk
>     >>>
>     >>
>     >> ______________________________________________
>     >> R-devel at r-project.org mailing list
>     >> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>     > ______________________________________________
>     > R-devel at r-project.org mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>
-- 
Sent from Gmail Mobile

	[[alternative HTML version deleted]]


From therne@u @end|ng |rom m@yo@edu  Mon Jan 13 21:51:19 2020
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Mon, 13 Jan 2020 14:51:19 -0600
Subject: [Rd] as-cran issue, SOLVED
In-Reply-To: <4d4df998-9a1c-ce8b-7abf-7c4bc476165f@gmail.com>
References: <28fddd$d2evua@ironport10.mayo.edu>
 <4d4df998-9a1c-ce8b-7abf-7c4bc476165f@gmail.com>
Message-ID: <28fddd$d2i78g@ironport10.mayo.edu>

Thank you to all who replied with helpful suggestions.?? I had to run off to meetings and 
talks for a bit so am now processing it all.

1. It turns out that the issue was not with coxme, but with bsdmatrix, a package that 
coxme calls.? It just happens to have a function ismat() with the same general purpose and 
some similar variable names, which led me down the rabbit hole.?? That package contained a 
"class(x) == " flaw, now fixed.?? (The fact that bdsmatrix has been stable and unchanged 
for nearly a decade helped with the deception.)

2. As pointed out by Duncan and Kurt, the coxme function also had a class(x)== flaw.? None 
of my test cases triggered this, but since 'x' is an argument that can be supplied by a 
user, it certainly would have happened in package use.? Good catch.

3. Dirk gave good input about the flags in R CMD check and how to find them.?? One more 
line in the "Writing R Extensions" manual would have been helpful, namely that many of the 
options are NOT available in the options() command nor as arguments to R.??? As near as I 
can tell, there is no way to turn on these logic checks within a standard R session.?? A 
desire to do this is where I started: I would have set options(warn=2, error=recover) and 
found the actual offender in a few minutes; and never had to bother all you worthy readers.

4. I agree completely with Martin that errors like this should not be ignored.? In fact, 
except for? "variable may be used before initialized" messages from the C compiler, I have 
become grateful for EVERY complaint that comes out R CMD check.?? Notice the verb "have 
become" -- I did not start out so enthusiastic.

Again, thanks for the help.

Terry T.




	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Mon Jan 13 22:18:57 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Mon, 13 Jan 2020 15:18:57 -0600
Subject: [Rd] as-cran issue, SOLVED
In-Reply-To: <28fddd$d2i78e@ironport10.mayo.edu>
References: <28fddd$d2evua@ironport10.mayo.edu>
 <4d4df998-9a1c-ce8b-7abf-7c4bc476165f@gmail.com>
 <28fddd$d2i78e@ironport10.mayo.edu>
Message-ID: <24092.57025.339926.171914@rob.eddelbuettel.com>


On 13 January 2020 at 14:51, Therneau, Terry M., Ph.D. wrote:
| 3. Dirk gave good input about the flags in R CMD check and how to find them.?? One more 
| line in the "Writing R Extensions" manual would have been helpful, namely that many of the 
| options are NOT available in the options() command nor as arguments to R.??? As near as I 
| can tell, there is no way to turn on these logic checks within a standard R session.?? A 

Section 8 of R Internals:

   8 Tools
   *******

   The behavior of 'R CMD check' can be controlled through a variety of
   command line arguments and environment variables.

   [...]


or online at

   https://cran.r-project.org/doc/manuals/r-release/R-ints.html#Tools


Also, if I may, and as I may not have been clear enough earlier (as it
confused at least Martin): these "rolling" tightenings of "standards" and
tests are IMHO one the many rather clever "devices" R Core and CRAN use to
keep improving the quality of the code we all produce.  It's a good thing.

That said, and just like Terry, I have also searched many times for these
variables, and part of me thinks that it a crime that the material is spread
over (at least) three different manuals but _c'est la vie_. Until we get a
dedicated volunteer editor, or, deity forbid we decide to spend some
(collective) money on professional documentation.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


