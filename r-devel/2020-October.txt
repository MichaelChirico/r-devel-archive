From k@@perd@n|e|h@n@en @end|ng |rom gm@||@com  Thu Oct  1 20:31:12 2020
From: k@@perd@n|e|h@n@en @end|ng |rom gm@||@com (Kasper Daniel Hansen)
Date: Thu, 1 Oct 2020 20:31:12 +0200
Subject: [Rd] timezone tests and R-devel
Message-ID: <CAC2h7utR775fMZfFv50Zg9SC8fpoZq=sWcQyOEZKOhJnupabUA@mail.gmail.com>

The return value of Sys.time() today with a timezone of US/Eastern is
unchanged between 4.0.3-patched and devel, but on devel the following test
fails
  all.equal(x, as.POSIXlt(x))
with
  x = Sys.time()

This means that devel does not complete make tests (failure on
tests/reg-tests-2.R)

It is entirely possible that it is an error on my end, I use
  export TZ="US/Eastern"
but I have been using this for a while, and R-4.0.3-patched built today
passes make tests.

Details below, and I am happy to provide more information.

Build platform: inside a conda environment on linux. I have been doing this
for a while, but it is certainly a non-standard setup. GCC 7.3

Best,
Kasper

On R version 4.0.3 beta (2020-10-01 r79286) I get

> x = Sys.time()
> attributes(x)
$class
[1] "POSIXct" "POSIXt"

> attributes(as.POSIXlt(x))
$names
 [1] "sec"    "min"    "hour"   "mday"   "mon"    "year"   "wday"   "yday"
 [9] "isdst"  "zone"   "gmtoff"

$class
[1] "POSIXlt" "POSIXt"

$tzone
[1] "US/Eastern" "EST"        "EDT"

> all.equal(x, as.POSIXlt(x))
[1] TRUE

On R Under development (unstable) (2020-10-01 r79286) I get
> x = Sys.time()
> all.equal(x,x)
[1] TRUE
> attributes(as.POSIXlt(x))
$names
 [1] "sec"    "min"    "hour"   "mday"   "mon"    "year"   "wday"   "yday"
 [9] "isdst"  "zone"   "gmtoff"

$class
[1] "POSIXlt" "POSIXt"

$tzone
[1] "US/Eastern" "EST"        "EDT"

> all.equal(x, as.POSIXlt(x))
[1] "'tzone' attributes are inconsistent ('' and 'US/Eastern')"

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Oct  2 09:37:16 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 2 Oct 2020 09:37:16 +0200
Subject: [Rd] timezone tests and R-devel
In-Reply-To: <CAC2h7utR775fMZfFv50Zg9SC8fpoZq=sWcQyOEZKOhJnupabUA@mail.gmail.com>
References: <CAC2h7utR775fMZfFv50Zg9SC8fpoZq=sWcQyOEZKOhJnupabUA@mail.gmail.com>
Message-ID: <24438.55468.345544.482717@stat.math.ethz.ch>

>>>>> Kasper Daniel Hansen 
>>>>>     on Thu, 1 Oct 2020 20:31:12 +0200 writes:

    > The return value of Sys.time() today with a timezone of US/Eastern is
    > unchanged between 4.0.3-patched and devel, but on devel the following test
    > fails
    > all.equal(x, as.POSIXlt(x))
    > with
    > x = Sys.time()

    > This means that devel does not complete make tests (failure on
    > tests/reg-tests-2.R)

    > It is entirely possible that it is an error on my end, I use
    > export TZ="US/Eastern"
    > but I have been using this for a while, and R-4.0.3-patched built today
    > passes make tests.

    > Details below, and I am happy to provide more information.

    > Build platform: inside a conda environment on linux. I have been doing this
    > for a while, but it is certainly a non-standard setup. GCC 7.3

    > Best,
    > Kasper

    > On R version 4.0.3 beta (2020-10-01 r79286) I get

    >> x = Sys.time()
    >> attributes(x)
    > $class
    > [1] "POSIXct" "POSIXt"

    >> attributes(as.POSIXlt(x))
    > $names
    > [1] "sec"    "min"    "hour"   "mday"   "mon"    "year"   "wday"   "yday"
    > [9] "isdst"  "zone"   "gmtoff"

    > $class
    > [1] "POSIXlt" "POSIXt"

    > $tzone
    > [1] "US/Eastern" "EST"        "EDT"

    >> all.equal(x, as.POSIXlt(x))
    > [1] TRUE

    > On R Under development (unstable) (2020-10-01 r79286) I get
    >> x = Sys.time()
    >> all.equal(x,x)
    > [1] TRUE
    >> attributes(as.POSIXlt(x))
    > $names
    > [1] "sec"    "min"    "hour"   "mday"   "mon"    "year"   "wday"   "yday"
    > [9] "isdst"  "zone"   "gmtoff"

    > $class
    > [1] "POSIXlt" "POSIXt"

    > $tzone
    > [1] "US/Eastern" "EST"        "EDT"

    >> all.equal(x, as.POSIXlt(x))
    > [1] "'tzone' attributes are inconsistent ('' and 'US/Eastern')"

Yes, this is a new feature, actually a __bug fix__ in R-devel,
see NEWS :

    ? all.equal.POSIXt() no longer warns about and subsequently ignores
      inconsistent "tzone" attributes, but describes the difference in
      its return value (PR#17277).  This check can be disabled _via_
      the new argument check.tzone = FALSE; as suggested by Sebastian
      Meyer.

Here's pure R code for reproducing what you've seen :

x <- structure(1601623657, class = c("POSIXct", "POSIXt"))

Sys.unsetenv("TZ")
all.equal(x, ltx <- as.POSIXlt(x))  # TRUE
attr(ltx, "tzone")  # [1]  "" "CET"  "CEST"

Sys.setenv(TZ = "US/Eastern")
all.equal(x, ltx <- as.POSIXlt(x))
## "'tzone' attributes are inconsistent ('' and 'US/Eastern')"
all.equal(x, ltx, check.tzone = FALSE) # TRUE

Sys.unsetenv("TZ")
all.equal(x, ltx <- as.POSIXlt(x)) # TRUE


From @eb@meyer @end|ng |rom |@u@de  Fri Oct  2 09:48:03 2020
From: @eb@meyer @end|ng |rom |@u@de (Sebastian Meyer)
Date: Fri, 2 Oct 2020 09:48:03 +0200
Subject: [Rd] timezone tests and R-devel
In-Reply-To: <CAC2h7utR775fMZfFv50Zg9SC8fpoZq=sWcQyOEZKOhJnupabUA@mail.gmail.com>
References: <CAC2h7utR775fMZfFv50Zg9SC8fpoZq=sWcQyOEZKOhJnupabUA@mail.gmail.com>
Message-ID: <c60d5ff1-f0de-2129-d9f9-6dc6e7a80e62@fau.de>

Thank you for the report. In R-devel, all.equal.POSIXt() by default
reports inconsistent time zones. Previously,

> x <- Sys.time()
> all.equal(x, as.POSIXlt(x, tz = "EST5EDT"))

would return TRUE. To ignore the time zone attributes in R-devel, the
argument 'check.tzone = FALSE' needs to be used.

That said, I can reproduce the 'make check' failure in R-devel on Ubuntu
Linux when TZ is set, even if it is set to the system time zone:

$ export TZ=Europe/Berlin
$ make check
[...]
> running code in '../../tests/reg-tests-2.R' ... OK
>   comparing 'reg-tests-2.Rout' to '../../tests/reg-tests-2.Rout.save' ...7335c7335
> < [1] "'tzone' attributes are inconsistent ('' and 'Europe/Berlin')"
> ---
>> [1] TRUE


Compare the following two sessions:

> R-devel --vanilla --no-echo -e 'Sys.timezone(); x <- Sys.time(); all.equal(x, as.POSIXlt(x))'
[1] "Europe/Berlin"
[1] TRUE

> TZ='Europe/Berlin' R-devel --vanilla --no-echo -e 'Sys.timezone(); x <- Sys.time(); all.equal(x, as.POSIXlt(x))'
[1] "Europe/Berlin"
[1] "'tzone' attributes are inconsistent ('' and 'Europe/Berlin')"


So as.POSIXlt() sets a 'tzone' attribute if TZ is set, but this
behaviour is not new. Even with old R 3.6.3, I see

> R-3.6.3 --vanilla --slave -e 'attr(as.POSIXlt(Sys.time()), "tzone")'
[1] ""     "CET"  "CEST"

> TZ='Europe/Berlin' R-3.6.3 --vanilla --slave -e 'attr(as.POSIXlt(Sys.time()), "tzone")'
[1] "Europe/Berlin" "CET"           "CEST"

This might be system-specific.

I suggest to modify the test as attached for make check to pass in this
setting.

Best regards,

	Sebastian


Am 01.10.20 um 20:31 schrieb Kasper Daniel Hansen:
> The return value of Sys.time() today with a timezone of US/Eastern is
> unchanged between 4.0.3-patched and devel, but on devel the following test
> fails
>   all.equal(x, as.POSIXlt(x))
> with
>   x = Sys.time()
> 
> This means that devel does not complete make tests (failure on
> tests/reg-tests-2.R)
> 
> It is entirely possible that it is an error on my end, I use
>   export TZ="US/Eastern"
> but I have been using this for a while, and R-4.0.3-patched built today
> passes make tests.
> 
> Details below, and I am happy to provide more information.
> 
> Build platform: inside a conda environment on linux. I have been doing this
> for a while, but it is certainly a non-standard setup. GCC 7.3
> 
> Best,
> Kasper
> 
> On R version 4.0.3 beta (2020-10-01 r79286) I get
> 
>> x = Sys.time()
>> attributes(x)
> $class
> [1] "POSIXct" "POSIXt"
> 
>> attributes(as.POSIXlt(x))
> $names
>  [1] "sec"    "min"    "hour"   "mday"   "mon"    "year"   "wday"   "yday"
>  [9] "isdst"  "zone"   "gmtoff"
> 
> $class
> [1] "POSIXlt" "POSIXt"
> 
> $tzone
> [1] "US/Eastern" "EST"        "EDT"
> 
>> all.equal(x, as.POSIXlt(x))
> [1] TRUE
> 
> On R Under development (unstable) (2020-10-01 r79286) I get
>> x = Sys.time()
>> all.equal(x,x)
> [1] TRUE
>> attributes(as.POSIXlt(x))
> $names
>  [1] "sec"    "min"    "hour"   "mday"   "mon"    "year"   "wday"   "yday"
>  [9] "isdst"  "zone"   "gmtoff"
> 
> $class
> [1] "POSIXlt" "POSIXt"
> 
> $tzone
> [1] "US/Eastern" "EST"        "EDT"
> 
>> all.equal(x, as.POSIXlt(x))
> [1] "'tzone' attributes are inconsistent ('' and 'US/Eastern')"
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: all.equal.POSIXt-test.diff
Type: text/x-patch
Size: 910 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20201002/475d08fb/attachment.bin>

From k@@perd@n|e|h@n@en @end|ng |rom gm@||@com  Fri Oct  2 11:28:04 2020
From: k@@perd@n|e|h@n@en @end|ng |rom gm@||@com (Kasper Daniel Hansen)
Date: Fri, 2 Oct 2020 11:28:04 +0200
Subject: [Rd] timezone tests and R-devel
In-Reply-To: <c60d5ff1-f0de-2129-d9f9-6dc6e7a80e62@fau.de>
References: <CAC2h7utR775fMZfFv50Zg9SC8fpoZq=sWcQyOEZKOhJnupabUA@mail.gmail.com>
 <c60d5ff1-f0de-2129-d9f9-6dc6e7a80e62@fau.de>
Message-ID: <CAC2h7uv=Ks8-8Dm4XbAUOphM3TJc8UJGyD2+DTvVgs6mVDF9Rg@mail.gmail.com>

Yes, the potential issue I see is that
  make check
fails when I explicitly set TZ. However, I set it to be the same as what
the system reports when I login.

Details: The system (RHEL) I am working on has
$ strings /etc/localtime | tail -n 1
EST5EDT,M3.2.0,M11.1.0
$ date +%Z
EDT
$ echo $TZ
US/Eastern



On Fri, Oct 2, 2020 at 9:48 AM Sebastian Meyer <seb.meyer at fau.de> wrote:

> Thank you for the report. In R-devel, all.equal.POSIXt() by default
> reports inconsistent time zones. Previously,
>
> > x <- Sys.time()
> > all.equal(x, as.POSIXlt(x, tz = "EST5EDT"))
>
> would return TRUE. To ignore the time zone attributes in R-devel, the
> argument 'check.tzone = FALSE' needs to be used.
>
> That said, I can reproduce the 'make check' failure in R-devel on Ubuntu
> Linux when TZ is set, even if it is set to the system time zone:
>
> $ export TZ=Europe/Berlin
> $ make check
> [...]
> > running code in '../../tests/reg-tests-2.R' ... OK
> >   comparing 'reg-tests-2.Rout' to '../../tests/reg-tests-2.Rout.save'
> ...7335c7335
> > < [1] "'tzone' attributes are inconsistent ('' and 'Europe/Berlin')"
> > ---
> >> [1] TRUE
>
>
> Compare the following two sessions:
>
> > R-devel --vanilla --no-echo -e 'Sys.timezone(); x <- Sys.time();
> all.equal(x, as.POSIXlt(x))'
> [1] "Europe/Berlin"
> [1] TRUE
>
> > TZ='Europe/Berlin' R-devel --vanilla --no-echo -e 'Sys.timezone(); x <-
> Sys.time(); all.equal(x, as.POSIXlt(x))'
> [1] "Europe/Berlin"
> [1] "'tzone' attributes are inconsistent ('' and 'Europe/Berlin')"
>
>
> So as.POSIXlt() sets a 'tzone' attribute if TZ is set, but this
> behaviour is not new. Even with old R 3.6.3, I see
>
> > R-3.6.3 --vanilla --slave -e 'attr(as.POSIXlt(Sys.time()), "tzone")'
> [1] ""     "CET"  "CEST"
>
> > TZ='Europe/Berlin' R-3.6.3 --vanilla --slave -e
> 'attr(as.POSIXlt(Sys.time()), "tzone")'
> [1] "Europe/Berlin" "CET"           "CEST"
>
> This might be system-specific.
>
> I suggest to modify the test as attached for make check to pass in this
> setting.
>
> Best regards,
>
>         Sebastian
>
>
> Am 01.10.20 um 20:31 schrieb Kasper Daniel Hansen:
> > The return value of Sys.time() today with a timezone of US/Eastern is
> > unchanged between 4.0.3-patched and devel, but on devel the following
> test
> > fails
> >   all.equal(x, as.POSIXlt(x))
> > with
> >   x = Sys.time()
> >
> > This means that devel does not complete make tests (failure on
> > tests/reg-tests-2.R)
> >
> > It is entirely possible that it is an error on my end, I use
> >   export TZ="US/Eastern"
> > but I have been using this for a while, and R-4.0.3-patched built today
> > passes make tests.
> >
> > Details below, and I am happy to provide more information.
> >
> > Build platform: inside a conda environment on linux. I have been doing
> this
> > for a while, but it is certainly a non-standard setup. GCC 7.3
> >
> > Best,
> > Kasper
> >
> > On R version 4.0.3 beta (2020-10-01 r79286) I get
> >
> >> x = Sys.time()
> >> attributes(x)
> > $class
> > [1] "POSIXct" "POSIXt"
> >
> >> attributes(as.POSIXlt(x))
> > $names
> >  [1] "sec"    "min"    "hour"   "mday"   "mon"    "year"   "wday"
>  "yday"
> >  [9] "isdst"  "zone"   "gmtoff"
> >
> > $class
> > [1] "POSIXlt" "POSIXt"
> >
> > $tzone
> > [1] "US/Eastern" "EST"        "EDT"
> >
> >> all.equal(x, as.POSIXlt(x))
> > [1] TRUE
> >
> > On R Under development (unstable) (2020-10-01 r79286) I get
> >> x = Sys.time()
> >> all.equal(x,x)
> > [1] TRUE
> >> attributes(as.POSIXlt(x))
> > $names
> >  [1] "sec"    "min"    "hour"   "mday"   "mon"    "year"   "wday"
>  "yday"
> >  [9] "isdst"  "zone"   "gmtoff"
> >
> > $class
> > [1] "POSIXlt" "POSIXt"
> >
> > $tzone
> > [1] "US/Eastern" "EST"        "EDT"
> >
> >> all.equal(x, as.POSIXlt(x))
> > [1] "'tzone' attributes are inconsistent ('' and 'US/Eastern')"
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 
Best,
Kasper

	[[alternative HTML version deleted]]


From @ndre@@ @end|ng |rom @ker@t|ng@de  Fri Oct  2 19:34:14 2020
From: @ndre@@ @end|ng |rom @ker@t|ng@de (Andreas Kersting)
Date: Fri, 02 Oct 2020 19:34:14 +0200 (CEST)
Subject: [Rd] Specifying C Standard in Package's Makevars File
In-Reply-To: <2c6908ad-a9e9-da16-4c6a-3f8dd7601b4d@stats.ox.ac.uk>
Message-ID: <E1kOOwg-00045W-NW@rmmprod07.runbox>

Thanks, that was very helpful. The C11 features I use do actually work in C99 mode, so I will stick with that. I just thought it was kind of "cleaner" to specify C11 mode when using features from that standard.

2020-09-29 16:35 GMT+02:00 "Prof Brian Ripley" <ripley at stats.ox.ac.uk>:
> On 28/09/2020 12:44, Andreas Kersting wrote:> Hi,
>> > what is the correct way to specify a C standard in a package's Makevars file?
>> > Building a package with e.g. PKG_CFLAGS = -std=gnu11 does work but R CMD check issues a warning:
> 
> for some unstated value of 'work' ...
> 
>> * checking compilation flags in Makevars ... WARNING
>> Non-portable flags in variable 'PKG_CFLAGS':
>>    -std=gnu11
>> > (Same for -std=c11.)
>> > Thanks! Regards,
>> Andreas Kersting
> 
> Those flags are not portable, as 'check' correctly says.  Furthermore, on some platforms there may be no flag which can be added -- R documents that 'CC' specifies a C99 compiler, and that or CC+CFLAGS are likely to specify flags which are incompatible with -std=c11 (true on Solaris where -xc99 is used).
> 
> So, like all such overrides (see 'Writing R Extensions') you need to write a configure script (preferably using autoconf) to
> 
> - select an appropriate C compiler+flags
> - substitute them into src/Makefile.in
> 
> For the new features I have used in C11, all known compilers make them available in C99 mode and a configure script could be used to test for their presence (as R itself does).  That is, it is rare to actually need to specify C11 mode.
> 
> -- 
> Brian D. Ripley,                  ripley at stats.ox.ac.uk
> Emeritus Professor of Applied Statistics, University of Oxford
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 

From pd@me@ @end|ng |rom cb@@dk  Mon Oct  5 13:20:54 2020
From: pd@me@ @end|ng |rom cb@@dk (Peter Dalgaard)
Date: Mon, 5 Oct 2020 11:20:54 +0000
Subject: [Rd] R 4.0.3 scheduled for October 10
Message-ID: <89372DD0-8E05-4A32-B87F-3E96246BAA6D@cbs.dk>

[Oops, this apparently got omitted during release scheduling]

Full schedule is available on developer.r-project.org.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From tho@j|eeper @end|ng |rom gm@||@com  Mon Oct  5 18:48:21 2020
From: tho@j|eeper @end|ng |rom gm@||@com (Thomas J. Leeper)
Date: Mon, 5 Oct 2020 17:48:21 +0100
Subject: [Rd] Internet access and R CMD make check-devel
Message-ID: <CAOC91MTUe3Rv2uhv--KQv3bcWGMvWDxswjyFvF3O85UA44dzbw@mail.gmail.com>

I am trying to install R on CentOS (either 7 or 8, behavior is the
same) in an environment behind a firewall and while I am able to run:

R CMD make check

I am unable to run:

R CMD make check-devel

These latter tests fail. The failure occurs in the internet access
if() conditional statement in these two tests:

https://svn.r-project.org/R/trunk/tests/internet.R
https://svn.r-project.org/R/trunk/tests/internet2.R

In my environment, nsl("cran.r-project.org") returns a valid, non-null
value but subsequent commands in those test files do not successfully
access the internet.

I'd like to be able to run the full test suite given I am building
from source. I'm wondering if it's possible to make these conditionals
more strict so that the conditional tests internet access in a manner
more similar to how internet access is used in the tests. Would this
be possible? Or, make tests that require internet access into a
distinct `check-internet` or similar?

As an additional reference, the same conditional statement appears to
also be used in these other tests:

https://svn.r-project.org/R/trunk/tests/CRANtools.R
https://svn.r-project.org/R/trunk/tests/libcurl.R

Thanks,
-Thomas

Thomas J. Leeper


From c@@rd|@g@bor @end|ng |rom gm@||@com  Mon Oct  5 19:18:30 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Mon, 5 Oct 2020 18:18:30 +0100
Subject: [Rd] Internet access and R CMD make check-devel
In-Reply-To: <CAOC91MTUe3Rv2uhv--KQv3bcWGMvWDxswjyFvF3O85UA44dzbw@mail.gmail.com>
References: <CAOC91MTUe3Rv2uhv--KQv3bcWGMvWDxswjyFvF3O85UA44dzbw@mail.gmail.com>
Message-ID: <CABtg=Kmqox1RrO2HYqeLTdy51iB9euPoPuh4-=S4D2LeY278rg@mail.gmail.com>

One way would be to comment out these tests, or really turn off the
internet, and then these tests don't run.

Indeed, a successful DNS query does not mean that you can connect to
the internet in general. FWIW pingr::is_online [1] implements a method
that works well. Apple's Captive Portal test page is the best method
to determine if you are online, in my experience.

[1] https://github.com/cran/pingr/blob/4594ce0cd40b6ba69f1bcc2379e0038c38dd710f/R/ping-package.r#L135

Gabor


On Mon, Oct 5, 2020 at 5:49 PM Thomas J. Leeper <thosjleeper at gmail.com> wrote:
>
> I am trying to install R on CentOS (either 7 or 8, behavior is the
> same) in an environment behind a firewall and while I am able to run:
>
> R CMD make check
>
> I am unable to run:
>
> R CMD make check-devel
>
> These latter tests fail. The failure occurs in the internet access
> if() conditional statement in these two tests:
>
> https://svn.r-project.org/R/trunk/tests/internet.R
> https://svn.r-project.org/R/trunk/tests/internet2.R
>
> In my environment, nsl("cran.r-project.org") returns a valid, non-null
> value but subsequent commands in those test files do not successfully
> access the internet.
>
> I'd like to be able to run the full test suite given I am building
> from source. I'm wondering if it's possible to make these conditionals
> more strict so that the conditional tests internet access in a manner
> more similar to how internet access is used in the tests. Would this
> be possible? Or, make tests that require internet access into a
> distinct `check-internet` or similar?
>
> As an additional reference, the same conditional statement appears to
> also be used in these other tests:
>
> https://svn.r-project.org/R/trunk/tests/CRANtools.R
> https://svn.r-project.org/R/trunk/tests/libcurl.R
>
> Thanks,
> -Thomas
>
> Thomas J. Leeper
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From g@bembecker @end|ng |rom gm@||@com  Mon Oct  5 20:42:44 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Mon, 5 Oct 2020 11:42:44 -0700
Subject: [Rd] Internet access and R CMD make check-devel
In-Reply-To: <CAOC91MTUe3Rv2uhv--KQv3bcWGMvWDxswjyFvF3O85UA44dzbw@mail.gmail.com>
References: <CAOC91MTUe3Rv2uhv--KQv3bcWGMvWDxswjyFvF3O85UA44dzbw@mail.gmail.com>
Message-ID: <CAD4oTHGCO7VtFYqawFAG3GA9Q1m1UWOOgtRTEu04kT2VKNj7KA@mail.gmail.com>

Thomas,

In my experience, as pointed out also by Gabor, its often part of the
devops build process to remove/comment out these tests or otherwise modify
them so that they will pass (if they SHOULD pass) in your environment.

That said, a quick look at the Makefile does suggest that failing on the
internet tests should be "allowed" and not cause the whole process to
return a non-zero value.

I don't have time right this second to test this though. Is that not the
behavior you're seeing in practice? Or do the tests hang so the process
never completes, or...?

Best,
~G

On Mon, Oct 5, 2020 at 9:49 AM Thomas J. Leeper <thosjleeper at gmail.com>
wrote:

> I am trying to install R on CentOS (either 7 or 8, behavior is the
> same) in an environment behind a firewall and while I am able to run:
>
> R CMD make check
>
> I am unable to run:
>
> R CMD make check-devel
>
> These latter tests fail. The failure occurs in the internet access
> if() conditional statement in these two tests:
>
> https://svn.r-project.org/R/trunk/tests/internet.R
> https://svn.r-project.org/R/trunk/tests/internet2.R
>
> In my environment, nsl("cran.r-project.org") returns a valid, non-null
> value but subsequent commands in those test files do not successfully
> access the internet.
>
> I'd like to be able to run the full test suite given I am building
> from source. I'm wondering if it's possible to make these conditionals
> more strict so that the conditional tests internet access in a manner
> more similar to how internet access is used in the tests. Would this
> be possible? Or, make tests that require internet access into a
> distinct `check-internet` or similar?
>
> As an additional reference, the same conditional statement appears to
> also be used in these other tests:
>
> https://svn.r-project.org/R/trunk/tests/CRANtools.R
> https://svn.r-project.org/R/trunk/tests/libcurl.R
>
> Thanks,
> -Thomas
>
> Thomas J. Leeper
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From tho@j|eeper @end|ng |rom gm@||@com  Mon Oct  5 21:42:56 2020
From: tho@j|eeper @end|ng |rom gm@||@com (Thomas J. Leeper)
Date: Mon, 5 Oct 2020 20:42:56 +0100
Subject: [Rd] Internet access and R CMD make check-devel
In-Reply-To: <CAD4oTHGCO7VtFYqawFAG3GA9Q1m1UWOOgtRTEu04kT2VKNj7KA@mail.gmail.com>
References: <CAOC91MTUe3Rv2uhv--KQv3bcWGMvWDxswjyFvF3O85UA44dzbw@mail.gmail.com>
 <CAD4oTHGCO7VtFYqawFAG3GA9Q1m1UWOOgtRTEu04kT2VKNj7KA@mail.gmail.com>
Message-ID: <CAOC91MSu5Pahgw5CEA_TJgXhdLhELLou9Ed8zGxkGAswH8fn6w@mail.gmail.com>

Thanks, Gabe and Gabor.

In my case it causes a non-zero status and fails the check-devel step.

I?ll definitely fall back to modifying the code but it doesn?t seem like
this is exactly the intended behavior of the tests.

-Thomas

El El lun, 5 oct 2020 a las 19:42, Gabriel Becker <gabembecker at gmail.com>
escribi?:

> Thomas,
>
> In my experience, as pointed out also by Gabor, its often part of the
> devops build process to remove/comment out these tests or otherwise modify
> them so that they will pass (if they SHOULD pass) in your environment.
>
> That said, a quick look at the Makefile does suggest that failing on the
> internet tests should be "allowed" and not cause the whole process to
> return a non-zero value.
>
> I don't have time right this second to test this though. Is that not the
> behavior you're seeing in practice? Or do the tests hang so the process
> never completes, or...?
>
> Best,
> ~G
>
> On Mon, Oct 5, 2020 at 9:49 AM Thomas J. Leeper <thosjleeper at gmail.com>
> wrote:
>
>> I am trying to install R on CentOS (either 7 or 8, behavior is the
>> same) in an environment behind a firewall and while I am able to run:
>>
>> R CMD make check
>>
>> I am unable to run:
>>
>> R CMD make check-devel
>>
>> These latter tests fail. The failure occurs in the internet access
>> if() conditional statement in these two tests:
>>
>> https://svn.r-project.org/R/trunk/tests/internet.R
>> https://svn.r-project.org/R/trunk/tests/internet2.R
>>
>> In my environment, nsl("cran.r-project.org") returns a valid, non-null
>> value but subsequent commands in those test files do not successfully
>> access the internet.
>>
>> I'd like to be able to run the full test suite given I am building
>> from source. I'm wondering if it's possible to make these conditionals
>> more strict so that the conditional tests internet access in a manner
>> more similar to how internet access is used in the tests. Would this
>> be possible? Or, make tests that require internet access into a
>> distinct `check-internet` or similar?
>>
>> As an additional reference, the same conditional statement appears to
>> also be used in these other tests:
>>
>> https://svn.r-project.org/R/trunk/tests/CRANtools.R
>> https://svn.r-project.org/R/trunk/tests/libcurl.R
>>
>> Thanks,
>> -Thomas
>>
>> Thomas J. Leeper
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> --

Thomas J. Leeper
http://www.thomasleeper.com

	[[alternative HTML version deleted]]


From @ndre@@@b|@ette @end|ng |rom un|-due@de  Mon Oct  5 22:47:01 2020
From: @ndre@@@b|@ette @end|ng |rom un|-due@de (=?utf-8?B?QmzDpHR0ZSwgQW5kcmVhcw==?=)
Date: Mon, 5 Oct 2020 20:47:01 +0000
Subject: [Rd] S4 - inheritance changed by order of setClassUnion and setAs()
Message-ID: <98CDF167-D285-4074-BD2B-41BDC595599F@uni-due.de>

Dear colleagues,

there is a behaviour with S4 (virtual) classes that I find  very hard to understand: Depending on the position
of setAs(), the tree of inheritance changes.

This is my baseline example that defines the classes "grandma", "mother", "daughter" and a virtual
class "mr_x". For a new instance if "daughter", "mr_x" is betweeen "mother" and "grandma".

setClass("grandma", slots = c(a = "character"))
setClass("mother", slots = c(b = "matrix"), contains = "grandma")
setClass("daughter", slots = c(c = "list"), contains = "mother")
setClassUnion(name = "mr_x", members = c("daughter", "mother"))
setAs(from = "daughter", to = "grandma", def = function(from) new("grandma"))
is(new("daughter"))

[1] "daughter" "mother"   "mr_x"     "grandma"

Yet if I change the order of setAs() and setClassUnion(), this alters the pattern of inheritance.

setClass("grandma", slots = c(a = "character"))
setClass("mother", slots = c(b = "matrix"), contains = "grandma")
setClass("daughter", slots = c(c = "list"), contains = "mother")
setAs(from = "daughter", to = "grandma", def = function(from) new("grandma"))
setClassUnion(name = "mr_x", members = c("daughter", "mother"))
is(new("daughter"))

[1] "daughter" "mother"   "grandma"  "mr_x"

Is there a reasonable explanation for this behavior? I could not find any and I would appreciate
your help. If it is not an unintended behavior, I find it very confusing and hard to anticipate.

Kind regads
Andreas

--
Prof. Dr. Andreas Bl?tte
Professor of Public Policy and Regional Politics
University of Duisburg-Essen

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Tue Oct  6 02:02:07 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Mon, 5 Oct 2020 17:02:07 -0700
Subject: [Rd] 
 S4 - inheritance changed by order of setClassUnion and setAs()
In-Reply-To: <98CDF167-D285-4074-BD2B-41BDC595599F@uni-due.de>
References: <98CDF167-D285-4074-BD2B-41BDC595599F@uni-due.de>
Message-ID: <CAD4oTHFGDvss2HL1ksxncYPp-bcH2LZR2iCMMurcsy89Xo3pBQ@mail.gmail.com>

Andreas,

As far as I can tell (/conjecture), this is because the list of classes a
particular class inherits from directly is appended to as needed, and so
the order that a class extends others isd refined by the order that those
connections are defined.

We can see this with two setClassUnion calls, rather than required setAs:

> setClass("grandma", slots = c(a = "character"))

> setClass("mother", slots = c(b = "matrix"), contains = "grandma")

> setClass("daughter", slots = c(c = "list"), contains = "mother")

> setClassUnion(name = "mr_x", members = c("daughter", "mother"))

> setClassUnion(name = "mr_y", members = c("daughter", "mother"))

> getClass("daughter")

Class "daughter" [in ".GlobalEnv"]


Slots:



Name:          c         b         a

Class:      list    matrix character


Extends:

Class "mother", directly

Class "mr_x", directly

Class "mr_y", directly

Class "grandma", by class "mother", distance 2

> setClass("grandma2", slots = c(a = "character"))

> setClass("mother2", slots = c(b = "matrix"), contains = "grandma2")

> setClass("daughter2", slots = c(c = "list"), contains = "mother2")

> setClassUnion(name = "mr_y2", members = c("daughter2", "mother2"))

> setClassUnion(name = "mr_x2", members = c("daughter2", "mother2"))

> getClass("daughter2")

Class "daughter2" [in ".GlobalEnv"]


Slots:



Name:          c         b         a

Class:      list    matrix character


Extends:

Class "mother2", directly

Class "mr_y2", directly

Class "mr_x2", directly

Class "grandma2", by class "mother2", distance 2


Note that mr_y2 appears in the list before mr_x2 the second block. The same
thing is happening with setAs which (somewhat contrary to my expectations,
admittedly) causes extends to consider "daughter" to inherit *directly* from
"grandma" in your example (though it does note its via explicit coercion).

I think the take-away here is that when modifying the class inheritance
structure explicitly, via setClassUnion or setAs (or, I assume, setIs)
order inherently matters.

In fact order also matters for multiple inheritence via the normal contains
mechanism. In practice, how could it not matter?

Multiple inheritence is very powerful but dangerous.

> setClass("person1", slots = c(f = "character"))

> setClass("person2", slots = c(g = "character"))

> setClass("people1",* contains = c("person1", "person2")*)

> getClass("people1")

Class "people1" [in ".GlobalEnv"]


Slots:



Name:          f         g

Class: character character


Extends: "person1", "person2"

> setClass("people2", *contains = c("person2", "person1")*)

> getClass("people2")

Class "people2" [in ".GlobalEnv"]


Slots:



Name:          g         f

Class: character character


Extends: "person2", "person1"

> setGeneric("ohno", function(obj) standardGeneric("ohno")

+ )

[1] "ohno"

> setMethod("ohno", "person1", function(obj) "person1!")

> setMethod("ohno", "person2", function(obj) "person2! Oh No!")

*> ohno(new("people1"))*

*[1] "person1!"*

*> ohno(new("people2"))*

*[1] "person2! Oh No!"*


Not sure if that helps any or not, but thats what I see here. And again, if
I got anything wrong here, someone please correct me :)

Best,
~G

On Mon, Oct 5, 2020 at 1:47 PM Bl?tte, Andreas <andreas.blaette at uni-due.de>
wrote:

> Dear colleagues,
>
> there is a behaviour with S4 (virtual) classes that I find  very hard to
> understand: Depending on the position
> of setAs(), the tree of inheritance changes.
>
> This is my baseline example that defines the classes "grandma", "mother",
> "daughter" and a virtual
> class "mr_x". For a new instance if "daughter", "mr_x" is betweeen
> "mother" and "grandma".
>
> setClass("grandma", slots = c(a = "character"))
> setClass("mother", slots = c(b = "matrix"), contains = "grandma")
> setClass("daughter", slots = c(c = "list"), contains = "mother")
> setClassUnion(name = "mr_x", members = c("daughter", "mother"))
> setAs(from = "daughter", to = "grandma", def = function(from)
> new("grandma"))
> is(new("daughter"))
>
> [1] "daughter" "mother"   "mr_x"     "grandma"
>
> Yet if I change the order of setAs() and setClassUnion(), this alters the
> pattern of inheritance.
>
> setClass("grandma", slots = c(a = "character"))
> setClass("mother", slots = c(b = "matrix"), contains = "grandma")
> setClass("daughter", slots = c(c = "list"), contains = "mother")
> setAs(from = "daughter", to = "grandma", def = function(from)
> new("grandma"))
> setClassUnion(name = "mr_x", members = c("daughter", "mother"))
> is(new("daughter"))
>
> [1] "daughter" "mother"   "grandma"  "mr_x"
>
> Is there a reasonable explanation for this behavior? I could not find any
> and I would appreciate
> your help. If it is not an unintended behavior, I find it very confusing
> and hard to anticipate.
>
> Kind regads
> Andreas
>
> --
> Prof. Dr. Andreas Bl?tte
> Professor of Public Policy and Regional Politics
> University of Duisburg-Essen
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @ndre@@@b|@ette @end|ng |rom un|-due@de  Tue Oct  6 10:30:05 2020
From: @ndre@@@b|@ette @end|ng |rom un|-due@de (=?utf-8?B?QmzDpHR0ZSwgQW5kcmVhcw==?=)
Date: Tue, 6 Oct 2020 08:30:05 +0000
Subject: [Rd] 
 S4 - inheritance changed by order of setClassUnion and setAs()
In-Reply-To: <CAD4oTHFGDvss2HL1ksxncYPp-bcH2LZR2iCMMurcsy89Xo3pBQ@mail.gmail.com>
References: <98CDF167-D285-4074-BD2B-41BDC595599F@uni-due.de>
 <CAD4oTHFGDvss2HL1ksxncYPp-bcH2LZR2iCMMurcsy89Xo3pBQ@mail.gmail.com>
Message-ID: <AEA870C4-FBD1-494C-B431-AE62D78B237A@uni-due.de>

Dear Gabriel,

thank you so much for the scrutiny you took to look into this. Your explanation gives me a much better sense for what may be going on.

Admittedly, I still find it hard to understand why setAs() may have a side effect on inheritance. Looking at the documentation of setAs() again, this is an expected behaviour of setIs(), but not from setAs().

Maybe it makes sense to add a respective explicit explanation in the documentation of setAs()? For the time being, my personal take away is that I will try to circumvent setClassUnion() in combination with setAs().

Thanks again
Andreas

Von: Gabriel Becker <gabembecker at gmail.com>
Datum: Dienstag, 6. Oktober 2020 um 02:02
An: Bl?tte <andreas.blaette at uni-due.de>
Cc: Peter Dalgaard via R-devel <r-devel at r-project.org>
Betreff: Re: [Rd] S4 - inheritance changed by order of setClassUnion and setAs()

Andreas,

As far as I can tell (/conjecture), this is because the list of classes a particular class inherits from directly is appended to as needed, and so the order that a class extends others isd refined by the order that those connections are defined.

We can see this with two setClassUnion calls, rather than required setAs:


> setClass("grandma", slots = c(a = "character"))

> setClass("mother", slots = c(b = "matrix"), contains = "grandma")

> setClass("daughter", slots = c(c = "list"), contains = "mother")

> setClassUnion(name = "mr_x", members = c("daughter", "mother"))

> setClassUnion(name = "mr_y", members = c("daughter", "mother"))

> getClass("daughter")

Class "daughter" [in ".GlobalEnv"]



Slots:



Name:          c         b         a

Class:      list    matrix character



Extends:

Class "mother", directly

Class "mr_x", directly

Class "mr_y", directly

Class "grandma", by class "mother", distance 2

> setClass("grandma2", slots = c(a = "character"))

> setClass("mother2", slots = c(b = "matrix"), contains = "grandma2")

> setClass("daughter2", slots = c(c = "list"), contains = "mother2")

> setClassUnion(name = "mr_y2", members = c("daughter2", "mother2"))

> setClassUnion(name = "mr_x2", members = c("daughter2", "mother2"))

> getClass("daughter2")

Class "daughter2" [in ".GlobalEnv"]



Slots:



Name:          c         b         a

Class:      list    matrix character



Extends:

Class "mother2", directly

Class "mr_y2", directly

Class "mr_x2", directly

Class "grandma2", by class "mother2", distance 2


Note that mr_y2 appears in the list before mr_x2 the second block. The same thing is happening with setAs which (somewhat contrary to my expectations, admittedly) causes extends to consider "daughter" to inherit directly from "grandma" in your example (though it does note its via explicit coercion).


I think the take-away here is that when modifying the class inheritance structure explicitly, via setClassUnion or setAs (or, I assume, setIs) order inherently matters.

In fact order also matters for multiple inheritence via the normal contains mechanism. In practice, how could it not matter?


Multiple inheritence is very powerful but dangerous.



> setClass("person1", slots = c(f = "character"))

> setClass("person2", slots = c(g = "character"))

> setClass("people1", contains = c("person1", "person2"))

> getClass("people1")

Class "people1" [in ".GlobalEnv"]



Slots:



Name:          f         g

Class: character character



Extends: "person1", "person2"

> setClass("people2", contains = c("person2", "person1"))

> getClass("people2")

Class "people2" [in ".GlobalEnv"]



Slots:



Name:          g         f

Class: character character



Extends: "person2", "person1"

> setGeneric("ohno", function(obj) standardGeneric("ohno")

+ )

[1] "ohno"

> setMethod("ohno", "person1", function(obj) "person1!")

> setMethod("ohno", "person2", function(obj) "person2! Oh No!")

> ohno(new("people1"))

[1] "person1!"

> ohno(new("people2"))

[1] "person2! Oh No!"

Not sure if that helps any or not, but thats what I see here. And again, if I got anything wrong here, someone please correct me :)


Best,
~G

On Mon, Oct 5, 2020 at 1:47 PM Bl?tte, Andreas <andreas.blaette at uni-due.de<mailto:andreas.blaette at uni-due.de>> wrote:
Dear colleagues,

there is a behaviour with S4 (virtual) classes that I find  very hard to understand: Depending on the position
of setAs(), the tree of inheritance changes.

This is my baseline example that defines the classes "grandma", "mother", "daughter" and a virtual
class "mr_x". For a new instance if "daughter", "mr_x" is betweeen "mother" and "grandma".

setClass("grandma", slots = c(a = "character"))
setClass("mother", slots = c(b = "matrix"), contains = "grandma")
setClass("daughter", slots = c(c = "list"), contains = "mother")
setClassUnion(name = "mr_x", members = c("daughter", "mother"))
setAs(from = "daughter", to = "grandma", def = function(from) new("grandma"))
is(new("daughter"))

[1] "daughter" "mother"   "mr_x"     "grandma"

Yet if I change the order of setAs() and setClassUnion(), this alters the pattern of inheritance.

setClass("grandma", slots = c(a = "character"))
setClass("mother", slots = c(b = "matrix"), contains = "grandma")
setClass("daughter", slots = c(c = "list"), contains = "mother")
setAs(from = "daughter", to = "grandma", def = function(from) new("grandma"))
setClassUnion(name = "mr_x", members = c("daughter", "mother"))
is(new("daughter"))

[1] "daughter" "mother"   "grandma"  "mr_x"

Is there a reasonable explanation for this behavior? I could not find any and I would appreciate
your help. If it is not an unintended behavior, I find it very confusing and hard to anticipate.

Kind regads
Andreas

--
Prof. Dr. Andreas Bl?tte
Professor of Public Policy and Regional Politics
University of Duisburg-Essen

        [[alternative HTML version deleted]]

______________________________________________
R-devel at r-project.org<mailto:R-devel at r-project.org> mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

	[[alternative HTML version deleted]]


From @zwj|08 @end|ng |rom gm@||@com  Wed Oct  7 13:24:52 2020
From: @zwj|08 @end|ng |rom gm@||@com (Jiefei Wang)
Date: Wed, 7 Oct 2020 19:24:52 +0800
Subject: [Rd] Coercion function does not work for the ALTREP object
Message-ID: <CAGiFhPOeyN=3KgHEhViR7Jj-ckRqt465QDfjKbDHFvOYJkb0aQ@mail.gmail.com>

Hi all,

The coercion function defined for the ALTREP object will not be called by R
when an assignment operation implicitly introduces coercion for a large
ALTREP object.

For example, If I create a vector of length 10, the ALTREP coercion
function seems to work fine.
```
> x <- 1:10
> y <- wrap_altrep(x)
> .Internal(inspect(y))
@0x000000001f9271c0 13 INTSXP g0c0 [REF(2)] I am altrep
> y[1] <- 1.0
Duplicating object
Coercing object
> .Internal(inspect(y))
@0x000000001f927c08 14 REALSXP g0c0 [REF(1)] I am altrep
```

However, if I create a vector of length 1024, R will give me a normal
real-type vector
```
> x <- 1:1024
> y <- wrap_altrep(x)
> .Internal(inspect(y))
@0x000000001f8ddb20 13 INTSXP g0c0 [REF(2)] I am altrep
> y[1] <- 1.0
> .Internal(inspect(y))
@0x000000001f0d72a0 14 REALSXP g0c7 [REF(1)] (len=1024, tl=0) 1,2,3,4,5,...
```

Note that the duplicate function is also called for the first example. It
seems like R completely ignores my ALTREP functions in the second example.
I feel this might be designed on purpose, but I do not understand the
reason behind it. Is there any reason why we are not consistent here? Here
is my session info

sessionInfo()
R Under development (unstable) (2020-09-03 r79126)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 18362)

Best,
Jiefei

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Wed Oct  7 23:04:32 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Wed, 7 Oct 2020 14:04:32 -0700
Subject: [Rd] Coercion function does not work for the ALTREP object
In-Reply-To: <CAGiFhPOeyN=3KgHEhViR7Jj-ckRqt465QDfjKbDHFvOYJkb0aQ@mail.gmail.com>
References: <CAGiFhPOeyN=3KgHEhViR7Jj-ckRqt465QDfjKbDHFvOYJkb0aQ@mail.gmail.com>
Message-ID: <CAD4oTHEERLAPY1Lrd0YoNdQJgfZ7fZr63u++eyJj0w9BFeZDtw@mail.gmail.com>

Jiefei,

Where does the code for your altrep class live?

Thanks,
~G

On Wed, Oct 7, 2020 at 4:25 AM Jiefei Wang <szwjf08 at gmail.com> wrote:

> Hi all,
>
> The coercion function defined for the ALTREP object will not be called by R
> when an assignment operation implicitly introduces coercion for a large
> ALTREP object.
>
> For example, If I create a vector of length 10, the ALTREP coercion
> function seems to work fine.
> ```
> > x <- 1:10
> > y <- wrap_altrep(x)
> > .Internal(inspect(y))
> @0x000000001f9271c0 13 INTSXP g0c0 [REF(2)] I am altrep
> > y[1] <- 1.0
> Duplicating object
> Coercing object
> > .Internal(inspect(y))
> @0x000000001f927c08 14 REALSXP g0c0 [REF(1)] I am altrep
> ```
>
> However, if I create a vector of length 1024, R will give me a normal
> real-type vector
> ```
> > x <- 1:1024
> > y <- wrap_altrep(x)
> > .Internal(inspect(y))
> @0x000000001f8ddb20 13 INTSXP g0c0 [REF(2)] I am altrep
> > y[1] <- 1.0
> > .Internal(inspect(y))
> @0x000000001f0d72a0 14 REALSXP g0c7 [REF(1)] (len=1024, tl=0) 1,2,3,4,5,...
> ```
>
> Note that the duplicate function is also called for the first example. It
> seems like R completely ignores my ALTREP functions in the second example.
> I feel this might be designed on purpose, but I do not understand the
> reason behind it. Is there any reason why we are not consistent here? Here
> is my session info
>
> sessionInfo()
> R Under development (unstable) (2020-09-03 r79126)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 18362)
>
> Best,
> Jiefei
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @zwj|08 @end|ng |rom gm@||@com  Thu Oct  8 07:58:04 2020
From: @zwj|08 @end|ng |rom gm@||@com (Jiefei Wang)
Date: Thu, 8 Oct 2020 13:58:04 +0800
Subject: [Rd] Coercion function does not work for the ALTREP object
In-Reply-To: <CAD4oTHEERLAPY1Lrd0YoNdQJgfZ7fZr63u++eyJj0w9BFeZDtw@mail.gmail.com>
References: <CAGiFhPOeyN=3KgHEhViR7Jj-ckRqt465QDfjKbDHFvOYJkb0aQ@mail.gmail.com>
 <CAD4oTHEERLAPY1Lrd0YoNdQJgfZ7fZr63u++eyJj0w9BFeZDtw@mail.gmail.com>
Message-ID: <CAGiFhPMLVNe7XWEWu=ioBTyq4XKm9A0PQZbj2jHxptO6OR4ikg@mail.gmail.com>

Hi Gabriel, here is a simple package for reproducing the problem.

https://github.com/Jiefei-Wang/testPkg

Best,
Jiefei

On Thu, Oct 8, 2020 at 5:04 AM Gabriel Becker <gabembecker at gmail.com> wrote:

> Jiefei,
>
> Where does the code for your altrep class live?
>
> Thanks,
> ~G
>
> On Wed, Oct 7, 2020 at 4:25 AM Jiefei Wang <szwjf08 at gmail.com> wrote:
>
>> Hi all,
>>
>> The coercion function defined for the ALTREP object will not be called by
>> R
>> when an assignment operation implicitly introduces coercion for a large
>> ALTREP object.
>>
>> For example, If I create a vector of length 10, the ALTREP coercion
>> function seems to work fine.
>> ```
>> > x <- 1:10
>> > y <- wrap_altrep(x)
>> > .Internal(inspect(y))
>> @0x000000001f9271c0 13 INTSXP g0c0 [REF(2)] I am altrep
>> > y[1] <- 1.0
>> Duplicating object
>> Coercing object
>> > .Internal(inspect(y))
>> @0x000000001f927c08 14 REALSXP g0c0 [REF(1)] I am altrep
>> ```
>>
>> However, if I create a vector of length 1024, R will give me a normal
>> real-type vector
>> ```
>> > x <- 1:1024
>> > y <- wrap_altrep(x)
>> > .Internal(inspect(y))
>> @0x000000001f8ddb20 13 INTSXP g0c0 [REF(2)] I am altrep
>> > y[1] <- 1.0
>> > .Internal(inspect(y))
>> @0x000000001f0d72a0 14 REALSXP g0c7 [REF(1)] (len=1024, tl=0)
>> 1,2,3,4,5,...
>> ```
>>
>> Note that the duplicate function is also called for the first example. It
>> seems like R completely ignores my ALTREP functions in the second example.
>> I feel this might be designed on purpose, but I do not understand the
>> reason behind it. Is there any reason why we are not consistent here? Here
>> is my session info
>>
>> sessionInfo()
>> R Under development (unstable) (2020-09-03 r79126)
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>> Running under: Windows 10 x64 (build 18362)
>>
>> Best,
>> Jiefei
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From iuke-tier@ey m@iii@g oii uiow@@edu  Fri Oct  9 00:10:43 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Thu, 8 Oct 2020 17:10:43 -0500 (CDT)
Subject: [Rd] 
 [External] Re: Coercion function does not work for the ALTREP object
In-Reply-To: <CAGiFhPMLVNe7XWEWu=ioBTyq4XKm9A0PQZbj2jHxptO6OR4ikg@mail.gmail.com>
References: <CAGiFhPOeyN=3KgHEhViR7Jj-ckRqt465QDfjKbDHFvOYJkb0aQ@mail.gmail.com>
 <CAD4oTHEERLAPY1Lrd0YoNdQJgfZ7fZr63u++eyJj0w9BFeZDtw@mail.gmail.com>
 <CAGiFhPMLVNe7XWEWu=ioBTyq4XKm9A0PQZbj2jHxptO6OR4ikg@mail.gmail.com>
Message-ID: <alpine.DEB.2.21.2010081658320.29383@luke-Latitude-7480>

For larger atomic vectors (currently >= 64 elements) the complex
assignment process tries to avoid duplicating when only attributes are
updated, This is done with an ALTREP wrapper. The differences in
whether the Duplicate method are called for smaller and larger vectors
are therefore as intended, Ideally there should be no difference for
Coerce. There is a difference because wrappers currently don't
delegate the Coerce method when the wrapped object is an ALTREP. I'll
look into whether that can be addressed without breaking things.

Best,

luke

On Thu, 8 Oct 2020, Jiefei Wang wrote:

> Hi Gabriel, here is a simple package for reproducing the problem.
>
> https://github.com/Jiefei-Wang/testPkg
>
> Best,
> Jiefei
>
> On Thu, Oct 8, 2020 at 5:04 AM Gabriel Becker <gabembecker at gmail.com> wrote:
>
>> Jiefei,
>>
>> Where does the code for your altrep class live?
>>
>> Thanks,
>> ~G
>>
>> On Wed, Oct 7, 2020 at 4:25 AM Jiefei Wang <szwjf08 at gmail.com> wrote:
>>
>>> Hi all,
>>>
>>> The coercion function defined for the ALTREP object will not be called by
>>> R
>>> when an assignment operation implicitly introduces coercion for a large
>>> ALTREP object.
>>>
>>> For example, If I create a vector of length 10, the ALTREP coercion
>>> function seems to work fine.
>>> ```
>>>> x <- 1:10
>>>> y <- wrap_altrep(x)
>>>> .Internal(inspect(y))
>>> @0x000000001f9271c0 13 INTSXP g0c0 [REF(2)] I am altrep
>>>> y[1] <- 1.0
>>> Duplicating object
>>> Coercing object
>>>> .Internal(inspect(y))
>>> @0x000000001f927c08 14 REALSXP g0c0 [REF(1)] I am altrep
>>> ```
>>>
>>> However, if I create a vector of length 1024, R will give me a normal
>>> real-type vector
>>> ```
>>>> x <- 1:1024
>>>> y <- wrap_altrep(x)
>>>> .Internal(inspect(y))
>>> @0x000000001f8ddb20 13 INTSXP g0c0 [REF(2)] I am altrep
>>>> y[1] <- 1.0
>>>> .Internal(inspect(y))
>>> @0x000000001f0d72a0 14 REALSXP g0c7 [REF(1)] (len=1024, tl=0)
>>> 1,2,3,4,5,...
>>> ```
>>>
>>> Note that the duplicate function is also called for the first example. It
>>> seems like R completely ignores my ALTREP functions in the second example.
>>> I feel this might be designed on purpose, but I do not understand the
>>> reason behind it. Is there any reason why we are not consistent here? Here
>>> is my session info
>>>
>>> sessionInfo()
>>> R Under development (unstable) (2020-09-03 r79126)
>>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>>> Running under: Windows 10 x64 (build 18362)
>>>
>>> Best,
>>> Jiefei
>>>
>>>         [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From pd@|gd @end|ng |rom gm@||@com  Sat Oct 10 10:11:50 2020
From: pd@|gd @end|ng |rom gm@||@com (Peter Dalgaard)
Date: Sat, 10 Oct 2020 10:11:50 +0200
Subject: [Rd] R 4.0.3 is released
Message-ID: <67241C9F-68B4-4998-81B6-79019F9AB852@gmail.com>

The build system rolled up R-4.0.3.tar.gz (codename "Bunny-Wunnies Freak Out") this morning.

The list below details the changes in this release.

You can get the source code from

https://cran.r-project.org/src/base/R-4/R-4.0.3.tar.gz

or wait for it to be mirrored at a CRAN site nearer to you.

Binaries for various platforms will appear in due course.


For the R Core Team,

Peter Dalgaard

These are the checksums (md5 and SHA-256) for the freshly created files, in case you wish
to check that they are uncorrupted:

MD5 (AUTHORS) = b9c44f9f78cab3184ad9898bebc854b4
MD5 (COPYING) = eb723b61539feef013de476e68b5c50a
MD5 (COPYING.LIB) = a6f89e2100d9b6cdffcea4f398e37343
MD5 (FAQ) = 5be656453b81e9393e2a0c42688b04b8
MD5 (INSTALL) = 7893f754308ca31f1ccf62055090ad7b
MD5 (NEWS) = 71728ef32a09c5b9df36b496b52d5c8e
MD5 (NEWS.0) = bfcd7c147251b5474d96848c6f57e5a8
MD5 (NEWS.1) = eb78c4d053ec9c32b815cf0c2ebea801
MD5 (NEWS.2) = 496062c138e2def06cebccddfb814ac6
MD5 (NEWS.3) = 012e7f4a80cc8ec947bf3f0ff6117ec8
MD5 (R-latest.tar.gz) = 8ecf46afa36c9aff9904aad5ca422c6d
MD5 (README) = f468f281c919665e276a1b691decbbe6
MD5 (RESOURCES) = 529223fd3ffef95731d0a87353108435
MD5 (THANKS) = 251d20510bfc3cc93b82c5a99f7efcc6
MD5 (VERSION-INFO.dcf) = bfbcfb2f4ef4416b635087160f965904
MD5 (R-4/R-4.0.3.tar.gz) = 8ecf46afa36c9aff9904aad5ca422c6d

2cde824a7b18958e5f06b391c801c8288be0f84fa8934b7ddefef23c67e60c09  AUTHORS
e6d6a009505e345fe949e1310334fcb0747f28dae2856759de102ab66b722cb4  COPYING
6095e9ffa777dd22839f7801aa845b31c9ed07f3d6bf8a26dc5d2dec8ccc0ef3  COPYING.LIB
4390543804392e072378b2d75cd3fb0d57e9885f9dc38ddd5a2ff780487b9d97  FAQ
f87461be6cbaecc4dce44ac58e5bd52364b0491ccdadaf846cb9b452e9550f31  INSTALL
895ba3f810fd33d3be63deb6c4588be1f7ba3f5bf80e10ffeafc194221dd5ba9  NEWS
4e21b62f515b749f80997063fceab626d7258c7d650e81a662ba8e0640f12f62  NEWS.0
12b30c724117b1b2b11484673906a6dcd48a361f69fc420b36194f9218692d01  NEWS.1
e80de410c77f05ff2012fa70051b89119845f734a7fa5c55857e61e4ed7d5f6e  NEWS.2
7201d139947afa52b5e09d26dc01445edf444506264355b2185122bc1ed3dce0  NEWS.3
09983a8a78d5fb6bc45d27b1c55f9ba5265f78fa54a55c13ae691f87c5bb9e0d  R-latest.tar.gz
2fdd3e90f23f32692d4b3a0c0452f2c219a10882033d1774f8cadf25886c3ddc  README
408737572ecc6e1135fdb2cf7a9dbb1a6cb27967c757f1771b8c39d1fd2f1ab9  RESOURCES
c9c7cb32308b4e560a22c858819ade9de524a602abd4e92d1c328c89f8037d73  THANKS
cd9666c09064b120655598c1ac792266ad20adb57c36aab4d094dedc7e480fa6  VERSION-INFO.dcf
09983a8a78d5fb6bc45d27b1c55f9ba5265f78fa54a55c13ae691f87c5bb9e0d  R-4/R-4.0.3.tar.gz

This is the relevant part of the NEWS file

CHANGES IN R 4.0.3:

  NEW FEATURES:

    * On platforms using configure option --with-internal-tzcode,
      additional values "internal" and (on macOS only) "macOS" are
      accepted for the environment variable TZDIR.  (See ?TZDIR.)

      On macOS, "macOS" is used by default if the system timezone
      database is a newer version than that in the R installation.

    * When install.packages(type = "source") fails to find a package in
      a repository it mentions package versions which are excluded by
      their R version requirement and links to hints on why a package
      might not be found.

    * The default value for options("timeout") can be set from
      enviromnent variable R_DEFAULT_INTERNET_TIMEOUT, still defaulting
      to 60 (seconds) if that is not set or invalid.

      This may be needed when child R processes are doing downloads,
      for example during the installation of source packages which
      download jars or other forms of data.

  LINK-TIME OPTIMIZATION on a UNIX-ALIKE:

    * There is now support for parallelized Link-Time Optimization
      (LTO) with GCC and for 'thin' LTO with clang _via_ setting the
      LTO macro.

    * There is support for setting a different LTO flag for the Fortran
      compiler, including to empty when mixing clang and gfortran (as
      on macOS).  See file config.site.

    * There is a new LTO_LD macro to set linker options for LTO
      compilation, for example to select an alternative linker or to
      parallelize thin LTO.

  DEPRECATED AND DEFUNCT:

    * The LINPACK argument to chol.default(), chol2inv(),
      solve.default() and svd() has been defunct since R 3.1.0.  Using
      it now gives a warning which will become an error in R 4.1.0.

  BUG FIXES:

    * The code mitigating stack overflow with PCRE regexps on very long
      strings is enabled for PCRE2 < 10.30 also when JIT is enabled,
      since stack overflows have been seen in that case.

    * Fix to correctly show the group labels in dotchart() (which where
      lost in the ylab improvement for R 4.0.0).

    * addmargins(*, ..) now also works when fn() is a local function,
      thanks to bug report and patch PR#17124 from Alex Bertram.

    * rank(x) and hence sort(x) now work when x is an object (as per
      is.object(x)) of type "raw" _and_ provides a valid `[` method,
      e.g., for gmp::as.bigz(.) numbers.

    * chisq.test(*, simulate.p.value=TRUE) and r2dtable() now work
      correctly for large table entries (in the millions).  Reported by
      Sebastian Meyer and investigated by more helpers in PR#16184.

    * Low-level socket read/write operations have been fixed to
      correctly signal communication errors. Previously, such errors
      could lead to a segfault due to invalid memory access. Reported
      and debugged by Dmitriy Selivanov in PR#17850.

    * quantile(x, pr) works more consistently for pr values slightly
      outside [0,1], thanks to Suharto Anggono's PR#17891.

      Further, quantile(x, prN, names=FALSE) now works even when prN
      contains NAs, thanks to Anggono's PR#17892.  Ditto for ordered
      factors or Date objects when type = 1 or 3, thanks to PR#17899.

    * Libcurl-based internet access, including curlGetHeaders(), was
      not respecting the "timeout" option.  If this causes
      unanticipated timeouts, consider increasing the default by
      setting R_DEFAULT_INTERNET_TIMEOUT.

    * as.Date(<char>) now also works with an initial "", thanks to
      Michael Chirico's PR#17909.

    * isS3stdGeneric(f) now detects an S3 generic also when it it is
      trace()d, thanks to Gabe Becker's PR#17917.

    * R_allocLD() has been fixed to return memory aligned for long
      double type PR#16534.

    * fisher.test() no longer segfaults when called again after its
      internal stack has been exceeded PR#17904.

    * Accessing a long vector represented by a compact integer sequence
      no longer segfaults (reported and debugged by Hugh Parsonage).

    * duplicated() now works also for strings with multiple encodings
      inside a single vector PR#17809.

    * phyper(11, 15, 0, 12, log.p=TRUE) no longer gives NaN; reported
      as PR#17271 by Alexey Stukalov.

    * Fix incorrect calculation in logLik.nls() PR#16100, patch from
      Sebastian Meyer.

    * A very old bug could cause a segfault in model.matrix() when
      terms involved logical variables.  Part of PR#17879.

    * model.frame.default() allowed data = 1, leading to involuntary
      variable capture (rest of PR#17879).

    * tar() no longer skips non-directory files, thanks to a patch by
      Sebastian Meyer, fixing the remaining part of PR#16716.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


