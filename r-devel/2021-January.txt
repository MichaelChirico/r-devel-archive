From @nto|ne@|@br| @end|ng |rom gm@||@com  Sat Jan  2 20:15:40 2021
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Antoine Fabri)
Date: Sat, 2 Jan 2021 20:15:40 +0100
Subject: [Rd] `merge()` not consistent in how it treats list columns
Message-ID: <CAEKh8ujHeMMYHrN3kZcn5JXxMacs5hOW6cWRB1Z9HGuSKTEMAA@mail.gmail.com>

Dear R-devel,

When trying to merge 2 data frames by an "id" column, with this column a
character in one of them, and a list of character in the other, merge
behaves differently depending which is given first.

Example :

```
df1 <- data.frame(a=1)
df2 <- data.frame(b=2)
df1$id <- "ID"
df2$id <- list("ID")

# these print in a similar way, so the upcoming error will be hard to
diagnose
df1
#>   a id
#> 1 1 ID
df2
#>   b id
#> 1 2 ID

# especially as this works well, df2$id is treated as an atomic vector
merge(df1, df2)
#>   id a b
#> 1 ID 1 2

# But this fails with a cryptic error message
merge(df2, df1)
#> Error in sort.list(bx[m$xi]): 'x' must be atomic for 'sort.list', method
"shell" and "quick"
#> Have you called 'sort' on a list?
```

I believe that if we let it work one way it should work the other, and that
if it works neither an explicit error  mentioning how we can't join by list
column would be helpful.

Many thanks and happy new year to all the R community,

Antoine

	[[alternative HTML version deleted]]


From @v|gro@@ @end|ng |rom ver|zon@net  Sat Jan  2 21:56:35 2021
From: @v|gro@@ @end|ng |rom ver|zon@net (Avi Gross)
Date: Sat, 2 Jan 2021 15:56:35 -0500
Subject: [Rd] `merge()` not consistent in how it treats list columns
In-Reply-To: <CAEKh8ujHeMMYHrN3kZcn5JXxMacs5hOW6cWRB1Z9HGuSKTEMAA@mail.gmail.com>
References: <CAEKh8ujHeMMYHrN3kZcn5JXxMacs5hOW6cWRB1Z9HGuSKTEMAA@mail.gmail.com>
Message-ID: <073f01d6e149$c21226c0$46367440$@verizon.net>

Antoine,

Have you considered converting the non-list to a list explicitly so this
does not matter?

For a long time, few people used lists in this context, albeit in the
tidyverse it is now better supported and probably more common.

This is an area many have found annoying when you have implicit conversions.
What if one ID field was character and the other was numeric? In some
languages the conversion always goes to character (as in R) but in some it
might go numeric in one direction and in some it may refuse and demand you
convert it yourself. 

Do you suggest that a unique solution exists for complex cases so that the
software should know you want to convert a vector to list? What if one side
is a list containing a list containing a list, many levels deep and the
other has no or fewer or more levels. Is it obvious to take the deepest case
and change all others to match? Do you lose things in the process?

When things may not work, sure you can suggest someone change, but you can
consider it as a case where YOU should make sure the types are compatible
before a merge. 



-----Original Message-----
From: R-devel <r-devel-bounces at r-project.org> On Behalf Of Antoine Fabri
Sent: Saturday, January 2, 2021 2:16 PM
To: R-devel <r-devel at r-project.org>
Subject: [Rd] `merge()` not consistent in how it treats list columns

Dear R-devel,

When trying to merge 2 data frames by an "id" column, with this column a
character in one of them, and a list of character in the other, merge
behaves differently depending which is given first.

Example :

```
df1 <- data.frame(a=1)
df2 <- data.frame(b=2)
df1$id <- "ID"
df2$id <- list("ID")

# these print in a similar way, so the upcoming error will be hard to
diagnose
df1
#>   a id
#> 1 1 ID
df2
#>   b id
#> 1 2 ID

# especially as this works well, df2$id is treated as an atomic vector
merge(df1, df2)
#>   id a b
#> 1 ID 1 2

# But this fails with a cryptic error message merge(df2, df1) #> Error in
sort.list(bx[m$xi]): 'x' must be atomic for 'sort.list', method "shell" and
"quick"
#> Have you called 'sort' on a list?
```

I believe that if we let it work one way it should work the other, and that
if it works neither an explicit error  mentioning how we can't join by list
column would be helpful.

Many thanks and happy new year to all the R community,

Antoine

	[[alternative HTML version deleted]]

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From g@bembecker @end|ng |rom gm@||@com  Sun Jan  3 03:58:47 2021
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Sat, 2 Jan 2021 18:58:47 -0800
Subject: [Rd] `merge()` not consistent in how it treats list columns
In-Reply-To: <CAEKh8ujHeMMYHrN3kZcn5JXxMacs5hOW6cWRB1Z9HGuSKTEMAA@mail.gmail.com>
References: <CAEKh8ujHeMMYHrN3kZcn5JXxMacs5hOW6cWRB1Z9HGuSKTEMAA@mail.gmail.com>
Message-ID: <CAD4oTHG2cxgBzYwg1-Rkm3pfVwZ3GzWNv_UTtuFVu-+S+juBVQ@mail.gmail.com>

Hi Antoine,


On Sat, Jan 2, 2021 at 11:16 AM Antoine Fabri <antoine.fabri at gmail.com>
wrote:

> Dear R-devel,
>
> When trying to merge 2 data frames by an "id" column, with this column a
> character in one of them, and a list of character in the other, merge
> behaves differently depending which is given first.
>
> Example :
>
> ```
> df1 <- data.frame(a=1)
> df2 <- data.frame(b=2)
> df1$id <- "ID"
> df2$id <- list("ID")
>
> # these print in a similar way, so the upcoming error will be hard to
> diagnose
> df1
> #>   a id
> #> 1 1 ID
> df2
> #>   b id
> #> 1 2 ID
>
> # especially as this works well, df2$id is treated as an atomic vector
> merge(df1, df2)
> #>   id a b
> #> 1 ID 1 2
>

Well, sure but that is because it happens to be a list with each element
having length one. In which case, it really should not have been a list at
all, and the fact that it was seems a deeper problem that should likely be
resolved instead of treating the symptom, in my opinion.

 > df1 <- data.frame(a=1)

> df2 <- data.frame(b=2)

> df1$id <- "ID"

> df2$id <- list(c("ID", "ID2"))

> merge(df1, df2)

[1] id a  b

<0 rows> (or 0-length row.names)


Thats probably not what you wanted it to do, right? Or maybe it is, it
depends, right?. And therein lies the rub.


I have to be honest, as a developer, I really wish this, even in your
example case, threw an error. Anything else just looks to me like a
debugging nightmare looming in the wings waiting to strike.





> # But this fails with a cryptic error message
> merge(df2, df1)
> #> Error in sort.list(bx[m$xi]): 'x' must be atomic for 'sort.list', method
> "shell" and "quick"
> #> Have you called 'sort' on a list?
> ```
>
> I believe that if we let it work one way it should work the other, and that
> if it works neither an explicit error  mentioning how we can't join by list
> column would be helpful.
>

There's no reason (in principle) you wouldn't be able to join by a list
column, they should just both have to be list columns, in my ideal (but
admittedly unlikely) world.  Id rather the atomic-vector/list mismatch case
throw an error, myself.


Now I kind of doubt we can change the behavior that works now, but as Avi
points out, I think this is something that is complicated and case specific
enough that it really ought to be your job as the coder to take care of
what should happen when you try to merge on columns that are fundamentally
different types.


Plus, having an id column as a list, unless it was really explicitly
intentional, seems very likely to be a bug to me. (I mean id column in the
you want to use it to merge things, not the fact that itw as called "id",
though admittedly those are likely to go together...

Best,
~G


>
> Many thanks and happy new year to all the R community,
>
> Antoine
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @nto|ne@|@br| @end|ng |rom gm@||@com  Sun Jan  3 11:14:57 2021
From: @nto|ne@|@br| @end|ng |rom gm@||@com (Antoine Fabri)
Date: Sun, 3 Jan 2021 11:14:57 +0100
Subject: [Rd] `merge()` not consistent in how it treats list columns
In-Reply-To: <CAD4oTHG2cxgBzYwg1-Rkm3pfVwZ3GzWNv_UTtuFVu-+S+juBVQ@mail.gmail.com>
References: <CAEKh8ujHeMMYHrN3kZcn5JXxMacs5hOW6cWRB1Z9HGuSKTEMAA@mail.gmail.com>
 <CAD4oTHG2cxgBzYwg1-Rkm3pfVwZ3GzWNv_UTtuFVu-+S+juBVQ@mail.gmail.com>
Message-ID: <CAEKh8ugf1fUViQn-uVszzizy8PdyN14P357LHPHR1tVa8upuVA@mail.gmail.com>

Hi Gabe,


>  [... ]
> Well, sure but that is because it happens to be a list with each element
> having length one. In which case, it really should not have been a list at
> all, and the fact that it was seems a deeper problem that should likely be
> resolved instead of treating the symptom, in my opinion.
>

I wouldn't mind it explicitly failing on the ground that you don't join a
list column on a character column, and I wouldn't mind it succeeding
either, because it's consistent with `c("a", "b") == list("a", "b")`  and
`c("a", "b") %in% list("a", "b")` returning `c(TRUE, TRUE)`. But I feel
strongly that it shouldn't behave differently depending on which data frame
is provided first to the function, and I do think that if we do make it an
error, it is worth making it understandable.


>
>  > df1 <- data.frame(a=1)
>
> > df2 <- data.frame(b=2)
>
> > df1$id <- "ID"
>
> > df2$id <- list(c("ID", "ID2"))
>
> > merge(df1, df2)
>
> [1] id a  b
>
> <0 rows> (or 0-length row.names)
>
>
> Thats probably not what you wanted it to do, right? Or maybe it is, it
> depends, right?. And therein lies the rub.
>
>
> I have to be honest, as a developer, I really wish this, even in your
> example case, threw an error. Anything else just looks to me like a
> debugging nightmare looming in the wings waiting to strike.
>
>
>
What I did wrong in my real case, to provide context, is compute `df2$id <-
lapply(x, fun)`, which was a mistake, but looked ok when printing, `vapply`
solved the issue, `sapply` would still have been problematic because
`df2$id` would be an emply list for a `x` of length 0.

After correcting my mistake I tried to isolate the error and had trouble
reproducing it with my simple case because I was inverting both data frames
argument. This is how the inconsistency +  cryptic message caused me more
trouble than I think it should have.

Imagine that I can have production code work for years with `merge(df1,
df2)`, maybe not written by me, I change it to `merge(df2, df1)` for some
reason and all breaks loose with `Error in sort.list(bx[m$xi]): 'x' must be
atomic for 'sort.list', method "shell" and "quick"`. If I'm not familiar
with list columns and that they can print just like character columns I
might have a rough day.

Here's another oddity that I think is worth fixing :

df1 <- data.frame(a=1, id = "ID")
df3 <- data.frame(c=character(), id = list())
merge(df3, df1)
#> [1] x[FALSE, ] a          id
#> <0 lignes> (ou 'row.names' de longueur nulle)
merge(df1, df3)
#> [1] a          id         y[FALSE, ]
#> <0 lignes> (ou 'row.names' de longueur nulle)

 [...]
>


> There's no reason (in principle) you wouldn't be able to join by a list
> column, they should just both have to be list columns, in my ideal (but
> admittedly unlikely) world.  Id rather the atomic-vector/list mismatch case
> throw an error, myself.
>

The doc does say that "This is intended to work with data frames with
vector-like columns" in a note at the bottom, so anything we do is
consistent with the doc, and fine by me if it fails (that's how {dplyr}
joins work), but let the order of the data frames not matter. A warning is
another option.


> Now I kind of doubt we can change the behavior that works now, but as Avi
> points out, I think this is something that is complicated and case specific
> enough that it really ought to be your job as the coder to take care of
> what should happen when you try to merge on columns that are fundamentally
> different types.
>

Well yes, one can always say it's the developer's fault, but we all
appreciate a software that guides us toward the light. List columns are not
a rare thing at all anymore and using an `lapply` call instad of `sapply`
or `vapply` is probably not a rare mistake. And again, the inconsistency is
wrong in any case.

I'll read other answers when I get the digest.

Thanks,

Antoine

	[[alternative HTML version deleted]]


From d@v|dvonpku @end|ng |rom gm@||@com  Wed Jan  6 10:59:50 2021
From: d@v|dvonpku @end|ng |rom gm@||@com (Jitao David Zhang)
Date: Wed, 6 Jan 2021 10:59:50 +0100
Subject: [Rd] Demo for linking native routines between R packages
Message-ID: <CA+Qy-8KawmW79xuSteeNQk1gMvc33EUSjkALsHVqJH+KS0S=YQ@mail.gmail.com>

Dear Davis, Dirk, Jan, and r-devel subscribers,

I hope you have had a good start in the new year.

For your information: I have updated the GitHub repository to demonstrate
linking native routines between R packages (
https://github.com/Accio/demo-linking-native), especially by listing the
prior art and the project by Davis to give the readers more background and
history of the topic. And I took the liberty to acknowledge your
contribution, criticism and help to improve this baby project.

In any case, I wish there is a link from WRE to a small demo (not
necessarily mine!) where linking native routine is implemented in a
minimalistic example for teaching and demonstration purposes. That will
help people a lot in my opinion.

Best regards,
David

-- 
Jitao David Zhang

http://jdzhang.me/
mail at jdzhang.me

Sch?tzengasse 20
4125 Riehen, Switzerland

	[[alternative HTML version deleted]]


From m|kko@korpe|@ @end|ng |rom m@@nm|tt@u@|@|to@@||  Thu Jan  7 12:07:45 2021
From: m|kko@korpe|@ @end|ng |rom m@@nm|tt@u@|@|to@@|| (Korpela Mikko (MML))
Date: Thu, 7 Jan 2021 11:07:45 +0000
Subject: [Rd] Printing Unicode escapes with 6 digits may be problematic
Message-ID: <7d4242f53d9b499b914b835de92a9974@maanmittauslaitos.fi>

I see that this was only a passing issue. R-devel r79638 and greater (also tested with r79801) print six digits inside curly brace delimiters, like so: "\U{016fe4}1" (using the example below). This ensures compatibility between output and input.

- Mikko

-----Alkuper?inen viesti-----
L?hett?j?: R-devel <r-devel-bounces at r-project.org> Puolesta Korpela Mikko (MML)
L?hetetty: maanantai 14. joulukuuta 2020 11.51
Vastaanottaja: r-devel <r-devel at r-project.org>
Aihe: [Rd] Printing Unicode escapes with 6 digits may be problematic

A recent R-devel commit introduces a change in the way non-printable Unicode characters are shown as an escape code. Whereas large code points were previously printed using an escape code of 8 hexadecimal digits, with initial zeros, the present code (tested with R-devel r79623 on Ubuntu Linux) only prints 6 hex digits. I think this may be problematic: it is now possible that R prints a character string which is not valid when reused as an input. See the following example.

"\U{16FE4}1"
# [1] "\U016fe41"
"\U016fe41"
# Error: invalid \Uxxxxxxxx value 16fe41 (line 1)

Best regards,
- Mikko Korpela

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From kr|m|r+r @end|ng |rom m@||box@org  Thu Jan  7 12:14:02 2021
From: kr|m|r+r @end|ng |rom m@||box@org (=?UTF-8?Q?Kirill_M=c3=bcller?=)
Date: Thu, 7 Jan 2021 12:14:02 +0100
Subject: [Rd] URL checks
Message-ID: <86862a3d-ee6b-4511-7207-e7a655ba3565@mailbox.org>

Hi


The URL checks in R CMD check test all links in the README and vignettes 
for broken or redirected links. In many cases this improves 
documentation, I see problems with this approach which I have detailed 
below.

I'm writing to this mailing list because I think the change needs to 
happen in R's check routines. I propose to introduce an "allow-list" for 
URLs, to reduce the burden on both CRAN and package maintainers.

Comments are greatly appreciated.


Best regards

Kirill


# Problems with the detection of broken/redirected URLs

## 301 should often be 307, how to change?

Many web sites use a 301 redirection code that probably should be a 307. 
For example, https://www.oracle.com and https://www.oracle.com/ both 
redirect to https://www.oracle.com/index.html with a 301. I suspect the 
company still wants oracle.com to be recognized as the primary entry 
point of their web presence (to reserve the right to move the 
redirection to a different location later), I haven't checked with their 
PR department though. If that's true, the redirect probably should be a 
307, which should be fixed by their IT department which I haven't 
contacted yet either.

$ curl -i https://www.oracle.com
HTTP/2 301
server: AkamaiGHost
content-length: 0
location: https://www.oracle.com/index.html
...

## User agent detection

twitter.com responds with a 400 error for requests without a user agent 
string hinting at an accepted browser.

$ curl -i https://twitter.com/
HTTP/2 400
...
<body>...<p>Please switch to a supported browser...</p>...</body>

$ curl -s -i https://twitter.com/ -A "Mozilla/5.0 (X11; Ubuntu; Linux 
x86_64; rv:84.0) Gecko/20100101 Firefox/84.0" | head -n 1
HTTP/2 200

# Impact

While the latter problem *could* be fixed by supplying a browser-like 
user agent string, the former problem is virtually unfixable -- so many 
web sites should use 307 instead of 301 but don't. The above list is 
also incomplete -- think of unreliable links, HTTP links, other failure 
modes...

This affects me as a package maintainer, I have the choice to either 
change the links to incorrect versions, or remove them altogether.

I can also choose to explain each broken link to CRAN, this subjects the 
team to undue burden I think. Submitting a package with NOTEs delays the 
release for a package which I must release very soon to avoid having it 
pulled from CRAN, I'd rather not risk that -- hence I need to remove the 
link and put it back later.

I'm aware of https://github.com/r-lib/urlchecker, this alleviates the 
problem but ultimately doesn't solve it.

# Proposed solution

## Allow-list

A file inst/URL that lists all URLs where failures are allowed -- 
possibly with a list of the HTTP codes accepted for that link.

Example:

https://oracle.com/ 301
https://twitter.com/drob/status/1224851726068527106 400


From kr|m|r+m| @end|ng |rom m@||box@org  Thu Jan  7 15:45:39 2021
From: kr|m|r+m| @end|ng |rom m@||box@org (=?UTF-8?Q?Kirill_M=c3=bcller?=)
Date: Thu, 7 Jan 2021 15:45:39 +0100
Subject: [Rd] URL checks
In-Reply-To: <86862a3d-ee6b-4511-7207-e7a655ba3565@mailbox.org>
References: <86862a3d-ee6b-4511-7207-e7a655ba3565@mailbox.org>
Message-ID: <da33c7f9-d3da-d5c5-8307-ebb5d723ef07@mailbox.org>

One other failure mode: SSL certificates trusted by browsers that are 
not installed on the check machine, e.g. the "GEANT Vereniging" 
certificate from https://relational.fit.cvut.cz/ .


K


On 07.01.21 12:14, Kirill M?ller via R-devel wrote:
> Hi
>
>
> The URL checks in R CMD check test all links in the README and 
> vignettes for broken or redirected links. In many cases this improves 
> documentation, I see problems with this approach which I have detailed 
> below.
>
> I'm writing to this mailing list because I think the change needs to 
> happen in R's check routines. I propose to introduce an "allow-list" 
> for URLs, to reduce the burden on both CRAN and package maintainers.
>
> Comments are greatly appreciated.
>
>
> Best regards
>
> Kirill
>
>
> # Problems with the detection of broken/redirected URLs
>
> ## 301 should often be 307, how to change?
>
> Many web sites use a 301 redirection code that probably should be a 
> 307. For example, https://www.oracle.com and https://www.oracle.com/ 
> both redirect to https://www.oracle.com/index.html with a 301. I 
> suspect the company still wants oracle.com to be recognized as the 
> primary entry point of their web presence (to reserve the right to 
> move the redirection to a different location later), I haven't checked 
> with their PR department though. If that's true, the redirect probably 
> should be a 307, which should be fixed by their IT department which I 
> haven't contacted yet either.
>
> $ curl -i https://www.oracle.com
> HTTP/2 301
> server: AkamaiGHost
> content-length: 0
> location: https://www.oracle.com/index.html
> ...
>
> ## User agent detection
>
> twitter.com responds with a 400 error for requests without a user 
> agent string hinting at an accepted browser.
>
> $ curl -i https://twitter.com/
> HTTP/2 400
> ...
> <body>...<p>Please switch to a supported browser...</p>...</body>
>
> $ curl -s -i https://twitter.com/ -A "Mozilla/5.0 (X11; Ubuntu; Linux 
> x86_64; rv:84.0) Gecko/20100101 Firefox/84.0" | head -n 1
> HTTP/2 200
>
> # Impact
>
> While the latter problem *could* be fixed by supplying a browser-like 
> user agent string, the former problem is virtually unfixable -- so 
> many web sites should use 307 instead of 301 but don't. The above list 
> is also incomplete -- think of unreliable links, HTTP links, other 
> failure modes...
>
> This affects me as a package maintainer, I have the choice to either 
> change the links to incorrect versions, or remove them altogether.
>
> I can also choose to explain each broken link to CRAN, this subjects 
> the team to undue burden I think. Submitting a package with NOTEs 
> delays the release for a package which I must release very soon to 
> avoid having it pulled from CRAN, I'd rather not risk that -- hence I 
> need to remove the link and put it back later.
>
> I'm aware of https://github.com/r-lib/urlchecker, this alleviates the 
> problem but ultimately doesn't solve it.
>
> # Proposed solution
>
> ## Allow-list
>
> A file inst/URL that lists all URLs where failures are allowed -- 
> possibly with a list of the HTTP codes accepted for that link.
>
> Example:
>
> https://oracle.com/ 301
> https://twitter.com/drob/status/1224851726068527106 400
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From hugo@gru@on+R @end|ng |rom norm@|e@up@org  Thu Jan  7 16:53:56 2021
From: hugo@gru@on+R @end|ng |rom norm@|e@up@org (Hugo Gruson)
Date: Thu, 7 Jan 2021 16:53:56 +0100
Subject: [Rd] URL checks
In-Reply-To: <da33c7f9-d3da-d5c5-8307-ebb5d723ef07@mailbox.org>
References: <86862a3d-ee6b-4511-7207-e7a655ba3565@mailbox.org>
 <da33c7f9-d3da-d5c5-8307-ebb5d723ef07@mailbox.org>
Message-ID: <4abf9069-cfef-c933-3fbc-5e2f1b77b919-5849@normalesup.org>


I encountered the same issue today with https://astrostatistics.psu.edu/.

This is a trust chain issue, as explained here: 
https://whatsmychaincert.com/?astrostatistics.psu.edu.

I've worked for a couple of years on a project to increase HTTPS 
adoption on the web and we noticed that this type of error is very 
common, and that website maintainers are often unresponsive to requests 
to fix this issue.

Therefore, I totally agree with Kirill that a list of known 
false-positive/exceptions would be a great addition to save time to both 
the CRAN team and package developers.

Hugo

On 07/01/2021 15:45, Kirill M?ller via R-devel wrote:
> One other failure mode: SSL certificates trusted by browsers that are 
> not installed on the check machine, e.g. the "GEANT Vereniging" 
> certificate from https://relational.fit.cvut.cz/ .
> 
> 
> K
> 
> 
> On 07.01.21 12:14, Kirill M?ller via R-devel wrote:
>> Hi
>>
>>
>> The URL checks in R CMD check test all links in the README and 
>> vignettes for broken or redirected links. In many cases this improves 
>> documentation, I see problems with this approach which I have detailed 
>> below.
>>
>> I'm writing to this mailing list because I think the change needs to 
>> happen in R's check routines. I propose to introduce an "allow-list" 
>> for URLs, to reduce the burden on both CRAN and package maintainers.
>>
>> Comments are greatly appreciated.
>>
>>
>> Best regards
>>
>> Kirill
>>
>>
>> # Problems with the detection of broken/redirected URLs
>>
>> ## 301 should often be 307, how to change?
>>
>> Many web sites use a 301 redirection code that probably should be a 
>> 307. For example, https://www.oracle.com and https://www.oracle.com/ 
>> both redirect to https://www.oracle.com/index.html with a 301. I 
>> suspect the company still wants oracle.com to be recognized as the 
>> primary entry point of their web presence (to reserve the right to 
>> move the redirection to a different location later), I haven't checked 
>> with their PR department though. If that's true, the redirect probably 
>> should be a 307, which should be fixed by their IT department which I 
>> haven't contacted yet either.
>>
>> $ curl -i https://www.oracle.com
>> HTTP/2 301
>> server: AkamaiGHost
>> content-length: 0
>> location: https://www.oracle.com/index.html
>> ...
>>
>> ## User agent detection
>>
>> twitter.com responds with a 400 error for requests without a user 
>> agent string hinting at an accepted browser.
>>
>> $ curl -i https://twitter.com/
>> HTTP/2 400
>> ...
>> <body>...<p>Please switch to a supported browser...</p>...</body>
>>
>> $ curl -s -i https://twitter.com/ -A "Mozilla/5.0 (X11; Ubuntu; Linux 
>> x86_64; rv:84.0) Gecko/20100101 Firefox/84.0" | head -n 1
>> HTTP/2 200
>>
>> # Impact
>>
>> While the latter problem *could* be fixed by supplying a browser-like 
>> user agent string, the former problem is virtually unfixable -- so 
>> many web sites should use 307 instead of 301 but don't. The above list 
>> is also incomplete -- think of unreliable links, HTTP links, other 
>> failure modes...
>>
>> This affects me as a package maintainer, I have the choice to either 
>> change the links to incorrect versions, or remove them altogether.
>>
>> I can also choose to explain each broken link to CRAN, this subjects 
>> the team to undue burden I think. Submitting a package with NOTEs 
>> delays the release for a package which I must release very soon to 
>> avoid having it pulled from CRAN, I'd rather not risk that -- hence I 
>> need to remove the link and put it back later.
>>
>> I'm aware of https://github.com/r-lib/urlchecker, this alleviates the 
>> problem but ultimately doesn't solve it.
>>
>> # Proposed solution
>>
>> ## Allow-list
>>
>> A file inst/URL that lists all URLs where failures are allowed -- 
>> possibly with a list of the HTTP codes accepted for that link.
>>
>> Example:
>>
>> https://oracle.com/ 301
>> https://twitter.com/drob/status/1224851726068527106 400
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Fri Jan  8 13:04:13 2021
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Fri, 8 Jan 2021 06:04:13 -0600
Subject: [Rd] URL checks
In-Reply-To: <4abf9069-cfef-c933-3fbc-5e2f1b77b919-5849@normalesup.org>
References: <86862a3d-ee6b-4511-7207-e7a655ba3565@mailbox.org>
 <da33c7f9-d3da-d5c5-8307-ebb5d723ef07@mailbox.org>
 <4abf9069-cfef-c933-3fbc-5e2f1b77b919-5849@normalesup.org>
Message-ID: <a4b67099-b7c1-1c4b-e3f1-61ba1bb1fdd6@prodsyse.com>

	  I also would be pleased to be allowed to provide "a list of known 
false-positive/exceptions" to the URL tests.  I've been challenged 
multiple times regarding URLs that worked fine when I checked them.  We 
should not be required to do a partial lobotomy to pass R CMD check ;-)


	  Spencer Graves


On 2021-01-07 09:53, Hugo Gruson wrote:
> 
> I encountered the same issue today with https://astrostatistics.psu.edu/.
> 
> This is a trust chain issue, as explained here: 
> https://whatsmychaincert.com/?astrostatistics.psu.edu.
> 
> I've worked for a couple of years on a project to increase HTTPS 
> adoption on the web and we noticed that this type of error is very 
> common, and that website maintainers are often unresponsive to requests 
> to fix this issue.
> 
> Therefore, I totally agree with Kirill that a list of known 
> false-positive/exceptions would be a great addition to save time to both 
> the CRAN team and package developers.
> 
> Hugo
> 
> On 07/01/2021 15:45, Kirill M?ller via R-devel wrote:
>> One other failure mode: SSL certificates trusted by browsers that are 
>> not installed on the check machine, e.g. the "GEANT Vereniging" 
>> certificate from https://relational.fit.cvut.cz/ .
>>
>>
>> K
>>
>>
>> On 07.01.21 12:14, Kirill M?ller via R-devel wrote:
>>> Hi
>>>
>>>
>>> The URL checks in R CMD check test all links in the README and 
>>> vignettes for broken or redirected links. In many cases this improves 
>>> documentation, I see problems with this approach which I have 
>>> detailed below.
>>>
>>> I'm writing to this mailing list because I think the change needs to 
>>> happen in R's check routines. I propose to introduce an "allow-list" 
>>> for URLs, to reduce the burden on both CRAN and package maintainers.
>>>
>>> Comments are greatly appreciated.
>>>
>>>
>>> Best regards
>>>
>>> Kirill
>>>
>>>
>>> # Problems with the detection of broken/redirected URLs
>>>
>>> ## 301 should often be 307, how to change?
>>>
>>> Many web sites use a 301 redirection code that probably should be a 
>>> 307. For example, https://www.oracle.com and https://www.oracle.com/ 
>>> both redirect to https://www.oracle.com/index.html with a 301. I 
>>> suspect the company still wants oracle.com to be recognized as the 
>>> primary entry point of their web presence (to reserve the right to 
>>> move the redirection to a different location later), I haven't 
>>> checked with their PR department though. If that's true, the redirect 
>>> probably should be a 307, which should be fixed by their IT 
>>> department which I haven't contacted yet either.
>>>
>>> $ curl -i https://www.oracle.com
>>> HTTP/2 301
>>> server: AkamaiGHost
>>> content-length: 0
>>> location: https://www.oracle.com/index.html
>>> ...
>>>
>>> ## User agent detection
>>>
>>> twitter.com responds with a 400 error for requests without a user 
>>> agent string hinting at an accepted browser.
>>>
>>> $ curl -i https://twitter.com/
>>> HTTP/2 400
>>> ...
>>> <body>...<p>Please switch to a supported browser...</p>...</body>
>>>
>>> $ curl -s -i https://twitter.com/ -A "Mozilla/5.0 (X11; Ubuntu; Linux 
>>> x86_64; rv:84.0) Gecko/20100101 Firefox/84.0" | head -n 1
>>> HTTP/2 200
>>>
>>> # Impact
>>>
>>> While the latter problem *could* be fixed by supplying a browser-like 
>>> user agent string, the former problem is virtually unfixable -- so 
>>> many web sites should use 307 instead of 301 but don't. The above 
>>> list is also incomplete -- think of unreliable links, HTTP links, 
>>> other failure modes...
>>>
>>> This affects me as a package maintainer, I have the choice to either 
>>> change the links to incorrect versions, or remove them altogether.
>>>
>>> I can also choose to explain each broken link to CRAN, this subjects 
>>> the team to undue burden I think. Submitting a package with NOTEs 
>>> delays the release for a package which I must release very soon to 
>>> avoid having it pulled from CRAN, I'd rather not risk that -- hence I 
>>> need to remove the link and put it back later.
>>>
>>> I'm aware of https://github.com/r-lib/urlchecker, this alleviates the 
>>> problem but ultimately doesn't solve it.
>>>
>>> # Proposed solution
>>>
>>> ## Allow-list
>>>
>>> A file inst/URL that lists all URLs where failures are allowed -- 
>>> possibly with a list of the HTTP codes accepted for that link.
>>>
>>> Example:
>>>
>>> https://oracle.com/ 301
>>> https://twitter.com/drob/status/1224851726068527106 400
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From jo@h@m@u|r|ch @end|ng |rom gm@||@com  Sat Jan  9 17:45:27 2021
From: jo@h@m@u|r|ch @end|ng |rom gm@||@com (Joshua Ulrich)
Date: Sat, 9 Jan 2021 10:45:27 -0600
Subject: [Rd] Demo for linking native routines between R packages
In-Reply-To: <CA+Qy-8KawmW79xuSteeNQk1gMvc33EUSjkALsHVqJH+KS0S=YQ@mail.gmail.com>
References: <CA+Qy-8KawmW79xuSteeNQk1gMvc33EUSjkALsHVqJH+KS0S=YQ@mail.gmail.com>
Message-ID: <CAPPM_gQHt1HMRUKshiKRg=W3OLjQaU67hU=-+dtRP6zy7rLpPA@mail.gmail.com>

Hi David,

On Wed, Jan 6, 2021 at 4:00 AM Jitao David Zhang <davidvonpku at gmail.com> wrote:
>
> Dear Davis, Dirk, Jan, and r-devel subscribers,
>
> I hope you have had a good start in the new year.
>
> For your information: I have updated the GitHub repository to demonstrate
> linking native routines between R packages (
> https://github.com/Accio/demo-linking-native), especially by listing the
> prior art and the project by Davis to give the readers more background and
> history of the topic. And I took the liberty to acknowledge your
> contribution, criticism and help to improve this baby project.
>
> In any case, I wish there is a link from WRE to a small demo (not
> necessarily mine!) where linking native routine is implemented in a
> minimalistic example for teaching and demonstration purposes. That will
> help people a lot in my opinion.
>
R-core will probably be reluctant to link to an external example they
have very little control over. For example, what if the process
changes and the external source doesn't get updated?

That said, WRE does list two packages that register native routines
from other packages:
https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Linking-to-native-routines-in-other-packages

I'd be open to including a vignette in xts that discusses the process
of linking to zoo. That would have the benefit of needing to be
updated if the process changes. We can discuss off-list if you're
interested in collaborating on it.

> Best regards,
> David
>
> --
> Jitao David Zhang
>
> http://jdzhang.me/
> mail at jdzhang.me
>
> Sch?tzengasse 20
> 4125 Riehen, Switzerland
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com


From c@@rd|@g@bor @end|ng |rom gm@||@com  Sat Jan  9 18:23:25 2021
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Sat, 9 Jan 2021 17:23:25 +0000
Subject: [Rd] Demo for linking native routines between R packages
In-Reply-To: <CAPPM_gQHt1HMRUKshiKRg=W3OLjQaU67hU=-+dtRP6zy7rLpPA@mail.gmail.com>
References: <CA+Qy-8KawmW79xuSteeNQk1gMvc33EUSjkALsHVqJH+KS0S=YQ@mail.gmail.com>
 <CAPPM_gQHt1HMRUKshiKRg=W3OLjQaU67hU=-+dtRP6zy7rLpPA@mail.gmail.com>
Message-ID: <CABtg=Knib5t7dEYodn_jzdxQsC4ZJp=qzN_8AoXChsZ8k57t2g@mail.gmail.com>

On Sat, Jan 9, 2021 at 4:45 PM Joshua Ulrich <josh.m.ulrich at gmail.com>
wrote:
[...]

>
> That said, WRE does list two packages that register native routines
> from other packages:
>
> https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Linking-to-native-routines-in-other-packages
>
>
There are a bunch more, see here:
https://github.com/search?q=org%3Acran+R_RegisterCCallable&type=code

Here is another very minimal example:
https://github.com/DavisVaughan/cexport#cexport

Gabor

[...]

	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Sat Jan  9 18:34:45 2021
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sat, 9 Jan 2021 11:34:45 -0600
Subject: [Rd] URL checks
In-Reply-To: <a4b67099-b7c1-1c4b-e3f1-61ba1bb1fdd6@prodsyse.com>
References: <86862a3d-ee6b-4511-7207-e7a655ba3565@mailbox.org>
 <da33c7f9-d3da-d5c5-8307-ebb5d723ef07@mailbox.org>
 <4abf9069-cfef-c933-3fbc-5e2f1b77b919-5849@normalesup.org>
 <a4b67099-b7c1-1c4b-e3f1-61ba1bb1fdd6@prodsyse.com>
Message-ID: <24569.59701.853035.931125@rob.eddelbuettel.com>


The idea of 'white lists' to prevent known (and 'tolerated') issues, note,
warnings, ... from needlessly reappearing is very powerful and general, and
can go much further than just URL checks.

I suggested several times in the past that we can look at the format Debian
uses in its 'lintian' package checker and its override files -- which are
used across thousands of packages there.  But that went nowhere so I stopped.

This issue needs a champion or two to implement a prototype as well as a
potential R Core / CRAN sponsor to adopt it.  But in all those years no smoke
has come out of any chimneys so ...  ?\_(?)_/? is all we get.

Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From pro|jcn@@h @end|ng |rom gm@||@com  Sat Jan  9 19:31:02 2021
From: pro|jcn@@h @end|ng |rom gm@||@com (J C Nash)
Date: Sat, 9 Jan 2021 13:31:02 -0500
Subject: [Rd] URL checks
In-Reply-To: <24569.59701.853035.931125@rob.eddelbuettel.com>
References: <86862a3d-ee6b-4511-7207-e7a655ba3565@mailbox.org>
 <da33c7f9-d3da-d5c5-8307-ebb5d723ef07@mailbox.org>
 <4abf9069-cfef-c933-3fbc-5e2f1b77b919-5849@normalesup.org>
 <a4b67099-b7c1-1c4b-e3f1-61ba1bb1fdd6@prodsyse.com>
 <24569.59701.853035.931125@rob.eddelbuettel.com>
Message-ID: <138e3853-d9a6-ba86-6d0b-a53b929412d0@gmail.com>

Is this a topic for Google Summer of Code? See
https://github.com/rstats-gsoc/gsoc2021/wiki


On 2021-01-09 12:34 p.m., Dirk Eddelbuettel wrote:
> 
> The idea of 'white lists' to prevent known (and 'tolerated') issues, note,
> warnings, ... from needlessly reappearing is very powerful and general, and
> can go much further than just URL checks.
> 
> I suggested several times in the past that we can look at the format Debian
> uses in its 'lintian' package checker and its override files -- which are
> used across thousands of packages there.  But that went nowhere so I stopped.
> 
> This issue needs a champion or two to implement a prototype as well as a
> potential R Core / CRAN sponsor to adopt it.  But in all those years no smoke
> has come out of any chimneys so ...  ?\_(?)_/? is all we get.
> 
> Dirk
>


From wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n|  Fri Jan  8 14:50:14 2021
From: wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n| (Viechtbauer, Wolfgang (SP))
Date: Fri, 8 Jan 2021 13:50:14 +0000
Subject: [Rd] URL checks
In-Reply-To: <a4b67099-b7c1-1c4b-e3f1-61ba1bb1fdd6@prodsyse.com>
References: <86862a3d-ee6b-4511-7207-e7a655ba3565@mailbox.org>
 <da33c7f9-d3da-d5c5-8307-ebb5d723ef07@mailbox.org>
 <4abf9069-cfef-c933-3fbc-5e2f1b77b919-5849@normalesup.org>
 <a4b67099-b7c1-1c4b-e3f1-61ba1bb1fdd6@prodsyse.com>
Message-ID: <5fe854d5f3c64941806dbc8f0004fff6-1303@UM-MAIL3214.unimaas.nl>

Instead of a separate file to store such a list, would it be an idea to add versions of the \href{}{} and \url{} markup commands that are skipped by the URL checks?

Best,
Wolfgang

>-----Original Message-----
>From: R-devel [mailto:r-devel-bounces at r-project.org] On Behalf Of Spencer
>Graves
>Sent: Friday, 08 January, 2021 13:04
>To: r-devel at r-project.org
>Subject: Re: [Rd] URL checks
>
>	  I also would be pleased to be allowed to provide "a list of known
>false-positive/exceptions" to the URL tests.  I've been challenged
>multiple times regarding URLs that worked fine when I checked them.  We
>should not be required to do a partial lobotomy to pass R CMD check ;-)
>
>	  Spencer Graves
>
>On 2021-01-07 09:53, Hugo Gruson wrote:
>>
>> I encountered the same issue today with https://astrostatistics.psu.edu/.
>>
>> This is a trust chain issue, as explained here:
>> https://whatsmychaincert.com/?astrostatistics.psu.edu.
>>
>> I've worked for a couple of years on a project to increase HTTPS
>> adoption on the web and we noticed that this type of error is very
>> common, and that website maintainers are often unresponsive to requests
>> to fix this issue.
>>
>> Therefore, I totally agree with Kirill that a list of known
>> false-positive/exceptions would be a great addition to save time to both
>> the CRAN team and package developers.
>>
>> Hugo
>>
>> On 07/01/2021 15:45, Kirill M?ller via R-devel wrote:
>>> One other failure mode: SSL certificates trusted by browsers that are
>>> not installed on the check machine, e.g. the "GEANT Vereniging"
>>> certificate from https://relational.fit.cvut.cz/ .
>>>
>>> K
>>>
>>> On 07.01.21 12:14, Kirill M?ller via R-devel wrote:
>>>> Hi
>>>>
>>>> The URL checks in R CMD check test all links in the README and
>>>> vignettes for broken or redirected links. In many cases this improves
>>>> documentation, I see problems with this approach which I have
>>>> detailed below.
>>>>
>>>> I'm writing to this mailing list because I think the change needs to
>>>> happen in R's check routines. I propose to introduce an "allow-list"
>>>> for URLs, to reduce the burden on both CRAN and package maintainers.
>>>>
>>>> Comments are greatly appreciated.
>>>>
>>>> Best regards
>>>>
>>>> Kirill
>>>>
>>>> # Problems with the detection of broken/redirected URLs
>>>>
>>>> ## 301 should often be 307, how to change?
>>>>
>>>> Many web sites use a 301 redirection code that probably should be a
>>>> 307. For example, https://www.oracle.com and https://www.oracle.com/
>>>> both redirect to https://www.oracle.com/index.html with a 301. I
>>>> suspect the company still wants oracle.com to be recognized as the
>>>> primary entry point of their web presence (to reserve the right to
>>>> move the redirection to a different location later), I haven't
>>>> checked with their PR department though. If that's true, the redirect
>>>> probably should be a 307, which should be fixed by their IT
>>>> department which I haven't contacted yet either.
>>>>
>>>> $ curl -i https://www.oracle.com
>>>> HTTP/2 301
>>>> server: AkamaiGHost
>>>> content-length: 0
>>>> location: https://www.oracle.com/index.html
>>>> ...
>>>>
>>>> ## User agent detection
>>>>
>>>> twitter.com responds with a 400 error for requests without a user
>>>> agent string hinting at an accepted browser.
>>>>
>>>> $ curl -i https://twitter.com/
>>>> HTTP/2 400
>>>> ...
>>>> <body>...<p>Please switch to a supported browser...</p>...</body>
>>>>
>>>> $ curl -s -i https://twitter.com/ -A "Mozilla/5.0 (X11; Ubuntu; Linux
>>>> x86_64; rv:84.0) Gecko/20100101 Firefox/84.0" | head -n 1
>>>> HTTP/2 200
>>>>
>>>> # Impact
>>>>
>>>> While the latter problem *could* be fixed by supplying a browser-like
>>>> user agent string, the former problem is virtually unfixable -- so
>>>> many web sites should use 307 instead of 301 but don't. The above
>>>> list is also incomplete -- think of unreliable links, HTTP links,
>>>> other failure modes...
>>>>
>>>> This affects me as a package maintainer, I have the choice to either
>>>> change the links to incorrect versions, or remove them altogether.
>>>>
>>>> I can also choose to explain each broken link to CRAN, this subjects
>>>> the team to undue burden I think. Submitting a package with NOTEs
>>>> delays the release for a package which I must release very soon to
>>>> avoid having it pulled from CRAN, I'd rather not risk that -- hence I
>>>> need to remove the link and put it back later.
>>>>
>>>> I'm aware of https://github.com/r-lib/urlchecker, this alleviates the
>>>> problem but ultimately doesn't solve it.
>>>>
>>>> # Proposed solution
>>>>
>>>> ## Allow-list
>>>>
>>>> A file inst/URL that lists all URLs where failures are allowed --
>>>> possibly with a list of the HTTP codes accepted for that link.
>>>>
>>>> Example:
>>>>
>>>> https://oracle.com/ 301
>>>> https://twitter.com/drob/status/1224851726068527106 400

From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Jan 11 10:51:43 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 11 Jan 2021 10:51:43 +0100
Subject: [Rd] URL checks
In-Reply-To: <5fe854d5f3c64941806dbc8f0004fff6-1303@UM-MAIL3214.unimaas.nl>
References: <86862a3d-ee6b-4511-7207-e7a655ba3565@mailbox.org>
 <da33c7f9-d3da-d5c5-8307-ebb5d723ef07@mailbox.org>
 <4abf9069-cfef-c933-3fbc-5e2f1b77b919-5849@normalesup.org>
 <a4b67099-b7c1-1c4b-e3f1-61ba1bb1fdd6@prodsyse.com>
 <5fe854d5f3c64941806dbc8f0004fff6-1303@UM-MAIL3214.unimaas.nl>
Message-ID: <24572.8111.414992.898239@stat.math.ethz.ch>

>>>>> Viechtbauer, Wolfgang (SP) 
>>>>>     on Fri, 8 Jan 2021 13:50:14 +0000 writes:

    > Instead of a separate file to store such a list, would it be an idea to add versions of the \href{}{} and \url{} markup commands that are skipped by the URL checks?
    > Best,
    > Wolfgang

I think John Nash and you misunderstood -- or then I
misunderstood -- the original proposal:

I've been understanding that there should be a  "central repository" of URL
exceptions that is maintained by volunteers.

And rather *not* that package authors should get ways to skip
URL checking..

Martin


    >> -----Original Message-----
    >> From: R-devel [mailto:r-devel-bounces at r-project.org] On Behalf Of Spencer
    >> Graves
    >> Sent: Friday, 08 January, 2021 13:04
    >> To: r-devel at r-project.org
    >> Subject: Re: [Rd] URL checks
    >> 
    >> I also would be pleased to be allowed to provide "a list of known
    >> false-positive/exceptions" to the URL tests.  I've been challenged
    >> multiple times regarding URLs that worked fine when I checked them.  We
    >> should not be required to do a partial lobotomy to pass R CMD check ;-)
    >> 
    >> Spencer Graves
    >> 
    >> On 2021-01-07 09:53, Hugo Gruson wrote:
    >>> 
    >>> I encountered the same issue today with https://astrostatistics.psu.edu/.
    >>> 
    >>> This is a trust chain issue, as explained here:
    >>> https://whatsmychaincert.com/?astrostatistics.psu.edu.
    >>> 
    >>> I've worked for a couple of years on a project to increase HTTPS
    >>> adoption on the web and we noticed that this type of error is very
    >>> common, and that website maintainers are often unresponsive to requests
    >>> to fix this issue.
    >>> 
    >>> Therefore, I totally agree with Kirill that a list of known
    >>> false-positive/exceptions would be a great addition to save time to both
    >>> the CRAN team and package developers.
    >>> 
    >>> Hugo
    >>> 
    >>> On 07/01/2021 15:45, Kirill M?ller via R-devel wrote:
    >>>> One other failure mode: SSL certificates trusted by browsers that are
    >>>> not installed on the check machine, e.g. the "GEANT Vereniging"
    >>>> certificate from https://relational.fit.cvut.cz/ .
    >>>> 
    >>>> K
    >>>> 
    >>>> On 07.01.21 12:14, Kirill M?ller via R-devel wrote:
    >>>>> Hi
    >>>>> 
    >>>>> The URL checks in R CMD check test all links in the README and
    >>>>> vignettes for broken or redirected links. In many cases this improves
    >>>>> documentation, I see problems with this approach which I have
    >>>>> detailed below.
    >>>>> 
    >>>>> I'm writing to this mailing list because I think the change needs to
    >>>>> happen in R's check routines. I propose to introduce an "allow-list"
    >>>>> for URLs, to reduce the burden on both CRAN and package maintainers.
    >>>>> 
    >>>>> Comments are greatly appreciated.
    >>>>> 
    >>>>> Best regards
    >>>>> 
    >>>>> Kirill
    >>>>> 
    >>>>> # Problems with the detection of broken/redirected URLs
    >>>>> 
    >>>>> ## 301 should often be 307, how to change?
    >>>>> 
    >>>>> Many web sites use a 301 redirection code that probably should be a
    >>>>> 307. For example, https://www.oracle.com and https://www.oracle.com/
    >>>>> both redirect to https://www.oracle.com/index.html with a 301. I
    >>>>> suspect the company still wants oracle.com to be recognized as the
    >>>>> primary entry point of their web presence (to reserve the right to
    >>>>> move the redirection to a different location later), I haven't
    >>>>> checked with their PR department though. If that's true, the redirect
    >>>>> probably should be a 307, which should be fixed by their IT
    >>>>> department which I haven't contacted yet either.
    >>>>> 
    >>>>> $ curl -i https://www.oracle.com
    >>>>> HTTP/2 301
    >>>>> server: AkamaiGHost
    >>>>> content-length: 0
    >>>>> location: https://www.oracle.com/index.html
    >>>>> ...
    >>>>> 
    >>>>> ## User agent detection
    >>>>> 
    >>>>> twitter.com responds with a 400 error for requests without a user
    >>>>> agent string hinting at an accepted browser.
    >>>>> 
    >>>>> $ curl -i https://twitter.com/
    >>>>> HTTP/2 400
    >>>>> ...
    >>>>> <body>...<p>Please switch to a supported browser...</p>...</body>
    >>>>> 
    >>>>> $ curl -s -i https://twitter.com/ -A "Mozilla/5.0 (X11; Ubuntu; Linux
    >>>>> x86_64; rv:84.0) Gecko/20100101 Firefox/84.0" | head -n 1
    >>>>> HTTP/2 200
    >>>>> 
    >>>>> # Impact
    >>>>> 
    >>>>> While the latter problem *could* be fixed by supplying a browser-like
    >>>>> user agent string, the former problem is virtually unfixable -- so
    >>>>> many web sites should use 307 instead of 301 but don't. The above
    >>>>> list is also incomplete -- think of unreliable links, HTTP links,
    >>>>> other failure modes...
    >>>>> 
    >>>>> This affects me as a package maintainer, I have the choice to either
    >>>>> change the links to incorrect versions, or remove them altogether.
    >>>>> 
    >>>>> I can also choose to explain each broken link to CRAN, this subjects
    >>>>> the team to undue burden I think. Submitting a package with NOTEs
    >>>>> delays the release for a package which I must release very soon to
    >>>>> avoid having it pulled from CRAN, I'd rather not risk that -- hence I
    >>>>> need to remove the link and put it back later.
    >>>>> 
    >>>>> I'm aware of https://github.com/r-lib/urlchecker, this alleviates the
    >>>>> problem but ultimately doesn't solve it.
    >>>>> 
    >>>>> # Proposed solution
    >>>>> 
    >>>>> ## Allow-list
    >>>>> 
    >>>>> A file inst/URL that lists all URLs where failures are allowed --
    >>>>> possibly with a list of the HTTP codes accepted for that link.
    >>>>> 
    >>>>> Example:
    >>>>> 
    >>>>> https://oracle.com/ 301
    >>>>> https://twitter.com/drob/status/1224851726068527106 400
    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n|  Mon Jan 11 11:41:03 2021
From: wo||g@ng@v|echtb@uer @end|ng |rom m@@@tr|chtun|ver@|ty@n| (Viechtbauer, Wolfgang (SP))
Date: Mon, 11 Jan 2021 10:41:03 +0000
Subject: [Rd] URL checks
In-Reply-To: <24572.8111.414992.898239@stat.math.ethz.ch>
References: <86862a3d-ee6b-4511-7207-e7a655ba3565@mailbox.org>
 <da33c7f9-d3da-d5c5-8307-ebb5d723ef07@mailbox.org>
 <4abf9069-cfef-c933-3fbc-5e2f1b77b919-5849@normalesup.org>
 <a4b67099-b7c1-1c4b-e3f1-61ba1bb1fdd6@prodsyse.com>
 <5fe854d5f3c64941806dbc8f0004fff6-1303@UM-MAIL3214.unimaas.nl>
 <24572.8111.414992.898239@stat.math.ethz.ch>
Message-ID: <4d52fd5a060f4cabbe42cfdce86a07b5@UM-MAIL3214.unimaas.nl>

>>>>>> Viechtbauer, Wolfgang (SP)
>>>>>>     on Fri, 8 Jan 2021 13:50:14 +0000 writes:
>
>    > Instead of a separate file to store such a list, would it be an idea
>to add versions of the \href{}{} and \url{} markup commands that are skipped
>by the URL checks?
>    > Best,
>    > Wolfgang
>
>I think John Nash and you misunderstood -- or then I
>misunderstood -- the original proposal:
>
>I've been understanding that there should be a  "central repository" of URL
>exceptions that is maintained by volunteers.
>
>And rather *not* that package authors should get ways to skip
>URL checking..
>
>Martin

Hi Martin,

Kirill suggested: "A file inst/URL that lists all URLs where failures are allowed -- possibly with a list of the HTTP codes accepted for that link."

So, if it is a file in inst/, then this sounds to me like this is part of the package and not part of some central repository.

Best,
Wolfgang


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Jan 11 12:29:00 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 11 Jan 2021 12:29:00 +0100
Subject: [Rd] URL checks
In-Reply-To: <4d52fd5a060f4cabbe42cfdce86a07b5@UM-MAIL3214.unimaas.nl>
References: <86862a3d-ee6b-4511-7207-e7a655ba3565@mailbox.org>
 <da33c7f9-d3da-d5c5-8307-ebb5d723ef07@mailbox.org>
 <4abf9069-cfef-c933-3fbc-5e2f1b77b919-5849@normalesup.org>
 <a4b67099-b7c1-1c4b-e3f1-61ba1bb1fdd6@prodsyse.com>
 <5fe854d5f3c64941806dbc8f0004fff6-1303@UM-MAIL3214.unimaas.nl>
 <24572.8111.414992.898239@stat.math.ethz.ch>
 <4d52fd5a060f4cabbe42cfdce86a07b5@UM-MAIL3214.unimaas.nl>
Message-ID: <24572.13948.413081.344007@stat.math.ethz.ch>

>>>>> Viechtbauer, Wolfgang (SP) 
>>>>>     on Mon, 11 Jan 2021 10:41:03 +0000 writes:

    >>>>>>> Viechtbauer, Wolfgang (SP)
    >>>>>>> on Fri, 8 Jan 2021 13:50:14 +0000 writes:
    >> 
    >> > Instead of a separate file to store such a list, would it be an idea
    >> to add versions of the \href{}{} and \url{} markup commands that are skipped
    >> by the URL checks?
    >> > Best,
    >> > Wolfgang
    >> 
    >> I think John Nash and you misunderstood -- or then I
    >> misunderstood -- the original proposal:
    >> 
    >> I've been understanding that there should be a  "central repository" of URL
    >> exceptions that is maintained by volunteers.
    >> 
    >> And rather *not* that package authors should get ways to skip
    >> URL checking..
    >> 
    >> Martin

    > Hi Martin,

    > Kirill suggested: "A file inst/URL that lists all URLs where failures are allowed -- possibly with a list of the HTTP codes accepted for that link."

    > So, if it is a file in inst/, then this sounds to me like this is part of the package and not part of some central repository.

    > Best,
    > Wolfgang

Dear Wolfgang,
you are right and indeed it's *me* who misunderstood.

But then I don't think it's a particularly good idea: From a
CRAN point of view it is important that URLs in documents it
hosts do not raise errors (*), hence the validity checking of URLs.

So, CRAN (and other repository hosts) would need another option
to still check all URLs .. and definitely would want to do that before
accepting a package and also regularly do such checks on a per
package basis in a way that it is reported as part of the CRAN checks of
the respective package, right?

So this will get envolved, ... and maybe it *is* good idea for a
Google Summer of Code (GSoC) project ... well *if* it that is
supervised by someone who's in close contact with CRAN or Bioc
maintainer teams.

Martin

--
*) Such URL errors then lead to e-mails or other reports of web
 site checking engines reporting that you are hosting (too)
 (many) web pages with invalid links.


From pro|jcn@@h @end|ng |rom gm@||@com  Mon Jan 11 15:41:49 2021
From: pro|jcn@@h @end|ng |rom gm@||@com (J C Nash)
Date: Mon, 11 Jan 2021 09:41:49 -0500
Subject: [Rd] URL checks
In-Reply-To: <24572.8111.414992.898239@stat.math.ethz.ch>
References: <86862a3d-ee6b-4511-7207-e7a655ba3565@mailbox.org>
 <da33c7f9-d3da-d5c5-8307-ebb5d723ef07@mailbox.org>
 <4abf9069-cfef-c933-3fbc-5e2f1b77b919-5849@normalesup.org>
 <a4b67099-b7c1-1c4b-e3f1-61ba1bb1fdd6@prodsyse.com>
 <5fe854d5f3c64941806dbc8f0004fff6-1303@UM-MAIL3214.unimaas.nl>
 <24572.8111.414992.898239@stat.math.ethz.ch>
Message-ID: <0af15511-fc6e-15a0-c37e-53f17dd80254-664@gmail.com>


Sorry, Martin, but I've NOT commented on this matter, unless someone has been impersonating me.
Someone else?

JN


On 2021-01-11 4:51 a.m., Martin Maechler wrote:
>>>>>> Viechtbauer, Wolfgang (SP) 
>>>>>>     on Fri, 8 Jan 2021 13:50:14 +0000 writes:
> 
>     > Instead of a separate file to store such a list, would it be an idea to add versions of the \href{}{} and \url{} markup commands that are skipped by the URL checks?
>     > Best,
>     > Wolfgang
> 
> I think John Nash and you misunderstood -- or then I
> misunderstood -- the original proposal:
> 
> I've been understanding that there should be a  "central repository" of URL
> exceptions that is maintained by volunteers.
> 
> And rather *not* that package authors should get ways to skip
> URL checking..
> 
> Martin
> 
> 
>     >> -----Original Message-----
>     >> From: R-devel [mailto:r-devel-bounces at r-project.org] On Behalf Of Spencer
>     >> Graves
>     >> Sent: Friday, 08 January, 2021 13:04
>     >> To: r-devel at r-project.org
>     >> Subject: Re: [Rd] URL checks
>     >> 
>     >> I also would be pleased to be allowed to provide "a list of known
>     >> false-positive/exceptions" to the URL tests.  I've been challenged
>     >> multiple times regarding URLs that worked fine when I checked them.  We
>     >> should not be required to do a partial lobotomy to pass R CMD check ;-)
>     >> 
>     >> Spencer Graves
>     >> 
>     >> On 2021-01-07 09:53, Hugo Gruson wrote:
>     >>> 
>     >>> I encountered the same issue today with https://astrostatistics.psu.edu/.
>     >>> 
>     >>> This is a trust chain issue, as explained here:
>     >>> https://whatsmychaincert.com/?astrostatistics.psu.edu.
>     >>> 
>     >>> I've worked for a couple of years on a project to increase HTTPS
>     >>> adoption on the web and we noticed that this type of error is very
>     >>> common, and that website maintainers are often unresponsive to requests
>     >>> to fix this issue.
>     >>> 
>     >>> Therefore, I totally agree with Kirill that a list of known
>     >>> false-positive/exceptions would be a great addition to save time to both
>     >>> the CRAN team and package developers.
>     >>> 
>     >>> Hugo
>     >>> 
>     >>> On 07/01/2021 15:45, Kirill M?ller via R-devel wrote:
>     >>>> One other failure mode: SSL certificates trusted by browsers that are
>     >>>> not installed on the check machine, e.g. the "GEANT Vereniging"
>     >>>> certificate from https://relational.fit.cvut.cz/ .
>     >>>> 
>     >>>> K
>     >>>> 
>     >>>> On 07.01.21 12:14, Kirill M?ller via R-devel wrote:
>     >>>>> Hi
>     >>>>> 
>     >>>>> The URL checks in R CMD check test all links in the README and
>     >>>>> vignettes for broken or redirected links. In many cases this improves
>     >>>>> documentation, I see problems with this approach which I have
>     >>>>> detailed below.
>     >>>>> 
>     >>>>> I'm writing to this mailing list because I think the change needs to
>     >>>>> happen in R's check routines. I propose to introduce an "allow-list"
>     >>>>> for URLs, to reduce the burden on both CRAN and package maintainers.
>     >>>>> 
>     >>>>> Comments are greatly appreciated.
>     >>>>> 
>     >>>>> Best regards
>     >>>>> 
>     >>>>> Kirill
>     >>>>> 
>     >>>>> # Problems with the detection of broken/redirected URLs
>     >>>>> 
>     >>>>> ## 301 should often be 307, how to change?
>     >>>>> 
>     >>>>> Many web sites use a 301 redirection code that probably should be a
>     >>>>> 307. For example, https://www.oracle.com and https://www.oracle.com/
>     >>>>> both redirect to https://www.oracle.com/index.html with a 301. I
>     >>>>> suspect the company still wants oracle.com to be recognized as the
>     >>>>> primary entry point of their web presence (to reserve the right to
>     >>>>> move the redirection to a different location later), I haven't
>     >>>>> checked with their PR department though. If that's true, the redirect
>     >>>>> probably should be a 307, which should be fixed by their IT
>     >>>>> department which I haven't contacted yet either.
>     >>>>> 
>     >>>>> $ curl -i https://www.oracle.com
>     >>>>> HTTP/2 301
>     >>>>> server: AkamaiGHost
>     >>>>> content-length: 0
>     >>>>> location: https://www.oracle.com/index.html
>     >>>>> ...
>     >>>>> 
>     >>>>> ## User agent detection
>     >>>>> 
>     >>>>> twitter.com responds with a 400 error for requests without a user
>     >>>>> agent string hinting at an accepted browser.
>     >>>>> 
>     >>>>> $ curl -i https://twitter.com/
>     >>>>> HTTP/2 400
>     >>>>> ...
>     >>>>> <body>...<p>Please switch to a supported browser...</p>...</body>
>     >>>>> 
>     >>>>> $ curl -s -i https://twitter.com/ -A "Mozilla/5.0 (X11; Ubuntu; Linux
>     >>>>> x86_64; rv:84.0) Gecko/20100101 Firefox/84.0" | head -n 1
>     >>>>> HTTP/2 200
>     >>>>> 
>     >>>>> # Impact
>     >>>>> 
>     >>>>> While the latter problem *could* be fixed by supplying a browser-like
>     >>>>> user agent string, the former problem is virtually unfixable -- so
>     >>>>> many web sites should use 307 instead of 301 but don't. The above
>     >>>>> list is also incomplete -- think of unreliable links, HTTP links,
>     >>>>> other failure modes...
>     >>>>> 
>     >>>>> This affects me as a package maintainer, I have the choice to either
>     >>>>> change the links to incorrect versions, or remove them altogether.
>     >>>>> 
>     >>>>> I can also choose to explain each broken link to CRAN, this subjects
>     >>>>> the team to undue burden I think. Submitting a package with NOTEs
>     >>>>> delays the release for a package which I must release very soon to
>     >>>>> avoid having it pulled from CRAN, I'd rather not risk that -- hence I
>     >>>>> need to remove the link and put it back later.
>     >>>>> 
>     >>>>> I'm aware of https://github.com/r-lib/urlchecker, this alleviates the
>     >>>>> problem but ultimately doesn't solve it.
>     >>>>> 
>     >>>>> # Proposed solution
>     >>>>> 
>     >>>>> ## Allow-list
>     >>>>> 
>     >>>>> A file inst/URL that lists all URLs where failures are allowed --
>     >>>>> possibly with a list of the HTTP codes accepted for that link.
>     >>>>> 
>     >>>>> Example:
>     >>>>> 
>     >>>>> https://oracle.com/ 301
>     >>>>> https://twitter.com/drob/status/1224851726068527106 400
>     > ______________________________________________
>     > R-devel at r-project.org mailing list
>     > https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From iuke-tier@ey m@iii@g oii uiow@@edu  Tue Jan 12 20:23:06 2021
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Tue, 12 Jan 2021 13:23:06 -0600 (CST)
Subject: [Rd] [External]  brief update on the pipe operator in R-devel
In-Reply-To: <alpine.DEB.2.21.2012221624270.3391@luke-Latitude-7480>
References: <alpine.DEB.2.21.2012221624270.3391@luke-Latitude-7480>
Message-ID: <alpine.DEB.2.21.2101121317310.3211@luke-Latitude-7480>

After some discussions we've settled on a syntax of the form

     mtcars |> subset(cyl == 4) |> d => lm(mpg ~ disp, data = d)

to handle cases where the pipe lhs needs to be passed to an argument
other than the first of the function called on the rhs. This seems a
to be a reasonable balance between making these non-standard cases
easy to see but still easy to write. This is now committed to R-devel.

Best,

luke

On Tue, 22 Dec 2020, luke-tierney at uiowa.edu wrote:

> It turns out that allowing a bare function expression on the
> right-hand side (RHS) of a pipe creates opportunities for confusion
> and mistakes that are too risky. So we will be dropping support for
> this from the pipe operator.
>
> The case of a RHS call that wants to receive the LHS result in an
> argument other than the first can be handled with just implicit first
> argument passing along the lines of
>
>    mtcars |> subset(cyl == 4) |> (\(d) lm(mpg ~ disp, data = d))()
>
> It was hoped that allowing a bare function expression would make this
> more convenient, but it has issues as outlined below. We are exploring
> some alternatives, and will hopefully settle on one soon after the
> holidays.
>
> The basic problem, pointed out in a comment on Twitter, is that in
> expressions of the form
>
>    1 |> \(x) x + 1 -> y
>    1 |> \(x) x + 1 |> \(y) x + y
>
> everything after the \(x) is parsed as part of the body of the
> function.  So these are parsed along the lines of
>
>    1 |> \(x) { x + 1 -> y }
>    1 |> \(x) { x + 1 |> \(y) x + y }
>
> In the first case the result is assigned to a (useless) local
> variable.  Someone writing this is more likely to have intended to
> assign the result to a global variable, as this would:
>
>    (1 |> \(x) x + 1) -> y
>
> In the second case the 'x' in 'x + y' refers to the local variable 'x'
> in the first RHS function. Someone writing this is more likely to have
> meant
>
>    (1 |> \(x) x + 1) |> \(y) x + y
>
> with 'x' in 'x + y' now referring to a global variable:
>
>    > x <- 2
>    > 1 |> \(x) x + 1 |> \(y) x + y
>    [1] 3
>    > (1 |> \(x) x + 1) |> \(y) x + y
>    [1] 4
>
> These issues arise with any approach in R that allows a bare function
> expression on the RHS of a pipe operation. It also arises in other
> languages with pipe operators. For example, here is the last example
> in Julia:
>
>    julia> x = 2
>    2
>    julia> 1 |> x -> x + 1 |> y -> x + y
>    3
>    julia> ( 1 |> x -> x + 1 ) |> y -> x + y
>    4
>
> Even though proper use of parentheses can work around these issues,
> the likelihood of making mistakes that are hard to track down is too
> high. So we will disallow the use of bare function expressions on the
> right hand side of a pipe.
>
> Best,
>
> luke
>
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From |uc@r @end|ng |rom |edor@project@org  Tue Jan 12 20:38:38 2021
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Tue, 12 Jan 2021 20:38:38 +0100
Subject: [Rd] [External] brief update on the pipe operator in R-devel
In-Reply-To: <alpine.DEB.2.21.2101121317310.3211@luke-Latitude-7480>
References: <alpine.DEB.2.21.2012221624270.3391@luke-Latitude-7480>
 <alpine.DEB.2.21.2101121317310.3211@luke-Latitude-7480>
Message-ID: <CALEXWq13odcpMsW_e+7e_Vvonx0pCmZHM=t6XNKRubhP4bKxGw@mail.gmail.com>

On Tue, 12 Jan 2021 at 20:23, <luke-tierney at uiowa.edu> wrote:
>
> After some discussions we've settled on a syntax of the form
>
>      mtcars |> subset(cyl == 4) |> d => lm(mpg ~ disp, data = d)
>
> to handle cases where the pipe lhs needs to be passed to an argument
> other than the first of the function called on the rhs. This seems a
> to be a reasonable balance between making these non-standard cases
> easy to see but still easy to write. This is now committed to R-devel.

Interesting. Is the use of "d =>" restricted to pipelines? In other
words, I think that it shouldn't be equivalent to "function(d)", i.e.,
that this:

x <- d => lm(mpg ~ disp, data = d)

shouldn't work.

-- 
I?aki ?car


From edd @end|ng |rom deb|@n@org  Tue Jan 12 21:00:43 2021
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Tue, 12 Jan 2021 14:00:43 -0600
Subject: [Rd] [External] brief update on the pipe operator in R-devel
In-Reply-To: <CALEXWq13odcpMsW_e+7e_Vvonx0pCmZHM=t6XNKRubhP4bKxGw@mail.gmail.com>
References: <alpine.DEB.2.21.2012221624270.3391@luke-Latitude-7480>
 <alpine.DEB.2.21.2101121317310.3211@luke-Latitude-7480>
 <CALEXWq13odcpMsW_e+7e_Vvonx0pCmZHM=t6XNKRubhP4bKxGw@mail.gmail.com>
Message-ID: <24573.65515.749231.597977@rob.eddelbuettel.com>


On 12 January 2021 at 20:38, I?aki Ucar wrote:
| On Tue, 12 Jan 2021 at 20:23, <luke-tierney at uiowa.edu> wrote:
| >
| > After some discussions we've settled on a syntax of the form
| >
| >      mtcars |> subset(cyl == 4) |> d => lm(mpg ~ disp, data = d)
| >
| > to handle cases where the pipe lhs needs to be passed to an argument
| > other than the first of the function called on the rhs. This seems a
| > to be a reasonable balance between making these non-standard cases
| > easy to see but still easy to write. This is now committed to R-devel.
| 
| Interesting. Is the use of "d =>" restricted to pipelines? In other
| words, I think that it shouldn't be equivalent to "function(d)", i.e.,
| that this:
| 
| x <- d => lm(mpg ~ disp, data = d)
| 
| shouldn't work.

Looks like your wish was already granted:

  > mtcars |> subset(cyl == 4) |> d => lm(mpg ~ disp, data = d)
  
  Call:
  lm(formula = mpg ~ disp, data = subset(mtcars, cyl == 4))
  
  Coefficients:
  (Intercept)         disp  
       40.872       -0.135  
  
  > d => lm(mpg ~ disp, data = d)
  Error in `=>`(d, lm(mpg ~ disp, data = d)) : could not find function "=>"
  > x <- d => lm(mpg ~ disp, data = d)
  Error in `=>`(d, lm(mpg ~ disp, data = d)) : could not find function "=>"
  > 
  
Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From w||||@mwdun|@p @end|ng |rom gm@||@com  Tue Jan 12 21:52:10 2021
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Tue, 12 Jan 2021 12:52:10 -0800
Subject: [Rd] [External] brief update on the pipe operator in R-devel
In-Reply-To: <24573.65515.749231.597977@rob.eddelbuettel.com>
References: <alpine.DEB.2.21.2012221624270.3391@luke-Latitude-7480>
 <alpine.DEB.2.21.2101121317310.3211@luke-Latitude-7480>
 <CALEXWq13odcpMsW_e+7e_Vvonx0pCmZHM=t6XNKRubhP4bKxGw@mail.gmail.com>
 <24573.65515.749231.597977@rob.eddelbuettel.com>
Message-ID: <CAHqSRuRn9snhctc9gKd7PU_gqNUdq=My+Mjmf_tZuim5+O55OQ@mail.gmail.com>

'=>' can be defined as a function.  E.g., it could be the logical "implies"
function:
    > `=>` <- function(x, y) !x | y
    > TRUE => FALSE
    [1] FALSE
    > FALSE => TRUE
    [1] TRUE
It might be nice then to have deparse() display it as an infix operator
instead of the current prefix:
    > deparse(quote(p => q))
    [1] "`=>`(p, q)"
There was a user who recently wrote asking for an infix operator like -> or
=> that would deparse nicely for use in some sort of model specification.

When used with |>, the parser will turn the |> and => into an ordinary
looking function call so deparsing is irrelevant.
    > deparse(quote(x |> tmp => f(7,arg2=tmp)))
    [1] "f(7, arg2 = x)"

-Bill

On Tue, Jan 12, 2021 at 12:01 PM Dirk Eddelbuettel <edd at debian.org> wrote:

>
> On 12 January 2021 at 20:38, I?aki Ucar wrote:
> | On Tue, 12 Jan 2021 at 20:23, <luke-tierney at uiowa.edu> wrote:
> | >
> | > After some discussions we've settled on a syntax of the form
> | >
> | >      mtcars |> subset(cyl == 4) |> d => lm(mpg ~ disp, data = d)
> | >
> | > to handle cases where the pipe lhs needs to be passed to an argument
> | > other than the first of the function called on the rhs. This seems a
> | > to be a reasonable balance between making these non-standard cases
> | > easy to see but still easy to write. This is now committed to R-devel.
> |
> | Interesting. Is the use of "d =>" restricted to pipelines? In other
> | words, I think that it shouldn't be equivalent to "function(d)", i.e.,
> | that this:
> |
> | x <- d => lm(mpg ~ disp, data = d)
> |
> | shouldn't work.
>
> Looks like your wish was already granted:
>
>   > mtcars |> subset(cyl == 4) |> d => lm(mpg ~ disp, data = d)
>
>   Call:
>   lm(formula = mpg ~ disp, data = subset(mtcars, cyl == 4))
>
>   Coefficients:
>   (Intercept)         disp
>        40.872       -0.135
>
>   > d => lm(mpg ~ disp, data = d)
>   Error in `=>`(d, lm(mpg ~ disp, data = d)) : could not find function "=>"
>   > x <- d => lm(mpg ~ disp, data = d)
>   Error in `=>`(d, lm(mpg ~ disp, data = d)) : could not find function "=>"
>   >
>
> Dirk
>
> --
> https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue Jan 12 22:16:20 2021
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 12 Jan 2021 16:16:20 -0500
Subject: [Rd] [External] brief update on the pipe operator in R-devel
In-Reply-To: <CAHqSRuRn9snhctc9gKd7PU_gqNUdq=My+Mjmf_tZuim5+O55OQ@mail.gmail.com>
References: <alpine.DEB.2.21.2012221624270.3391@luke-Latitude-7480>
 <alpine.DEB.2.21.2101121317310.3211@luke-Latitude-7480>
 <CALEXWq13odcpMsW_e+7e_Vvonx0pCmZHM=t6XNKRubhP4bKxGw@mail.gmail.com>
 <24573.65515.749231.597977@rob.eddelbuettel.com>
 <CAHqSRuRn9snhctc9gKd7PU_gqNUdq=My+Mjmf_tZuim5+O55OQ@mail.gmail.com>
Message-ID: <a4738f6b-7a8e-91f0-7975-2cfc61fc054f@gmail.com>

On 12/01/2021 3:52 p.m., Bill Dunlap wrote:
> '=>' can be defined as a function.  E.g., it could be the logical "implies"
> function:
>      > `=>` <- function(x, y) !x | y
>      > TRUE => FALSE
>      [1] FALSE
>      > FALSE => TRUE
>      [1] TRUE
> It might be nice then to have deparse() display it as an infix operator
> instead of the current prefix:
>      > deparse(quote(p => q))
>      [1] "`=>`(p, q)"
> There was a user who recently wrote asking for an infix operator like -> or
> => that would deparse nicely for use in some sort of model specification.

The precedence of it as an operator is determined by what makes sense in 
the pipe construction.  Currently precedence appears to be


:: :::	access variables in a namespace
$ @	component / slot extraction
[ [[	indexing
^	exponentiation (right to left)
- +	unary minus and plus
:	sequence operator
%any%	special operators (including %% and %/%)
* /	multiply, divide
+ -	(binary) add, subtract
< > <= >= == !=	ordering and comparison
!	negation
& &&	and
| ||	or
=>      PIPE BIND
|>      PIPE
~	as in formulae
-> ->>	rightwards assignment
<- <<-	assignment (right to left)
=	assignment (right to left)
?	help (unary and binary)

(Most of this is taken from ?Syntax, but I added the new operators in 
based on the gram.y file).  So

A & B => C & D

would appear to be parsed as

(A & B) => (C & D)

I think this also makes sense; do you?

Duncan Murdoch


> 
> When used with |>, the parser will turn the |> and => into an ordinary
> looking function call so deparsing is irrelevant.
>      > deparse(quote(x |> tmp => f(7,arg2=tmp)))
>      [1] "f(7, arg2 = x)"
> 
> -Bill
> 
> On Tue, Jan 12, 2021 at 12:01 PM Dirk Eddelbuettel <edd at debian.org> wrote:
> 
>>
>> On 12 January 2021 at 20:38, I?aki Ucar wrote:
>> | On Tue, 12 Jan 2021 at 20:23, <luke-tierney at uiowa.edu> wrote:
>> | >
>> | > After some discussions we've settled on a syntax of the form
>> | >
>> | >      mtcars |> subset(cyl == 4) |> d => lm(mpg ~ disp, data = d)
>> | >
>> | > to handle cases where the pipe lhs needs to be passed to an argument
>> | > other than the first of the function called on the rhs. This seems a
>> | > to be a reasonable balance between making these non-standard cases
>> | > easy to see but still easy to write. This is now committed to R-devel.
>> |
>> | Interesting. Is the use of "d =>" restricted to pipelines? In other
>> | words, I think that it shouldn't be equivalent to "function(d)", i.e.,
>> | that this:
>> |
>> | x <- d => lm(mpg ~ disp, data = d)
>> |
>> | shouldn't work.
>>
>> Looks like your wish was already granted:
>>
>>    > mtcars |> subset(cyl == 4) |> d => lm(mpg ~ disp, data = d)
>>
>>    Call:
>>    lm(formula = mpg ~ disp, data = subset(mtcars, cyl == 4))
>>
>>    Coefficients:
>>    (Intercept)         disp
>>         40.872       -0.135
>>
>>    > d => lm(mpg ~ disp, data = d)
>>    Error in `=>`(d, lm(mpg ~ disp, data = d)) : could not find function "=>"
>>    > x <- d => lm(mpg ~ disp, data = d)
>>    Error in `=>`(d, lm(mpg ~ disp, data = d)) : could not find function "=>"
>>    >
>>
>> Dirk
>>
>> --
>> https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From w||||@mwdun|@p @end|ng |rom gm@||@com  Wed Jan 13 18:19:35 2021
From: w||||@mwdun|@p @end|ng |rom gm@||@com (Bill Dunlap)
Date: Wed, 13 Jan 2021 09:19:35 -0800
Subject: [Rd] [External] brief update on the pipe operator in R-devel
In-Reply-To: <a4738f6b-7a8e-91f0-7975-2cfc61fc054f@gmail.com>
References: <alpine.DEB.2.21.2012221624270.3391@luke-Latitude-7480>
 <alpine.DEB.2.21.2101121317310.3211@luke-Latitude-7480>
 <CALEXWq13odcpMsW_e+7e_Vvonx0pCmZHM=t6XNKRubhP4bKxGw@mail.gmail.com>
 <24573.65515.749231.597977@rob.eddelbuettel.com>
 <CAHqSRuRn9snhctc9gKd7PU_gqNUdq=My+Mjmf_tZuim5+O55OQ@mail.gmail.com>
 <a4738f6b-7a8e-91f0-7975-2cfc61fc054f@gmail.com>
Message-ID: <CAHqSRuQ_HYgVKEjzb=geoabxmSLup37q_DYdAJbHSMLSxn5rAQ@mail.gmail.com>

I agree that the precedence looks reasonable.  E.g.,

> str.language(quote(A > 0 & A<=B & B <= C => A <= C & 0 < C))
language: `=>`(A > 0 & A <= B & B <= C, A <= C ...
  symbol: =>
  language: A > 0 & A <= B & B <= C
    symbol: &
    language: A > 0 & A <= B
      symbol: &
      language: A > 0
        symbol: >
        symbol: A
        double: 0
      language: A <= B
        symbol: <=
        symbol: A
        symbol: B
    language: B <= C
      symbol: <=
      symbol: B
      symbol: C
  language: A <= C & 0 < C
    symbol: &
    language: A <= C
      symbol: <=
      symbol: A
      symbol: C
    language: 0 < C
      symbol: <
      double: 0
      symbol: C
> str.language(quote(data |> tmp1 => f1(x, arg1=tmp1) |> f2(y) |> tmp3 =>
f3(z, arg3=tmp3)))
language: f3(z, arg3 = f2(f1(x, arg1 = data), y))
  symbol: f3
  symbol: z
  language: arg3 = f2(f1(x, arg1 = data), y)
    symbol: f2
    language: f1(x, arg1 = data)
      symbol: f1
      symbol: x
      symbol: arg1 = data
    symbol: y

Where str.language is

str.language <- function(expr, name = "", indent = 0)
{
    trim... <- function(string, width.cutoff) {
        if (nchar(string) > width.cutoff) {
            string <- sprintf("%.*s ...", width.cutoff-4, string)
        }
        string
    }
    cat(sep="", rep("  ", indent), typeof(expr), ": ",
        if(length(name)==1 && nzchar(name)) { paste0(name, " = ") },
        trim...(deparse1(expr, width.cutoff=40), width.cutoff=40),
        "\n")
    if (is.recursive(expr)) {
        if (!is.list(expr)) {
            expr <- as.list(expr)
        }
        nms <- names(expr)
        for (i in seq_along(expr)) {
            str.language(expr[[i]], name=nms[[i]], indent = indent + 1)
        }
    }
    invisible(expr)

                                                 }

On Tue, Jan 12, 2021 at 1:16 PM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> On 12/01/2021 3:52 p.m., Bill Dunlap wrote:
> > '=>' can be defined as a function.  E.g., it could be the logical
> "implies"
> > function:
> >      > `=>` <- function(x, y) !x | y
> >      > TRUE => FALSE
> >      [1] FALSE
> >      > FALSE => TRUE
> >      [1] TRUE
> > It might be nice then to have deparse() display it as an infix operator
> > instead of the current prefix:
> >      > deparse(quote(p => q))
> >      [1] "`=>`(p, q)"
> > There was a user who recently wrote asking for an infix operator like ->
> or
> > => that would deparse nicely for use in some sort of model specification.
>
> The precedence of it as an operator is determined by what makes sense in
> the pipe construction.  Currently precedence appears to be
>
>
> :: :::  access variables in a namespace
> $ @     component / slot extraction
> [ [[    indexing
> ^       exponentiation (right to left)
> - +     unary minus and plus
> :       sequence operator
> %any%   special operators (including %% and %/%)
> * /     multiply, divide
> + -     (binary) add, subtract
> < > <= >= == != ordering and comparison
> !       negation
> & &&    and
> | ||    or
> =>      PIPE BIND
> |>      PIPE
> ~       as in formulae
> -> ->>  rightwards assignment
> <- <<-  assignment (right to left)
> =       assignment (right to left)
> ?       help (unary and binary)
>
> (Most of this is taken from ?Syntax, but I added the new operators in
> based on the gram.y file).  So
>
> A & B => C & D
>
> would appear to be parsed as
>
> (A & B) => (C & D)
>
> I think this also makes sense; do you?
>
> Duncan Murdoch
>
>
> >
> > When used with |>, the parser will turn the |> and => into an ordinary
> > looking function call so deparsing is irrelevant.
> >      > deparse(quote(x |> tmp => f(7,arg2=tmp)))
> >      [1] "f(7, arg2 = x)"
> >
> > -Bill
> >
> > On Tue, Jan 12, 2021 at 12:01 PM Dirk Eddelbuettel <edd at debian.org>
> wrote:
> >
> >>
> >> On 12 January 2021 at 20:38, I?aki Ucar wrote:
> >> | On Tue, 12 Jan 2021 at 20:23, <luke-tierney at uiowa.edu> wrote:
> >> | >
> >> | > After some discussions we've settled on a syntax of the form
> >> | >
> >> | >      mtcars |> subset(cyl == 4) |> d => lm(mpg ~ disp, data = d)
> >> | >
> >> | > to handle cases where the pipe lhs needs to be passed to an argument
> >> | > other than the first of the function called on the rhs. This seems a
> >> | > to be a reasonable balance between making these non-standard cases
> >> | > easy to see but still easy to write. This is now committed to
> R-devel.
> >> |
> >> | Interesting. Is the use of "d =>" restricted to pipelines? In other
> >> | words, I think that it shouldn't be equivalent to "function(d)", i.e.,
> >> | that this:
> >> |
> >> | x <- d => lm(mpg ~ disp, data = d)
> >> |
> >> | shouldn't work.
> >>
> >> Looks like your wish was already granted:
> >>
> >>    > mtcars |> subset(cyl == 4) |> d => lm(mpg ~ disp, data = d)
> >>
> >>    Call:
> >>    lm(formula = mpg ~ disp, data = subset(mtcars, cyl == 4))
> >>
> >>    Coefficients:
> >>    (Intercept)         disp
> >>         40.872       -0.135
> >>
> >>    > d => lm(mpg ~ disp, data = d)
> >>    Error in `=>`(d, lm(mpg ~ disp, data = d)) : could not find function
> "=>"
> >>    > x <- d => lm(mpg ~ disp, data = d)
> >>    Error in `=>`(d, lm(mpg ~ disp, data = d)) : could not find function
> "=>"
> >>    >
> >>
> >> Dirk
> >>
> >> --
> >> https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>

	[[alternative HTML version deleted]]


