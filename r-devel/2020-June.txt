From brod|e@g@@|@m @end|ng |rom y@hoo@com  Mon Jun  1 03:13:40 2020
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Mon, 1 Jun 2020 01:13:40 +0000 (UTC)
Subject: [Rd] eval and Calling Frames
References: <1420461985.617634.1590974020657.ref@mail.yahoo.com>
Message-ID: <1420461985.617634.1590974020657@mail.yahoo.com>

 I ran into an interesting issue with `evalq` (and also
`eval(quote(...))`):

???? f <- function() {
?????? list(
???????? sys.parent(1),
???????? evalq(sys.parent(1)),
???????? evalq((function() sys.parent(2))()),? # add an anon fun layer
???????? evalq((function() sys.parent(1))())
?????? )
???? }
???? res <- f()
???? str(res)
???? ## List of 4
???? ##? $ : int 0???????? # sys.parent(1)
???? ##? $ : int 2???????? # evalq(sys.parent(1))
???? ##? $ : int 0???????? # evalq((function() sys.parent(2))())
???? ##? $ : int 1???????? # evalq((function() sys.parent(1))())

In order of least to most surprising:

1. `sys.parent(1)` and `evalq(sys.parent(1))` are not the same
2. `evalq(sys.parent(1))` and `evalq((function() sys.parent(2))())`
?? are not the same
3. `evalq((function() sys.parent(1))())` returns a lower frame number
?? than `evalq(sys.parent(1))`

The root cause of this is that the `evalq` **closure** sets a context,
but then the C-level `do_eval` it invokes sets another one[1] with the
new `evalq` context as the calling frame (`cptr->sysparent`)[2].? This
then interacts with how `sys.parent` resolves parents when a target
frame appears more than once in the context stack.? `sys.parent`
returns the oldest context that matches[3], and in this case `f`'s
frame appears twice because `evalq` adds it via `do_eval`.

One option is to change what `sysparent` of the `evalq` `envir`.
For example, if we set it to be the same as it would be for commands
outside the `evalq` we get:

???? str(res)
???? ## List of 4
???? ##? $ : int 0???????? # sys.parent(1)
???? ##? $ : int 0???????? # evalq(sys.parent(1))
???? ##? $ : int 0???????? # evalq((function() sys.parent(2))())
???? ##? $ : int 1???????? # evalq((function() sys.parent(1))())

There is precedent for doing this in S3 generics and their methods
where method `sysparent` is set to be that of the generic.? Now
`evalq` no longer interferes with the resolution of calling frames.
It seems reasonable to set evaluation environments without affecting
what the calling frame is. Indeed that happens when we do something like
`environment(fun) <- blah` as the calling frame is unaffected when `fun` is
invoked.

I attach a patch that implements this change.? The patch is a
hack-job intended solely for illustrative purposes, though it does
pass `make check-all` on a current version of r-devel.? I also ran the
`rlang` tests as those probably push the envelope in this area.? There
only one failed with 2,613 passing.? The failed one is for a
deprecated function that was specifically checking for the repeated
`evalq` contexts[7].

I also attach a document with additional examples and commentary for
those interested.

Best,

Brodie.

PS: for a loosely related issue see #15531[8].

[1]: https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/eval.c#L3329
[2]: https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/context.c#L260
[3]: https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/context.c#L433
[4]: https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/eval.c#L1815
[5]: https://cran.r-project.org/doc/manuals/r-devel/R-ints.html#Contexts
[6]: https://bugs.r-project.org/bugzilla/show_bug.cgi?id=15531
[7]: https://github.com/r-lib/rlang/blob/v0.4.6/tests/testthat/test-retired.R#L437
[8]: https://bugs.r-project.org/bugzilla/show_bug.cgi?id=15531



-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: patch.txt
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200601/bd8d8d21/attachment.txt>

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: details.txt
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200601/bd8d8d21/attachment-0001.txt>

From ||one| @end|ng |rom r@tud|o@com  Mon Jun  1 12:52:23 2020
From: ||one| @end|ng |rom r@tud|o@com (Lionel Henry)
Date: Mon, 1 Jun 2020 12:52:23 +0200
Subject: [Rd] eval and Calling Frames
In-Reply-To: <1420461985.617634.1590974020657@mail.yahoo.com>
References: <1420461985.617634.1590974020657.ref@mail.yahoo.com>
 <1420461985.617634.1590974020657@mail.yahoo.com>
Message-ID: <CAJf4E3rvGvcaMQ=zAA2W5Uk2-WZZYE+irxwfQy7N_x7DOC3zag@mail.gmail.com>

Hi Brodie,

I wouldn't use the rlang tests as a measure of backward compatibility.
Your patch changes the structure of the `parent.frame()` hierarchy,
which is likely to be disruptive with packages that do weird NSE stuff
(and so, not rlang ;-p). Currently things are set up so that the
parent frame of the evaluated call is the "target" `eval()` context,
which itself has for parent the "closure" `eval()` context.

For example, with:

```
foo <- function() eval(quote(bar()))
bar <- function() EXPR()
```

The current hierarchy (as defined by `parent.frame()`) is:

```
    ?
 1. ??global::foo()
 2.   ??base::eval(quote(bar()))
 3.     ??base::eval(quote(bar()))   <- This is the same frame env as foo()
 4.       ??global::bar()
 5.         ??global::EXPR()
```

With your patch, it becomes:

```
    ?
 1. ??global::foo()
 2.   ??base::eval(quote(bar()))
 3.   ? ??base::eval(quote(bar()))
 4.   ??global::bar()
 5.     ??global::EXPR()
```

I agree the second hierarchy is preferable. See also the documentation
of `filter.callframes` in `?Rprof` which patches up things so that the
`eval()` frames are filtered out from the trailing backtrace
branch. This wouldn't be necessary with the second hierarchy.

Best,
Lionel


On 6/1/20, brodie gaslam via R-devel <r-devel at r-project.org> wrote:
>  I ran into an interesting issue with `evalq` (and also
> `eval(quote(...))`):
>
> ???? f <- function() {
> ?????? list(
> ???????? sys.parent(1),
> ???????? evalq(sys.parent(1)),
> ???????? evalq((function() sys.parent(2))()),? # add an anon fun layer
> ???????? evalq((function() sys.parent(1))())
> ?????? )
> ???? }
> ???? res <- f()
> ???? str(res)
> ???? ## List of 4
> ???? ##? $ : int 0???????? # sys.parent(1)
> ???? ##? $ : int 2???????? # evalq(sys.parent(1))
> ???? ##? $ : int 0???????? # evalq((function() sys.parent(2))())
> ???? ##? $ : int 1???????? # evalq((function() sys.parent(1))())
>
> In order of least to most surprising:
>
> 1. `sys.parent(1)` and `evalq(sys.parent(1))` are not the same
> 2. `evalq(sys.parent(1))` and `evalq((function() sys.parent(2))())`
> ?? are not the same
> 3. `evalq((function() sys.parent(1))())` returns a lower frame number
> ?? than `evalq(sys.parent(1))`
>
> The root cause of this is that the `evalq` **closure** sets a context,
> but then the C-level `do_eval` it invokes sets another one[1] with the
> new `evalq` context as the calling frame (`cptr->sysparent`)[2].? This
> then interacts with how `sys.parent` resolves parents when a target
> frame appears more than once in the context stack.? `sys.parent`
> returns the oldest context that matches[3], and in this case `f`'s
> frame appears twice because `evalq` adds it via `do_eval`.
>
> One option is to change what `sysparent` of the `evalq` `envir`.
> For example, if we set it to be the same as it would be for commands
> outside the `evalq` we get:
>
> ???? str(res)
> ???? ## List of 4
> ???? ##? $ : int 0???????? # sys.parent(1)
> ???? ##? $ : int 0???????? # evalq(sys.parent(1))
> ???? ##? $ : int 0???????? # evalq((function() sys.parent(2))())
> ???? ##? $ : int 1???????? # evalq((function() sys.parent(1))())
>
> There is precedent for doing this in S3 generics and their methods
> where method `sysparent` is set to be that of the generic.? Now
> `evalq` no longer interferes with the resolution of calling frames.
> It seems reasonable to set evaluation environments without affecting
> what the calling frame is. Indeed that happens when we do something like
> `environment(fun) <- blah` as the calling frame is unaffected when `fun` is
> invoked.
>
> I attach a patch that implements this change.? The patch is a
> hack-job intended solely for illustrative purposes, though it does
> pass `make check-all` on a current version of r-devel.? I also ran the
> `rlang` tests as those probably push the envelope in this area.? There
> only one failed with 2,613 passing.? The failed one is for a
> deprecated function that was specifically checking for the repeated
> `evalq` contexts[7].
>
> I also attach a document with additional examples and commentary for
> those interested.
>
> Best,
>
> Brodie.
>
> PS: for a loosely related issue see #15531[8].
>
> [1]:
> https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/eval.c#L3329
> [2]:
> https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/context.c#L260
> [3]:
> https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/context.c#L433
> [4]:
> https://github.com/wch/r-source/blob/tags/R-4-0-0/src/main/eval.c#L1815
> [5]: https://cran.r-project.org/doc/manuals/r-devel/R-ints.html#Contexts
> [6]: https://bugs.r-project.org/bugzilla/show_bug.cgi?id=15531
> [7]:
> https://github.com/r-lib/rlang/blob/v0.4.6/tests/testthat/test-retired.R#L437
> [8]: https://bugs.r-project.org/bugzilla/show_bug.cgi?id=15531
>
>
>


From @udomeme @end|ng |rom gm@||@com  Mon Jun  1 23:36:03 2020
From: @udomeme @end|ng |rom gm@||@com (Sue McDonald)
Date: Mon, 1 Jun 2020 16:36:03 -0500
Subject: [Rd] Debugging packages with compiled C code on Windows
Message-ID: <CAOkNWZU8c5NG32h-A-7uA-rqPZRB5dGs61U3pYreFEPJk0eaOg@mail.gmail.com>

I have several related questions.

1.  Is it possible to use a GUI: Rstudio/Eclipse/Visual-studio to debug
compiled code on Windows? Things that work on Eclipse for Windows do not
work on Eclipse for Windows.
2.  R CMD INSTALL seems to override default attempts to provide
CFLAGS="-DDEBUG -g3 -O0"
3.  Is it necessary to compile R with debug turned on?   One of the FAQs
mentioned to compile R with make DEBUG=T.
4.  Using Rtools 4.0 and Jeroen's scripts for building R works great (many
thanks). But does not seem to have an impact on optimization, other than
including -gwarf-2.  It adds -DNDEBUG flag.  Is that sufficient for
debugging compiled code in a package?  Obviously, I just need to debug
package code, so does it matter?

I am happy to write-up a FAQ.

Thanks, SM

	[[alternative HTML version deleted]]


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Tue Jun  2 00:37:24 2020
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Mon, 1 Jun 2020 22:37:24 +0000
Subject: [Rd] Debugging packages with compiled C code on Windows
In-Reply-To: <CAOkNWZU8c5NG32h-A-7uA-rqPZRB5dGs61U3pYreFEPJk0eaOg@mail.gmail.com>
References: <CAOkNWZU8c5NG32h-A-7uA-rqPZRB5dGs61U3pYreFEPJk0eaOg@mail.gmail.com>
Message-ID: <CAL6gwnJKx0CF8bZoU9dvTEW8_gY7UvRrt71VRo5Wousyg-PoeA@mail.gmail.com>

Hello, Sue.

1. I work exclusively on Windows have packages with compiled C, C++,
and Fortran (2003+)  and I use RStudio to debug and work with them
using Rtools40, so I guess it's possible. Have I misunderstood and are
you asking about debugging assembler?
2. If you're using Jeroen's scripts, have you tried uncommenting and
adding that to EOPTS in MkRules.local.in? Note that
./src/gnuwin32/fixed/Makefile has a nasty habit of overriding various
optimizations that affect packages.
3. I don't think so
4. The default is that EOPTS is commented out. I talk about it a nit
more at length here [1]. Perhaps that would be of use?

[1] <https://www.avrahamadler.com/2020/05/12/building-r-4-for-windows-with-openblas/>

Good Luck,

Avi


On Mon, Jun 1, 2020 at 9:36 PM Sue McDonald <sudomeme at gmail.com> wrote:
>
> I have several related questions.
>
> 1.  Is it possible to use a GUI: Rstudio/Eclipse/Visual-studio to debug
> compiled code on Windows? Things that work on Eclipse for Windows do not
> work on Eclipse for Windows.
> 2.  R CMD INSTALL seems to override default attempts to provide
> CFLAGS="-DDEBUG -g3 -O0"
> 3.  Is it necessary to compile R with debug turned on?   One of the FAQs
> mentioned to compile R with make DEBUG=T.
> 4.  Using Rtools 4.0 and Jeroen's scripts for building R works great (many
> thanks). But does not seem to have an impact on optimization, other than
> including -gwarf-2.  It adds -DNDEBUG flag.  Is that sufficient for
> debugging compiled code in a package?  Obviously, I just need to debug
> package code, so does it matter?
>
> I am happy to write-up a FAQ.
>
> Thanks, SM
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From jeroenoom@ @end|ng |rom gm@||@com  Tue Jun  2 01:14:28 2020
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Tue, 2 Jun 2020 01:14:28 +0200
Subject: [Rd] Debugging packages with compiled C code on Windows
In-Reply-To: <CAOkNWZU8c5NG32h-A-7uA-rqPZRB5dGs61U3pYreFEPJk0eaOg@mail.gmail.com>
References: <CAOkNWZU8c5NG32h-A-7uA-rqPZRB5dGs61U3pYreFEPJk0eaOg@mail.gmail.com>
Message-ID: <CABFfbXuP78e52heZT1a=Y3n08RQsR9h_rV_9SB5F1Fn6BaQwDA@mail.gmail.com>

On Mon, Jun 1, 2020 at 11:36 PM Sue McDonald <sudomeme at gmail.com> wrote:
>
> I have several related questions.
>
> 1.  Is it possible to use a GUI: Rstudio/Eclipse/Visual-studio to debug
> compiled code on Windows? Things that work on Eclipse for Windows do not
> work on Eclipse for Windows.
> 2.  R CMD INSTALL seems to override default attempts to provide
> CFLAGS="-DDEBUG -g3 -O0"
> 3.  Is it necessary to compile R with debug turned on?   One of the FAQs
> mentioned to compile R with make DEBUG=T.
> 4.  Using Rtools 4.0 and Jeroen's scripts for building R works great (many
> thanks). But does not seem to have an impact on optimization, other than
> including -gwarf-2.  It adds -DNDEBUG flag.  Is that sufficient for
> debugging compiled code in a package?  Obviously, I just need to debug
> package code, so does it matter?

If you use the official R-for-Windows installation, you should install
your R package with R CMD INSTALL --debug in order to keep debug
symbols. That is usually sufficient to get a backtrace with e.g
drmingw. See FAQ 8.4 of
https://cran.r-project.org/bin/windows/base/rw-FAQ.html

Coincidentally I am also working on a special debugging build of R,
which uses -g -O0 for all compiled code. It is not final yet, but it
should work. You can test it here:
https://github.com/r-windows/rtools-packages/pull/119


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Jun  2 11:34:06 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 2 Jun 2020 11:34:06 +0200
Subject: [Rd] R standalone Rmath library - missing log1pexp(), rnbeta()
In-Reply-To: <11672D34-4B11-44E3-8017-A99A1D6AC3EE@doplganger.com>
References: <11672D34-4B11-44E3-8017-A99A1D6AC3EE@doplganger.com>
Message-ID: <24278.7438.755946.508490@stat.math.ethz.ch>

>>>>> William Birkett 
>>>>>     on Mon, 1 Jun 2020 15:16:07 -0400 writes:

    > I built the the standalone Rmath library,
    > https://cran.r-project.org/doc/manuals/r-release/R-admin.html#The-standalone-Rmath-library
    > <https://cran.r-project.org/doc/manuals/r-release/R-admin.html#The-standalone-Rmath-library>

    > The build process went smoothly.

    > But, there are two functions, log1pexp() and rnbeta(),
    > which appear in the header file, and not in
    > ?libRmath.dylib?.

    > There is a comment in the header, '// <--
    > ../nmath/plogis.c? next to log1pexp(). That file,
    > ?plogis.c? contains a function ?Rf_log1pexp?, which is how
    > the function would be named without '#define
    > MATHLIB_STANDALONE?.

    > The other function, 'rnbeta()? doesn?t appear in any of
    > the source files in the ?nmath? folder. Maybe a file is
    > missing.

Incidentally (not being an Apple costumer), I've seen this; as
I'm the one who had added  log1pexp()  (8 years ago), I've been intrigued.

The problems you are seeing are *not* at all related to R on the
Mac. ==> I'm exceptionally crossposting to R-devel.
=======> Please followup there, *not* on R-SIG-mac.

1) An R core colleague of mine had decided log1pexp() should be
   Rf_log1pexp() but had forgotten to update the documentation.

   This should be fixed one way (= documentation),  or then, as
   it is the *only* function with name Rf_*() in the whole of standalone
   Rmathlib.{so,dynlib} by renaming it back to log1pexp().

2) rnbeta(): This has been in the headers forever, but there has
   not been a corresponding function in R's C code.

   As you, can see, R's  rbeta(*, ncp = v) currently just calls R code,
   and so there was never a need for a C level rnbeta().  OTOH,
   this is a pity/asymmetry, and I had wanted to change this
   (and also add 'rnt' or 'rnf') to the standalone Rmathlib for
   a long time.  The reason this has not happened (yet?):
   Because of vectorization working differently in the current R
   code of the r*(*, ncp=*) functions and the corresponding C
   code, this would lead to different random numbers in this
   case... and so such a change --- to make Rmathlib "complete" ---
   is something to be discussed.

Best regards,
Martin Maechler
ETH Zurich  and  R Core Team


    > William B. Birkett ....
    > .......irkett at doplganger.com

    > 	[[alternative HTML version deleted]]


From m|ch@e|ch|r|co4 @end|ng |rom gm@||@com  Thu Jun  4 06:04:12 2020
From: m|ch@e|ch|r|co4 @end|ng |rom gm@||@com (Michael Chirico)
Date: Thu, 4 Jun 2020 12:04:12 +0800
Subject: [Rd] Translations and snprintf on Windows
In-Reply-To: <CAPRVBcx9rZQx7rFQj-a6KK+6LXPi5t_2p0NXte9HAjY9F5tP4g@mail.gmail.com>
References: <CAPRVBcx9rZQx7rFQj-a6KK+6LXPi5t_2p0NXte9HAjY9F5tP4g@mail.gmail.com>
Message-ID: <CAPRVBczmyZJ4y=SF_k6qw2pQ3e=9zP2B1UiE2Py2qy371VvKgw-1294@mail.gmail.com>

Following up on this after Matt D truffled out the issue -- snprintf was a
*bit* of a red herring.

The root of the issue is the use of positional identifiers (like %1$d, see
https://stackoverflow.com/questions/19327441/gcc-dollar-sign-in-printf-format-string)
in the format string for translations.

These identifiers are quite useful for translations since grammar changes
by language mean the inputs should naturally change order when changing
languages -- however, they are a POSIX extension.

snprintf produced the issue since all other messages are ultimately R
functions, and base R handles the issue (AFAICT via trioremap.h).


On Thu, Apr 30, 2020 at 4:16 PM Michael Chirico <michaelchirico4 at gmail.com>
wrote:

> [a bit unsure on if this is maybe better for r-package-devel]
>
> We recently added translations to messages at the R and C level to
> data.table.
>
> At the C level, we did _() wrapping for char arrays supplied to the
> following functions: error, warning, Rprintf, Error, and snprintf.
>
> This seemed OK but the use of snprintf specifically appears to have caused
> a crash on Windows:
>
> https://github.com/Rdatatable/data.table/issues/4402
>
> Is there any guidance against using gettext with snprintf, or perhaps
> guidance on which "outputters" *are* OK for translation?
>
> Michael Chirico
>

	[[alternative HTML version deleted]]


From pd@me@ @end|ng |rom cb@@dk  Sat Jun  6 10:25:36 2020
From: pd@me@ @end|ng |rom cb@@dk (Peter Dalgaard)
Date: Sat, 6 Jun 2020 08:25:36 +0000
Subject: [Rd] R 4.0.1 is released
Message-ID: <E3CC9F48-B248-43DF-82A5-E51EFDD0BFDD@cbs.dk>

The build system rolled up R-4.0.1.tar.gz (codename "See Things Now") this morning.

The list below details the changes in this release.

You can get the source code from

http://cran.r-project.org/src/base/R-4/R-4.0.1.tar.gz

or wait for it to be mirrored at a CRAN site nearer to you.

Binaries for various platforms will appear in due course.


For the R Core Team,

Peter Dalgaard

These are the checksums (md5 and SHA-256) for the freshly created files, in case you wish
to check that they are uncorrupted:

MD5 (AUTHORS) = b9c44f9f78cab3184ad9898bebc854b4
MD5 (COPYING) = eb723b61539feef013de476e68b5c50a
MD5 (COPYING.LIB) = a6f89e2100d9b6cdffcea4f398e37343
MD5 (FAQ) = 4afa171cd982aaa60f0ba92e2e7bc5d6
MD5 (INSTALL) = 7893f754308ca31f1ccf62055090ad7b
MD5 (NEWS) = 425fd186ac71e462e66af7fb33f86ab4
MD5 (NEWS.0) = bfcd7c147251b5474d96848c6f57e5a8
MD5 (NEWS.1) = eb78c4d053ec9c32b815cf0c2ebea801
MD5 (NEWS.2) = 496062c138e2def06cebccddfb814ac6
MD5 (NEWS.3) = 012e7f4a80cc8ec947bf3f0ff6117ec8
MD5 (R-latest.tar.gz) = 8d199d11865c202cf2bd006e7f32dab7
MD5 (README) = f468f281c919665e276a1b691decbbe6
MD5 (RESOURCES) = 529223fd3ffef95731d0a87353108435
MD5 (THANKS) = 251d20510bfc3cc93b82c5a99f7efcc6
MD5 (VERSION-INFO.dcf) = 7d8af8c338a1e146f9471744d092078a
MD5 (R-4/R-4.0.1.tar.gz) = 8d199d11865c202cf2bd006e7f32dab7

2cde824a7b18958e5f06b391c801c8288be0f84fa8934b7ddefef23c67e60c09  AUTHORS
e6d6a009505e345fe949e1310334fcb0747f28dae2856759de102ab66b722cb4  COPYING
6095e9ffa777dd22839f7801aa845b31c9ed07f3d6bf8a26dc5d2dec8ccc0ef3  COPYING.LIB
eddf87b12197c7b3b19cbc9b11c1beab95b14e3dcd715bf37d2f6a8b2a72c2a1  FAQ
f87461be6cbaecc4dce44ac58e5bd52364b0491ccdadaf846cb9b452e9550f31  INSTALL
1dfd76a990f2a1b11ee4ff17284d18c2177179ee7bbaef51b32e1e7a58719596  NEWS
4e21b62f515b749f80997063fceab626d7258c7d650e81a662ba8e0640f12f62  NEWS.0
12b30c724117b1b2b11484673906a6dcd48a361f69fc420b36194f9218692d01  NEWS.1
e80de410c77f05ff2012fa70051b89119845f734a7fa5c55857e61e4ed7d5f6e  NEWS.2
7201d139947afa52b5e09d26dc01445edf444506264355b2185122bc1ed3dce0  NEWS.3
95fe24a4d8d8f8f888460c8f5fe4311cec656e7a1722d233218bc03861bc6f32  R-latest.tar.gz
2fdd3e90f23f32692d4b3a0c0452f2c219a10882033d1774f8cadf25886c3ddc  README
408737572ecc6e1135fdb2cf7a9dbb1a6cb27967c757f1771b8c39d1fd2f1ab9  RESOURCES
c9c7cb32308b4e560a22c858819ade9de524a602abd4e92d1c328c89f8037d73  THANKS
d3cdccb1b1645fce356d08892baa0587aa2aef2e851ad552d47cce856137d9b3  VERSION-INFO.dcf
95fe24a4d8d8f8f888460c8f5fe4311cec656e7a1722d233218bc03861bc6f32  R-4/R-4.0.1.tar.gz

This is the relevant part of the NEWS file

CHANGES IN R 4.0.1:

  NEW FEATURES:

    * paste() and paste0() gain a new optional argument recycle0.  When
      set to true, zero-length arguments are recycled leading to
      character(0) after the sep-concatenation, i.e., to the empty
      string "" if collapse is a string and to the zero-length value
      character(0) when collapse = NULL.

      A package whose code uses this should depend on R (>= 4.0.1).

    * The summary(<warnings>) method now maps the counts correctly to
      the warning messages.

  BUG FIXES:

    * aov(frml, ...) now also works where the formula deparses to more
      than 500 characters, thanks to a report and patch proposal by Jan
      Hauffa.

    * Fix a dozen places (code, examples) as Sys.setlocale() returns
      the new rather than the previous setting.

    * Fix for adding two complex grid units via sum().  Thanks to Gu
      Zuguang for the report and Thomas Lin Pedersen for the patch.

    * Fix parallel::mclapply(..., mc.preschedule=FALSE) to handle raw
      vector results correctly. PR#17779

    * Computing the base value, i.e., 2, "everywhere", now uses
      FLT_RADIX, as the original machar code looped indefinitely on the
      ppc64 architecture for the longdouble case.

    * In R 4.0.0, sort.list(x) when is.object(x) was true, e.g., for x
      <- I(letters), was accidentally using method = "radix".
      Consequently, e.g., merge(<data.frame>) was much slower than
      previously; reported in PR#17794.

    * plot(y ~ x, ylab = quote(y[i])) now works, as e.g., for xlab;
      related to PR#10525.

    * parallel::detect.cores(all.tests = TRUE) tries a matching OS name
      before the other tests (which were intended only for unknown
      OSes).

    * Parse data for raw strings is now recorded correctly. Reported by
      Gabor Csardi.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From p@tr|ck@@chr@tz @end|ng |rom gm@||@com  Sat Jun  6 09:04:26 2020
From: p@tr|ck@@chr@tz @end|ng |rom gm@||@com (Patrick Schratz)
Date: Sat, 06 Jun 2020 09:04:26 +0200
Subject: [Rd] install.packages(): About an option for installing archived
 versions
Message-ID: <8144BB12-0875-463E-8844-EDD216EF6285@gmail.com>

Dear list,

Various helpers exist in the wild to install older archived versions of 
CRAN packages, for example `remotes::install_version() ` or 
`versions::install.version()`.
The former makes use of an ?archive.rds? file stored in the CRAN 
/Meta directory: 
https://github.com/r-lib/remotes/blob/9b5dc29102a486df2f42c88bb19027a7cd54a721/R/install-version.R#L68

Given its existence, I was wondering why there is no official support in 
`install.packages()`?
I was browsing the mailing archives of r-devel but surprisingly could 
not find a previous discussion about it.
`remotes::install_version()` only uses the tarballs and enforces 
installation from source.
If it?s due to dependency issues, i.e. that there is no guarantee that 
older versions work with the current versions of CRAN packages, then the 
availability of downloading and installing the tarballs manually from 
the Archive web page could also be questioned per se.
I think people know that they are on their own in this situation and 
that there is no guarantee for archived versions to function properly, 
especially of one goes back substantially in time.
A simple note in ?install.packages() could further clarify this.

A few questions:

- Does an archive for older binaries exist for CRAN packages?
- How is CRAN creating ?archive.rds??
- Would a PR adding this functionality to `install.packages()` be 
accepted by R-core?

Patrick

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Jun  6 15:39:06 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 6 Jun 2020 09:39:06 -0400
Subject: [Rd] 
 install.packages(): About an option for installing archived versions
In-Reply-To: <8144BB12-0875-463E-8844-EDD216EF6285@gmail.com>
References: <8144BB12-0875-463E-8844-EDD216EF6285@gmail.com>
Message-ID: <0be54bc5-f987-8c93-2376-28ec2ff293d8@gmail.com>

On 06/06/2020 3:04 a.m., Patrick Schratz wrote:
> Dear list,
> 
> Various helpers exist in the wild to install older archived versions of
> CRAN packages, for example `remotes::install_version() ` or
> `versions::install.version()`.
> The former makes use of an ?archive.rds? file stored in the CRAN
> /Meta directory:
> https://github.com/r-lib/remotes/blob/9b5dc29102a486df2f42c88bb19027a7cd54a721/R/install-version.R#L68
> 
> Given its existence, I was wondering why there is no official support in
> `install.packages()`?

Because it's not needed?  Some functions belong in base packages because 
they require access to R internals that aren't available to contributed 
packages.  Other functions support those:  base packages can't depend on 
non-base packages.  And finally, some functions are there because some R 
core member thought they'd be a good idea, and was willing to commit to 
supporting them.

Your suggestion doesn't fit the first two reasons, and I can't see any 
current R core member wanting to take on extra work unnecessarily.

A bit more inline below...


> I was browsing the mailing archives of r-devel but surprisingly could
> not find a previous discussion about it.
> `remotes::install_version()` only uses the tarballs and enforces
> installation from source.
> If it?s due to dependency issues, i.e. that there is no guarantee that
> older versions work with the current versions of CRAN packages, then the
> availability of downloading and installing the tarballs manually from
> the Archive web page could also be questioned per se.
> I think people know that they are on their own in this situation and
> that there is no guarantee for archived versions to function properly,
> especially of one goes back substantially in time.
> A simple note in ?install.packages() could further clarify this.
> 
> A few questions:
> 
> - Does an archive for older binaries exist for CRAN packages?

No, nothing like that is maintained.  CRAN keeps binaries for the 
previous version but not indefinitely.

> - How is CRAN creating ?archive.rds??
> - Would a PR adding this functionality to `install.packages()` be
> accepted by R-core?

R isn't maintained on Github so a PR wouldn't make sense, but I also 
doubt the submission of an svn patch would be acted on unless you come 
up with some strong arguments about why remotes::install_version doesn't 
work properly and can't be fixed by its authors.

Duncan Murdoch

> 
> Patrick
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From p@tr|ck@@chr@tz @end|ng |rom gm@||@com  Sat Jun  6 16:02:00 2020
From: p@tr|ck@@chr@tz @end|ng |rom gm@||@com (Patrick Schratz)
Date: Sat, 06 Jun 2020 16:02:00 +0200
Subject: [Rd] 
 install.packages(): About an option for installing archived versions
In-Reply-To: <0be54bc5-f987-8c93-2376-28ec2ff293d8@gmail.com>
References: <8144BB12-0875-463E-8844-EDD216EF6285@gmail.com>
 <0be54bc5-f987-8c93-2376-28ec2ff293d8@gmail.com>
Message-ID: <DCC89A5D-9D0A-4F20-9EC6-A020DA14B2DB@gmail.com>

Duncan,

I am not sure if my arguing was understood given your reply.
First, I was arguing about the existence of the `archive.rds` metadata 
file, maintained by CRAN - not the existence of 
`remotes::install_version()` as a reason for this idea.
Second, `install.packages()` is a function accessing both R core and 
contributed packages, with CRAN being the default repository for the 
latter.
I do not understand the part with the R internals - what does this have 
to do with installing older versions of both core and contributed 
packages?

> I can't see any current R core member wanting to take on extra work 
> unnecessarily.

What kind of work would be unnecessarily here? The existence of such a 
function in a contributed package? (Just to understand your point here)

> R isn't maintained on Github so a PR wouldn't make sense, but I also 
> doubt the submission of an svn patch would be acted on unless you come 
> up with some strong arguments about why remotes::install_version 
> doesn't work properly and can't be fixed by its authors.

I know that R is not maintained on GH. "PR" was just a developer term 
referring to a "patch" as its called by some. Even though a "patch" 
sounds more close to "bugfix" than to a general "contribution" meaning.

Also again, `remotes::install_version()` is fine.
However, in my view, this functionality should be part of 
`install.packages()` with a simple argument `version`.
I am not sure if you mean to argue that due to the existence of 
contributed packages, no additions to base R need to be made (anymore).
Following this thinking, base R packages could be retired since there 
are alternatives (often more user-friendly and robust ones) for almost 
every base R function nowadays.

The main advantage of base R is its stability and the fact that it comes 
with the R installation per se.
It often does not shine in terms of user-friendliness or 
type-safetiness.
IMO it would be great to have one function for installing packages (i.e. 
`install.packages()`) that is somewhat flexible, removing the need for 
multiple contributed functions in other packages to solve this every-day 
task.

Also right now I am feeling a bit more like "sorry for asking" instead 
of "hey thanks for contributing - this is a valid question and here are 
our arguments". I am sure many people have had this thought/idea already 
and weren't self confident enough to ask/discuss this.

Thanks for your reply again, appreciated. Maybe the discussion can go on 
a bit, shining a bit more light on this issue.

Patrick

On 6 Jun 2020, at 15:39, Duncan Murdoch wrote:

> On 06/06/2020 3:04 a.m., Patrick Schratz wrote:
>> Dear list,
>>
>> Various helpers exist in the wild to install older archived versions 
>> of
>> CRAN packages, for example `remotes::install_version() ` or
>> `versions::install.version()`.
>> The former makes use of an ?archive.rds? file stored in the CRAN
>> /Meta directory:
>> https://github.com/r-lib/remotes/blob/9b5dc29102a486df2f42c88bb19027a7cd54a721/R/install-version.R#L68
>>
>> Given its existence, I was wondering why there is no official support 
>> in
>> `install.packages()`?
>
> Because it's not needed?  Some functions belong in base packages 
> because they require access to R internals that aren't available to 
> contributed packages.  Other functions support those:  base packages 
> can't depend on non-base packages.  And finally, some functions are 
> there because some R core member thought they'd be a good idea, and 
> was willing to commit to supporting them.
>
> Your suggestion doesn't fit the first two reasons, and I can't see any 
> current R core member wanting to take on extra work unnecessarily.
>
> A bit more inline below...
>
>
>> I was browsing the mailing archives of r-devel but surprisingly could
>> not find a previous discussion about it.
>> `remotes::install_version()` only uses the tarballs and enforces
>> installation from source.
>> If it?s due to dependency issues, i.e. that there is no guarantee 
>> that
>> older versions work with the current versions of CRAN packages, then 
>> the
>> availability of downloading and installing the tarballs manually from
>> the Archive web page could also be questioned per se.
>> I think people know that they are on their own in this situation and
>> that there is no guarantee for archived versions to function 
>> properly,
>> especially of one goes back substantially in time.
>> A simple note in ?install.packages() could further clarify this.
>>
>> A few questions:
>>
>> - Does an archive for older binaries exist for CRAN packages?
>
> No, nothing like that is maintained.  CRAN keeps binaries for the 
> previous version but not indefinitely.
>
>> - How is CRAN creating ?archive.rds??
>> - Would a PR adding this functionality to `install.packages()` be
>> accepted by R-core?
>
> R isn't maintained on Github so a PR wouldn't make sense, but I also 
> doubt the submission of an svn patch would be acted on unless you come 
> up with some strong arguments about why remotes::install_version 
> doesn't work properly and can't be fixed by its authors.
>
> Duncan Murdoch
>
>>
>> Patrick
>>
>> 	[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>

	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Sat Jun  6 21:06:05 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sat, 6 Jun 2020 14:06:05 -0500
Subject: [Rd] Change in package.skeleton behavior from R 3.6.3 to R 4.0.0 ?
Message-ID: <24283.59677.373606.9673@rob.eddelbuettel.com>


The Rcpp package and some related packages such as RcppArmadillo make use of
(local) wrappers around the utils::package.skeleton() function for creating
(basic yet functional) packages using Rcpp or RcppArmadillo. RStudio also
exposes this under the graphical menu as a nice way to construct a package.

But it seems that something changed quite recently in R. I looked into this a
little yesterday and prepared a workaround for Rcpp; Kevin (CC'ed) was more
diligent and found what changed with R itself. See the discussion under issue
ticket #1087 at the Rcpp repo: https://github.com/RcppCore/Rcpp/issues/1087
The proposed simple PR is at https://github.com/RcppCore/Rcpp/pull/1088

As Kevin mentions in #1087, R itself may have changed, and he even dug up a
possible commit [1]. One can illustrate that quickly with two different R
interpreters, I use Docker here because that's what I often do. I apologise
for the long command-line; that is basically just common Docker arguments.
The keys are r-base:3.6.3 and r-base:4.0.0 for selecting the relevant R
builds, and the command string passed to bash to call Rscript and
package.skeleton() followed by a cat of the NAMESPACE file.

-----------------------------------------------------------------------------
edd at rob:/tmp$ mkdir skeleton
edd at rob:/tmp$ cd skeleton/
edd at rob:/tmp/skeleton$ docker run --rm -ti -u1000:1000 -v ${PWD}:/mnt -w /mnt r-base:3.6.3 bash -c "Rscript -e 'x <-1L; package.skeleton(name=\"p363\")'; cat p363/NAMESPACE"
Creating directories ...
Creating DESCRIPTION ...
Creating NAMESPACE ...
Creating Read-and-delete-me ...
Saving functions and data ...
Making help files ...
Done.
Further steps are described in './p363/Read-and-delete-me'.
exportPattern("^[[:alpha:]]+")
edd at rob:/tmp/skeleton$ docker run --rm -ti -u1000:1000 -v ${PWD}:/mnt -w /mnt r-base:4.0.0 bash -c "Rscript -e 'x <-1L; package.skeleton(name=\"p400\")'; cat p400/NAMESPACE"
Creating directories ...
Creating DESCRIPTION ...
Creating NAMESPACE ...
Creating Read-and-delete-me ...
Saving functions and data ...
Making help files ...
Done.
Further steps are described in './p400/Read-and-delete-me'.
export("x")
edd at rob:/tmp/skeleton$ 
-----------------------------------------------------------------------------

In short, 4.0.0 no longer exports via 'exportPattern("^[[:alpha:]]+")'
rendering the new package created non-functional. 

Was this intentional, or is this a bug we can look into fixing for R 4.0.2 ?

Dirk


[1] This uses the GitHub mirror rather than svn but the underlying code is of
course the same
https://github.com/wch/r-source/commit/36b27d951fb355f268191a25909ab292a273932d#diff-a1b94fcea8b8818d4371aabf04dc2b3c 

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Jun  6 21:44:29 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 6 Jun 2020 15:44:29 -0400
Subject: [Rd] 
 Change in package.skeleton behavior from R 3.6.3 to R 4.0.0 ?
In-Reply-To: <24283.59677.373606.9673@rob.eddelbuettel.com>
References: <24283.59677.373606.9673@rob.eddelbuettel.com>
Message-ID: <656c2251-4a91-47d5-c62e-848535dd744b@gmail.com>

On 06/06/2020 3:06 p.m., Dirk Eddelbuettel wrote:
> 
> The Rcpp package and some related packages such as RcppArmadillo make use of
> (local) wrappers around the utils::package.skeleton() function for creating
> (basic yet functional) packages using Rcpp or RcppArmadillo. RStudio also
> exposes this under the graphical menu as a nice way to construct a package.
> 
> But it seems that something changed quite recently in R. I looked into this a
> little yesterday and prepared a workaround for Rcpp; Kevin (CC'ed) was more
> diligent and found what changed with R itself. See the discussion under issue
> ticket #1087 at the Rcpp repo: https://github.com/RcppCore/Rcpp/issues/1087
> The proposed simple PR is at https://github.com/RcppCore/Rcpp/pull/1088
> 
> As Kevin mentions in #1087, R itself may have changed, and he even dug up a
> possible commit [1]. One can illustrate that quickly with two different R
> interpreters, I use Docker here because that's what I often do. I apologise
> for the long command-line; that is basically just common Docker arguments.
> The keys are r-base:3.6.3 and r-base:4.0.0 for selecting the relevant R
> builds, and the command string passed to bash to call Rscript and
> package.skeleton() followed by a cat of the NAMESPACE file.
> 
> -----------------------------------------------------------------------------
> edd at rob:/tmp$ mkdir skeleton
> edd at rob:/tmp$ cd skeleton/
> edd at rob:/tmp/skeleton$ docker run --rm -ti -u1000:1000 -v ${PWD}:/mnt -w /mnt r-base:3.6.3 bash -c "Rscript -e 'x <-1L; package.skeleton(name=\"p363\")'; cat p363/NAMESPACE"
> Creating directories ...
> Creating DESCRIPTION ...
> Creating NAMESPACE ...
> Creating Read-and-delete-me ...
> Saving functions and data ...
> Making help files ...
> Done.
> Further steps are described in './p363/Read-and-delete-me'.
> exportPattern("^[[:alpha:]]+")
> edd at rob:/tmp/skeleton$ docker run --rm -ti -u1000:1000 -v ${PWD}:/mnt -w /mnt r-base:4.0.0 bash -c "Rscript -e 'x <-1L; package.skeleton(name=\"p400\")'; cat p400/NAMESPACE"
> Creating directories ...
> Creating DESCRIPTION ...
> Creating NAMESPACE ...
> Creating Read-and-delete-me ...
> Saving functions and data ...
> Making help files ...
> Done.
> Further steps are described in './p400/Read-and-delete-me'.
> export("x")
> edd at rob:/tmp/skeleton$
> -----------------------------------------------------------------------------
> 
> In short, 4.0.0 no longer exports via 'exportPattern("^[[:alpha:]]+")'
> rendering the new package created non-functional.
> 
> Was this intentional, or is this a bug we can look into fixing for R 4.0.2 ?

It's in the NEWS, so I'd assume it was intentional:

  - package.skeleton() now explicitly lists all exports in the 
?NAMESPACE? file.

An earlier version of that message even showed up in the link you posted.

Duncan Murdoch

> 
> Dirk
> 
> 
> [1] This uses the GitHub mirror rather than svn but the underlying code is of
> course the same
> https://github.com/wch/r-source/commit/36b27d951fb355f268191a25909ab292a273932d#diff-a1b94fcea8b8818d4371aabf04dc2b3c
>


From edd @end|ng |rom deb|@n@org  Sat Jun  6 21:51:48 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sat, 6 Jun 2020 14:51:48 -0500
Subject: [Rd] 
 Change in package.skeleton behavior from R 3.6.3 to R 4.0.0 ?
In-Reply-To: <656c2251-4a91-47d5-c62e-848535dd744b@gmail.com>
References: <24283.59677.373606.9673@rob.eddelbuettel.com>
 <656c2251-4a91-47d5-c62e-848535dd744b@gmail.com>
Message-ID: <24283.62420.260823.850356@rob.eddelbuettel.com>


On 6 June 2020 at 15:44, Duncan Murdoch wrote:
| On 06/06/2020 3:06 p.m., Dirk Eddelbuettel wrote:
| > 
| > The Rcpp package and some related packages such as RcppArmadillo make use of
| > (local) wrappers around the utils::package.skeleton() function for creating
| > (basic yet functional) packages using Rcpp or RcppArmadillo. RStudio also
| > exposes this under the graphical menu as a nice way to construct a package.
| > 
| > But it seems that something changed quite recently in R. I looked into this a
| > little yesterday and prepared a workaround for Rcpp; Kevin (CC'ed) was more
| > diligent and found what changed with R itself. See the discussion under issue
| > ticket #1087 at the Rcpp repo: https://github.com/RcppCore/Rcpp/issues/1087
| > The proposed simple PR is at https://github.com/RcppCore/Rcpp/pull/1088
| > 
| > As Kevin mentions in #1087, R itself may have changed, and he even dug up a
| > possible commit [1]. One can illustrate that quickly with two different R
| > interpreters, I use Docker here because that's what I often do. I apologise
| > for the long command-line; that is basically just common Docker arguments.
| > The keys are r-base:3.6.3 and r-base:4.0.0 for selecting the relevant R
| > builds, and the command string passed to bash to call Rscript and
| > package.skeleton() followed by a cat of the NAMESPACE file.
| > 
| > -----------------------------------------------------------------------------
| > edd at rob:/tmp$ mkdir skeleton
| > edd at rob:/tmp$ cd skeleton/
| > edd at rob:/tmp/skeleton$ docker run --rm -ti -u1000:1000 -v ${PWD}:/mnt -w /mnt r-base:3.6.3 bash -c "Rscript -e 'x <-1L; package.skeleton(name=\"p363\")'; cat p363/NAMESPACE"
| > Creating directories ...
| > Creating DESCRIPTION ...
| > Creating NAMESPACE ...
| > Creating Read-and-delete-me ...
| > Saving functions and data ...
| > Making help files ...
| > Done.
| > Further steps are described in './p363/Read-and-delete-me'.
| > exportPattern("^[[:alpha:]]+")
| > edd at rob:/tmp/skeleton$ docker run --rm -ti -u1000:1000 -v ${PWD}:/mnt -w /mnt r-base:4.0.0 bash -c "Rscript -e 'x <-1L; package.skeleton(name=\"p400\")'; cat p400/NAMESPACE"
| > Creating directories ...
| > Creating DESCRIPTION ...
| > Creating NAMESPACE ...
| > Creating Read-and-delete-me ...
| > Saving functions and data ...
| > Making help files ...
| > Done.
| > Further steps are described in './p400/Read-and-delete-me'.
| > export("x")
| > edd at rob:/tmp/skeleton$
| > -----------------------------------------------------------------------------
| > 
| > In short, 4.0.0 no longer exports via 'exportPattern("^[[:alpha:]]+")'
| > rendering the new package created non-functional.
| > 
| > Was this intentional, or is this a bug we can look into fixing for R 4.0.2 ?
| 
| It's in the NEWS, so I'd assume it was intentional:
| 
|   - package.skeleton() now explicitly lists all exports in the 
| ?NAMESPACE? file.
| 
| An earlier version of that message even showed up in the link you posted.

My bad. I usually look there first too.

In which case the change is going to stay, so my quick adjustment to Rcpp
should be fine too.

Thanks for the prompt response.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Jun  6 21:53:53 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 6 Jun 2020 15:53:53 -0400
Subject: [Rd] 
 Change in package.skeleton behavior from R 3.6.3 to R 4.0.0 ?
In-Reply-To: <656c2251-4a91-47d5-c62e-848535dd744b@gmail.com>
References: <24283.59677.373606.9673@rob.eddelbuettel.com>
 <656c2251-4a91-47d5-c62e-848535dd744b@gmail.com>
Message-ID: <2f768fa0-512c-2cbb-7bd2-30dda5b08b39@gmail.com>

On 06/06/2020 3:44 p.m., Duncan Murdoch wrote:
> On 06/06/2020 3:06 p.m., Dirk Eddelbuettel wrote:
  ... [deletions]
>> In short, 4.0.0 no longer exports via 'exportPattern("^[[:alpha:]]+")'
>> rendering the new package created non-functional.
>>
>> Was this intentional, or is this a bug we can look into fixing for R 4.0.2 ?
> 
> It's in the NEWS, so I'd assume it was intentional:
> 
>    - package.skeleton() now explicitly lists all exports in the
> ?NAMESPACE? file.
> 
> An earlier version of that message even showed up in the link you posted.

Something else in that link is presented more obviously in the svn log 
entry:

r76945 | hornik | 2019-08-10 04:13:48 -0400 (Sat, 10 Aug 2019) | 1 line
Changed paths:
    M /trunk/doc/NEWS.Rd
    M /trunk/src/library/utils/R/package.skeleton.R

Have package.skeleton() explicitly list all exports.

This change happened in August, 2019, about 10 months ago.  Perhaps this 
message asking people to test R-devel is relevant:

https://stat.ethz.ch/pipermail/r-devel/2020-May/079484.html

Duncan Murdoch


From edd @end|ng |rom deb|@n@org  Sat Jun  6 22:14:21 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sat, 6 Jun 2020 15:14:21 -0500
Subject: [Rd] 
 Change in package.skeleton behavior from R 3.6.3 to R 4.0.0 ?
In-Reply-To: <2f768fa0-512c-2cbb-7bd2-30dda5b08b39@gmail.com>
References: <24283.59677.373606.9673@rob.eddelbuettel.com>
 <656c2251-4a91-47d5-c62e-848535dd744b@gmail.com>
 <2f768fa0-512c-2cbb-7bd2-30dda5b08b39@gmail.com>
Message-ID: <24283.63773.386547.279873@rob.eddelbuettel.com>


On 6 June 2020 at 15:53, Duncan Murdoch wrote:
| This change happened in August, 2019, about 10 months ago.  Perhaps this 
| message asking people to test R-devel is relevant:
| 
| https://stat.ethz.ch/pipermail/r-devel/2020-May/079484.html

Touche :) And fully agree. Rcpp's unit tests covered Rcpp.package.skeleton()
since about 2013. I have been keeping a local 'RD' build of R-devel in
/usr/local/ for much longer to test both r-release and r-devel.  But test
coverage is never full or complete, and what bit me here during a live demo
(now at [1]) was the equivalent functionality tickled with from RStudio with
similar-but-not-identical code.

And that part is certainly NOT contained in the unit tests. Can't win'em
all. Still my bad for not checking NEWS, and bad luck this change did not get
tickled by the many Rcpp tests runs here since the change was made.

Dirk

[1] https://www.youtube.com/watch?v=1Zap6j1uUyw
-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Jun  7 00:05:40 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 6 Jun 2020 18:05:40 -0400
Subject: [Rd] 
 Change in package.skeleton behavior from R 3.6.3 to R 4.0.0 ?
In-Reply-To: <24283.63773.386547.279873@rob.eddelbuettel.com>
References: <24283.59677.373606.9673@rob.eddelbuettel.com>
 <656c2251-4a91-47d5-c62e-848535dd744b@gmail.com>
 <2f768fa0-512c-2cbb-7bd2-30dda5b08b39@gmail.com>
 <24283.63773.386547.279873@rob.eddelbuettel.com>
Message-ID: <0e39d97a-e236-e7c4-c28c-4da295f9faf9@gmail.com>

On 06/06/2020 4:14 p.m., Dirk Eddelbuettel wrote:
> 
> On 6 June 2020 at 15:53, Duncan Murdoch wrote:
> | This change happened in August, 2019, about 10 months ago.  Perhaps this
> | message asking people to test R-devel is relevant:
> |
> | https://stat.ethz.ch/pipermail/r-devel/2020-May/079484.html
> 
> Touche :) And fully agree. Rcpp's unit tests covered Rcpp.package.skeleton()
> since about 2013. I have been keeping a local 'RD' build of R-devel in
> /usr/local/ for much longer to test both r-release and r-devel.  But test
> coverage is never full or complete, and what bit me here during a live demo
> (now at [1]) was the equivalent functionality tickled with from RStudio with
> similar-but-not-identical code.
> 
> And that part is certainly NOT contained in the unit tests. Can't win'em
> all. Still my bad for not checking NEWS, and bad luck this change did not get
> tickled by the many Rcpp tests runs here since the change was made.

The trouble with tests is that they make you think you've tested the 
code, and we all know that's impossible.

Duncan


From j|ox @end|ng |rom mcm@@ter@c@  Sun Jun  7 03:13:14 2020
From: j|ox @end|ng |rom mcm@@ter@c@ (Fox, John)
Date: Sun, 7 Jun 2020 01:13:14 +0000
Subject: [Rd] use of the tcltk package crashes R 4.0.1 for Windows
Message-ID: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>

Hi,

The following code, from the examples in ?TkWidgets , immediately crashes R 4.0.1 for Windows:

--------------------- snip --------------------
library("tcltk")
tt <- tktoplevel()
label.widget <- tklabel(tt, text = "Hello, World!")
button.widget <- tkbutton(tt, text = "Push", 
	 command = function()cat("OW!\n"))
tkpack(label.widget, button.widget) # geometry manager
--------------------- snip --------------------

Session info (prior to the crash):

--------------------- snip --------------------
> sessionInfo()
R version 4.0.1 (2020-06-06)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 18363)

Matrix products: default

locale:
[1] LC_COLLATE=English_United States.1252 
[2] LC_CTYPE=English_United States.1252   
[3] LC_MONETARY=English_United States.1252
[4] LC_NUMERIC=C                          
[5] LC_TIME=English_United States.1252    

attached base packages:
[1] tcltk     stats     graphics  grDevices utils     datasets  methods  
[8] base     

loaded via a namespace (and not attached):
[1] compiler_4.0.1 tools_4.0.1   
--------------------- snip --------------------

I observe this behaviour both in the Rgui and when I run R in a terminal. I think the problem is general to the use of the tcltk package.

Best,
 John

-----------------------------------------------------------------
John Fox
Professor Emeritus
McMaster University
Hamilton, Ontario, Canada
Web: https://socialsciences.mcmaster.ca/jfox/


From pd@|gd @end|ng |rom gm@||@com  Sun Jun  7 08:27:06 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Sun, 7 Jun 2020 08:27:06 +0200
Subject: [Rd] use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
Message-ID: <48ABB4AC-8823-4FB3-B730-9E0F2A5EE5DA@gmail.com>

Not happening on Mac, so likely a Windows build issue.

(There's no 4.0.1 CRAN package yet, and no nightly build of 4.0.1 Patched, but the only thing changed in the sources since r78644 is the VERSION file.)

-pd

> On 7 Jun 2020, at 03:13 , Fox, John <jfox at mcmaster.ca> wrote:
> 
> Hi,
> 
> The following code, from the examples in ?TkWidgets , immediately crashes R 4.0.1 for Windows:
> 
> --------------------- snip --------------------
> library("tcltk")
> tt <- tktoplevel()
> label.widget <- tklabel(tt, text = "Hello, World!")
> button.widget <- tkbutton(tt, text = "Push", 
> 	 command = function()cat("OW!\n"))
> tkpack(label.widget, button.widget) # geometry manager
> --------------------- snip --------------------
> 
> Session info (prior to the crash):
> 
> --------------------- snip --------------------
>> sessionInfo()
> R version 4.0.1 (2020-06-06)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 18363)
> 
> Matrix products: default
> 
> locale:
> [1] LC_COLLATE=English_United States.1252 
> [2] LC_CTYPE=English_United States.1252   
> [3] LC_MONETARY=English_United States.1252
> [4] LC_NUMERIC=C                          
> [5] LC_TIME=English_United States.1252    
> 
> attached base packages:
> [1] tcltk     stats     graphics  grDevices utils     datasets  methods  
> [8] base     
> 
> loaded via a namespace (and not attached):
> [1] compiler_4.0.1 tools_4.0.1   
> --------------------- snip --------------------
> 
> I observe this behaviour both in the Rgui and when I run R in a terminal. I think the problem is general to the use of the tcltk package.
> 
> Best,
> John
> 
> -----------------------------------------------------------------
> John Fox
> Professor Emeritus
> McMaster University
> Hamilton, Ontario, Canada
> Web: https://socialsciences.mcmaster.ca/jfox/
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From pd@|gd @end|ng |rom gm@||@com  Sun Jun  7 08:33:55 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Sun, 7 Jun 2020 08:33:55 +0200
Subject: [Rd] use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <48ABB4AC-8823-4FB3-B730-9E0F2A5EE5DA@gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <48ABB4AC-8823-4FB3-B730-9E0F2A5EE5DA@gmail.com>
Message-ID: <02AC5B27-E63C-4586-9A56-E7CC897F9DA5@gmail.com>

Just to be clear, I was talking about Mac binary packages. The one available and tested was 

R-4.0-branch
4.0.1 RC
(2020/05/30, r78644)

from mac.r-project.org. (Simon Urbanek out of office for the weekend, I suppose.)

-pd

> On 7 Jun 2020, at 08:27 , peter dalgaard <pdalgd at gmail.com> wrote:
> 
> Not happening on Mac, so likely a Windows build issue.
> 
> (There's no 4.0.1 CRAN package yet, and no nightly build of 4.0.1 Patched, but the only thing changed in the sources since r78644 is the VERSION file.)
> 
> -pd
> 
>> On 7 Jun 2020, at 03:13 , Fox, John <jfox at mcmaster.ca> wrote:
>> 
>> Hi,
>> 
>> The following code, from the examples in ?TkWidgets , immediately crashes R 4.0.1 for Windows:
>> 
>> --------------------- snip --------------------
>> library("tcltk")
>> tt <- tktoplevel()
>> label.widget <- tklabel(tt, text = "Hello, World!")
>> button.widget <- tkbutton(tt, text = "Push", 
>> 	 command = function()cat("OW!\n"))
>> tkpack(label.widget, button.widget) # geometry manager
>> --------------------- snip --------------------
>> 
>> Session info (prior to the crash):
>> 
>> --------------------- snip --------------------
>>> sessionInfo()
>> R version 4.0.1 (2020-06-06)
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>> Running under: Windows 10 x64 (build 18363)
>> 
>> Matrix products: default
>> 
>> locale:
>> [1] LC_COLLATE=English_United States.1252 
>> [2] LC_CTYPE=English_United States.1252   
>> [3] LC_MONETARY=English_United States.1252
>> [4] LC_NUMERIC=C                          
>> [5] LC_TIME=English_United States.1252    
>> 
>> attached base packages:
>> [1] tcltk     stats     graphics  grDevices utils     datasets  methods  
>> [8] base     
>> 
>> loaded via a namespace (and not attached):
>> [1] compiler_4.0.1 tools_4.0.1   
>> --------------------- snip --------------------
>> 
>> I observe this behaviour both in the Rgui and when I run R in a terminal. I think the problem is general to the use of the tcltk package.
>> 
>> Best,
>> John
>> 
>> -----------------------------------------------------------------
>> John Fox
>> Professor Emeritus
>> McMaster University
>> Hamilton, Ontario, Canada
>> Web: https://socialsciences.mcmaster.ca/jfox/
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> -- 
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> 
> 
> 
> 
> 
> 
> 
> 
> 

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From pd@|gd @end|ng |rom gm@||@com  Sun Jun  7 08:44:02 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Sun, 7 Jun 2020 08:44:02 +0200
Subject: [Rd] use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <48ABB4AC-8823-4FB3-B730-9E0F2A5EE5DA@gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <48ABB4AC-8823-4FB3-B730-9E0F2A5EE5DA@gmail.com>
Message-ID: <64EE38E1-9E92-48F6-A031-5D9345F133F5@gmail.com>

John,

The Windows installation instructions document has the following. So, one obvious question is whether you did select it. (I haven't installed on WIndows for ages, so I don't know whether this was changed recently or even whether the selection is on or off by default).

-pd

Using package tcltk
===================

The package tcltk supports building graphical interfaces with Tcl/Tk.
"Support Files for Package tcltk" needs to be selected from the
installer for this to work; alternatively you can use an existing
installation of Tcl/Tk 8.6.x by following the instructions in the
rw-FAQ.




> On 7 Jun 2020, at 08:27 , peter dalgaard <pdalgd at gmail.com> wrote:
> 
> Not happening on Mac, so likely a Windows build issue.
> 
> (There's no 4.0.1 CRAN package yet, and no nightly build of 4.0.1 Patched, but the only thing changed in the sources since r78644 is the VERSION file.)
> 
> -pd
> 
>> On 7 Jun 2020, at 03:13 , Fox, John <jfox at mcmaster.ca> wrote:
>> 
>> Hi,
>> 
>> The following code, from the examples in ?TkWidgets , immediately crashes R 4.0.1 for Windows:
>> 
>> --------------------- snip --------------------
>> library("tcltk")
>> tt <- tktoplevel()
>> label.widget <- tklabel(tt, text = "Hello, World!")
>> button.widget <- tkbutton(tt, text = "Push", 
>> 	 command = function()cat("OW!\n"))
>> tkpack(label.widget, button.widget) # geometry manager
>> --------------------- snip --------------------
>> 
>> Session info (prior to the crash):
>> 
>> --------------------- snip --------------------
>>> sessionInfo()
>> R version 4.0.1 (2020-06-06)
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>> Running under: Windows 10 x64 (build 18363)
>> 
>> Matrix products: default
>> 
>> locale:
>> [1] LC_COLLATE=English_United States.1252 
>> [2] LC_CTYPE=English_United States.1252   
>> [3] LC_MONETARY=English_United States.1252
>> [4] LC_NUMERIC=C                          
>> [5] LC_TIME=English_United States.1252    
>> 
>> attached base packages:
>> [1] tcltk     stats     graphics  grDevices utils     datasets  methods  
>> [8] base     
>> 
>> loaded via a namespace (and not attached):
>> [1] compiler_4.0.1 tools_4.0.1   
>> --------------------- snip --------------------
>> 
>> I observe this behaviour both in the Rgui and when I run R in a terminal. I think the problem is general to the use of the tcltk package.
>> 
>> Best,
>> John
>> 
>> -----------------------------------------------------------------
>> John Fox
>> Professor Emeritus
>> McMaster University
>> Hamilton, Ontario, Canada
>> Web: https://socialsciences.mcmaster.ca/jfox/
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> -- 
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> 
> 
> 
> 
> 
> 
> 
> 
> 

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From j|ox @end|ng |rom mcm@@ter@c@  Sun Jun  7 15:46:12 2020
From: j|ox @end|ng |rom mcm@@ter@c@ (Fox, John)
Date: Sun, 7 Jun 2020 13:46:12 +0000
Subject: [Rd] use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <64EE38E1-9E92-48F6-A031-5D9345F133F5@gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <48ABB4AC-8823-4FB3-B730-9E0F2A5EE5DA@gmail.com>
 <64EE38E1-9E92-48F6-A031-5D9345F133F5@gmail.com>
Message-ID: <4091E9FB-BD75-46D2-ADBE-AF30F52D90DD@mcmaster.ca>

Dear Peter,

First, thank you for following up on this problem.

Unless I somehow inexplicably missed it, as I just confirmed, the R 4.0.1 Windows installer *doesn't* ask to install support files for Tcl/Tk.

Nor am I only one to notice this problem. I was made aware of it when several Rcmdr users wrote to me yesterday to say that the package was crashing R when it loads.

Finally, even if Tcl/Tk support is now a non-default option in R for Windows, R shouldn't crash if Tcl/Tk isn't installed.

Best,
 John

> On Jun 7, 2020, at 2:44 AM, peter dalgaard <pdalgd at gmail.com> wrote:
> 
> John,
> 
> The Windows installation instructions document has the following. So, one obvious question is whether you did select it. (I haven't installed on WIndows for ages, so I don't know whether this was changed recently or even whether the selection is on or off by default).
> 
> -pd
> 
> Using package tcltk
> ===================
> 
> The package tcltk supports building graphical interfaces with Tcl/Tk.
> "Support Files for Package tcltk" needs to be selected from the
> installer for this to work; alternatively you can use an existing
> installation of Tcl/Tk 8.6.x by following the instructions in the
> rw-FAQ.
> 
> 
> 
> 
>> On 7 Jun 2020, at 08:27 , peter dalgaard <pdalgd at gmail.com> wrote:
>> 
>> Not happening on Mac, so likely a Windows build issue.
>> 
>> (There's no 4.0.1 CRAN package yet, and no nightly build of 4.0.1 Patched, but the only thing changed in the sources since r78644 is the VERSION file.)
>> 
>> -pd
>> 
>>> On 7 Jun 2020, at 03:13 , Fox, John <jfox at mcmaster.ca> wrote:
>>> 
>>> Hi,
>>> 
>>> The following code, from the examples in ?TkWidgets , immediately crashes R 4.0.1 for Windows:
>>> 
>>> --------------------- snip --------------------
>>> library("tcltk")
>>> tt <- tktoplevel()
>>> label.widget <- tklabel(tt, text = "Hello, World!")
>>> button.widget <- tkbutton(tt, text = "Push", 
>>> 	 command = function()cat("OW!\n"))
>>> tkpack(label.widget, button.widget) # geometry manager
>>> --------------------- snip --------------------
>>> 
>>> Session info (prior to the crash):
>>> 
>>> --------------------- snip --------------------
>>>> sessionInfo()
>>> R version 4.0.1 (2020-06-06)
>>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>>> Running under: Windows 10 x64 (build 18363)
>>> 
>>> Matrix products: default
>>> 
>>> locale:
>>> [1] LC_COLLATE=English_United States.1252 
>>> [2] LC_CTYPE=English_United States.1252   
>>> [3] LC_MONETARY=English_United States.1252
>>> [4] LC_NUMERIC=C                          
>>> [5] LC_TIME=English_United States.1252    
>>> 
>>> attached base packages:
>>> [1] tcltk     stats     graphics  grDevices utils     datasets  methods  
>>> [8] base     
>>> 
>>> loaded via a namespace (and not attached):
>>> [1] compiler_4.0.1 tools_4.0.1   
>>> --------------------- snip --------------------
>>> 
>>> I observe this behaviour both in the Rgui and when I run R in a terminal. I think the problem is general to the use of the tcltk package.
>>> 
>>> Best,
>>> John
>>> 
>>> -----------------------------------------------------------------
>>> John Fox
>>> Professor Emeritus
>>> McMaster University
>>> Hamilton, Ontario, Canada
>>> Web: https://socialsciences.mcmaster.ca/jfox/
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> -- 
>> Peter Dalgaard, Professor,
>> Center for Statistics, Copenhagen Business School
>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>> Phone: (+45)38153501
>> Office: A 4.23
>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
> 
> -- 
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> 
> 
> 
> 
> 
> 
> 
> 
> 


From jeroenoom@ @end|ng |rom gm@||@com  Sun Jun  7 16:00:31 2020
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Sun, 7 Jun 2020 16:00:31 +0200
Subject: [Rd] use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
Message-ID: <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>

On Sun, Jun 7, 2020 at 3:13 AM Fox, John <jfox at mcmaster.ca> wrote:
>
> Hi,
>
> The following code, from the examples in ?TkWidgets , immediately crashes R 4.0.1 for Windows:
>
> --------------------- snip --------------------
> library("tcltk")
> tt <- tktoplevel()
> label.widget <- tklabel(tt, text = "Hello, World!")
> button.widget <- tkbutton(tt, text = "Push",
>          command = function()cat("OW!\n"))
> tkpack(label.widget, button.widget) # geometry manager
> --------------------- snip --------------------


I can reproduce this. The backtrace shows the crash happens in
dotTclObjv  [/src/library/tcltk/src/tcltk.c at 243 ]. This looks like a
bug that was introduced by commit 78408/78409 about a month ago. I
think the problem is that this commit changes 'calloc' to 'Calloc'
without changing the corresponding 'free' to 'Free'.

This has nothing to do with the Windows build or installation. Nothing
has changed in the windows build procedure between 4.0.0 and 4.0.1.


From j|ox @end|ng |rom mcm@@ter@c@  Sun Jun  7 16:46:39 2020
From: j|ox @end|ng |rom mcm@@ter@c@ (Fox, John)
Date: Sun, 7 Jun 2020 14:46:39 +0000
Subject: [Rd] use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
Message-ID: <7342C4BD-C5E8-45EC-93E9-4F0E7A02D335@mcmaster.ca>

Dear Jeroen,

Thank you for tracking down the source of the problem.

You probably saw that Peter Dalgaard reported that the tcltk package apparently is working fine in R 4.0.1 on macOS. I haven't confirmed that myself because the Mac binary for R 4.0.1 isn't yet on CRAN.

Best,
 John

> On Jun 7, 2020, at 10:00 AM, Jeroen Ooms <jeroenooms at gmail.com> wrote:
> 
> On Sun, Jun 7, 2020 at 3:13 AM Fox, John <jfox at mcmaster.ca> wrote:
>> 
>> Hi,
>> 
>> The following code, from the examples in ?TkWidgets , immediately crashes R 4.0.1 for Windows:
>> 
>> --------------------- snip --------------------
>> library("tcltk")
>> tt <- tktoplevel()
>> label.widget <- tklabel(tt, text = "Hello, World!")
>> button.widget <- tkbutton(tt, text = "Push",
>>         command = function()cat("OW!\n"))
>> tkpack(label.widget, button.widget) # geometry manager
>> --------------------- snip --------------------
> 
> 
> I can reproduce this. The backtrace shows the crash happens in
> dotTclObjv  [/src/library/tcltk/src/tcltk.c at 243 ]. This looks like a
> bug that was introduced by commit 78408/78409 about a month ago. I
> think the problem is that this commit changes 'calloc' to 'Calloc'
> without changing the corresponding 'free' to 'Free'.
> 
> This has nothing to do with the Windows build or installation. Nothing
> has changed in the windows build procedure between 4.0.0 and 4.0.1.


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Jun  7 17:12:40 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 7 Jun 2020 11:12:40 -0400
Subject: [Rd] use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
Message-ID: <87aeae9b-a770-05d2-2791-03c89ae9d948@gmail.com>

On 07/06/2020 10:00 a.m., Jeroen Ooms wrote:
> On Sun, Jun 7, 2020 at 3:13 AM Fox, John <jfox at mcmaster.ca> wrote:
>>
>> Hi,
>>
>> The following code, from the examples in ?TkWidgets , immediately crashes R 4.0.1 for Windows:
>>
>> --------------------- snip --------------------
>> library("tcltk")
>> tt <- tktoplevel()
>> label.widget <- tklabel(tt, text = "Hello, World!")
>> button.widget <- tkbutton(tt, text = "Push",
>>           command = function()cat("OW!\n"))
>> tkpack(label.widget, button.widget) # geometry manager
>> --------------------- snip --------------------
> 
> 
> I can reproduce this. The backtrace shows the crash happens in
> dotTclObjv  [/src/library/tcltk/src/tcltk.c at 243 ]. This looks like a
> bug that was introduced by commit 78408/78409 about a month ago. I
> think the problem is that this commit changes 'calloc' to 'Calloc'
> without changing the corresponding 'free' to 'Free'.

The same commit made the same kind of change to unix/sys-std.c as well.

Duncan Murdoch

> 
> This has nothing to do with the Windows build or installation. Nothing
> has changed in the windows build procedure between 4.0.0 and 4.0.1.
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From pd@|gd @end|ng |rom gm@||@com  Sun Jun  7 17:28:00 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Sun, 7 Jun 2020 17:28:00 +0200
Subject: [Rd] use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
Message-ID: <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>

So this wasn't tested for a month?

Anyways, Free() is just free() with a check that we're not freeing a null pointer, followed by setting the pointer to NULL. At that point of tcltk.c, we have

   for (objc = i = 0; i < length(avec); i++){
        const char *s;
        char *tmp;
        if (!isNull(nm) && strlen(s = translateChar(STRING_ELT(nm, i)))){
            //  tmp = calloc(strlen(s)+2, sizeof(char));
            tmp = Calloc(strlen(s)+2, char);
            *tmp = '-';
            strcpy(tmp+1, s);
            objv[objc++] = Tcl_NewStringObj(tmp, -1);
            free(tmp);
        }
        if (!isNull(t = VECTOR_ELT(avec, i)))
            objv[objc++] = (Tcl_Obj *) R_ExternalPtrAddr(t);
    }

and I can't see how tmp can be NULL at the free(), nor can I see it mattering if it is not set to NULL (notice that it goes out of scope with the for loop). 

-pd
 

> On 7 Jun 2020, at 16:00 , Jeroen Ooms <jeroenooms at gmail.com> wrote:
> 
> On Sun, Jun 7, 2020 at 3:13 AM Fox, John <jfox at mcmaster.ca> wrote:
>> 
>> Hi,
>> 
>> The following code, from the examples in ?TkWidgets , immediately crashes R 4.0.1 for Windows:
>> 
>> --------------------- snip --------------------
>> library("tcltk")
>> tt <- tktoplevel()
>> label.widget <- tklabel(tt, text = "Hello, World!")
>> button.widget <- tkbutton(tt, text = "Push",
>>         command = function()cat("OW!\n"))
>> tkpack(label.widget, button.widget) # geometry manager
>> --------------------- snip --------------------
> 
> 
> I can reproduce this. The backtrace shows the crash happens in
> dotTclObjv  [/src/library/tcltk/src/tcltk.c at 243 ]. This looks like a
> bug that was introduced by commit 78408/78409 about a month ago. I
> think the problem is that this commit changes 'calloc' to 'Calloc'
> without changing the corresponding 'free' to 'Free'.
> 
> This has nothing to do with the Windows build or installation. Nothing
> has changed in the windows build procedure between 4.0.0 and 4.0.1.
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From iuke-tier@ey m@iii@g oii uiow@@edu  Sun Jun  7 17:53:54 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Sun, 7 Jun 2020 10:53:54 -0500 (CDT)
Subject: [Rd] 
 [External] Re: use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
Message-ID: <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>

On Sun, 7 Jun 2020, peter dalgaard wrote:

> So this wasn't tested for a month?
>
> Anyways, Free() is just free() with a check that we're not freeing a null pointer, followed by setting the pointer to NULL. At that point of tcltk.c, we have
>
>   for (objc = i = 0; i < length(avec); i++){
>        const char *s;
>        char *tmp;
>        if (!isNull(nm) && strlen(s = translateChar(STRING_ELT(nm, i)))){
>            //  tmp = calloc(strlen(s)+2, sizeof(char));
>            tmp = Calloc(strlen(s)+2, char);
>            *tmp = '-';
>            strcpy(tmp+1, s);
>            objv[objc++] = Tcl_NewStringObj(tmp, -1);
>            free(tmp);
>        }
>        if (!isNull(t = VECTOR_ELT(avec, i)))
>            objv[objc++] = (Tcl_Obj *) R_ExternalPtrAddr(t);
>    }
>
> and I can't see how tmp can be NULL at the free(), nor can I see it mattering if it is not set to NULL (notice that it goes out of scope with the for loop).

Right. And the calloc->Calloc change doesn't look like an issue either
-- just checking for a NULL.

If the crash is happening in free() then that most likely means
corrupted malloc data structures. Unfortunately that could be
happening anywhere.

Best bet to narrow this down is for someone with a good Windows setup
who can reproduce this to bisect the svn commits and see at what
commit this started happening. Unfortunately my office Windows machine
isn't responding and it will probably take some time to get that
fixed.

Best,

luke

>
> -pd
>
>
>> On 7 Jun 2020, at 16:00 , Jeroen Ooms <jeroenooms at gmail.com> wrote:
>>
>> On Sun, Jun 7, 2020 at 3:13 AM Fox, John <jfox at mcmaster.ca> wrote:
>>>
>>> Hi,
>>>
>>> The following code, from the examples in ?TkWidgets , immediately crashes R 4.0.1 for Windows:
>>>
>>> --------------------- snip --------------------
>>> library("tcltk")
>>> tt <- tktoplevel()
>>> label.widget <- tklabel(tt, text = "Hello, World!")
>>> button.widget <- tkbutton(tt, text = "Push",
>>>         command = function()cat("OW!\n"))
>>> tkpack(label.widget, button.widget) # geometry manager
>>> --------------------- snip --------------------
>>
>>
>> I can reproduce this. The backtrace shows the crash happens in
>> dotTclObjv  [/src/library/tcltk/src/tcltk.c at 243 ]. This looks like a
>> bug that was introduced by commit 78408/78409 about a month ago. I
>> think the problem is that this commit changes 'calloc' to 'Calloc'
>> without changing the corresponding 'free' to 'Free'.
>>
>> This has nothing to do with the Windows build or installation. Nothing
>> has changed in the windows build procedure between 4.0.0 and 4.0.1.
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From j|ox @end|ng |rom mcm@@ter@c@  Sun Jun  7 18:08:48 2020
From: j|ox @end|ng |rom mcm@@ter@c@ (Fox, John)
Date: Sun, 7 Jun 2020 16:08:48 +0000
Subject: [Rd] 
 [External] Re: use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
Message-ID: <ACD1644AA6C67E4FBD0C350625508EC88CF58511@FHSDB2D11-2.csu.mcmaster.ca>

Hi,

Does it make sense to withdraw the Windows R 4.0.1 binary until the issue is resolved? 

Best,
 John

> -----Original Message-----
> From: luke-tierney at uiowa.edu <luke-tierney at uiowa.edu>
> Sent: Sunday, June 7, 2020 11:54 AM
> To: peter dalgaard <pdalgd at gmail.com>
> Cc: Jeroen Ooms <jeroenooms at gmail.com>; Fox, John <jfox at mcmaster.ca>; r-
> devel at r-project.org
> Subject: Re: [External] Re: [Rd] use of the tcltk package crashes R 4.0.1
> for Windows
> 
> On Sun, 7 Jun 2020, peter dalgaard wrote:
> 
> > So this wasn't tested for a month?
> >
> > Anyways, Free() is just free() with a check that we're not freeing a
> > null pointer, followed by setting the pointer to NULL. At that point
> > of tcltk.c, we have
> >
> >   for (objc = i = 0; i < length(avec); i++){
> >        const char *s;
> >        char *tmp;
> >        if (!isNull(nm) && strlen(s = translateChar(STRING_ELT(nm, i)))){
> >            //  tmp = calloc(strlen(s)+2, sizeof(char));
> >            tmp = Calloc(strlen(s)+2, char);
> >            *tmp = '-';
> >            strcpy(tmp+1, s);
> >            objv[objc++] = Tcl_NewStringObj(tmp, -1);
> >            free(tmp);
> >        }
> >        if (!isNull(t = VECTOR_ELT(avec, i)))
> >            objv[objc++] = (Tcl_Obj *) R_ExternalPtrAddr(t);
> >    }
> >
> > and I can't see how tmp can be NULL at the free(), nor can I see it
> mattering if it is not set to NULL (notice that it goes out of scope with
> the for loop).
> 
> Right. And the calloc->Calloc change doesn't look like an issue either
> -- just checking for a NULL.
> 
> If the crash is happening in free() then that most likely means corrupted
> malloc data structures. Unfortunately that could be happening anywhere.
> 
> Best bet to narrow this down is for someone with a good Windows setup who
> can reproduce this to bisect the svn commits and see at what commit this
> started happening. Unfortunately my office Windows machine isn't
> responding and it will probably take some time to get that fixed.
> 
> Best,
> 
> luke
> 
> >
> > -pd
> >
> >
> >> On 7 Jun 2020, at 16:00 , Jeroen Ooms <jeroenooms at gmail.com> wrote:
> >>
> >> On Sun, Jun 7, 2020 at 3:13 AM Fox, John <jfox at mcmaster.ca> wrote:
> >>>
> >>> Hi,
> >>>
> >>> The following code, from the examples in ?TkWidgets , immediately
> crashes R 4.0.1 for Windows:
> >>>
> >>> --------------------- snip --------------------
> >>> library("tcltk")
> >>> tt <- tktoplevel()
> >>> label.widget <- tklabel(tt, text = "Hello, World!") button.widget <-
> >>> tkbutton(tt, text = "Push",
> >>>         command = function()cat("OW!\n")) tkpack(label.widget,
> >>> button.widget) # geometry manager
> >>> --------------------- snip --------------------
> >>
> >>
> >> I can reproduce this. The backtrace shows the crash happens in
> >> dotTclObjv  [/src/library/tcltk/src/tcltk.c at 243 ]. This looks like a
> >> bug that was introduced by commit 78408/78409 about a month ago. I
> >> think the problem is that this commit changes 'calloc' to 'Calloc'
> >> without changing the corresponding 'free' to 'Free'.
> >>
> >> This has nothing to do with the Windows build or installation.
> >> Nothing has changed in the windows build procedure between 4.0.0 and
> 4.0.1.
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >
> >
> 
> --
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>     Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From iuke-tier@ey m@iii@g oii uiow@@edu  Sun Jun  7 18:23:57 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Sun, 7 Jun 2020 11:23:57 -0500 (CDT)
Subject: [Rd] 
 [External] Re: use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
Message-ID: <alpine.OSX.2.21.2006071118140.4853@macbook-air-5.local>

There is one other possibility:

It may be that the calloc/free pair picked up by the tcltk package DLL
is different from the pair picked up when building base R. (We provide
our own malloc framework, but if the macros aren't quite right it may
be that the system malloc is picked up in some cases). In that case
using Calloc and free would be mismatching the malloc systems and
probably segfault.

If that is indeed happening we should fix it, but using Free with
Calloc should cure the immediate symptom.

Best,

luke

On Sun, 7 Jun 2020, luke-tierney at uiowa.edu wrote:

> On Sun, 7 Jun 2020, peter dalgaard wrote:
>
>> So this wasn't tested for a month?
>> 
>> Anyways, Free() is just free() with a check that we're not freeing a null 
>> pointer, followed by setting the pointer to NULL. At that point of tcltk.c, 
>> we have
>>
>>   for (objc = i = 0; i < length(avec); i++){
>>        const char *s;
>>        char *tmp;
>>        if (!isNull(nm) && strlen(s = translateChar(STRING_ELT(nm, i)))){
>>            //  tmp = calloc(strlen(s)+2, sizeof(char));
>>            tmp = Calloc(strlen(s)+2, char);
>>            *tmp = '-';
>>            strcpy(tmp+1, s);
>>            objv[objc++] = Tcl_NewStringObj(tmp, -1);
>>            free(tmp);
>>        }
>>        if (!isNull(t = VECTOR_ELT(avec, i)))
>>            objv[objc++] = (Tcl_Obj *) R_ExternalPtrAddr(t);
>>    }
>> 
>> and I can't see how tmp can be NULL at the free(), nor can I see it 
>> mattering if it is not set to NULL (notice that it goes out of scope with 
>> the for loop).
>
> Right. And the calloc->Calloc change doesn't look like an issue either
> -- just checking for a NULL.
>
> If the crash is happening in free() then that most likely means
> corrupted malloc data structures. Unfortunately that could be
> happening anywhere.
>
> Best bet to narrow this down is for someone with a good Windows setup
> who can reproduce this to bisect the svn commits and see at what
> commit this started happening. Unfortunately my office Windows machine
> isn't responding and it will probably take some time to get that
> fixed.
>
> Best,
>
> luke
>
>> 
>> -pd
>> 
>> 
>>> On 7 Jun 2020, at 16:00 , Jeroen Ooms <jeroenooms at gmail.com> wrote:
>>> 
>>> On Sun, Jun 7, 2020 at 3:13 AM Fox, John <jfox at mcmaster.ca> wrote:
>>>> 
>>>> Hi,
>>>> 
>>>> The following code, from the examples in ?TkWidgets , immediately crashes 
>>>> R 4.0.1 for Windows:
>>>> 
>>>> --------------------- snip --------------------
>>>> library("tcltk")
>>>> tt <- tktoplevel()
>>>> label.widget <- tklabel(tt, text = "Hello, World!")
>>>> button.widget <- tkbutton(tt, text = "Push",
>>>>         command = function()cat("OW!\n"))
>>>> tkpack(label.widget, button.widget) # geometry manager
>>>> --------------------- snip --------------------
>>> 
>>> 
>>> I can reproduce this. The backtrace shows the crash happens in
>>> dotTclObjv  [/src/library/tcltk/src/tcltk.c at 243 ]. This looks like a
>>> bug that was introduced by commit 78408/78409 about a month ago. I
>>> think the problem is that this commit changes 'calloc' to 'Calloc'
>>> without changing the corresponding 'free' to 'Free'.
>>> 
>>> This has nothing to do with the Windows build or installation. Nothing
>>> has changed in the windows build procedure between 4.0.0 and 4.0.1.
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> 
>
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From jeroenoom@ @end|ng |rom gm@||@com  Sun Jun  7 18:59:53 2020
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Sun, 7 Jun 2020 18:59:53 +0200
Subject: [Rd] 
 [External] Re: use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
Message-ID: <CABFfbXvD68Hcw7D5T63w4oZ55urd2NeQYy_iUZ0JfkwDKfwzTA@mail.gmail.com>

On Sun, Jun 7, 2020 at 5:53 PM <luke-tierney at uiowa.edu> wrote:
>
> On Sun, 7 Jun 2020, peter dalgaard wrote:
>
> > So this wasn't tested for a month?
> >
> > Anyways, Free() is just free() with a check that we're not freeing a null pointer, followed by setting the pointer to NULL. At that point of tcltk.c, we have
> >
> >   for (objc = i = 0; i < length(avec); i++){
> >        const char *s;
> >        char *tmp;
> >        if (!isNull(nm) && strlen(s = translateChar(STRING_ELT(nm, i)))){
> >            //  tmp = calloc(strlen(s)+2, sizeof(char));
> >            tmp = Calloc(strlen(s)+2, char);
> >            *tmp = '-';
> >            strcpy(tmp+1, s);
> >            objv[objc++] = Tcl_NewStringObj(tmp, -1);
> >            free(tmp);
> >        }
> >        if (!isNull(t = VECTOR_ELT(avec, i)))
> >            objv[objc++] = (Tcl_Obj *) R_ExternalPtrAddr(t);
> >    }
> >
> > and I can't see how tmp can be NULL at the free(), nor can I see it mattering if it is not set to NULL (notice that it goes out of scope with the for loop).
>
> Right. And the calloc->Calloc change doesn't look like an issue either
> -- just checking for a NULL.
>
> If the crash is happening in free() then that most likely means
> corrupted malloc data structures. Unfortunately that could be
> happening anywhere.

Writing R extensions, section 6.1.2 says: "Do not assume that memory
allocated by Calloc/Realloc comes from the same pool as used by
malloc: in particular do not use free or strdup with it."

I think the reason is that R uses dlmalloc for Calloc on Windows:
https://github.com/wch/r-source/blob/c634fec5214e73747b44d7c0e6f047fefe44667d/src/main/memory.c#L94-L103


From pd@|gd @end|ng |rom gm@||@com  Sun Jun  7 19:07:34 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Sun, 7 Jun 2020 19:07:34 +0200
Subject: [Rd] [External] use of the tcltk package crashes R 4.0.1 for
 Windows
In-Reply-To: <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
Message-ID: <BE280C36-1A27-4053-90BE-D903DFD84A85@gmail.com>



> On 7 Jun 2020, at 17:53 , luke-tierney at uiowa.edu wrote:
> 
> On Sun, 7 Jun 2020, peter dalgaard wrote:
> 
>> So this wasn't tested for a month?
>> 
>> Anyways, Free() is just free() with a check that we're not freeing a null pointer, followed by setting the pointer to NULL. At that point of tcltk.c, we have
>> 
>>  for (objc = i = 0; i < length(avec); i++){
>>       const char *s;
>>       char *tmp;
>>       if (!isNull(nm) && strlen(s = translateChar(STRING_ELT(nm, i)))){
>>           //  tmp = calloc(strlen(s)+2, sizeof(char));
>>           tmp = Calloc(strlen(s)+2, char);
>>           *tmp = '-';
>>           strcpy(tmp+1, s);
>>           objv[objc++] = Tcl_NewStringObj(tmp, -1);
>>           free(tmp);
>>       }
>>       if (!isNull(t = VECTOR_ELT(avec, i)))
>>           objv[objc++] = (Tcl_Obj *) R_ExternalPtrAddr(t);
>>   }
>> 
>> and I can't see how tmp can be NULL at the free(), nor can I see it mattering if it is not set to NULL (notice that it goes out of scope with the for loop).
> 
> Right. And the calloc->Calloc change doesn't look like an issue either
> -- just checking for a NULL.
> 
> If the crash is happening in free() then that most likely means
> corrupted malloc data structures. Unfortunately that could be
> happening anywhere.
> 
> Best bet to narrow this down is for someone with a good Windows setup
> who can reproduce this to bisect the svn commits and see at what
> commit this started happening. Unfortunately my office Windows machine
> isn't responding and it will probably take some time to get that
> fixed.

Also, it is possible that the issue is really a line or two earlier, so it would be good to get in with a debugger and see what is actually in *tmp and objv[objc++] at the point of the crash. 

Also, Tcl_NewStringObj(tmp, -1) obviously must allocate, but it would be rather odd if it didn't use the system allocator (Tcl is designed to be embeddable, the only strange thing R does in that respect is the marriage of the two event loops).

-pd


> 
> Best,
> 
> luke
> 
>> 
>> -pd
>> 
>> 
>>> On 7 Jun 2020, at 16:00 , Jeroen Ooms <jeroenooms at gmail.com> wrote:
>>> 
>>> On Sun, Jun 7, 2020 at 3:13 AM Fox, John <jfox at mcmaster.ca> wrote:
>>>> 
>>>> Hi,
>>>> 
>>>> The following code, from the examples in ?TkWidgets , immediately crashes R 4.0.1 for Windows:
>>>> 
>>>> --------------------- snip --------------------
>>>> library("tcltk")
>>>> tt <- tktoplevel()
>>>> label.widget <- tklabel(tt, text = "Hello, World!")
>>>> button.widget <- tkbutton(tt, text = "Push",
>>>>        command = function()cat("OW!\n"))
>>>> tkpack(label.widget, button.widget) # geometry manager
>>>> --------------------- snip --------------------
>>> 
>>> 
>>> I can reproduce this. The backtrace shows the crash happens in
>>> dotTclObjv  [/src/library/tcltk/src/tcltk.c at 243 ]. This looks like a
>>> bug that was introduced by commit 78408/78409 about a month ago. I
>>> think the problem is that this commit changes 'calloc' to 'Calloc'
>>> without changing the corresponding 'free' to 'Free'.
>>> 
>>> This has nothing to do with the Windows build or installation. Nothing
>>> has changed in the windows build procedure between 4.0.0 and 4.0.1.
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> 
> 
> -- 
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>   Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From pd@|gd @end|ng |rom gm@||@com  Sun Jun  7 19:34:20 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Sun, 7 Jun 2020 19:34:20 +0200
Subject: [Rd] 
 [External] Re: use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <CABFfbXvD68Hcw7D5T63w4oZ55urd2NeQYy_iUZ0JfkwDKfwzTA@mail.gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
 <CABFfbXvD68Hcw7D5T63w4oZ55urd2NeQYy_iUZ0JfkwDKfwzTA@mail.gmail.com>
Message-ID: <B5444856-4E32-4771-AFDC-A5EF283AE594@gmail.com>



> On 7 Jun 2020, at 18:59 , Jeroen Ooms <jeroenooms at gmail.com> wrote:
> 
> On Sun, Jun 7, 2020 at 5:53 PM <luke-tierney at uiowa.edu> wrote:
>> 
>> On Sun, 7 Jun 2020, peter dalgaard wrote:
>> 
>>> So this wasn't tested for a month?
>>> 
>>> Anyways, Free() is just free() with a check that we're not freeing a null pointer, followed by setting the pointer to NULL. At that point of tcltk.c, we have
>>> 
>>>  for (objc = i = 0; i < length(avec); i++){
>>>       const char *s;
>>>       char *tmp;
>>>       if (!isNull(nm) && strlen(s = translateChar(STRING_ELT(nm, i)))){
>>>           //  tmp = calloc(strlen(s)+2, sizeof(char));
>>>           tmp = Calloc(strlen(s)+2, char);
>>>           *tmp = '-';
>>>           strcpy(tmp+1, s);
>>>           objv[objc++] = Tcl_NewStringObj(tmp, -1);
>>>           free(tmp);
>>>       }
>>>       if (!isNull(t = VECTOR_ELT(avec, i)))
>>>           objv[objc++] = (Tcl_Obj *) R_ExternalPtrAddr(t);
>>>   }
>>> 
>>> and I can't see how tmp can be NULL at the free(), nor can I see it mattering if it is not set to NULL (notice that it goes out of scope with the for loop).
>> 
>> Right. And the calloc->Calloc change doesn't look like an issue either
>> -- just checking for a NULL.
>> 
>> If the crash is happening in free() then that most likely means
>> corrupted malloc data structures. Unfortunately that could be
>> happening anywhere.
> 
> Writing R extensions, section 6.1.2 says: "Do not assume that memory
> allocated by Calloc/Realloc comes from the same pool as used by
> malloc: in particular do not use free or strdup with it."
> 
> I think the reason is that R uses dlmalloc for Calloc on Windows:
> https://github.com/wch/r-source/blob/c634fec5214e73747b44d7c0e6f047fefe44667d/src/main/memory.c#L94-L103

But that section #defines calloc and free to Rm_... counterparts in lockstep? (I assume that is where dlmalloc comes in?)

Anyways, does it actually work to change free() to Free()? If so, then all this post mortem analysis is rather a moot point.

-pd

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From c@@rd|@g@bor @end|ng |rom gm@||@com  Sun Jun  7 21:11:38 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Sun, 7 Jun 2020 20:11:38 +0100
Subject: [Rd] 
 [External] Re: use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <B5444856-4E32-4771-AFDC-A5EF283AE594@gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
 <CABFfbXvD68Hcw7D5T63w4oZ55urd2NeQYy_iUZ0JfkwDKfwzTA@mail.gmail.com>
 <B5444856-4E32-4771-AFDC-A5EF283AE594@gmail.com>
Message-ID: <CABtg=K=f2OVg-dkR8Hk3GMefXNF+gJU3YPM2eocYDxhpdZ64yA@mail.gmail.com>

FWIW, you can "test" this by using the daily R builds. They are here:
https://ci.appveyor.com/project/jeroen/base/history

This is the build before the change, it does not crash:
https://ci.appveyor.com/project/jeroen/base/builds/32781690

This is the build right after the change, it does crash:
https://ci.appveyor.com/project/jeroen/base/builds/32808414

(To get the installers, click on "Artifacts" in the top right corner,
download the zip file, it has an exe installer.)

There are a handful of commits between the two installers, but only
this change seems to be related to the crash:
https://github.com/wch/r-source/commit/ba76508c8041335c1896df491ac227fdde0cfb0d
https://github.com/wch/r-source/commit/2c047b94bfe0996419f8871ed6b62b1e7d5ec7bd
https://github.com/wch/r-source/commit/59840c37eb20e05241fb9e85228331fa31db9a2b
https://github.com/wch/r-source/commit/161fc3f703e46201299e87bf7717a93d13c23970
https://github.com/wch/r-source/commit/4c267df39d776fa10c4b2d6b3872dbb85b073681
https://github.com/wch/r-source/commit/f3de035e12a8c8920772297405ed25ee6b3ec4a6

Gabor

On Sun, Jun 7, 2020 at 6:40 PM peter dalgaard <pdalgd at gmail.com> wrote:
>
>
>
> > On 7 Jun 2020, at 18:59 , Jeroen Ooms <jeroenooms at gmail.com> wrote:
> >
> > On Sun, Jun 7, 2020 at 5:53 PM <luke-tierney at uiowa.edu> wrote:
> >>
> >> On Sun, 7 Jun 2020, peter dalgaard wrote:
> >>
> >>> So this wasn't tested for a month?
> >>>
> >>> Anyways, Free() is just free() with a check that we're not freeing a null pointer, followed by setting the pointer to NULL. At that point of tcltk.c, we have
> >>>
> >>>  for (objc = i = 0; i < length(avec); i++){
> >>>       const char *s;
> >>>       char *tmp;
> >>>       if (!isNull(nm) && strlen(s = translateChar(STRING_ELT(nm, i)))){
> >>>           //  tmp = calloc(strlen(s)+2, sizeof(char));
> >>>           tmp = Calloc(strlen(s)+2, char);
> >>>           *tmp = '-';
> >>>           strcpy(tmp+1, s);
> >>>           objv[objc++] = Tcl_NewStringObj(tmp, -1);
> >>>           free(tmp);
> >>>       }
> >>>       if (!isNull(t = VECTOR_ELT(avec, i)))
> >>>           objv[objc++] = (Tcl_Obj *) R_ExternalPtrAddr(t);
> >>>   }
> >>>
> >>> and I can't see how tmp can be NULL at the free(), nor can I see it mattering if it is not set to NULL (notice that it goes out of scope with the for loop).
> >>
> >> Right. And the calloc->Calloc change doesn't look like an issue either
> >> -- just checking for a NULL.
> >>
> >> If the crash is happening in free() then that most likely means
> >> corrupted malloc data structures. Unfortunately that could be
> >> happening anywhere.
> >
> > Writing R extensions, section 6.1.2 says: "Do not assume that memory
> > allocated by Calloc/Realloc comes from the same pool as used by
> > malloc: in particular do not use free or strdup with it."
> >
> > I think the reason is that R uses dlmalloc for Calloc on Windows:
> > https://github.com/wch/r-source/blob/c634fec5214e73747b44d7c0e6f047fefe44667d/src/main/memory.c#L94-L103
>
> But that section #defines calloc and free to Rm_... counterparts in lockstep? (I assume that is where dlmalloc comes in?)
>
> Anyways, does it actually work to change free() to Free()? If so, then all this post mortem analysis is rather a moot point.
>
> -pd
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From iuke-tier@ey m@iii@g oii uiow@@edu  Mon Jun  8 00:03:44 2020
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Sun, 7 Jun 2020 17:03:44 -0500 (CDT)
Subject: [Rd] 
 [External] Re: use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <B5444856-4E32-4771-AFDC-A5EF283AE594@gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
 <CABFfbXvD68Hcw7D5T63w4oZ55urd2NeQYy_iUZ0JfkwDKfwzTA@mail.gmail.com>
 <B5444856-4E32-4771-AFDC-A5EF283AE594@gmail.com>
Message-ID: <alpine.DEB.2.21.2006071659380.3474@luke-Latitude-7480>

I've committed the change to use Free instead of free in tcltk.c and
sys-std.c (r78652 for R-devel, r78653 for R-patched).

We might consider either moving Calloc/Free out of the Windows
remapping or moving the remapping into header files so everything
seeing our header files uses our calloc/free. Either would be less
brittle that the current status.

Best,

luke

On Sun, 7 Jun 2020, peter dalgaard wrote:

>
>
>> On 7 Jun 2020, at 18:59 , Jeroen Ooms <jeroenooms at gmail.com> wrote:
>>
>> On Sun, Jun 7, 2020 at 5:53 PM <luke-tierney at uiowa.edu> wrote:
>>>
>>> On Sun, 7 Jun 2020, peter dalgaard wrote:
>>>
>>>> So this wasn't tested for a month?
>>>>
>>>> Anyways, Free() is just free() with a check that we're not freeing a null pointer, followed by setting the pointer to NULL. At that point of tcltk.c, we have
>>>>
>>>>  for (objc = i = 0; i < length(avec); i++){
>>>>       const char *s;
>>>>       char *tmp;
>>>>       if (!isNull(nm) && strlen(s = translateChar(STRING_ELT(nm, i)))){
>>>>           //  tmp = calloc(strlen(s)+2, sizeof(char));
>>>>           tmp = Calloc(strlen(s)+2, char);
>>>>           *tmp = '-';
>>>>           strcpy(tmp+1, s);
>>>>           objv[objc++] = Tcl_NewStringObj(tmp, -1);
>>>>           free(tmp);
>>>>       }
>>>>       if (!isNull(t = VECTOR_ELT(avec, i)))
>>>>           objv[objc++] = (Tcl_Obj *) R_ExternalPtrAddr(t);
>>>>   }
>>>>
>>>> and I can't see how tmp can be NULL at the free(), nor can I see it mattering if it is not set to NULL (notice that it goes out of scope with the for loop).
>>>
>>> Right. And the calloc->Calloc change doesn't look like an issue either
>>> -- just checking for a NULL.
>>>
>>> If the crash is happening in free() then that most likely means
>>> corrupted malloc data structures. Unfortunately that could be
>>> happening anywhere.
>>
>> Writing R extensions, section 6.1.2 says: "Do not assume that memory
>> allocated by Calloc/Realloc comes from the same pool as used by
>> malloc: in particular do not use free or strdup with it."
>>
>> I think the reason is that R uses dlmalloc for Calloc on Windows:
>> https://github.com/wch/r-source/blob/c634fec5214e73747b44d7c0e6f047fefe44667d/src/main/memory.c#L94-L103
>
> But that section #defines calloc and free to Rm_... counterparts in lockstep? (I assume that is where dlmalloc comes in?)
>
> Anyways, does it actually work to change free() to Free()? If so, then all this post mortem analysis is rather a moot point.
>
> -pd
>
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From pd@|gd @end|ng |rom gm@||@com  Mon Jun  8 01:00:47 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Mon, 8 Jun 2020 01:00:47 +0200
Subject: [Rd] [External] use of the tcltk package crashes R 4.0.1 for
 Windows
In-Reply-To: <alpine.DEB.2.21.2006071659380.3474@luke-Latitude-7480>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
 <CABFfbXvD68Hcw7D5T63w4oZ55urd2NeQYy_iUZ0JfkwDKfwzTA@mail.gmail.com>
 <B5444856-4E32-4771-AFDC-A5EF283AE594@gmail.com>
 <alpine.DEB.2.21.2006071659380.3474@luke-Latitude-7480>
Message-ID: <77DB351A-A4BA-4AF5-8845-A5B6C7490D97@gmail.com>

Ah, I see it now: 

The remapping of free() to Rm_free() and calloc() to Rm_calloc() happens in memory.c, but not in tcltk.c; the macro Calloc in R_ext/RS.h maps to a call to R_chk_alloc which is defined in memory.h; RS.h is included in tcltk.c, so tcltk.c winds up calling Rm_calloc() via Calloc(), but then the NON-remapped free(), and the walls come tumbling down. 

If the  "#if defined(Win32)" block had been inside RS.h, the problem wouldn't arise.

-pd

> On 8 Jun 2020, at 00:03 , luke-tierney at uiowa.edu wrote:
> 
> I've committed the change to use Free instead of free in tcltk.c and
> sys-std.c (r78652 for R-devel, r78653 for R-patched).
> 
> We might consider either moving Calloc/Free out of the Windows
> remapping or moving the remapping into header files so everything
> seeing our header files uses our calloc/free. Either would be less
> brittle that the current status.
> 
> Best,
> 
> luke
> 
> On Sun, 7 Jun 2020, peter dalgaard wrote:
> 
>> 
>> 
>>> On 7 Jun 2020, at 18:59 , Jeroen Ooms <jeroenooms at gmail.com> wrote:
>>> 
>>> On Sun, Jun 7, 2020 at 5:53 PM <luke-tierney at uiowa.edu> wrote:
>>>> 
>>>> On Sun, 7 Jun 2020, peter dalgaard wrote:
>>>> 
>>>>> So this wasn't tested for a month?
>>>>> 
>>>>> Anyways, Free() is just free() with a check that we're not freeing a null pointer, followed by setting the pointer to NULL. At that point of tcltk.c, we have
>>>>> 
>>>>> for (objc = i = 0; i < length(avec); i++){
>>>>>      const char *s;
>>>>>      char *tmp;
>>>>>      if (!isNull(nm) && strlen(s = translateChar(STRING_ELT(nm, i)))){
>>>>>          //  tmp = calloc(strlen(s)+2, sizeof(char));
>>>>>          tmp = Calloc(strlen(s)+2, char);
>>>>>          *tmp = '-';
>>>>>          strcpy(tmp+1, s);
>>>>>          objv[objc++] = Tcl_NewStringObj(tmp, -1);
>>>>>          free(tmp);
>>>>>      }
>>>>>      if (!isNull(t = VECTOR_ELT(avec, i)))
>>>>>          objv[objc++] = (Tcl_Obj *) R_ExternalPtrAddr(t);
>>>>>  }
>>>>> 
>>>>> and I can't see how tmp can be NULL at the free(), nor can I see it mattering if it is not set to NULL (notice that it goes out of scope with the for loop).
>>>> 
>>>> Right. And the calloc->Calloc change doesn't look like an issue either
>>>> -- just checking for a NULL.
>>>> 
>>>> If the crash is happening in free() then that most likely means
>>>> corrupted malloc data structures. Unfortunately that could be
>>>> happening anywhere.
>>> 
>>> Writing R extensions, section 6.1.2 says: "Do not assume that memory
>>> allocated by Calloc/Realloc comes from the same pool as used by
>>> malloc: in particular do not use free or strdup with it."
>>> 
>>> I think the reason is that R uses dlmalloc for Calloc on Windows:
>>> https://github.com/wch/r-source/blob/c634fec5214e73747b44d7c0e6f047fefe44667d/src/main/memory.c#L94-L103
>> 
>> But that section #defines calloc and free to Rm_... counterparts in lockstep? (I assume that is where dlmalloc comes in?)
>> 
>> Anyways, does it actually work to change free() to Free()? If so, then all this post mortem analysis is rather a moot point.
>> 
>> -pd
>> 
>> 
> 
> -- 
> Luke Tierney
> Ralph E. Wareham Professor of Mathematical Sciences
> University of Iowa                  Phone:             319-335-3386
> Department of Statistics and        Fax:               319-335-3017
>   Actuarial Science
> 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From @purd|e@@ @end|ng |rom gm@||@com  Mon Jun  8 01:17:15 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Mon, 8 Jun 2020 11:17:15 +1200
Subject: [Rd] 
 [External] Re: use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <ACD1644AA6C67E4FBD0C350625508EC88CF58511@FHSDB2D11-2.csu.mcmaster.ca>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
 <ACD1644AA6C67E4FBD0C350625508EC88CF58511@FHSDB2D11-2.csu.mcmaster.ca>
Message-ID: <CAB8pepw4B9EDbbxuqb0Bu9RddjTw1LeeaQK63qw7O36dxwGwSg@mail.gmail.com>

On Mon, Jun 8, 2020 at 4:09 AM Fox, John <jfox at mcmaster.ca> wrote:
> Does it make sense to withdraw the Windows R 4.0.1 binary until the issue is resolved?

Yes, it does.
All the release reversions should be removed.


From @purd|e@@ @end|ng |rom gm@||@com  Mon Jun  8 01:20:21 2020
From: @purd|e@@ @end|ng |rom gm@||@com (Abby Spurdle)
Date: Mon, 8 Jun 2020 11:20:21 +1200
Subject: [Rd] 
 [External] Re: use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <CAB8pepw4B9EDbbxuqb0Bu9RddjTw1LeeaQK63qw7O36dxwGwSg@mail.gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
 <ACD1644AA6C67E4FBD0C350625508EC88CF58511@FHSDB2D11-2.csu.mcmaster.ca>
 <CAB8pepw4B9EDbbxuqb0Bu9RddjTw1LeeaQK63qw7O36dxwGwSg@mail.gmail.com>
Message-ID: <CAB8pepwjyyfa63KkUKsCGOpoVQjcT10+g1Rc0BSv_zQ8b8NRow@mail.gmail.com>

sorry, release "versions"


On Mon, Jun 8, 2020 at 11:17 AM Abby Spurdle <spurdle.a at gmail.com> wrote:
>
> On Mon, Jun 8, 2020 at 4:09 AM Fox, John <jfox at mcmaster.ca> wrote:
> > Does it make sense to withdraw the Windows R 4.0.1 binary until the issue is resolved?
>
> Yes, it does.
> All the release reversions should be removed.


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Mon Jun  8 01:28:15 2020
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Sun, 7 Jun 2020 23:28:15 +0000
Subject: [Rd] [External] use of the tcltk package crashes R 4.0.1 for
 Windows
In-Reply-To: <77DB351A-A4BA-4AF5-8845-A5B6C7490D97@gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
 <CABFfbXvD68Hcw7D5T63w4oZ55urd2NeQYy_iUZ0JfkwDKfwzTA@mail.gmail.com>
 <B5444856-4E32-4771-AFDC-A5EF283AE594@gmail.com>
 <alpine.DEB.2.21.2006071659380.3474@luke-Latitude-7480>
 <77DB351A-A4BA-4AF5-8845-A5B6C7490D97@gmail.com>
Message-ID: <CAL6gwnJXS6XFHx3oPYoaoqZDuKcA57EhN0gNFLwE5iH4ZPdx6Q@mail.gmail.com>

Jeroen, how "reactive" are the rtools40 scripts. Will they pull the latest
version committed by Dr. Tierney or is there something which must be done
manually prior to we end-users rebuilding from source?

Thank you,

Avi

On Sun, Jun 7, 2020 at 11:01 PM peter dalgaard <pdalgd at gmail.com> wrote:

> Ah, I see it now:
>
> The remapping of free() to Rm_free() and calloc() to Rm_calloc() happens
> in memory.c, but not in tcltk.c; the macro Calloc in R_ext/RS.h maps to a
> call to R_chk_alloc which is defined in memory.h; RS.h is included in
> tcltk.c, so tcltk.c winds up calling Rm_calloc() via Calloc(), but then the
> NON-remapped free(), and the walls come tumbling down.
>
> If the  "#if defined(Win32)" block had been inside RS.h, the problem
> wouldn't arise.
>
> -pd
>
> > On 8 Jun 2020, at 00:03 , luke-tierney at uiowa.edu wrote:
> >
> > I've committed the change to use Free instead of free in tcltk.c and
> > sys-std.c (r78652 for R-devel, r78653 for R-patched).
> >
> > We might consider either moving Calloc/Free out of the Windows
> > remapping or moving the remapping into header files so everything
> > seeing our header files uses our calloc/free. Either would be less
> > brittle that the current status.
> >
> > Best,
> >
> > luke
> >
> > On Sun, 7 Jun 2020, peter dalgaard wrote:
> >
> >>
> >>
> >>> On 7 Jun 2020, at 18:59 , Jeroen Ooms <jeroenooms at gmail.com> wrote:
> >>>
> >>> On Sun, Jun 7, 2020 at 5:53 PM <luke-tierney at uiowa.edu> wrote:
> >>>>
> >>>> On Sun, 7 Jun 2020, peter dalgaard wrote:
> >>>>
> >>>>> So this wasn't tested for a month?
> >>>>>
> >>>>> Anyways, Free() is just free() with a check that we're not freeing a
> null pointer, followed by setting the pointer to NULL. At that point of
> tcltk.c, we have
> >>>>>
> >>>>> for (objc = i = 0; i < length(avec); i++){
> >>>>>      const char *s;
> >>>>>      char *tmp;
> >>>>>      if (!isNull(nm) && strlen(s = translateChar(STRING_ELT(nm,
> i)))){
> >>>>>          //  tmp = calloc(strlen(s)+2, sizeof(char));
> >>>>>          tmp = Calloc(strlen(s)+2, char);
> >>>>>          *tmp = '-';
> >>>>>          strcpy(tmp+1, s);
> >>>>>          objv[objc++] = Tcl_NewStringObj(tmp, -1);
> >>>>>          free(tmp);
> >>>>>      }
> >>>>>      if (!isNull(t = VECTOR_ELT(avec, i)))
> >>>>>          objv[objc++] = (Tcl_Obj *) R_ExternalPtrAddr(t);
> >>>>>  }
> >>>>>
> >>>>> and I can't see how tmp can be NULL at the free(), nor can I see it
> mattering if it is not set to NULL (notice that it goes out of scope with
> the for loop).
> >>>>
> >>>> Right. And the calloc->Calloc change doesn't look like an issue either
> >>>> -- just checking for a NULL.
> >>>>
> >>>> If the crash is happening in free() then that most likely means
> >>>> corrupted malloc data structures. Unfortunately that could be
> >>>> happening anywhere.
> >>>
> >>> Writing R extensions, section 6.1.2 says: "Do not assume that memory
> >>> allocated by Calloc/Realloc comes from the same pool as used by
> >>> malloc: in particular do not use free or strdup with it."
> >>>
> >>> I think the reason is that R uses dlmalloc for Calloc on Windows:
> >>>
> https://github.com/wch/r-source/blob/c634fec5214e73747b44d7c0e6f047fefe44667d/src/main/memory.c#L94-L103
> >>
> >> But that section #defines calloc and free to Rm_... counterparts in
> lockstep? (I assume that is where dlmalloc comes in?)
> >>
> >> Anyways, does it actually work to change free() to Free()? If so, then
> all this post mortem analysis is rather a moot point.
> >>
> >> -pd
> >>
> >>
> >
> > --
> > Luke Tierney
> > Ralph E. Wareham Professor of Mathematical Sciences
> > University of Iowa                  Phone:             319-335-3386
> > Department of Statistics and        Fax:               319-335-3017
> >   Actuarial Science
> > 241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
> > Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Mon Jun  8 09:08:20 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Mon, 8 Jun 2020 09:08:20 +0200
Subject: [Rd] 
 [External] Re: use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <CAB8pepwjyyfa63KkUKsCGOpoVQjcT10+g1Rc0BSv_zQ8b8NRow@mail.gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
 <ACD1644AA6C67E4FBD0C350625508EC88CF58511@FHSDB2D11-2.csu.mcmaster.ca>
 <CAB8pepw4B9EDbbxuqb0Bu9RddjTw1LeeaQK63qw7O36dxwGwSg@mail.gmail.com>
 <CAB8pepwjyyfa63KkUKsCGOpoVQjcT10+g1Rc0BSv_zQ8b8NRow@mail.gmail.com>
Message-ID: <E91D5B42-F4D1-418D-BB4A-7D1D34E332CD@gmail.com>

Well...

The first rule of release management is not to have the same version number on different releases.

I see three possibilities

(1) Tell users to use 4.0.1-patched if they need tcltk on Windows
(2) A "vendor patch release": Windows maintainer reissues the binary after applying the critical patch. 
(3) 4.0.2 As soon as possible (realistically June 22nd-ish)

Now, (1) requires no intervention, but it has the problem that we are approaching the time for campus-wide installations (insofar as campuses will actually reopen in Fall). It will be messy to have to tell IT not to use the officially released binary, and most likely they just won't.

(2) is possible if we act quickly, although it leaves a "ghost version" of 4.0.1 around (and don't try renaming tricks, it can mess up CRAN scripts - some of us have the scars...). It should work but it is a bit iffy because the actual problem is in fact in the sources and it creates a situation where the binary and the sources are out of sync.

(3) is clean, but it takes a while (minimum 12 days) to go through the release run-in. Also, for a new release, I suspect we want to have a closer look at the issue as we seem to be using multiple allocators on Windows in a, hmmm, "eclectic mix". (E.g. connections.c has both Calloc/Free and malloc/free combinations and AFAICT, the latter uses a different allocator.)  

-pd


> On 8 Jun 2020, at 01:20 , Abby Spurdle <spurdle.a at gmail.com> wrote:
> 
> sorry, release "versions"
> 
> 
> On Mon, Jun 8, 2020 at 11:17 AM Abby Spurdle <spurdle.a at gmail.com> wrote:
>> 
>> On Mon, Jun 8, 2020 at 4:09 AM Fox, John <jfox at mcmaster.ca> wrote:
>>> Does it make sense to withdraw the Windows R 4.0.1 binary until the issue is resolved?
>> 
>> Yes, it does.
>> All the release reversions should be removed.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From jeroenoom@ @end|ng |rom gm@||@com  Mon Jun  8 09:36:57 2020
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Mon, 8 Jun 2020 09:36:57 +0200
Subject: [Rd] 
 [External] Re: use of the tcltk package crashes R 4.0.1 for Windows
In-Reply-To: <alpine.DEB.2.21.2006071659380.3474@luke-Latitude-7480>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
 <CABFfbXvD68Hcw7D5T63w4oZ55urd2NeQYy_iUZ0JfkwDKfwzTA@mail.gmail.com>
 <B5444856-4E32-4771-AFDC-A5EF283AE594@gmail.com>
 <alpine.DEB.2.21.2006071659380.3474@luke-Latitude-7480>
Message-ID: <CABFfbXsYRh9CdQeGy7syLn0oWQhRLgSyoe9OEfJjiFP=pDfamA@mail.gmail.com>

On Mon, Jun 8, 2020 at 12:03 AM <luke-tierney at uiowa.edu> wrote:
>
> I've committed the change to use Free instead of free in tcltk.c and
> sys-std.c (r78652 for R-devel, r78653 for R-patched).

Thank you! I can confirm that the example from above no longer crashes
in R--patched.

John, can you confirm that everything seems to work now in Rcmd with
today's R-patched build from CRAN?
https://cran.r-project.org/bin/windows/base/rpatched.html

Hopefully Peter will be able to tag a 4.0.2 hotfix release based on
4.0.1 + above patch, without going through the full release
procedure...


From j|ox @end|ng |rom mcm@@ter@c@  Mon Jun  8 15:45:43 2020
From: j|ox @end|ng |rom mcm@@ter@c@ (Fox, John)
Date: Mon, 8 Jun 2020 13:45:43 +0000
Subject: [Rd] [External] use of the tcltk package crashes R 4.0.1 for
 Windows
In-Reply-To: <CABFfbXsYRh9CdQeGy7syLn0oWQhRLgSyoe9OEfJjiFP=pDfamA@mail.gmail.com>
References: <ACD1644AA6C67E4FBD0C350625508EC88CF55DA3@FHSDB2D11-2.csu.mcmaster.ca>
 <CABFfbXuT+hs2uAQuGtvJ_-c1xQPwx6Z+kfiUUwHJkvd4jzY6dg@mail.gmail.com>
 <B39BE746-8080-416C-A5C9-A1E6F06BA7BC@gmail.com>
 <alpine.DEB.2.21.2006071040370.3474@luke-Latitude-7480>
 <CABFfbXvD68Hcw7D5T63w4oZ55urd2NeQYy_iUZ0JfkwDKfwzTA@mail.gmail.com>
 <B5444856-4E32-4771-AFDC-A5EF283AE594@gmail.com>
 <alpine.DEB.2.21.2006071659380.3474@luke-Latitude-7480>
 <CABFfbXsYRh9CdQeGy7syLn0oWQhRLgSyoe9OEfJjiFP=pDfamA@mail.gmail.com>
Message-ID: <A82C6E81-5B67-40F6-8541-8FCC188019DB@mcmaster.ca>

Dear Jeroen,

With the caveat that I've tested only a few of the Rcmdr dialogs (a full test takes hours and must be done manually), everything seems to be working fine again.

Thank you for addressing this problem so quickly.

John

  -----------------------------
  John Fox, Professor Emeritus
  McMaster University
  Hamilton, Ontario, Canada
  Web: http::/socserv.mcmaster.ca/jfox

> On Jun 8, 2020, at 3:36 AM, Jeroen Ooms <jeroenooms at gmail.com> wrote:
> 
> On Mon, Jun 8, 2020 at 12:03 AM <luke-tierney at uiowa.edu> wrote:
>> 
>> I've committed the change to use Free instead of free in tcltk.c and
>> sys-std.c (r78652 for R-devel, r78653 for R-patched).
> 
> Thank you! I can confirm that the example from above no longer crashes
> in R--patched.
> 
> John, can you confirm that everything seems to work now in Rcmd with
> today's R-patched build from CRAN?
> https://cran.r-project.org/bin/windows/base/rpatched.html
> 
> Hopefully Peter will be able to tag a 4.0.2 hotfix release based on
> 4.0.1 + above patch, without going through the full release
> procedure...


From cp@|evert1 @end|ng |rom gm@||@com  Tue Jun  9 00:09:54 2020
From: cp@|evert1 @end|ng |rom gm@||@com (Carson Sievert)
Date: Mon, 8 Jun 2020 17:09:54 -0500
Subject: [Rd] Potential issue with perl-based pattern matching with Unicode
 characters on Windows R 4.0 and above
Message-ID: <CAMYFQhogq7D8oESTwoX3mG3WRobrtV5P_dPbq1MmKwMa4ATpLg@mail.gmail.com>

Hi everyone,

I've noticed new behavior in `regexpr(..., perl = TRUE)` on Windows with
R4.0 and above with Unicode characters. Here's a minimal example where I'd
expect to see a start value of `5` (as R 3.6.2 and below gives), but R
4.0.0 (and R 4.0.1) now returns:

```
> regexpr("b", "foo\U0001F937bar", perl = TRUE)
#> [1] 6
#> attr(,"match.length")
#> [1] 1
```

Perhaps this change in behavior could be explained by R4.0's migration to
PCRE2? Here is some relevant output from my R4.0 session:

```
> pcre_config()
#> UTF-8 Unicode properties     JIT    stack
#>  TRUE               TRUE    TRUE    FALSE
```

```
> extSoftVersion()
#>         zlib                        bzlib            xz
   PCRE
#> "1.2.11"   "1.0.8, 13-Jul-2019"    "5.2.4"   "10.33 2019-04-16"
#> ICU                                       TRE            iconv
 readline   BLAS
#> "58.2" "TRE 0.8.0 R_fixes (BSD)"  "win_iconv"               ""       ""
```

Let me know if there's any more information I can provide to help replicate
and isolate the issue. Also, if this happens to be the expected behavior,
I'd be keen to learn about why that's the case.

Thank you,

-Carson

-- 
Carson Sievert, PhD
Software Engineer at RStudio
Website <https://cpsievert.me> | Twitter <https://twitter.com/cpsievert> |
GitHub <https://github.com/cpsievert>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Tue Jun  9 17:01:06 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Tue, 9 Jun 2020 17:01:06 +0200
Subject: [Rd] 
 Potential issue with perl-based pattern matching with Unicode
 characters on Windows R 4.0 and above
In-Reply-To: <CAMYFQhogq7D8oESTwoX3mG3WRobrtV5P_dPbq1MmKwMa4ATpLg@mail.gmail.com>
References: <CAMYFQhogq7D8oESTwoX3mG3WRobrtV5P_dPbq1MmKwMa4ATpLg@mail.gmail.com>
Message-ID: <aa38f41c-6962-442d-6b5b-0a4ded55d7bb@gmail.com>

Hi Carson,

thanks for the report. This is a bug in R, specific to Windows and to 
characters that use surrogate pairs - other characters will work fine, 
other recent operating systems where R runs will work fine (all where a 
single wchar_t holds complete Unicode characters). Now fixed in R-devel.

If handling of surrogate pairs (e.g. Emoji characters) is important for 
you, it would help if you could systematically stress-test R for that. A 
number of related bugs have been fixed, but it is not impossible some 
are still present as these characters are rarely present in test data.

Also, sometimes fixing bugs ironically introduces new problems. This 
regression was caused by a correct fix of a bug related to surrogate 
pairs in R 4.0. That old bug was cancelling out this old bug in 
post-processing PCRE results.

Best
Tomas

On 6/9/20 12:09 AM, Carson Sievert wrote:
> Hi everyone,
>
> I've noticed new behavior in `regexpr(..., perl = TRUE)` on Windows with
> R4.0 and above with Unicode characters. Here's a minimal example where I'd
> expect to see a start value of `5` (as R 3.6.2 and below gives), but R
> 4.0.0 (and R 4.0.1) now returns:
>
> ```
>> regexpr("b", "foo\U0001F937bar", perl = TRUE)
> #> [1] 6
> #> attr(,"match.length")
> #> [1] 1
> ```
>
> Perhaps this change in behavior could be explained by R4.0's migration to
> PCRE2? Here is some relevant output from my R4.0 session:
>
> ```
>> pcre_config()
> #> UTF-8 Unicode properties     JIT    stack
> #>  TRUE               TRUE    TRUE    FALSE
> ```
>
> ```
>> extSoftVersion()
> #>         zlib                        bzlib            xz
>     PCRE
> #> "1.2.11"   "1.0.8, 13-Jul-2019"    "5.2.4"   "10.33 2019-04-16"
> #> ICU                                       TRE            iconv
>   readline   BLAS
> #> "58.2" "TRE 0.8.0 R_fixes (BSD)"  "win_iconv"               ""       ""
> ```
>
> Let me know if there's any more information I can provide to help replicate
> and isolate the issue. Also, if this happens to be the expected behavior,
> I'd be keen to learn about why that's the case.
>
> Thank you,
>
> -Carson
>


From pd@me@ @end|ng |rom cb@@dk  Tue Jun  9 23:28:03 2020
From: pd@me@ @end|ng |rom cb@@dk (Peter Dalgaard)
Date: Tue, 9 Jun 2020 21:28:03 +0000
Subject: [Rd] R 4.0.2 scheduled for June 22
Message-ID: <270EFEE1-89B1-48F7-BBD6-E66B46D1C32C@cbs.dk>

Unfortunatly, a memory allocation bug prevented the R Commander package from working on Windows. This is fixed in R-patched, but we cannot have this not working in the official release when IT departments start installing for the Fall semester, so we need to issue a new release.

Full schedule is available on developer.r-project.org.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From j|ox @end|ng |rom mcm@@ter@c@  Tue Jun  9 23:37:50 2020
From: j|ox @end|ng |rom mcm@@ter@c@ (Fox, John)
Date: Tue, 9 Jun 2020 21:37:50 +0000
Subject: [Rd] [R]  R 4.0.2 scheduled for June 22
In-Reply-To: <4168_1591738244_059LUFtX007139_270EFEE1-89B1-48F7-BBD6-E66B46D1C32C@cbs.dk>
References: <4168_1591738244_059LUFtX007139_270EFEE1-89B1-48F7-BBD6-E66B46D1C32C@cbs.dk>
Message-ID: <F16DCD72-2D0C-47D4-ABDB-196BB02B63E1@mcmaster.ca>

Dear Peter,

Thank you very much for this.

To clarify slightly, the bug affects not just the Rcmdr package but use of the tcltk package on Windows more generally.

Best,
 John

  -----------------------------
  John Fox, Professor Emeritus
  McMaster University
  Hamilton, Ontario, Canada
  Web: http::/socserv.mcmaster.ca/jfox

> On Jun 9, 2020, at 5:28 PM, Peter Dalgaard via R-help <r-help at r-project.org> wrote:
> 
> Unfortunatly, a memory allocation bug prevented the R Commander package from working on Windows. This is fixed in R-patched, but we cannot have this not working in the official release when IT departments start installing for the Fall semester, so we need to issue a new release.
> 
> Full schedule is available on developer.r-project.org.
> 
> -- 
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> _______________________________________________
> R-announce at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-announce
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From henr|k@bengt@@on @end|ng |rom gm@||@com  Wed Jun 10 00:45:00 2020
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Tue, 9 Jun 2020 15:45:00 -0700
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <CABtg=Knbz7SRRHUK1JcbYJekGTcwbcM8=NNaXaO_UdJiF-E0bw@mail.gmail.com>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
 <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
 <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>
 <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>
 <a96725a1-0e74-164d-4e8c-000b84ca7bc8@gmail.com>
 <CABFfbXvNh2s6KZZ+tAwM8tHDOb0Ob8mFJkbrMb+_E8GPzOA6SA@mail.gmail.com>
 <CABtg=Kk5gNnSqoLPtY-YodzP7rLy+1v4uwP+S87mdUqhkPKZYw@mail.gmail.com>
 <CABtg=KkEX6PLPx4Jtdsc7rtKuEjaUJZjPUJ8MUMzrmzNw85xeg@mail.gmail.com>
 <CABtg=Knbz7SRRHUK1JcbYJekGTcwbcM8=NNaXaO_UdJiF-E0bw@mail.gmail.com>
Message-ID: <CAFDcVCS1+Tu07=JPRUMZbR0=J289Nh_j5+PfrH5LzZddbCbo2A@mail.gmail.com>

Was this resolved upstream or is this something that R should/could
fix? If the latter, could this also go into the "emergency release" R
4.0.2 that is scheduled for 2020-06-22?

My $.02

/Henrik


On Sun, May 31, 2020 at 8:13 AM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>
> Btw. it would be also possible to create a macOS R installer that
> embeds a static or dynamic libcurl with Secure Transport, instead of
> the Apple default LibreSSL.
>
> This might be too late for R 4.0.1, I don't know.
>
> Gabor
>
> On Sun, May 31, 2020 at 4:09 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> >
> > On Sat, May 30, 2020 at 11:32 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> > [...]
> > > Btw. why does this affect openssl? That root cert was published in
> > > 2010, surely openssl should know about it? Maybe libcurl / openssl
> > > only uses the chain provided by the server? Without trying to use an
> > > alternate chain?
> >
> > Yes, indeed it seems that old OpenSSL versions cannot handle
> > alternative certificate chains. This has been fixed in OpenSSL in
> > 2015, so modern Linux systems should be fine. However, macOS uses
> > LibreSSL, and LibreSSL never fixed this issue. E.g.
> > https://github.com/libressl-portable/portable/issues/595
> >
> > r-project.org can be updated to send the new root certificate, which
> > will solve most of our problems, but we'll probably have issues with
> > other web sites that'll update slower or never.
> >
> > FWIW I built macOS binaries for the curl package, using a static
> > libcurl and macOS Secure Transport, so these binaries does not have
> > this issue.
> >
> > They are at https://files.r-hub.io/curl-macos-static and they can be
> > installed with
> > install.packages("curl", repos =
> > "https://files.r-hub.io/curl-macos-static", type = "binary")
> >
> > They support R 3.2 and up, including R 4.1, and should work on all
> > macOS versions that the given R release supports.
> >
> > Gabor
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @|mon@urb@nek @end|ng |rom R-project@org  Wed Jun 10 00:50:18 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 10 Jun 2020 10:50:18 +1200
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <CAFDcVCS1+Tu07=JPRUMZbR0=J289Nh_j5+PfrH5LzZddbCbo2A@mail.gmail.com>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
 <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
 <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>
 <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>
 <a96725a1-0e74-164d-4e8c-000b84ca7bc8@gmail.com>
 <CABFfbXvNh2s6KZZ+tAwM8tHDOb0Ob8mFJkbrMb+_E8GPzOA6SA@mail.gmail.com>
 <CABtg=Kk5gNnSqoLPtY-YodzP7rLy+1v4uwP+S87mdUqhkPKZYw@mail.gmail.com>
 <CABtg=KkEX6PLPx4Jtdsc7rtKuEjaUJZjPUJ8MUMzrmzNw85xeg@mail.gmail.com>
 <CABtg=Knbz7SRRHUK1JcbYJekGTcwbcM8=NNaXaO_UdJiF-E0bw@mail.gmail.com>
 <CAFDcVCS1+Tu07=JPRUMZbR0=J289Nh_j5+PfrH5LzZddbCbo2A@mail.gmail.com>
Message-ID: <02BBCA72-BBF4-4AC7-AFB4-7A516BD6A2D3@R-project.org>

To be clear, this not an issue in the libraries nor R, the certificates on the server were simply wrong. So, no, this has nothing to do with R.

Cheers,
Simon


> On Jun 10, 2020, at 10:45 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
> 
> Was this resolved upstream or is this something that R should/could
> fix? If the latter, could this also go into the "emergency release" R
> 4.0.2 that is scheduled for 2020-06-22?
> 
> My $.02
> 
> /Henrik
> 
> 
> On Sun, May 31, 2020 at 8:13 AM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>> 
>> Btw. it would be also possible to create a macOS R installer that
>> embeds a static or dynamic libcurl with Secure Transport, instead of
>> the Apple default LibreSSL.
>> 
>> This might be too late for R 4.0.1, I don't know.
>> 
>> Gabor
>> 
>> On Sun, May 31, 2020 at 4:09 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>> 
>>> On Sat, May 30, 2020 at 11:32 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>> [...]
>>>> Btw. why does this affect openssl? That root cert was published in
>>>> 2010, surely openssl should know about it? Maybe libcurl / openssl
>>>> only uses the chain provided by the server? Without trying to use an
>>>> alternate chain?
>>> 
>>> Yes, indeed it seems that old OpenSSL versions cannot handle
>>> alternative certificate chains. This has been fixed in OpenSSL in
>>> 2015, so modern Linux systems should be fine. However, macOS uses
>>> LibreSSL, and LibreSSL never fixed this issue. E.g.
>>> https://github.com/libressl-portable/portable/issues/595
>>> 
>>> r-project.org can be updated to send the new root certificate, which
>>> will solve most of our problems, but we'll probably have issues with
>>> other web sites that'll update slower or never.
>>> 
>>> FWIW I built macOS binaries for the curl package, using a static
>>> libcurl and macOS Secure Transport, so these binaries does not have
>>> this issue.
>>> 
>>> They are at https://files.r-hub.io/curl-macos-static and they can be
>>> installed with
>>> install.packages("curl", repos =
>>> "https://files.r-hub.io/curl-macos-static", type = "binary")
>>> 
>>> They support R 3.2 and up, including R 4.1, and should work on all
>>> macOS versions that the given R release supports.
>>> 
>>> Gabor
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From tdhock5 @end|ng |rom gm@||@com  Wed Jun 10 01:21:00 2020
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Tue, 9 Jun 2020 16:21:00 -0700
Subject: [Rd] valgrind false positive on R startup?
Message-ID: <CALK03d1zKdgcwhnRfM-kNgVQvXGmzN_WitwuREsbwoJsDZpVkA@mail.gmail.com>

Hi all,

I'm on Ubuntu 18.04, running R-4.0.0 which I compiled from source, and
using valgrind I am always seeing the following message. Does anybody
else see that? Is that a known false positive? Any ideas how to
fix/suppress? Seems related to TRE, do I need to upgrade that?

(base) tdhock at maude-MacBookPro:~/R/binsegRcpp$ R --vanilla -d valgrind
-e 'extSoftVersion()'
==9565== Memcheck, a memory error detector
==9565== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==9565== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==9565== Command: /home/tdhock/lib/R/bin/exec/R --vanilla -e extSoftVersion()
==9565==
==9565== Conditional jump or move depends on uninitialised value(s)
==9565==    at 0x55AB9E0: __wcsnlen_sse4_1 (strlen.S:147)
==9565==    by 0x5598EC1: wcsrtombs (wcsrtombs.c:104)
==9565==    by 0x551EB20: wcstombs (wcstombs.c:34)
==9565==    by 0x50BAA07: wcstombs (stdlib.h:154)
==9565==    by 0x50BAA07: tre_parse_bracket_items (tre-parse.c:336)
==9565==    by 0x50BAA07: tre_parse_bracket (tre-parse.c:453)
==9565==    by 0x50BAA07: tre_parse (tre-parse.c:1380)
==9565==    by 0x50B2498: tre_compile (tre-compile.c:1920)
==9565==    by 0x50AFBE0: tre_regcompb (regcomp.c:150)
==9565==    by 0x4FA9F42: do_gsub (grep.c:2023)
==9565==    by 0x4F79045: bcEval (eval.c:7090)
==9565==    by 0x4F8572F: Rf_eval (eval.c:723)
==9565==    by 0x4F8754E: R_execClosure (eval.c:1888)
==9565==    by 0x4F88316: Rf_applyClosure (eval.c:1814)
==9565==    by 0x4F85902: Rf_eval (eval.c:846)
==9565==

R version 4.0.0 (2020-04-24) -- "Arbor Day"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> extSoftVersion()
                                zlib                                bzlib
                            "1.2.11"                 "1.0.6, 6-Sept-2010"
                                  xz                                 PCRE
                             "5.2.2"                   "10.31 2018-02-12"
                                 ICU                                  TRE
                              "60.2"            "TRE 0.8.0 R_fixes (BSD)"
                               iconv                             readline
                        "glibc 2.27"                                "7.0"
                                BLAS
"/home/tdhock/lib/R/lib/libRblas.so"
>
>
==9565==
==9565== HEAP SUMMARY:
==9565==     in use at exit: 40,492,919 bytes in 9,170 blocks
==9565==   total heap usage: 19,784 allocs, 10,614 frees, 62,951,535
bytes allocated
==9565==
==9565== LEAK SUMMARY:
==9565==    definitely lost: 0 bytes in 0 blocks
==9565==    indirectly lost: 0 bytes in 0 blocks
==9565==      possibly lost: 0 bytes in 0 blocks
==9565==    still reachable: 40,492,919 bytes in 9,170 blocks
==9565==                       of which reachable via heuristic:
==9565==                         newarray           : 4,264 bytes in 1 blocks
==9565==         suppressed: 0 bytes in 0 blocks
==9565== Rerun with --leak-check=full to see details of leaked memory
==9565==
==9565== For counts of detected and suppressed errors, rerun with: -v
==9565== Use --track-origins=yes to see where uninitialised values come from
==9565== ERROR SUMMARY: 46 errors from 1 contexts (suppressed: 0 from 0)
(base) tdhock at maude-MacBookPro:~/R/binsegRcpp$


From pd@|gd @end|ng |rom gm@||@com  Wed Jun 10 01:39:48 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Wed, 10 Jun 2020 01:39:48 +0200
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <02BBCA72-BBF4-4AC7-AFB4-7A516BD6A2D3@R-project.org>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
 <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
 <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>
 <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>
 <a96725a1-0e74-164d-4e8c-000b84ca7bc8@gmail.com>
 <CABFfbXvNh2s6KZZ+tAwM8tHDOb0Ob8mFJkbrMb+_E8GPzOA6SA@mail.gmail.com>
 <CABtg=Kk5gNnSqoLPtY-YodzP7rLy+1v4uwP+S87mdUqhkPKZYw@mail.gmail.com>
 <CABtg=KkEX6PLPx4Jtdsc7rtKuEjaUJZjPUJ8MUMzrmzNw85xeg@mail.gmail.com>
 <CABtg=Knbz7SRRHUK1JcbYJekGTcwbcM8=NNaXaO_UdJiF-E0bw@mail.gmail.com>
 <CAFDcVCS1+Tu07=JPRUMZbR0=J289Nh_j5+PfrH5LzZddbCbo2A@mail.gmail.com>
 <02BBCA72-BBF4-4AC7-AFB4-7A516BD6A2D3@R-project.org>
Message-ID: <668718BD-D396-4F23-88D0-E39B84978B3A@gmail.com>

Yes and no... At least as I understand it (Disclaimer: There are things I am pretty sure that I don't understand properly, somewhere in the Bermuda triangle beween CA bundles, TLS protocols, and Server-side settings), there are two sided to this: 

One is that various *.r-project.org servers got hit by a fumble where a higher-up certificate in the chain of trust expired before the *.r-project.org one. This was fixed by changing the certificate chain on each server.

The other side is that this situation hit Mac users harder than others, because Apple's LibreSSL doesn't have the same feature that openSSL has to detect a secondary chain of trust when the primary one expired. This was not unique to R - svn also failed from the command line - but it did affect download.file() inside R. 

The upshot is that there might be 3rd party servers with a similar certificate setup which have not been updated like *.r-project.org. This is not too unlikely since web browsers do not have trouble accessing them, and the whole matter may go undetected. For such servers, download.file() would still fail.  

I.e., there is a case to be made that we might want to link openSSL rather than LibreSSL.  On the other hand, I gather that newer versions of LibreSSL contain the relevant protocol upgrade, so maybe one can just wait for Apple to update it. Or maybe we do want to link R against openSSL, but almost certainly not for a hotfix release.

Best
-pd

> On 10 Jun 2020, at 00:50 , Simon Urbanek <simon.urbanek at R-project.org> wrote:
> 
> To be clear, this not an issue in the libraries nor R, the certificates on the server were simply wrong. So, no, this has nothing to do with R.
> 
> Cheers,
> Simon
> 
> 
>> On Jun 10, 2020, at 10:45 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
>> 
>> Was this resolved upstream or is this something that R should/could
>> fix? If the latter, could this also go into the "emergency release" R
>> 4.0.2 that is scheduled for 2020-06-22?
>> 
>> My $.02
>> 
>> /Henrik
>> 
>> 
>> On Sun, May 31, 2020 at 8:13 AM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>> 
>>> Btw. it would be also possible to create a macOS R installer that
>>> embeds a static or dynamic libcurl with Secure Transport, instead of
>>> the Apple default LibreSSL.
>>> 
>>> This might be too late for R 4.0.1, I don't know.
>>> 
>>> Gabor
>>> 
>>> On Sun, May 31, 2020 at 4:09 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>>> 
>>>> On Sat, May 30, 2020 at 11:32 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>>> [...]
>>>>> Btw. why does this affect openssl? That root cert was published in
>>>>> 2010, surely openssl should know about it? Maybe libcurl / openssl
>>>>> only uses the chain provided by the server? Without trying to use an
>>>>> alternate chain?
>>>> 
>>>> Yes, indeed it seems that old OpenSSL versions cannot handle
>>>> alternative certificate chains. This has been fixed in OpenSSL in
>>>> 2015, so modern Linux systems should be fine. However, macOS uses
>>>> LibreSSL, and LibreSSL never fixed this issue. E.g.
>>>> https://github.com/libressl-portable/portable/issues/595
>>>> 
>>>> r-project.org can be updated to send the new root certificate, which
>>>> will solve most of our problems, but we'll probably have issues with
>>>> other web sites that'll update slower or never.
>>>> 
>>>> FWIW I built macOS binaries for the curl package, using a static
>>>> libcurl and macOS Secure Transport, so these binaries does not have
>>>> this issue.
>>>> 
>>>> They are at https://files.r-hub.io/curl-macos-static and they can be
>>>> installed with
>>>> install.packages("curl", repos =
>>>> "https://files.r-hub.io/curl-macos-static", type = "binary")
>>>> 
>>>> They support R 3.2 and up, including R 4.1, and should work on all
>>>> macOS versions that the given R release supports.
>>>> 
>>>> Gabor
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From @|mon@urb@nek @end|ng |rom R-project@org  Wed Jun 10 01:53:28 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 10 Jun 2020 11:53:28 +1200
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <668718BD-D396-4F23-88D0-E39B84978B3A@gmail.com>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
 <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
 <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>
 <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>
 <a96725a1-0e74-164d-4e8c-000b84ca7bc8@gmail.com>
 <CABFfbXvNh2s6KZZ+tAwM8tHDOb0Ob8mFJkbrMb+_E8GPzOA6SA@mail.gmail.com>
 <CABtg=Kk5gNnSqoLPtY-YodzP7rLy+1v4uwP+S87mdUqhkPKZYw@mail.gmail.com>
 <CABtg=KkEX6PLPx4Jtdsc7rtKuEjaUJZjPUJ8MUMzrmzNw85xeg@mail.gmail.com>
 <CABtg=Knbz7SRRHUK1JcbYJekGTcwbcM8=NNaXaO_UdJiF-E0bw@mail.gmail.com>
 <CAFDcVCS1+Tu07=JPRUMZbR0=J289Nh_j5+PfrH5LzZddbCbo2A@mail.gmail.com>
 <02BBCA72-BBF4-4AC7-AFB4-7A516BD6A2D3@R-project.org>
 <668718BD-D396-4F23-88D0-E39B84978B3A@gmail.com>
Message-ID: <F04207CA-9639-4DCB-9719-8B62881320F5@R-project.org>

You are making a very strong assumption that finding an alternative chain of trust is safe. I'd argue it's not - it means that an adversary could manipulate the chain in a way to trust it instead of the declared chain and thus subverting it. In fact switching to OpenSSL would create a serious security hole here - in particular since it installs a separate trust store which it is far more easily attacked and subverted. By your argument we should disable all SSL checks as that produces error with incorrectly configured servers so not performing checks is better. It is true that R is likely not used for sensitive transactions, but I would rather it warned me about situations where the communication may be compromised instead of just silently going along.

Cheers,
Simon



> On Jun 10, 2020, at 11:39 AM, peter dalgaard <pdalgd at gmail.com> wrote:
> 
> Yes and no... At least as I understand it (Disclaimer: There are things I am pretty sure that I don't understand properly, somewhere in the Bermuda triangle beween CA bundles, TLS protocols, and Server-side settings), there are two sided to this: 
> 
> One is that various *.r-project.org servers got hit by a fumble where a higher-up certificate in the chain of trust expired before the *.r-project.org one. This was fixed by changing the certificate chain on each server.
> 
> The other side is that this situation hit Mac users harder than others, because Apple's LibreSSL doesn't have the same feature that openSSL has to detect a secondary chain of trust when the primary one expired. This was not unique to R - svn also failed from the command line - but it did affect download.file() inside R. 
> 
> The upshot is that there might be 3rd party servers with a similar certificate setup which have not been updated like *.r-project.org. This is not too unlikely since web browsers do not have trouble accessing them, and the whole matter may go undetected. For such servers, download.file() would still fail.  
> 
> I.e., there is a case to be made that we might want to link openSSL rather than LibreSSL.  On the other hand, I gather that newer versions of LibreSSL contain the relevant protocol upgrade, so maybe one can just wait for Apple to update it. Or maybe we do want to link R against openSSL, but almost certainly not for a hotfix release.
> 
> Best
> -pd
> 
>> On 10 Jun 2020, at 00:50 , Simon Urbanek <simon.urbanek at R-project.org> wrote:
>> 
>> To be clear, this not an issue in the libraries nor R, the certificates on the server were simply wrong. So, no, this has nothing to do with R.
>> 
>> Cheers,
>> Simon
>> 
>> 
>>> On Jun 10, 2020, at 10:45 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
>>> 
>>> Was this resolved upstream or is this something that R should/could
>>> fix? If the latter, could this also go into the "emergency release" R
>>> 4.0.2 that is scheduled for 2020-06-22?
>>> 
>>> My $.02
>>> 
>>> /Henrik
>>> 
>>> 
>>> On Sun, May 31, 2020 at 8:13 AM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>>> 
>>>> Btw. it would be also possible to create a macOS R installer that
>>>> embeds a static or dynamic libcurl with Secure Transport, instead of
>>>> the Apple default LibreSSL.
>>>> 
>>>> This might be too late for R 4.0.1, I don't know.
>>>> 
>>>> Gabor
>>>> 
>>>> On Sun, May 31, 2020 at 4:09 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>>>> 
>>>>> On Sat, May 30, 2020 at 11:32 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>>>> [...]
>>>>>> Btw. why does this affect openssl? That root cert was published in
>>>>>> 2010, surely openssl should know about it? Maybe libcurl / openssl
>>>>>> only uses the chain provided by the server? Without trying to use an
>>>>>> alternate chain?
>>>>> 
>>>>> Yes, indeed it seems that old OpenSSL versions cannot handle
>>>>> alternative certificate chains. This has been fixed in OpenSSL in
>>>>> 2015, so modern Linux systems should be fine. However, macOS uses
>>>>> LibreSSL, and LibreSSL never fixed this issue. E.g.
>>>>> https://github.com/libressl-portable/portable/issues/595
>>>>> 
>>>>> r-project.org can be updated to send the new root certificate, which
>>>>> will solve most of our problems, but we'll probably have issues with
>>>>> other web sites that'll update slower or never.
>>>>> 
>>>>> FWIW I built macOS binaries for the curl package, using a static
>>>>> libcurl and macOS Secure Transport, so these binaries does not have
>>>>> this issue.
>>>>> 
>>>>> They are at https://files.r-hub.io/curl-macos-static and they can be
>>>>> installed with
>>>>> install.packages("curl", repos =
>>>>> "https://files.r-hub.io/curl-macos-static", type = "binary")
>>>>> 
>>>>> They support R 3.2 and up, including R 4.1, and should work on all
>>>>> macOS versions that the given R release supports.
>>>>> 
>>>>> Gabor
>>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> -- 
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> 
> 
> 
> 
> 
> 
> 
> 
> 


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Wed Jun 10 06:12:04 2020
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Wed, 10 Jun 2020 05:12:04 +0100
Subject: [Rd] valgrind false positive on R startup?
In-Reply-To: <CALK03d1zKdgcwhnRfM-kNgVQvXGmzN_WitwuREsbwoJsDZpVkA@mail.gmail.com>
References: <CALK03d1zKdgcwhnRfM-kNgVQvXGmzN_WitwuREsbwoJsDZpVkA@mail.gmail.com>
Message-ID: <47483e13-3582-8998-5be3-3f84fbc02b28@stats.ox.ac.uk>

It is known, with a known workaround, see e.g. 
https://www.stats.ox.ac.uk/pub/bdr/memtests/README.txt .  Set 
suppressions in ~/.valgrindrc, e.g. the CRAN check machine has

--suppressions=/data/blackswan/ripley/wcsrtombs.supp

It is an issue in your OS (glibc), not TRE nor R.

On 10/06/2020 00:21, Toby Hocking wrote:
> Hi all,
> 
> I'm on Ubuntu 18.04, running R-4.0.0 which I compiled from source, and
> using valgrind I am always seeing the following message. Does anybody
> else see that? Is that a known false positive? Any ideas how to
> fix/suppress? Seems related to TRE, do I need to upgrade that?
> 
> (base) tdhock at maude-MacBookPro:~/R/binsegRcpp$ R --vanilla -d valgrind
> -e 'extSoftVersion()'
> ==9565== Memcheck, a memory error detector
> ==9565== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
> ==9565== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
> ==9565== Command: /home/tdhock/lib/R/bin/exec/R --vanilla -e extSoftVersion()
> ==9565==
> ==9565== Conditional jump or move depends on uninitialised value(s)
> ==9565==    at 0x55AB9E0: __wcsnlen_sse4_1 (strlen.S:147)
> ==9565==    by 0x5598EC1: wcsrtombs (wcsrtombs.c:104)
> ==9565==    by 0x551EB20: wcstombs (wcstombs.c:34)
> ==9565==    by 0x50BAA07: wcstombs (stdlib.h:154)
> ==9565==    by 0x50BAA07: tre_parse_bracket_items (tre-parse.c:336)
> ==9565==    by 0x50BAA07: tre_parse_bracket (tre-parse.c:453)
> ==9565==    by 0x50BAA07: tre_parse (tre-parse.c:1380)
> ==9565==    by 0x50B2498: tre_compile (tre-compile.c:1920)
> ==9565==    by 0x50AFBE0: tre_regcompb (regcomp.c:150)
> ==9565==    by 0x4FA9F42: do_gsub (grep.c:2023)
> ==9565==    by 0x4F79045: bcEval (eval.c:7090)
> ==9565==    by 0x4F8572F: Rf_eval (eval.c:723)
> ==9565==    by 0x4F8754E: R_execClosure (eval.c:1888)
> ==9565==    by 0x4F88316: Rf_applyClosure (eval.c:1814)
> ==9565==    by 0x4F85902: Rf_eval (eval.c:846)
> ==9565==
> 
> R version 4.0.0 (2020-04-24) -- "Arbor Day"
> Copyright (C) 2020 The R Foundation for Statistical Computing
> Platform: x86_64-pc-linux-gnu (64-bit)
> 
> R is free software and comes with ABSOLUTELY NO WARRANTY.
> You are welcome to redistribute it under certain conditions.
> Type 'license()' or 'licence()' for distribution details.
> 
>    Natural language support but running in an English locale
> 
> R is a collaborative project with many contributors.
> Type 'contributors()' for more information and
> 'citation()' on how to cite R or R packages in publications.
> 
> Type 'demo()' for some demos, 'help()' for on-line help, or
> 'help.start()' for an HTML browser interface to help.
> Type 'q()' to quit R.
> 
>> extSoftVersion()
>                                  zlib                                bzlib
>                              "1.2.11"                 "1.0.6, 6-Sept-2010"
>                                    xz                                 PCRE
>                               "5.2.2"                   "10.31 2018-02-12"
>                                   ICU                                  TRE
>                                "60.2"            "TRE 0.8.0 R_fixes (BSD)"
>                                 iconv                             readline
>                          "glibc 2.27"                                "7.0"
>                                  BLAS
> "/home/tdhock/lib/R/lib/libRblas.so"
>>
>>
> ==9565==
> ==9565== HEAP SUMMARY:
> ==9565==     in use at exit: 40,492,919 bytes in 9,170 blocks
> ==9565==   total heap usage: 19,784 allocs, 10,614 frees, 62,951,535
> bytes allocated
> ==9565==
> ==9565== LEAK SUMMARY:
> ==9565==    definitely lost: 0 bytes in 0 blocks
> ==9565==    indirectly lost: 0 bytes in 0 blocks
> ==9565==      possibly lost: 0 bytes in 0 blocks
> ==9565==    still reachable: 40,492,919 bytes in 9,170 blocks
> ==9565==                       of which reachable via heuristic:
> ==9565==                         newarray           : 4,264 bytes in 1 blocks
> ==9565==         suppressed: 0 bytes in 0 blocks
> ==9565== Rerun with --leak-check=full to see details of leaked memory
> ==9565==
> ==9565== For counts of detected and suppressed errors, rerun with: -v
> ==9565== Use --track-origins=yes to see where uninitialised values come from
> ==9565== ERROR SUMMARY: 46 errors from 1 contexts (suppressed: 0 from 0)
> (base) tdhock at maude-MacBookPro:~/R/binsegRcpp$
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Wed Jun 10 06:22:14 2020
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Wed, 10 Jun 2020 05:22:14 +0100
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <668718BD-D396-4F23-88D0-E39B84978B3A@gmail.com>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
 <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
 <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>
 <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>
 <a96725a1-0e74-164d-4e8c-000b84ca7bc8@gmail.com>
 <CABFfbXvNh2s6KZZ+tAwM8tHDOb0Ob8mFJkbrMb+_E8GPzOA6SA@mail.gmail.com>
 <CABtg=Kk5gNnSqoLPtY-YodzP7rLy+1v4uwP+S87mdUqhkPKZYw@mail.gmail.com>
 <CABtg=KkEX6PLPx4Jtdsc7rtKuEjaUJZjPUJ8MUMzrmzNw85xeg@mail.gmail.com>
 <CABtg=Knbz7SRRHUK1JcbYJekGTcwbcM8=NNaXaO_UdJiF-E0bw@mail.gmail.com>
 <CAFDcVCS1+Tu07=JPRUMZbR0=J289Nh_j5+PfrH5LzZddbCbo2A@mail.gmail.com>
 <02BBCA72-BBF4-4AC7-AFB4-7A516BD6A2D3@R-project.org>
 <668718BD-D396-4F23-88D0-E39B84978B3A@gmail.com>
Message-ID: <be7d021c-c115-f913-d3a4-49c478af6c1c@stats.ox.ac.uk>

On 10/06/2020 00:39, peter dalgaard wrote:
> Yes and no... At least as I understand it (Disclaimer: There are things I am pretty sure that I don't understand properly, somewhere in the Bermuda triangle beween CA bundles, TLS protocols, and Server-side settings), there are two sided to this:
> 
> One is that various *.r-project.org servers got hit by a fumble where a higher-up certificate in the chain of trust expired before the *.r-project.org one. This was fixed by changing the certificate chain on each server.
> 
> The other side is that this situation hit Mac users harder than others, because Apple's LibreSSL doesn't have the same feature that openSSL has to detect a secondary chain of trust when the primary one expired. This was not unique to R - svn also failed from the command line - but it did affect download.file() inside R.
> 
> The upshot is that there might be 3rd party servers with a similar certificate setup which have not been updated like *.r-project.org. This is not too unlikely since web browsers do not have trouble accessing them, and the whole matter may go undetected. For such servers, download.file() would still fail.

A dozen or so packages fail their CRAN checks because of this.  The most 
common problematic site has been reported to its web admins, but not 
resolved.

> I.e., there is a case to be made that we might want to link openSSL rather than LibreSSL.  On the other hand, I gather that newer versions of LibreSSL contain the relevant protocol upgrade, so maybe one can just wait for Apple to update it. Or maybe we do want to link R against openSSL, but almost certainly not for a hotfix release.

This is not just a macOS issue: most CRAN failures are seen on Debian 
and Solaris as well as macOS (but not Fedora).  And a different one (3 
packages by the same author misusing RCurl to set a <= 2014 root 
certificate bundle) is seen only on Fedora.


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From pd@|gd @end|ng |rom gm@||@com  Wed Jun 10 10:55:54 2020
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Wed, 10 Jun 2020 10:55:54 +0200
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <F04207CA-9639-4DCB-9719-8B62881320F5@R-project.org>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
 <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
 <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>
 <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>
 <a96725a1-0e74-164d-4e8c-000b84ca7bc8@gmail.com>
 <CABFfbXvNh2s6KZZ+tAwM8tHDOb0Ob8mFJkbrMb+_E8GPzOA6SA@mail.gmail.com>
 <CABtg=Kk5gNnSqoLPtY-YodzP7rLy+1v4uwP+S87mdUqhkPKZYw@mail.gmail.com>
 <CABtg=KkEX6PLPx4Jtdsc7rtKuEjaUJZjPUJ8MUMzrmzNw85xeg@mail.gmail.com>
 <CABtg=Knbz7SRRHUK1JcbYJekGTcwbcM8=NNaXaO_UdJiF-E0bw@mail.gmail.com>
 <CAFDcVCS1+Tu07=JPRUMZbR0=J289Nh_j5+PfrH5LzZddbCbo2A@mail.gmail.com>
 <02BBCA72-BBF4-4AC7-AFB4-7A516BD6A2D3@R-project.org>
 <668718BD-D396-4F23-88D0-E39B84978B3A@gmail.com>
 <F04207CA-9639-4DCB-9719-8B62881320F5@R-project.org>
Message-ID: <CB833F6F-4D3A-4E2F-9FEB-1D61C22D98F6@gmail.com>

As I said, there is stuff that I don't understand in here.... (including why browsers apparently do trust alternative chains)

-pd

> On 10 Jun 2020, at 01:53 , Simon Urbanek <simon.urbanek at R-project.org> wrote:
> 
> You are making a very strong assumption that finding an alternative chain of trust is safe. I'd argue it's not - it means that an adversary could manipulate the chain in a way to trust it instead of the declared chain and thus subverting it. In fact switching to OpenSSL would create a serious security hole here - in particular since it installs a separate trust store which it is far more easily attacked and subverted. By your argument we should disable all SSL checks as that produces error with incorrectly configured servers so not performing checks is better. It is true that R is likely not used for sensitive transactions, but I would rather it warned me about situations where the communication may be compromised instead of just silently going along.
> 
> Cheers,
> Simon
> 
> 
> 
>> On Jun 10, 2020, at 11:39 AM, peter dalgaard <pdalgd at gmail.com> wrote:
>> 
>> Yes and no... At least as I understand it (Disclaimer: There are things I am pretty sure that I don't understand properly, somewhere in the Bermuda triangle beween CA bundles, TLS protocols, and Server-side settings), there are two sided to this: 
>> 
>> One is that various *.r-project.org servers got hit by a fumble where a higher-up certificate in the chain of trust expired before the *.r-project.org one. This was fixed by changing the certificate chain on each server.
>> 
>> The other side is that this situation hit Mac users harder than others, because Apple's LibreSSL doesn't have the same feature that openSSL has to detect a secondary chain of trust when the primary one expired. This was not unique to R - svn also failed from the command line - but it did affect download.file() inside R. 
>> 
>> The upshot is that there might be 3rd party servers with a similar certificate setup which have not been updated like *.r-project.org. This is not too unlikely since web browsers do not have trouble accessing them, and the whole matter may go undetected. For such servers, download.file() would still fail.  
>> 
>> I.e., there is a case to be made that we might want to link openSSL rather than LibreSSL.  On the other hand, I gather that newer versions of LibreSSL contain the relevant protocol upgrade, so maybe one can just wait for Apple to update it. Or maybe we do want to link R against openSSL, but almost certainly not for a hotfix release.
>> 
>> Best
>> -pd
>> 
>>> On 10 Jun 2020, at 00:50 , Simon Urbanek <simon.urbanek at R-project.org> wrote:
>>> 
>>> To be clear, this not an issue in the libraries nor R, the certificates on the server were simply wrong. So, no, this has nothing to do with R.
>>> 
>>> Cheers,
>>> Simon
>>> 
>>> 
>>>> On Jun 10, 2020, at 10:45 AM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
>>>> 
>>>> Was this resolved upstream or is this something that R should/could
>>>> fix? If the latter, could this also go into the "emergency release" R
>>>> 4.0.2 that is scheduled for 2020-06-22?
>>>> 
>>>> My $.02
>>>> 
>>>> /Henrik
>>>> 
>>>> 
>>>> On Sun, May 31, 2020 at 8:13 AM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>>>> 
>>>>> Btw. it would be also possible to create a macOS R installer that
>>>>> embeds a static or dynamic libcurl with Secure Transport, instead of
>>>>> the Apple default LibreSSL.
>>>>> 
>>>>> This might be too late for R 4.0.1, I don't know.
>>>>> 
>>>>> Gabor
>>>>> 
>>>>> On Sun, May 31, 2020 at 4:09 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>>>>> 
>>>>>> On Sat, May 30, 2020 at 11:32 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>>>>> [...]
>>>>>>> Btw. why does this affect openssl? That root cert was published in
>>>>>>> 2010, surely openssl should know about it? Maybe libcurl / openssl
>>>>>>> only uses the chain provided by the server? Without trying to use an
>>>>>>> alternate chain?
>>>>>> 
>>>>>> Yes, indeed it seems that old OpenSSL versions cannot handle
>>>>>> alternative certificate chains. This has been fixed in OpenSSL in
>>>>>> 2015, so modern Linux systems should be fine. However, macOS uses
>>>>>> LibreSSL, and LibreSSL never fixed this issue. E.g.
>>>>>> https://github.com/libressl-portable/portable/issues/595
>>>>>> 
>>>>>> r-project.org can be updated to send the new root certificate, which
>>>>>> will solve most of our problems, but we'll probably have issues with
>>>>>> other web sites that'll update slower or never.
>>>>>> 
>>>>>> FWIW I built macOS binaries for the curl package, using a static
>>>>>> libcurl and macOS Secure Transport, so these binaries does not have
>>>>>> this issue.
>>>>>> 
>>>>>> They are at https://files.r-hub.io/curl-macos-static and they can be
>>>>>> installed with
>>>>>> install.packages("curl", repos =
>>>>>> "https://files.r-hub.io/curl-macos-static", type = "binary")
>>>>>> 
>>>>>> They support R 3.2 and up, including R 4.1, and should work on all
>>>>>> macOS versions that the given R release supports.
>>>>>> 
>>>>>> Gabor
>>>>> 
>>>>> ______________________________________________
>>>>> R-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>> 
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> -- 
>> Peter Dalgaard, Professor,
>> Center for Statistics, Copenhagen Business School
>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>> Phone: (+45)38153501
>> Office: A 4.23
>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
> 

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From c@@rd|@g@bor @end|ng |rom gm@||@com  Wed Jun 10 11:30:29 2020
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Wed, 10 Jun 2020 10:30:29 +0100
Subject: [Rd] r-project.org SSL certificate issues
In-Reply-To: <CB833F6F-4D3A-4E2F-9FEB-1D61C22D98F6@gmail.com>
References: <CABtg=KmsLkuNCBJq_VfGhG4CTW-5tDS79pSX4NJbo_aCoVhk3g@mail.gmail.com>
 <D17A5556-DA84-4483-9040-437BBA1DE090@gmail.com>
 <CAA-FpKWFM1RKrtzFUZXHwTP2WS1p=2F5g87d21ggQDKzw_X7Dw@mail.gmail.com>
 <CAA-FpKXihTBOLfucwnt7QWhY2UdqUG+ySKBqJV+WTJGJ82t=yw@mail.gmail.com>
 <CAA-FpKXtBMz0jk=boWFeVd-LQ_u=cHyqn9Z-BOaRb3J7R_x2Hg@mail.gmail.com>
 <a96725a1-0e74-164d-4e8c-000b84ca7bc8@gmail.com>
 <CABFfbXvNh2s6KZZ+tAwM8tHDOb0Ob8mFJkbrMb+_E8GPzOA6SA@mail.gmail.com>
 <CABtg=Kk5gNnSqoLPtY-YodzP7rLy+1v4uwP+S87mdUqhkPKZYw@mail.gmail.com>
 <CABtg=KkEX6PLPx4Jtdsc7rtKuEjaUJZjPUJ8MUMzrmzNw85xeg@mail.gmail.com>
 <CABtg=Knbz7SRRHUK1JcbYJekGTcwbcM8=NNaXaO_UdJiF-E0bw@mail.gmail.com>
 <CAFDcVCS1+Tu07=JPRUMZbR0=J289Nh_j5+PfrH5LzZddbCbo2A@mail.gmail.com>
 <02BBCA72-BBF4-4AC7-AFB4-7A516BD6A2D3@R-project.org>
 <668718BD-D396-4F23-88D0-E39B84978B3A@gmail.com>
 <F04207CA-9639-4DCB-9719-8B62881320F5@R-project.org>
 <CB833F6F-4D3A-4E2F-9FEB-1D61C22D98F6@gmail.com>
Message-ID: <CABtg=K=AQ328qD33WObYQ_DbvZWBcQcP5Zf-A8z10o+=yLVR5Q@mail.gmail.com>

My (also not expert) understanding is that there is nothing insecure about
alternative certificate chains at all. All browsers and macOS's built in
SSL library (secure transport) support them properly. OpenSSL and LibreSSL
were/are simply broken. This was not such a big issue so far, but now that
some old long lived certificates are expiring, it is increasingly an issue.

FWIW it is possible to build libcurl on macOS without any external SSL
library, so OpenSSL and LibreSSL are not needed at all. (Unfortunately the
libcurl build that comes with most (all?) macOS versions does use
LibreSSL.) The R installer could link to such a static libcurl library on
macOS, and that would solve the issue for macOS. Whether it should, that's
another question.

Gabor

On Wed, Jun 10, 2020 at 9:56 AM peter dalgaard <pdalgd at gmail.com> wrote:

> As I said, there is stuff that I don't understand in here.... (including
> why browsers apparently do trust alternative chains)
>
> -pd
>
> > On 10 Jun 2020, at 01:53 , Simon Urbanek <simon.urbanek at R-project.org>
> wrote:
> >
> > You are making a very strong assumption that finding an alternative
> chain of trust is safe. I'd argue it's not - it means that an adversary
> could manipulate the chain in a way to trust it instead of the declared
> chain and thus subverting it. In fact switching to OpenSSL would create a
> serious security hole here - in particular since it installs a separate
> trust store which it is far more easily attacked and subverted. By your
> argument we should disable all SSL checks as that produces error with
> incorrectly configured servers so not performing checks is better. It is
> true that R is likely not used for sensitive transactions, but I would
> rather it warned me about situations where the communication may be
> compromised instead of just silently going along.
> >
> > Cheers,
> > Simon
> >
> >
> >
> >> On Jun 10, 2020, at 11:39 AM, peter dalgaard <pdalgd at gmail.com> wrote:
> >>
> >> Yes and no... At least as I understand it (Disclaimer: There are things
> I am pretty sure that I don't understand properly, somewhere in the Bermuda
> triangle beween CA bundles, TLS protocols, and Server-side settings), there
> are two sided to this:
> >>
> >> One is that various *.r-project.org servers got hit by a fumble where
> a higher-up certificate in the chain of trust expired before the *.
> r-project.org one. This was fixed by changing the certificate chain on
> each server.
> >>
> >> The other side is that this situation hit Mac users harder than others,
> because Apple's LibreSSL doesn't have the same feature that openSSL has to
> detect a secondary chain of trust when the primary one expired. This was
> not unique to R - svn also failed from the command line - but it did affect
> download.file() inside R.
> >>
> >> The upshot is that there might be 3rd party servers with a similar
> certificate setup which have not been updated like *.r-project.org. This
> is not too unlikely since web browsers do not have trouble accessing them,
> and the whole matter may go undetected. For such servers, download.file()
> would still fail.
> >>
> >> I.e., there is a case to be made that we might want to link openSSL
> rather than LibreSSL.  On the other hand, I gather that newer versions of
> LibreSSL contain the relevant protocol upgrade, so maybe one can just wait
> for Apple to update it. Or maybe we do want to link R against openSSL, but
> almost certainly not for a hotfix release.
> >>
> >> Best
> >> -pd
> >>
> >>> On 10 Jun 2020, at 00:50 , Simon Urbanek <simon.urbanek at R-project.org>
> wrote:
> >>>
> >>> To be clear, this not an issue in the libraries nor R, the
> certificates on the server were simply wrong. So, no, this has nothing to
> do with R.
> >>>
> >>> Cheers,
> >>> Simon
> >>>
> >>>
> >>>> On Jun 10, 2020, at 10:45 AM, Henrik Bengtsson <
> henrik.bengtsson at gmail.com> wrote:
> >>>>
> >>>> Was this resolved upstream or is this something that R should/could
> >>>> fix? If the latter, could this also go into the "emergency release" R
> >>>> 4.0.2 that is scheduled for 2020-06-22?
> >>>>
> >>>> My $.02
> >>>>
> >>>> /Henrik
> >>>>
> >>>>
> >>>> On Sun, May 31, 2020 at 8:13 AM G?bor Cs?rdi <csardi.gabor at gmail.com>
> wrote:
> >>>>>
> >>>>> Btw. it would be also possible to create a macOS R installer that
> >>>>> embeds a static or dynamic libcurl with Secure Transport, instead of
> >>>>> the Apple default LibreSSL.
> >>>>>
> >>>>> This might be too late for R 4.0.1, I don't know.
> >>>>>
> >>>>> Gabor
> >>>>>
> >>>>> On Sun, May 31, 2020 at 4:09 PM G?bor Cs?rdi <csardi.gabor at gmail.com>
> wrote:
> >>>>>>
> >>>>>> On Sat, May 30, 2020 at 11:32 PM G?bor Cs?rdi <
> csardi.gabor at gmail.com> wrote:
> >>>>>> [...]
> >>>>>>> Btw. why does this affect openssl? That root cert was published in
> >>>>>>> 2010, surely openssl should know about it? Maybe libcurl / openssl
> >>>>>>> only uses the chain provided by the server? Without trying to use
> an
> >>>>>>> alternate chain?
> >>>>>>
> >>>>>> Yes, indeed it seems that old OpenSSL versions cannot handle
> >>>>>> alternative certificate chains. This has been fixed in OpenSSL in
> >>>>>> 2015, so modern Linux systems should be fine. However, macOS uses
> >>>>>> LibreSSL, and LibreSSL never fixed this issue. E.g.
> >>>>>> https://github.com/libressl-portable/portable/issues/595
> >>>>>>
> >>>>>> r-project.org can be updated to send the new root certificate,
> which
> >>>>>> will solve most of our problems, but we'll probably have issues with
> >>>>>> other web sites that'll update slower or never.
> >>>>>>
> >>>>>> FWIW I built macOS binaries for the curl package, using a static
> >>>>>> libcurl and macOS Secure Transport, so these binaries does not have
> >>>>>> this issue.
> >>>>>>
> >>>>>> They are at https://files.r-hub.io/curl-macos-static and they can
> be
> >>>>>> installed with
> >>>>>> install.packages("curl", repos =
> >>>>>> "https://files.r-hub.io/curl-macos-static", type = "binary")
> >>>>>>
> >>>>>> They support R 3.2 and up, including R 4.1, and should work on all
> >>>>>> macOS versions that the given R release supports.
> >>>>>>
> >>>>>> Gabor
> >>>>>
> >>>>> ______________________________________________
> >>>>> R-devel at r-project.org mailing list
> >>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>>
> >>>> ______________________________________________
> >>>> R-devel at r-project.org mailing list
> >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>>
> >>>
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >> --
> >> Peter Dalgaard, Professor,
> >> Center for Statistics, Copenhagen Business School
> >> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> >> Phone: (+45)38153501
> >> Office: A 4.23
> >> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> >>
> >>
> >>
> >>
> >>
> >>
> >>
> >>
> >>
> >
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From jte||er|@@rproject @end|ng |rom gm@||@com  Wed Jun 10 13:06:38 2020
From: jte||er|@@rproject @end|ng |rom gm@||@com (Juan Telleria Ruiz de Aguirre)
Date: Wed, 10 Jun 2020 13:06:38 +0200
Subject: [Rd] Possible Bug: file.exists() Function. Due to UTF-8 Encoding
 differences on Windows between R 4.0.1 and R 3.6.3?
Message-ID: <CAJXDcw3Ftg5ijVO9pOzT=pXn_AREvCw2ODMn97Mwr7zsps7Yqw@mail.gmail.com>

Dear R Developers,

I am having an issue with the renv package and R 4.0.1, which I
suspect is related to base R and not the renv package itself, as with
R 3.6.3 such an "error" does not appear.

The error is raised by a file.exists() path, and path
"C:\Users\J-tel\Documents", which in R 3.6.3 is read correctly, but in
R 4.0.1 fails (Probably because of the "-" symbol), and I suspect it
might be related with the new UTF-8 usage on Windows 10?
(https://developer.r-project.org/Blog/public/2020/05/02/utf-8-support-on-windows/index.html)

I have also checked file.exists() function and its internals, and seem
not to have happened changes in the meanwhile within them:

https://github.com/wch/r-source/blob/0e3b3182f87a60af4b0293a5410dde680b910f49/src/library/base/R/files.R
https://github.com/search?q=SEXP%20attribute_hidden%20do_fileexists+repo:wch/r-source&type=Code

Error Details:

> renv::init()
Error in file.exists(children) :
  file name conversion problem -- name too long?
> traceback()
14: file.exists(children)
13: renv_dependencies_find_dir_children(path, root)
12: renv_dependencies_find_dir(path, root)
11: FUN(X[[i]], ...)
10: lapply(path, renv_dependencies_find_impl, root = root)
9: renv_dependencies_find(path, root)
8: (function (path = getwd(), root = NULL, ..., progress = TRUE,
       errors = c("reported", "fatal", "ignored"), dev = FALSE)
   {
       path <- renv_path_normalize(path, winslash = "/", mustWork = TRUE)
       root <- root %||% renv_dependencies_root(path)
       if (exists(path, envir = `_renv_dependencies`))
           return(get(path, envir = `_renv_dependencies`))
       renv_dependencies_begin(root = root)
       on.exit(renv_dependencies_end(), add = TRUE)
       dots <- list(...)
       if (identical(dots[["quiet"]], TRUE)) {
           progress <- FALSE
           errors <- "ignored"
       }
       files <- renv_dependencies_find(path, root)
       deps <- renv_dependencies_discover(files, progress, errors)
       renv_dependencies_report(errors)
       deps
   })(path, progress = FALSE, errors = errors, dev = TRUE)
7: eval(call, envir = parent.frame(2))
6: eval(call, envir = parent.frame(2))
5: delegate(renv_dependencies_impl)
4: dependencies(path, progress = FALSE, errors = errors, dev = TRUE)
3: withCallingHandlers(dependencies(path, progress = FALSE, errors = errors,
       dev = TRUE), renv.dependencies.error =
renv_dependencies_error_handler(message,
       errors))
2: renv_dependencies_scope(project, action = "init")
1: renv::init()

> renv::diagnostics()
Diagnostics Report -- renv [0.10.0]
===================================

# Session Info =======================
R version 4.0.1 (2020-06-06)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 18362)

Matrix products: default

locale:
[1] LC_COLLATE=Spanish_Spain.1252  LC_CTYPE=Spanish_Spain.1252
[3] LC_MONETARY=Spanish_Spain.1252 LC_NUMERIC=C
[5] LC_TIME=Spanish_Spain.1252

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

other attached packages:
[1] renv_0.10.0

loaded via a namespace (and not attached):
 [1] compiler_4.0.1   rsconnect_0.8.16 htmltools_0.4.0  tools_4.0.1
 [5] yaml_2.2.1       Rcpp_1.0.4.6     rmarkdown_2.2    knitr_1.28
 [9] xfun_0.14        digest_0.6.25    packrat_0.5.0    rlang_0.4.6
[13] evaluate_0.14

# Project ============================
Project path: "~/Test2"

# Status =============================

# Lockfile ===========================
This project has not yet been snapshotted: 'renv.lock' does not exist.

# Library ============================
The project library "~/Test2/renv/library/R-4.0/x86_64-w64-mingw32"
does not exist.

# Dependencies =======================

# User Profile =======================
[no user profile detected]

# Settings ===========================
List of 6
 $ external.libraries       : chr(0)
 $ ignored.packages         : chr(0)
 $ package.dependency.fields: chr [1:3] "Imports" "Depends" "LinkingTo"
 $ snapshot.type            : chr "implicit"
 $ use.cache                : logi TRUE
 $ vcs.ignore.library       : logi TRUE

# Options ============================
List of 1
 $ renv.verbose: logi TRUE

# Environment Variables ==============
HOME        = C:\Users\J-tel\OneDrive\Documents
LANG        = <NA>
R_LIBS      = <NA>
R_LIBS_SITE = <NA>
R_LIBS_USER = C:/Users/J-tel/OneDrive/Documents/R/win-library/4.0

# PATH ===============================
- C:\rtools40\usr\bin
- C:\Program Files\R\R-4.0.1\bin\x64
- C:\ProgramData\Miniconda3
- C:\ProgramData\Miniconda3\Library\mingw-w64\bin
- C:\ProgramData\Miniconda3\Library\usr\bin
- C:\ProgramData\Miniconda3\Library\bin
- C:\ProgramData\Miniconda3\Scripts
- C:\ProgramData\Oracle\Java\javapath
- C:\WINDOWS\system32
- C:\WINDOWS
- C:\WINDOWS\System32\Wbem
- C:\WINDOWS\System32\WindowsPowerShell\v1.0\
- C:\WINDOWS\System32\OpenSSH\
- C:\Program Files\MiKTeX 2.9\miktex\bin\x64\
- C:\ProgramData\Miniconda3\Scripts\conda.exe

# Cache ==============================
There are a total of 0 package(s) installed in the renv cache.
Cache path: "C:/Users/J-tel/AppData/Local/renv/cache/v5/R-4.0/x86_64-w64-mingw32"

System Information:

> R.Version()
$platform
[1] "x86_64-w64-mingw32"

$arch
[1] "x86_64"

$os
[1] "mingw32"

$system
[1] "x86_64, mingw32"

$status
[1] ""

$major
[1] "4"

$minor
[1] "0.1"

$year
[1] "2020"

$month
[1] "06"

$day
[1] "06"

$`svn rev`
[1] "78648"

$language
[1] "R"

$version.string
[1] "R version 4.0.1 (2020-06-06)"

$nickname
[1] "See Things Now"

Thank you,
Juan


From edd @end|ng |rom deb|@n@org  Wed Jun 10 13:55:29 2020
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Wed, 10 Jun 2020 06:55:29 -0500
Subject: [Rd] 
 Possible Bug: file.exists() Function. Due to UTF-8 Encoding
 differences on Windows between R 4.0.1 and R 3.6.3?
In-Reply-To: <CAJXDcw3Ftg5ijVO9pOzT=pXn_AREvCw2ODMn97Mwr7zsps7Yqw@mail.gmail.com>
References: <CAJXDcw3Ftg5ijVO9pOzT=pXn_AREvCw2ODMn97Mwr7zsps7Yqw@mail.gmail.com>
Message-ID: <24288.51761.87476.260587@rob.eddelbuettel.com>


On 10 June 2020 at 13:06, Juan Telleria Ruiz de Aguirre wrote:
| I am having an issue with the renv package and R 4.0.1, which I
| suspect is related to base R and not the renv package itself, as with
| R 3.6.3 such an "error" does not appear.

So a bug in `renv` as it does not account for changes in R 4.0.0 ?

Stuff happens. I just fixed an 'change in R 4.0.0' for one small aspect of
Rcpp(Armadillo) (namely the change in package.skeleton() and NAMESPACE).

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From kev|nu@hey @end|ng |rom gm@||@com  Wed Jun 10 17:49:02 2020
From: kev|nu@hey @end|ng |rom gm@||@com (Kevin Ushey)
Date: Wed, 10 Jun 2020 08:49:02 -0700
Subject: [Rd] 
 Possible Bug: file.exists() Function. Due to UTF-8 Encoding
 differences on Windows between R 4.0.1 and R 3.6.3?
In-Reply-To: <24288.51761.87476.260587@rob.eddelbuettel.com>
References: <CAJXDcw3Ftg5ijVO9pOzT=pXn_AREvCw2ODMn97Mwr7zsps7Yqw@mail.gmail.com>
 <24288.51761.87476.260587@rob.eddelbuettel.com>
Message-ID: <CAJXgQP2UTW2pKS3_kGOH067oQLnhU6xmd=zVSxAJujQp+hcYjQ@mail.gmail.com>

Hi Juan,

For bug reports to R, you should attempt to create a
minimally-reproducible example, using only R's builtin facilities and
not any other addon packages. Given your report, it's not clear
whether the issue lies within renv or truly is caused by a change in R
4.0.0.

Also note that you have not supplied a minimally reproducible example.
If at all possible, you should be able to supply some code that
reproduces the issue -- ideally, one should be able to just copy +
paste the code into an R session to see the issue arise. Presumably,
if the issue is indeed in base R, then you should be able to supply a
reproducible example of the form:

    path <- "path/that/causes/issue"
    file.exists(path)

Alternatively, if you can distill this into a minimally-reproducible
example that does require renv, then you should report that to the
maintainer of renv (me), not this mailing list.

Best,
Kevin

On Wed, Jun 10, 2020 at 4:55 AM Dirk Eddelbuettel <edd at debian.org> wrote:
>
>
> On 10 June 2020 at 13:06, Juan Telleria Ruiz de Aguirre wrote:
> | I am having an issue with the renv package and R 4.0.1, which I
> | suspect is related to base R and not the renv package itself, as with
> | R 3.6.3 such an "error" does not appear.
>
> So a bug in `renv` as it does not account for changes in R 4.0.0 ?
>
> Stuff happens. I just fixed an 'change in R 4.0.0' for one small aspect of
> Rcpp(Armadillo) (namely the change in package.skeleton() and NAMESPACE).
>
> Dirk
>
> --
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From jte||er|@@rproject @end|ng |rom gm@||@com  Wed Jun 10 23:00:48 2020
From: jte||er|@@rproject @end|ng |rom gm@||@com (Juan Telleria Ruiz de Aguirre)
Date: Wed, 10 Jun 2020 23:00:48 +0200
Subject: [Rd] 
 Possible Bug: file.exists() Function. Due to UTF-8 Encoding
 differences on Windows between R 4.0.1 and R 3.6.3?
In-Reply-To: <CAJXgQP2UTW2pKS3_kGOH067oQLnhU6xmd=zVSxAJujQp+hcYjQ@mail.gmail.com>
References: <CAJXDcw3Ftg5ijVO9pOzT=pXn_AREvCw2ODMn97Mwr7zsps7Yqw@mail.gmail.com>
 <24288.51761.87476.260587@rob.eddelbuettel.com>
 <CAJXgQP2UTW2pKS3_kGOH067oQLnhU6xmd=zVSxAJujQp+hcYjQ@mail.gmail.com>
Message-ID: <CAJXDcw1g79_ZVTBGkwNMd1VaRnDfLj=J7-P_V9D9qQvNcKSoig@mail.gmail.com>

Thank you Kevin, just checked that the error is solved in the latest
development version of "renv", and now it works as expected with R
4.0.1:

https://github.com/rstudio/renv/commit/976ae7af6dc348af30eaf2893d886f132a76aba0

Sorry for posting in r-devel, I was not sure if it was a R or "renv"
error due to different behaviour in different versions of R 4.0.1 and
R 3.6.3 for conversion from UTF16-LE to UTF-8 encoding.

Will provide a better reproducible example next time and traceback the
error with options(error=recover)) to make sure.

Thanks,
Juan


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Jun 10 13:43:43 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 10 Jun 2020 13:43:43 +0200
Subject: [Rd] 
 Possible Bug: file.exists() Function. Due to UTF-8 Encoding
 differences on Windows between R 4.0.1 and R 3.6.3?
In-Reply-To: <CAJXDcw3Ftg5ijVO9pOzT=pXn_AREvCw2ODMn97Mwr7zsps7Yqw@mail.gmail.com>
References: <CAJXDcw3Ftg5ijVO9pOzT=pXn_AREvCw2ODMn97Mwr7zsps7Yqw@mail.gmail.com>
Message-ID: <857dde35-259a-cff8-27b4-4bdc098ccb31-3957@gmail.com>


Dear Juan,

I don't see what is the problem from your report. Please try to create a 
minimal but complete reproducible example that does not use the renv 
package. Perhaps you could use the R debugger (e.g. via 
options(error=recover)) to find out what is the argument that 
file.exists() has been called with. And then you could try just to call 
file.exists() directly with that argument to trigger the problem.

It may be that the argument has been corrupted/is invalid in the current 
native encoding. If that is the case, the next step would be to find out 
who corrupted it (renv, R, something else). The error is displayed when 
a path name cannot be converted from the current native encoding to 
UTF16-LE.

The experimental support for UTF-8 as native encoding on Windows 10 is 
only available in a custom build of R, like the one I linked from my 
blog post.

Thanks
Tomas



On 6/10/20 1:06 PM, Juan Telleria Ruiz de Aguirre wrote:
> Dear R Developers,
>
> I am having an issue with the renv package and R 4.0.1, which I
> suspect is related to base R and not the renv package itself, as with
> R 3.6.3 such an "error" does not appear.
>
> The error is raised by a file.exists() path, and path
> "C:\Users\J-tel\Documents", which in R 3.6.3 is read correctly, but in
> R 4.0.1 fails (Probably because of the "-" symbol), and I suspect it
> might be related with the new UTF-8 usage on Windows 10?
> (https://developer.r-project.org/Blog/public/2020/05/02/utf-8-support-on-windows/index.html)
>
> I have also checked file.exists() function and its internals, and seem
> not to have happened changes in the meanwhile within them:
>
> https://github.com/wch/r-source/blob/0e3b3182f87a60af4b0293a5410dde680b910f49/src/library/base/R/files.R
> https://github.com/search?q=SEXP%20attribute_hidden%20do_fileexists+repo:wch/r-source&type=Code
>
> Error Details:
>
>> renv::init()
> Error in file.exists(children) :
>    file name conversion problem -- name too long?
>> traceback()
> 14: file.exists(children)
> 13: renv_dependencies_find_dir_children(path, root)
> 12: renv_dependencies_find_dir(path, root)
> 11: FUN(X[[i]], ...)
> 10: lapply(path, renv_dependencies_find_impl, root = root)
> 9: renv_dependencies_find(path, root)
> 8: (function (path = getwd(), root = NULL, ..., progress = TRUE,
>         errors = c("reported", "fatal", "ignored"), dev = FALSE)
>     {
>         path <- renv_path_normalize(path, winslash = "/", mustWork = TRUE)
>         root <- root %||% renv_dependencies_root(path)
>         if (exists(path, envir = `_renv_dependencies`))
>             return(get(path, envir = `_renv_dependencies`))
>         renv_dependencies_begin(root = root)
>         on.exit(renv_dependencies_end(), add = TRUE)
>         dots <- list(...)
>         if (identical(dots[["quiet"]], TRUE)) {
>             progress <- FALSE
>             errors <- "ignored"
>         }
>         files <- renv_dependencies_find(path, root)
>         deps <- renv_dependencies_discover(files, progress, errors)
>         renv_dependencies_report(errors)
>         deps
>     })(path, progress = FALSE, errors = errors, dev = TRUE)
> 7: eval(call, envir = parent.frame(2))
> 6: eval(call, envir = parent.frame(2))
> 5: delegate(renv_dependencies_impl)
> 4: dependencies(path, progress = FALSE, errors = errors, dev = TRUE)
> 3: withCallingHandlers(dependencies(path, progress = FALSE, errors = errors,
>         dev = TRUE), renv.dependencies.error =
> renv_dependencies_error_handler(message,
>         errors))
> 2: renv_dependencies_scope(project, action = "init")
> 1: renv::init()
>
>> renv::diagnostics()
> Diagnostics Report -- renv [0.10.0]
> ===================================
>
> # Session Info =======================
> R version 4.0.1 (2020-06-06)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 18362)
>
> Matrix products: default
>
> locale:
> [1] LC_COLLATE=Spanish_Spain.1252  LC_CTYPE=Spanish_Spain.1252
> [3] LC_MONETARY=Spanish_Spain.1252 LC_NUMERIC=C
> [5] LC_TIME=Spanish_Spain.1252
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> other attached packages:
> [1] renv_0.10.0
>
> loaded via a namespace (and not attached):
>   [1] compiler_4.0.1   rsconnect_0.8.16 htmltools_0.4.0  tools_4.0.1
>   [5] yaml_2.2.1       Rcpp_1.0.4.6     rmarkdown_2.2    knitr_1.28
>   [9] xfun_0.14        digest_0.6.25    packrat_0.5.0    rlang_0.4.6
> [13] evaluate_0.14
>
> # Project ============================
> Project path: "~/Test2"
>
> # Status =============================
>
> # Lockfile ===========================
> This project has not yet been snapshotted: 'renv.lock' does not exist.
>
> # Library ============================
> The project library "~/Test2/renv/library/R-4.0/x86_64-w64-mingw32"
> does not exist.
>
> # Dependencies =======================
>
> # User Profile =======================
> [no user profile detected]
>
> # Settings ===========================
> List of 6
>   $ external.libraries       : chr(0)
>   $ ignored.packages         : chr(0)
>   $ package.dependency.fields: chr [1:3] "Imports" "Depends" "LinkingTo"
>   $ snapshot.type            : chr "implicit"
>   $ use.cache                : logi TRUE
>   $ vcs.ignore.library       : logi TRUE
>
> # Options ============================
> List of 1
>   $ renv.verbose: logi TRUE
>
> # Environment Variables ==============
> HOME        = C:\Users\J-tel\OneDrive\Documents
> LANG        = <NA>
> R_LIBS      = <NA>
> R_LIBS_SITE = <NA>
> R_LIBS_USER = C:/Users/J-tel/OneDrive/Documents/R/win-library/4.0
>
> # PATH ===============================
> - C:\rtools40\usr\bin
> - C:\Program Files\R\R-4.0.1\bin\x64
> - C:\ProgramData\Miniconda3
> - C:\ProgramData\Miniconda3\Library\mingw-w64\bin
> - C:\ProgramData\Miniconda3\Library\usr\bin
> - C:\ProgramData\Miniconda3\Library\bin
> - C:\ProgramData\Miniconda3\Scripts
> - C:\ProgramData\Oracle\Java\javapath
> - C:\WINDOWS\system32
> - C:\WINDOWS
> - C:\WINDOWS\System32\Wbem
> - C:\WINDOWS\System32\WindowsPowerShell\v1.0\
> - C:\WINDOWS\System32\OpenSSH\
> - C:\Program Files\MiKTeX 2.9\miktex\bin\x64\
> - C:\ProgramData\Miniconda3\Scripts\conda.exe
>
> # Cache ==============================
> There are a total of 0 package(s) installed in the renv cache.
> Cache path: "C:/Users/J-tel/AppData/Local/renv/cache/v5/R-4.0/x86_64-w64-mingw32"
>
> System Information:
>
>> R.Version()
> $platform
> [1] "x86_64-w64-mingw32"
>
> $arch
> [1] "x86_64"
>
> $os
> [1] "mingw32"
>
> $system
> [1] "x86_64, mingw32"
>
> $status
> [1] ""
>
> $major
> [1] "4"
>
> $minor
> [1] "0.1"
>
> $year
> [1] "2020"
>
> $month
> [1] "06"
>
> $day
> [1] "06"
>
> $`svn rev`
> [1] "78648"
>
> $language
> [1] "R"
>
> $version.string
> [1] "R version 4.0.1 (2020-06-06)"
>
> $nickname
> [1] "See Things Now"
>
> Thank you,
> Juan
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From therne@u @end|ng |rom m@yo@edu  Thu Jun 11 16:57:35 2020
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Thu, 11 Jun 2020 09:57:35 -0500
Subject: [Rd] CRAN checks and ASAN
Message-ID: <28fddd$du13jr@ironport10.mayo.edu>

I have a version of R-devel on my development box that has the address sanitizer turned 
on.?? This was instrumental in finding a pair of subtle memory issues.? (I had read, but 
never written, one element past the end of an array, which caused issues on some 
architectures.)

1. I now get a end-of-job messsages from R CMD check survival3.2-3.tar.gz about leaks in 
main/eval.c. ?? They don't appear in 00config.out or 00install.out.
 ?I assume that I can ignore these?

2. When I run my long 'check all packages that depend on survival' job, a lot of package 
fail with sanitizer leaks.?? Again, not my problem?
If so, I just need to recomple R without the ASAN tags and try again.


Terry T.



	[[alternative HTML version deleted]]


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Thu Jun 11 17:32:15 2020
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Thu, 11 Jun 2020 16:32:15 +0100
Subject: [Rd] CRAN checks and ASAN
In-Reply-To: <28fddd$du13jr@ironport10.mayo.edu>
References: <28fddd$du13jr@ironport10.mayo.edu>
Message-ID: <cc1fa834-1659-097a-5505-5de2cae8ee72@stats.ox.ac.uk>

On 11/06/2020 15:57, Therneau, Terry M., Ph.D. via R-devel wrote:
> I have a version of R-devel on my development box that has the address sanitizer turned
> on.?? This was instrumental in finding a pair of subtle memory issues.? (I had read, but
> never written, one element past the end of an array, which caused issues on some
> architectures.)
> 
> 1. I now get a end-of-job messsages from R CMD check survival3.2-3.tar.gz about leaks in
> main/eval.c. ?? They don't appear in 00config.out or 00install.out.
>   ?I assume that I can ignore these?
> 
> 2. When I run my long 'check all packages that depend on survival' job, a lot of package
> fail with sanitizer leaks.?? Again, not my problem?
> If so, I just need to recomple R without the ASAN tags and try again.

The manual suggests you disable the Leak Sanitizer (nowadays by default 
enabled by ASAN): valgrind is a better way of detecting memory leaks. 
We know R has 'leaks': it does not release memory in use right up to the 
end (and some OS things do too).


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From rwo|d|ord @end|ng |rom uw@ter|oo@c@  Thu Jun 11 23:04:49 2020
From: rwo|d|ord @end|ng |rom uw@ter|oo@c@ (Wayne Oldford)
Date: Thu, 11 Jun 2020 21:04:49 +0000
Subject: [Rd] tcltk image reading problem (on a mac?): [tcl] encountered an
 unsupported criticial chunk type "eXIf"
Message-ID: <FEAE9DA5-8206-4025-BA52-790717E27455@contoso.com>

Hello everyone

I am not sure when this appeared
(sometime post R 3.5.0 and after I switched to Mac OS Catalina).

I do not think it happens on all platforms (e.g. seems to work on windows).

But it seems that

      tkimage.create()

no longer works on a Mac for all png files.


(It does work for *some* old png files I have on disk but I have not been able to determine what is different about the ones that work)

Any help would be appreciated.

- Wayne


R.W. Oldford
math.uwaterloo.ca/~rwoldfor




> library(tcltk)

> fname <- "Rplot.png"
> png(filename = fname, width = 500, height = 500)
> hist(rnorm(20))
> dev.off()

> tkimage.create("photo", file = fname)

Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") :
  [tcl] encountered an unsupported criticial chunk type "eXIf".


______________________________

> R.version
               _
platform       x86_64-apple-darwin17.0
arch           x86_64
os             darwin17.0
system         x86_64, darwin17.0
status
major          4
minor          0.0
year           2020
month          04
day            24
svn rev        78286
language       R
version.string R version 4.0.0 (2020-04-24)
nickname       Arbor Day

___________________________

macOS Catalina V 10.15.5

___________________________________________________


	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Thu Jun 11 23:56:15 2020
From: pd@|gd @end|ng |rom gm@||@com (Peter Dalgaard)
Date: Thu, 11 Jun 2020 23:56:15 +0200
Subject: [Rd] 
 tcltk image reading problem (on a mac?): [tcl] encountered an
 unsupported criticial chunk type "eXIf"
In-Reply-To: <FEAE9DA5-8206-4025-BA52-790717E27455@contoso.com>
References: <FEAE9DA5-8206-4025-BA52-790717E27455@contoso.com>
Message-ID: <274D88FD-B4E7-40E4-9814-24C5B70F858D@gmail.com>

Happy enough for me on Mojave. 

On the off chance that you are picking up an old Tcl, do you see this?

> tcl("info","tclversion")
<Tcl> 8.6 


-pd

> On 11 Jun 2020, at 23:04 , Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
> 
> Hello everyone
> 
> I am not sure when this appeared
> (sometime post R 3.5.0 and after I switched to Mac OS Catalina).
> 
> I do not think it happens on all platforms (e.g. seems to work on windows).
> 
> But it seems that
> 
>      tkimage.create()
> 
> no longer works on a Mac for all png files.
> 
> 
> (It does work for *some* old png files I have on disk but I have not been able to determine what is different about the ones that work)
> 
> Any help would be appreciated.
> 
> - Wayne
> 
> 
> R.W. Oldford
> math.uwaterloo.ca/~rwoldfor
> 
> 
> 
> 
>> library(tcltk)
> 
>> fname <- "Rplot.png"
>> png(filename = fname, width = 500, height = 500)
>> hist(rnorm(20))
>> dev.off()
> 
>> tkimage.create("photo", file = fname)
> 
> Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") :
>  [tcl] encountered an unsupported criticial chunk type "eXIf".
> 
> 
> ______________________________
> 
>> R.version
>               _
> platform       x86_64-apple-darwin17.0
> arch           x86_64
> os             darwin17.0
> system         x86_64, darwin17.0
> status
> major          4
> minor          0.0
> year           2020
> month          04
> day            24
> svn rev        78286
> language       R
> version.string R version 4.0.0 (2020-04-24)
> nickname       Arbor Day
> 
> ___________________________
> 
> macOS Catalina V 10.15.5
> 
> ___________________________________________________
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From rwo|d|ord @end|ng |rom uw@ter|oo@c@  Fri Jun 12 00:43:07 2020
From: rwo|d|ord @end|ng |rom uw@ter|oo@c@ (Wayne Oldford)
Date: Thu, 11 Jun 2020 22:43:07 +0000
Subject: [Rd] 
 tcltk image reading problem (on a mac?): [tcl] encountered an
 unsupported criticial chunk type "eXIf"
In-Reply-To: <274D88FD-B4E7-40E4-9814-24C5B70F858D@gmail.com>
References: <FEAE9DA5-8206-4025-BA52-790717E27455@contoso.com>,
 <274D88FD-B4E7-40E4-9814-24C5B70F858D@gmail.com>
Message-ID: <BN8PR05MB6321E2E5C596C22180D6E1C7FC800@BN8PR05MB6321.namprd05.prod.outlook.com>

Yes.
I seem to be picking up
<Tcl>  8.6
I should have noted that.

Use to work for me too in Mojave.
I have the sneaky feeling that Catalina is the problem.

R. W. Oldford

https://math.uwaterloo.ca/~rwoldfor

________________________________
From: Peter Dalgaard <pdalgd at gmail.com>
Sent: Thursday, June 11, 2020 5:56:15 PM
To: Wayne Oldford <rwoldford at uwaterloo.ca>
Cc: r-devel at r-project.org <r-devel at r-project.org>
Subject: Re: [Rd] tcltk image reading problem (on a mac?): [tcl] encountered an unsupported criticial chunk type "eXIf"

Happy enough for me on Mojave.

On the off chance that you are picking up an old Tcl, do you see this?

> tcl("info","tclversion")
<Tcl> 8.6


-pd

> On 11 Jun 2020, at 23:04 , Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
>
> Hello everyone
>
> I am not sure when this appeared
> (sometime post R 3.5.0 and after I switched to Mac OS Catalina).
>
> I do not think it happens on all platforms (e.g. seems to work on windows).
>
> But it seems that
>
>      tkimage.create()
>
> no longer works on a Mac for all png files.
>
>
> (It does work for *some* old png files I have on disk but I have not been able to determine what is different about the ones that work)
>
> Any help would be appreciated.
>
> - Wayne
>
>
> R.W. Oldford
> math.uwaterloo.ca/~rwoldfor
>
>
>
>
>> library(tcltk)
>
>> fname <- "Rplot.png"
>> png(filename = fname, width = 500, height = 500)
>> hist(rnorm(20))
>> dev.off()
>
>> tkimage.create("photo", file = fname)
>
> Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") :
>  [tcl] encountered an unsupported criticial chunk type "eXIf".
>
>
> ______________________________
>
>> R.version
>               _
> platform       x86_64-apple-darwin17.0
> arch           x86_64
> os             darwin17.0
> system         x86_64, darwin17.0
> status
> major          4
> minor          0.0
> year           2020
> month          04
> day            24
> svn rev        78286
> language       R
> version.string R version 4.0.0 (2020-04-24)
> nickname       Arbor Day
>
> ___________________________
>
> macOS Catalina V 10.15.5
>
> ___________________________________________________
>
>
>        [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

--
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com










	[[alternative HTML version deleted]]


From j|ox @end|ng |rom mcm@@ter@c@  Fri Jun 12 01:54:06 2020
From: j|ox @end|ng |rom mcm@@ter@c@ (Fox, John)
Date: Thu, 11 Jun 2020 23:54:06 +0000
Subject: [Rd] 
 tcltk image reading problem (on a mac?): [tcl] encountered an
 unsupported criticial chunk type "eXIf"
In-Reply-To: <22794_1591915402_05BMhLe6010602_BN8PR05MB6321E2E5C596C22180D6E1C7FC800@BN8PR05MB6321.namprd05.prod.outlook.com>
References: <FEAE9DA5-8206-4025-BA52-790717E27455@contoso.com>
 <274D88FD-B4E7-40E4-9814-24C5B70F858D@gmail.com>
 <22794_1591915402_05BMhLe6010602_BN8PR05MB6321E2E5C596C22180D6E1C7FC800@BN8PR05MB6321.namprd05.prod.outlook.com>
Message-ID: <E574B396-3A22-4749-89DA-9027389AC78F@mcmaster.ca>

Dear Wayne and Peter,

FWIW, I observe exactly the same problem in Catalina. The error and my session info:

-------- snip --------

> tkimage.create("photo", file = fname)
Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") : 
  [tcl] encountered an unsupported criticial chunk type "eXIf".

> sessionInfo()
R version 4.0.0 (2020-04-24)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Catalina 10.15.5

Matrix products: default
BLAS:   /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib

locale:
[1] en_CA.UTF-8/en_CA.UTF-8/en_CA.UTF-8/C/en_CA.UTF-8/en_CA.UTF-8

attached base packages:
[1] tcltk     stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
[1] compiler_4.0.0 tools_4.0.0   

-------- snip --------

This is from RStudio but I see the same thing in the R.app.

I hope this is of some help,
 John

 -----------------------------
  John Fox, Professor Emeritus
  McMaster University
  Hamilton, Ontario, Canada
  Web: http::/socserv.mcmaster.ca/jfox

> On Jun 11, 2020, at 6:43 PM, Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
> 
> Yes.
> I seem to be picking up
> <Tcl>  8.6
> I should have noted that.
> 
> Use to work for me too in Mojave.
> I have the sneaky feeling that Catalina is the problem.
> 
> R. W. Oldford
> 
> https://math.uwaterloo.ca/~rwoldfor
> 
> ________________________________
> From: Peter Dalgaard <pdalgd at gmail.com>
> Sent: Thursday, June 11, 2020 5:56:15 PM
> To: Wayne Oldford <rwoldford at uwaterloo.ca>
> Cc: r-devel at r-project.org <r-devel at r-project.org>
> Subject: Re: [Rd] tcltk image reading problem (on a mac?): [tcl] encountered an unsupported criticial chunk type "eXIf"
> 
> Happy enough for me on Mojave.
> 
> On the off chance that you are picking up an old Tcl, do you see this?
> 
>> tcl("info","tclversion")
> <Tcl> 8.6
> 
> 
> -pd
> 
>> On 11 Jun 2020, at 23:04 , Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
>> 
>> Hello everyone
>> 
>> I am not sure when this appeared
>> (sometime post R 3.5.0 and after I switched to Mac OS Catalina).
>> 
>> I do not think it happens on all platforms (e.g. seems to work on windows).
>> 
>> But it seems that
>> 
>>     tkimage.create()
>> 
>> no longer works on a Mac for all png files.
>> 
>> 
>> (It does work for *some* old png files I have on disk but I have not been able to determine what is different about the ones that work)
>> 
>> Any help would be appreciated.
>> 
>> - Wayne
>> 
>> 
>> R.W. Oldford
>> math.uwaterloo.ca/~rwoldfor
>> 
>> 
>> 
>> 
>>> library(tcltk)
>> 
>>> fname <- "Rplot.png"
>>> png(filename = fname, width = 500, height = 500)
>>> hist(rnorm(20))
>>> dev.off()
>> 
>>> tkimage.create("photo", file = fname)
>> 
>> Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") :
>> [tcl] encountered an unsupported criticial chunk type "eXIf".
>> 
>> 
>> ______________________________
>> 
>>> R.version
>>              _
>> platform       x86_64-apple-darwin17.0
>> arch           x86_64
>> os             darwin17.0
>> system         x86_64, darwin17.0
>> status
>> major          4
>> minor          0.0
>> year           2020
>> month          04
>> day            24
>> svn rev        78286
>> language       R
>> version.string R version 4.0.0 (2020-04-24)
>> nickname       Arbor Day
>> 
>> ___________________________
>> 
>> macOS Catalina V 10.15.5
>> 
>> ___________________________________________________
>> 
>> 
>>       [[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



 

From rwo|d|ord @end|ng |rom uw@ter|oo@c@  Fri Jun 12 02:24:00 2020
From: rwo|d|ord @end|ng |rom uw@ter|oo@c@ (Wayne Oldford)
Date: Fri, 12 Jun 2020 00:24:00 +0000
Subject: [Rd] 
 tcltk image reading problem (on a mac?): [tcl] encountered an
 unsupported criticial chunk type "eXIf"
In-Reply-To: <E574B396-3A22-4749-89DA-9027389AC78F@mcmaster.ca>
References: <FEAE9DA5-8206-4025-BA52-790717E27455@contoso.com>
 <274D88FD-B4E7-40E4-9814-24C5B70F858D@gmail.com>
 <22794_1591915402_05BMhLe6010602_BN8PR05MB6321E2E5C596C22180D6E1C7FC800@BN8PR05MB6321.namprd05.prod.outlook.com>
 <E574B396-3A22-4749-89DA-9027389AC78F@mcmaster.ca>
Message-ID: <41413BD1-966E-4454-B674-AB58EC4786C0@uwaterloo.ca>

I don't know what has changed with Catalina

But I just tried my tk console from the shell command tkcon 
And got the following error. 
Here is my shell:

$ tkcon 

  dyld: Library not loaded: /usr/local/lib:/opt/X11/lib/libtk8.6.dylib
      Referenced from: /usr/local/bin/wish
      Reason: image not found
    Abort trap: 6


I don't know whether this is a red herring or not, but the 
Console fails to boot.

John does it work for you?

Not sure whether Python has the same trouble.  Kind of old info at https://www.python.org/download/mac/tcltk/ 




?-----Original Message-----
From: "Fox, John" <jfox at mcmaster.ca>
Date: Thursday, June 11, 2020 at 7:54 PM
To: Wayne Oldford <rwoldford at uwaterloo.ca>
Cc: Peter Dalgaard <pdalgd at gmail.com>, "r-devel at r-project.org" <r-devel at r-project.org>
Subject: Re: [Rd]  tcltk image reading problem (on a mac?): [tcl] encountered an unsupported criticial chunk type "eXIf"

    Dear Wayne and Peter,
    
    FWIW, I observe exactly the same problem in Catalina. The error and my session info:
    
    -------- snip --------
    
    > tkimage.create("photo", file = fname)
    Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") : 
      [tcl] encountered an unsupported criticial chunk type "eXIf".
    
    > sessionInfo()
    R version 4.0.0 (2020-04-24)
    Platform: x86_64-apple-darwin17.0 (64-bit)
    Running under: macOS Catalina 10.15.5
    
    Matrix products: default
    BLAS:   /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
    LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib
    
    locale:
    [1] en_CA.UTF-8/en_CA.UTF-8/en_CA.UTF-8/C/en_CA.UTF-8/en_CA.UTF-8
    
    attached base packages:
    [1] tcltk     stats     graphics  grDevices utils     datasets  methods   base     
    
    loaded via a namespace (and not attached):
    [1] compiler_4.0.0 tools_4.0.0   
    
    -------- snip --------
    
    This is from RStudio but I see the same thing in the R.app.
    
    I hope this is of some help,
     John
    
     -----------------------------
      John Fox, Professor Emeritus
      McMaster University
      Hamilton, Ontario, Canada
      Web: http::/socserv.mcmaster.ca/jfox
    
    > On Jun 11, 2020, at 6:43 PM, Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
    > 
    > Yes.
    > I seem to be picking up
    > <Tcl>  8.6
    > I should have noted that.
    > 
    > Use to work for me too in Mojave.
    > I have the sneaky feeling that Catalina is the problem.
    > 
    > R. W. Oldford
    > 
    > https://math.uwaterloo.ca/~rwoldfor
    > 
    > ________________________________
    > From: Peter Dalgaard <pdalgd at gmail.com>
    > Sent: Thursday, June 11, 2020 5:56:15 PM
    > To: Wayne Oldford <rwoldford at uwaterloo.ca>
    > Cc: r-devel at r-project.org <r-devel at r-project.org>
    > Subject: Re: [Rd] tcltk image reading problem (on a mac?): [tcl] encountered an unsupported criticial chunk type "eXIf"
    > 
    > Happy enough for me on Mojave.
    > 
    > On the off chance that you are picking up an old Tcl, do you see this?
    > 
    >> tcl("info","tclversion")
    > <Tcl> 8.6
    > 
    > 
    > -pd
    > 
    >> On 11 Jun 2020, at 23:04 , Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
    >> 
    >> Hello everyone
    >> 
    >> I am not sure when this appeared
    >> (sometime post R 3.5.0 and after I switched to Mac OS Catalina).
    >> 
    >> I do not think it happens on all platforms (e.g. seems to work on windows).
    >> 
    >> But it seems that
    >> 
    >>     tkimage.create()
    >> 
    >> no longer works on a Mac for all png files.
    >> 
    >> 
    >> (It does work for *some* old png files I have on disk but I have not been able to determine what is different about the ones that work)
    >> 
    >> Any help would be appreciated.
    >> 
    >> - Wayne
    >> 
    >> 
    >> R.W. Oldford
    >> math.uwaterloo.ca/~rwoldfor
    >> 
    >> 
    >> 
    >> 
    >>> library(tcltk)
    >> 
    >>> fname <- "Rplot.png"
    >>> png(filename = fname, width = 500, height = 500)
    >>> hist(rnorm(20))
    >>> dev.off()
    >> 
    >>> tkimage.create("photo", file = fname)
    >> 
    >> Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") :
    >> [tcl] encountered an unsupported criticial chunk type "eXIf".
    >> 
    >> 
    >> ______________________________
    >> 
    >>> R.version
    >>              _
    >> platform       x86_64-apple-darwin17.0
    >> arch           x86_64
    >> os             darwin17.0
    >> system         x86_64, darwin17.0
    >> status
    >> major          4
    >> minor          0.0
    >> year           2020
    >> month          04
    >> day            24
    >> svn rev        78286
    >> language       R
    >> version.string R version 4.0.0 (2020-04-24)
    >> nickname       Arbor Day
    >> 
    >> ___________________________
    >> 
    >> macOS Catalina V 10.15.5
    >> 
    >> ___________________________________________________
    >> 
    >> 
    >>       [[alternative HTML version deleted]]
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel
    > 
    > --
    > Peter Dalgaard, Professor,
    > Center for Statistics, Copenhagen Business School
    > Solbjerg Plads 3, 2000 Frederiksberg, Denmark
    > Phone: (+45)38153501
    > Office: A 4.23
    > Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
    > 
    > 
    > 
    > 
    > 
    > 
    > 
    > 
    > 
    > 
    > 	[[alternative HTML version deleted]]
    > 
    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel
    
    
    
     


From @|mon@urb@nek @end|ng |rom R-project@org  Fri Jun 12 03:00:09 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 12 Jun 2020 13:00:09 +1200
Subject: [Rd] 
 tcltk image reading problem (on a mac?): [tcl] encountered an
 unsupported criticial chunk type "eXIf"
In-Reply-To: <41413BD1-966E-4454-B674-AB58EC4786C0@uwaterloo.ca>
References: <FEAE9DA5-8206-4025-BA52-790717E27455@contoso.com>
 <274D88FD-B4E7-40E4-9814-24C5B70F858D@gmail.com>
 <22794_1591915402_05BMhLe6010602_BN8PR05MB6321E2E5C596C22180D6E1C7FC800@BN8PR05MB6321.namprd05.prod.outlook.com>
 <E574B396-3A22-4749-89DA-9027389AC78F@mcmaster.ca>
 <41413BD1-966E-4454-B674-AB58EC4786C0@uwaterloo.ca>
Message-ID: <AE3CE86B-5591-4794-8687-3CFC9E1F97EB@R-project.org>

Wayne,

that one is unrelated, but interesting - you can fix it with 

sudo install_name_tool -change \
  /usr/local/lib:/opt/X11/lib/libtk8.6.dylib \
  /usr/local/lib/libtk8.6.dylib \
  /usr/local/bin/wish8.6 

There is a bug in tcltk with IDs on the libraries which I have worked-around for R, but not for wish.

Back to the original question - do you have any example of a file that doesn't work so I could test? Exif chunks are fairly rare in PNG and are a more late extension so I couldn't find any examples.

Thanks,
Simon


> On 12/06/2020, at 12:24 PM, Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
> 
> I don't know what has changed with Catalina
> 
> But I just tried my tk console from the shell command tkcon 
> And got the following error. 
> Here is my shell:
> 
> $ tkcon 
> 
>  dyld: Library not loaded: /usr/local/lib:/opt/X11/lib/libtk8.6.dylib
>      Referenced from: /usr/local/bin/wish
>      Reason: image not found
>    Abort trap: 6
> 
> 
> I don't know whether this is a red herring or not, but the 
> Console fails to boot.
> 
> John does it work for you?
> 
> Not sure whether Python has the same trouble.  Kind of old info at https://www.python.org/download/mac/tcltk/ 
> 
> 
> 
> 
> ?-----Original Message-----
> From: "Fox, John" <jfox at mcmaster.ca>
> Date: Thursday, June 11, 2020 at 7:54 PM
> To: Wayne Oldford <rwoldford at uwaterloo.ca>
> Cc: Peter Dalgaard <pdalgd at gmail.com>, "r-devel at r-project.org" <r-devel at r-project.org>
> Subject: Re: [Rd]  tcltk image reading problem (on a mac?): [tcl] encountered an unsupported criticial chunk type "eXIf"
> 
>    Dear Wayne and Peter,
> 
>    FWIW, I observe exactly the same problem in Catalina. The error and my session info:
> 
>    -------- snip --------
> 
>> tkimage.create("photo", file = fname)
>    Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") : 
>      [tcl] encountered an unsupported criticial chunk type "eXIf".
> 
>> sessionInfo()
>    R version 4.0.0 (2020-04-24)
>    Platform: x86_64-apple-darwin17.0 (64-bit)
>    Running under: macOS Catalina 10.15.5
> 
>    Matrix products: default
>    BLAS:   /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
>    LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib
> 
>    locale:
>    [1] en_CA.UTF-8/en_CA.UTF-8/en_CA.UTF-8/C/en_CA.UTF-8/en_CA.UTF-8
> 
>    attached base packages:
>    [1] tcltk     stats     graphics  grDevices utils     datasets  methods   base     
> 
>    loaded via a namespace (and not attached):
>    [1] compiler_4.0.0 tools_4.0.0   
> 
>    -------- snip --------
> 
>    This is from RStudio but I see the same thing in the R.app.
> 
>    I hope this is of some help,
>     John
> 
>     -----------------------------
>      John Fox, Professor Emeritus
>      McMaster University
>      Hamilton, Ontario, Canada
>      Web: http::/socserv.mcmaster.ca/jfox
> 
>> On Jun 11, 2020, at 6:43 PM, Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
>> 
>> Yes.
>> I seem to be picking up
>> <Tcl>  8.6
>> I should have noted that.
>> 
>> Use to work for me too in Mojave.
>> I have the sneaky feeling that Catalina is the problem.
>> 
>> R. W. Oldford
>> 
>> https://math.uwaterloo.ca/~rwoldfor
>> 
>> ________________________________
>> From: Peter Dalgaard <pdalgd at gmail.com>
>> Sent: Thursday, June 11, 2020 5:56:15 PM
>> To: Wayne Oldford <rwoldford at uwaterloo.ca>
>> Cc: r-devel at r-project.org <r-devel at r-project.org>
>> Subject: Re: [Rd] tcltk image reading problem (on a mac?): [tcl] encountered an unsupported criticial chunk type "eXIf"
>> 
>> Happy enough for me on Mojave.
>> 
>> On the off chance that you are picking up an old Tcl, do you see this?
>> 
>>> tcl("info","tclversion")
>> <Tcl> 8.6
>> 
>> 
>> -pd
>> 
>>> On 11 Jun 2020, at 23:04 , Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
>>> 
>>> Hello everyone
>>> 
>>> I am not sure when this appeared
>>> (sometime post R 3.5.0 and after I switched to Mac OS Catalina).
>>> 
>>> I do not think it happens on all platforms (e.g. seems to work on windows).
>>> 
>>> But it seems that
>>> 
>>>    tkimage.create()
>>> 
>>> no longer works on a Mac for all png files.
>>> 
>>> 
>>> (It does work for *some* old png files I have on disk but I have not been able to determine what is different about the ones that work)
>>> 
>>> Any help would be appreciated.
>>> 
>>> - Wayne
>>> 
>>> 
>>> R.W. Oldford
>>> math.uwaterloo.ca/~rwoldfor
>>> 
>>> 
>>> 
>>> 
>>>> library(tcltk)
>>> 
>>>> fname <- "Rplot.png"
>>>> png(filename = fname, width = 500, height = 500)
>>>> hist(rnorm(20))
>>>> dev.off()
>>> 
>>>> tkimage.create("photo", file = fname)
>>> 
>>> Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") :
>>> [tcl] encountered an unsupported criticial chunk type "eXIf".
>>> 
>>> 
>>> ______________________________
>>> 
>>>> R.version
>>>             _
>>> platform       x86_64-apple-darwin17.0
>>> arch           x86_64
>>> os             darwin17.0
>>> system         x86_64, darwin17.0
>>> status
>>> major          4
>>> minor          0.0
>>> year           2020
>>> month          04
>>> day            24
>>> svn rev        78286
>>> language       R
>>> version.string R version 4.0.0 (2020-04-24)
>>> nickname       Arbor Day
>>> 
>>> ___________________________
>>> 
>>> macOS Catalina V 10.15.5
>>> 
>>> ___________________________________________________
>>> 
>>> 
>>>      [[alternative HTML version deleted]]
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> --
>> Peter Dalgaard, Professor,
>> Center for Statistics, Copenhagen Business School
>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>> Phone: (+45)38153501
>> Office: A 4.23
>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 	[[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> 
> 
> 
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @|mon@urb@nek @end|ng |rom R-project@org  Fri Jun 12 03:14:53 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 12 Jun 2020 13:14:53 +1200
Subject: [Rd] 
 tcltk image reading problem (on a mac?): [tcl] encountered an
 unsupported criticial chunk type "eXIf"
In-Reply-To: <AE3CE86B-5591-4794-8687-3CFC9E1F97EB@R-project.org>
References: <FEAE9DA5-8206-4025-BA52-790717E27455@contoso.com>
 <274D88FD-B4E7-40E4-9814-24C5B70F858D@gmail.com>
 <22794_1591915402_05BMhLe6010602_BN8PR05MB6321E2E5C596C22180D6E1C7FC800@BN8PR05MB6321.namprd05.prod.outlook.com>
 <E574B396-3A22-4749-89DA-9027389AC78F@mcmaster.ca>
 <41413BD1-966E-4454-B674-AB58EC4786C0@uwaterloo.ca>
 <AE3CE86B-5591-4794-8687-3CFC9E1F97EB@R-project.org>
Message-ID: <0CDB610D-4D4C-4117-A69A-1A3072A637BA@R-project.org>

Some googling suggests that this is an issue in tcltk which doesn't support png files with Exif tags. Are you sure this ever worked? This doesn't seem to be related to the macOS version since it's a feature tcltk, not the system.

I had no issue using the png package, so you could simply remove any offending chunks with

writePNG("test.png",readPNG("exIf.png", TRUE,TRUE))

then the output work with tcltk.

Cheers,
Simon


> On 12/06/2020, at 1:00 PM, Simon Urbanek <simon.urbanek at r-project.org> wrote:
> 
> Wayne,
> 
> that one is unrelated, but interesting - you can fix it with 
> 
> sudo install_name_tool -change \
>  /usr/local/lib:/opt/X11/lib/libtk8.6.dylib \
>  /usr/local/lib/libtk8.6.dylib \
>  /usr/local/bin/wish8.6 
> 
> There is a bug in tcltk with IDs on the libraries which I have worked-around for R, but not for wish.
> 
> Back to the original question - do you have any example of a file that doesn't work so I could test? Exif chunks are fairly rare in PNG and are a more late extension so I couldn't find any examples.
> 
> Thanks,
> Simon
> 
> 
>> On 12/06/2020, at 12:24 PM, Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
>> 
>> I don't know what has changed with Catalina
>> 
>> But I just tried my tk console from the shell command tkcon 
>> And got the following error. 
>> Here is my shell:
>> 
>> $ tkcon 
>> 
>> dyld: Library not loaded: /usr/local/lib:/opt/X11/lib/libtk8.6.dylib
>>     Referenced from: /usr/local/bin/wish
>>     Reason: image not found
>>   Abort trap: 6
>> 
>> 
>> I don't know whether this is a red herring or not, but the 
>> Console fails to boot.
>> 
>> John does it work for you?
>> 
>> Not sure whether Python has the same trouble.  Kind of old info at https://www.python.org/download/mac/tcltk/ 
>> 
>> 
>> 
>> 
>> ?-----Original Message-----
>> From: "Fox, John" <jfox at mcmaster.ca>
>> Date: Thursday, June 11, 2020 at 7:54 PM
>> To: Wayne Oldford <rwoldford at uwaterloo.ca>
>> Cc: Peter Dalgaard <pdalgd at gmail.com>, "r-devel at r-project.org" <r-devel at r-project.org>
>> Subject: Re: [Rd]  tcltk image reading problem (on a mac?): [tcl] encountered an unsupported criticial chunk type "eXIf"
>> 
>>   Dear Wayne and Peter,
>> 
>>   FWIW, I observe exactly the same problem in Catalina. The error and my session info:
>> 
>>   -------- snip --------
>> 
>>> tkimage.create("photo", file = fname)
>>   Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") : 
>>     [tcl] encountered an unsupported criticial chunk type "eXIf".
>> 
>>> sessionInfo()
>>   R version 4.0.0 (2020-04-24)
>>   Platform: x86_64-apple-darwin17.0 (64-bit)
>>   Running under: macOS Catalina 10.15.5
>> 
>>   Matrix products: default
>>   BLAS:   /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
>>   LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib
>> 
>>   locale:
>>   [1] en_CA.UTF-8/en_CA.UTF-8/en_CA.UTF-8/C/en_CA.UTF-8/en_CA.UTF-8
>> 
>>   attached base packages:
>>   [1] tcltk     stats     graphics  grDevices utils     datasets  methods   base     
>> 
>>   loaded via a namespace (and not attached):
>>   [1] compiler_4.0.0 tools_4.0.0   
>> 
>>   -------- snip --------
>> 
>>   This is from RStudio but I see the same thing in the R.app.
>> 
>>   I hope this is of some help,
>>    John
>> 
>>    -----------------------------
>>     John Fox, Professor Emeritus
>>     McMaster University
>>     Hamilton, Ontario, Canada
>>     Web: http::/socserv.mcmaster.ca/jfox
>> 
>>> On Jun 11, 2020, at 6:43 PM, Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
>>> 
>>> Yes.
>>> I seem to be picking up
>>> <Tcl>  8.6
>>> I should have noted that.
>>> 
>>> Use to work for me too in Mojave.
>>> I have the sneaky feeling that Catalina is the problem.
>>> 
>>> R. W. Oldford
>>> 
>>> https://math.uwaterloo.ca/~rwoldfor
>>> 
>>> ________________________________
>>> From: Peter Dalgaard <pdalgd at gmail.com>
>>> Sent: Thursday, June 11, 2020 5:56:15 PM
>>> To: Wayne Oldford <rwoldford at uwaterloo.ca>
>>> Cc: r-devel at r-project.org <r-devel at r-project.org>
>>> Subject: Re: [Rd] tcltk image reading problem (on a mac?): [tcl] encountered an unsupported criticial chunk type "eXIf"
>>> 
>>> Happy enough for me on Mojave.
>>> 
>>> On the off chance that you are picking up an old Tcl, do you see this?
>>> 
>>>> tcl("info","tclversion")
>>> <Tcl> 8.6
>>> 
>>> 
>>> -pd
>>> 
>>>> On 11 Jun 2020, at 23:04 , Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
>>>> 
>>>> Hello everyone
>>>> 
>>>> I am not sure when this appeared
>>>> (sometime post R 3.5.0 and after I switched to Mac OS Catalina).
>>>> 
>>>> I do not think it happens on all platforms (e.g. seems to work on windows).
>>>> 
>>>> But it seems that
>>>> 
>>>>   tkimage.create()
>>>> 
>>>> no longer works on a Mac for all png files.
>>>> 
>>>> 
>>>> (It does work for *some* old png files I have on disk but I have not been able to determine what is different about the ones that work)
>>>> 
>>>> Any help would be appreciated.
>>>> 
>>>> - Wayne
>>>> 
>>>> 
>>>> R.W. Oldford
>>>> math.uwaterloo.ca/~rwoldfor
>>>> 
>>>> 
>>>> 
>>>> 
>>>>> library(tcltk)
>>>> 
>>>>> fname <- "Rplot.png"
>>>>> png(filename = fname, width = 500, height = 500)
>>>>> hist(rnorm(20))
>>>>> dev.off()
>>>> 
>>>>> tkimage.create("photo", file = fname)
>>>> 
>>>> Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") :
>>>> [tcl] encountered an unsupported criticial chunk type "eXIf".
>>>> 
>>>> 
>>>> ______________________________
>>>> 
>>>>> R.version
>>>>            _
>>>> platform       x86_64-apple-darwin17.0
>>>> arch           x86_64
>>>> os             darwin17.0
>>>> system         x86_64, darwin17.0
>>>> status
>>>> major          4
>>>> minor          0.0
>>>> year           2020
>>>> month          04
>>>> day            24
>>>> svn rev        78286
>>>> language       R
>>>> version.string R version 4.0.0 (2020-04-24)
>>>> nickname       Arbor Day
>>>> 
>>>> ___________________________
>>>> 
>>>> macOS Catalina V 10.15.5
>>>> 
>>>> ___________________________________________________
>>>> 
>>>> 
>>>>     [[alternative HTML version deleted]]
>>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>>> --
>>> Peter Dalgaard, Professor,
>>> Center for Statistics, Copenhagen Business School
>>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>>> Phone: (+45)38153501
>>> Office: A 4.23
>>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 	[[alternative HTML version deleted]]
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> 
>> 
>> 
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From j|ox @end|ng |rom mcm@@ter@c@  Fri Jun 12 04:49:36 2020
From: j|ox @end|ng |rom mcm@@ter@c@ (Fox, John)
Date: Fri, 12 Jun 2020 02:49:36 +0000
Subject: [Rd] 
 tcltk image reading problem (on a mac?): [tcl] encountered an
 unsupported criticial chunk type "eXIf"
In-Reply-To: <AE3CE86B-5591-4794-8687-3CFC9E1F97EB@R-project.org>
References: <FEAE9DA5-8206-4025-BA52-790717E27455@contoso.com>
 <274D88FD-B4E7-40E4-9814-24C5B70F858D@gmail.com>
 <22794_1591915402_05BMhLe6010602_BN8PR05MB6321E2E5C596C22180D6E1C7FC800@BN8PR05MB6321.namprd05.prod.outlook.com>
 <E574B396-3A22-4749-89DA-9027389AC78F@mcmaster.ca>
 <41413BD1-966E-4454-B674-AB58EC4786C0@uwaterloo.ca>
 <AE3CE86B-5591-4794-8687-3CFC9E1F97EB@R-project.org>
Message-ID: <52B0A0EF-3BF4-4010-B21A-CD85B0C4B33E@mcmaster.ca>

Dear Simon,

> On Jun 11, 2020, at 9:00 PM, Simon Urbanek <simon.urbanek at r-project.org> wrote:
> 
> Wayne,
> 
> that one is unrelated, but interesting - you can fix it with 
> 
> sudo install_name_tool -change \
>  /usr/local/lib:/opt/X11/lib/libtk8.6.dylib \
>  /usr/local/lib/libtk8.6.dylib \
>  /usr/local/bin/wish8.6 
> 
> There is a bug in tcltk with IDs on the libraries which I have worked-around for R, but not for wish.
> 
> Back to the original question - do you have any example of a file that doesn't work so I could test? Exif chunks are fairly rare in PNG and are a more late extension so I couldn't find any examples.

The code in Wayne's original message (copied below) generated the offending file:

library(tcltk)

fname <- "Rplot.png"
png(filename = fname, width = 500, height = 500)
hist(rnorm(20))
dev.off()

tkimage.create("photo", file = fname)

Best,
 John


> 
> Thanks,
> Simon
> 
> 
>> On 12/06/2020, at 12:24 PM, Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
>> 
>> I don't know what has changed with Catalina
>> 
>> But I just tried my tk console from the shell command tkcon 
>> And got the following error. 
>> Here is my shell:
>> 
>> $ tkcon 
>> 
>> dyld: Library not loaded: /usr/local/lib:/opt/X11/lib/libtk8.6.dylib
>>     Referenced from: /usr/local/bin/wish
>>     Reason: image not found
>>   Abort trap: 6
>> 
>> 
>> I don't know whether this is a red herring or not, but the 
>> Console fails to boot.
>> 
>> John does it work for you?
>> 
>> Not sure whether Python has the same trouble.  Kind of old info at https://www.python.org/download/mac/tcltk/ 
>> 
>> 
>> 
>> 
>> ?-----Original Message-----
>> From: "Fox, John" <jfox at mcmaster.ca>
>> Date: Thursday, June 11, 2020 at 7:54 PM
>> To: Wayne Oldford <rwoldford at uwaterloo.ca>
>> Cc: Peter Dalgaard <pdalgd at gmail.com>, "r-devel at r-project.org" <r-devel at r-project.org>
>> Subject: Re: [Rd]  tcltk image reading problem (on a mac?): [tcl] encountered an unsupported criticial chunk type "eXIf"
>> 
>>   Dear Wayne and Peter,
>> 
>>   FWIW, I observe exactly the same problem in Catalina. The error and my session info:
>> 
>>   -------- snip --------
>> 
>>> tkimage.create("photo", file = fname)
>>   Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") : 
>>     [tcl] encountered an unsupported criticial chunk type "eXIf".
>> 
>>> sessionInfo()
>>   R version 4.0.0 (2020-04-24)
>>   Platform: x86_64-apple-darwin17.0 (64-bit)
>>   Running under: macOS Catalina 10.15.5
>> 
>>   Matrix products: default
>>   BLAS:   /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
>>   LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib
>> 
>>   locale:
>>   [1] en_CA.UTF-8/en_CA.UTF-8/en_CA.UTF-8/C/en_CA.UTF-8/en_CA.UTF-8
>> 
>>   attached base packages:
>>   [1] tcltk     stats     graphics  grDevices utils     datasets  methods   base     
>> 
>>   loaded via a namespace (and not attached):
>>   [1] compiler_4.0.0 tools_4.0.0   
>> 
>>   -------- snip --------
>> 
>>   This is from RStudio but I see the same thing in the R.app.
>> 
>>   I hope this is of some help,
>>    John
>> 
>>    -----------------------------
>>     John Fox, Professor Emeritus
>>     McMaster University
>>     Hamilton, Ontario, Canada
>>     Web: http::/socserv.mcmaster.ca/jfox
>> 
>>> On Jun 11, 2020, at 6:43 PM, Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
>>> 
>>> Yes.
>>> I seem to be picking up
>>> <Tcl>  8.6
>>> I should have noted that.
>>> 
>>> Use to work for me too in Mojave.
>>> I have the sneaky feeling that Catalina is the problem.
>>> 
>>> R. W. Oldford
>>> 
>>> https://math.uwaterloo.ca/~rwoldfor
>>> 
>>> ________________________________
>>> From: Peter Dalgaard <pdalgd at gmail.com>
>>> Sent: Thursday, June 11, 2020 5:56:15 PM
>>> To: Wayne Oldford <rwoldford at uwaterloo.ca>
>>> Cc: r-devel at r-project.org <r-devel at r-project.org>
>>> Subject: Re: [Rd] tcltk image reading problem (on a mac?): [tcl] encountered an unsupported criticial chunk type "eXIf"
>>> 
>>> Happy enough for me on Mojave.
>>> 
>>> On the off chance that you are picking up an old Tcl, do you see this?
>>> 
>>>> tcl("info","tclversion")
>>> <Tcl> 8.6
>>> 
>>> 
>>> -pd
>>> 
>>>> On 11 Jun 2020, at 23:04 , Wayne Oldford <rwoldford at uwaterloo.ca> wrote:
>>>> 
>>>> Hello everyone
>>>> 
>>>> I am not sure when this appeared
>>>> (sometime post R 3.5.0 and after I switched to Mac OS Catalina).
>>>> 
>>>> I do not think it happens on all platforms (e.g. seems to work on windows).
>>>> 
>>>> But it seems that
>>>> 
>>>>   tkimage.create()
>>>> 
>>>> no longer works on a Mac for all png files.
>>>> 
>>>> 
>>>> (It does work for *some* old png files I have on disk but I have not been able to determine what is different about the ones that work)
>>>> 
>>>> Any help would be appreciated.
>>>> 
>>>> - Wayne
>>>> 
>>>> 
>>>> R.W. Oldford
>>>> math.uwaterloo.ca/~rwoldfor
>>>> 
>>>> 
>>>> 
>>>> 
>>>>> library(tcltk)
>>>> 
>>>>> fname <- "Rplot.png"
>>>>> png(filename = fname, width = 500, height = 500)
>>>>> hist(rnorm(20))
>>>>> dev.off()
>>>> 
>>>>> tkimage.create("photo", file = fname)
>>>> 
>>>> Error in structure(.External(.C_dotTclObjv, objv), class = "tclObj") :
>>>> [tcl] encountered an unsupported criticial chunk type "eXIf".
>>>> 
>>>> 
>>>> ______________________________
>>>> 
>>>>> R.version
>>>>            _
>>>> platform       x86_64-apple-darwin17.0
>>>> arch           x86_64
>>>> os             darwin17.0
>>>> system         x86_64, darwin17.0
>>>> status
>>>> major          4
>>>> minor          0.0
>>>> year           2020
>>>> month          04
>>>> day            24
>>>> svn rev        78286
>>>> language       R
>>>> version.string R version 4.0.0 (2020-04-24)
>>>> nickname       Arbor Day
>>>> 
>>>> ___________________________
>>>> 
>>>> macOS Catalina V 10.15.5
>>>> 
>>>> ___________________________________________________
>>>> 
>>>> 
>>>>     [[alternative HTML version deleted]]
>>>> 
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>> 
>>> --
>>> Peter Dalgaard, Professor,
>>> Center for Statistics, Copenhagen Business School
>>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>>> Phone: (+45)38153501
>>> Office: A 4.23
>>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 	[[alternative HTML version deleted]]
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> 
>> 
>> 
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Fri Jun 12 09:00:21 2020
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Fri, 12 Jun 2020 08:00:21 +0100
Subject: [Rd] 
 tcltk image reading problem (on a mac?): [tcl] encountered an
 unsupported criticial chunk type "eXIf"
In-Reply-To: <52B0A0EF-3BF4-4010-B21A-CD85B0C4B33E@mcmaster.ca>
References: <FEAE9DA5-8206-4025-BA52-790717E27455@contoso.com>
 <274D88FD-B4E7-40E4-9814-24C5B70F858D@gmail.com>
 <22794_1591915402_05BMhLe6010602_BN8PR05MB6321E2E5C596C22180D6E1C7FC800@BN8PR05MB6321.namprd05.prod.outlook.com>
 <E574B396-3A22-4749-89DA-9027389AC78F@mcmaster.ca>
 <41413BD1-966E-4454-B674-AB58EC4786C0@uwaterloo.ca>
 <AE3CE86B-5591-4794-8687-3CFC9E1F97EB@R-project.org>
 <52B0A0EF-3BF4-4010-B21A-CD85B0C4B33E@mcmaster.ca>
Message-ID: <39ffed02-7044-fc01-970e-986cebf1cb2f@stats.ox.ac.uk>

On 12/06/2020 03:49, Fox, John wrote:
> Dear Simon,
> 
>> On Jun 11, 2020, at 9:00 PM, Simon Urbanek <simon.urbanek at r-project.org> wrote:
>>
>> Wayne,
>>
>> that one is unrelated, but interesting - you can fix it with
>>
>> sudo install_name_tool -change \
>>   /usr/local/lib:/opt/X11/lib/libtk8.6.dylib \
>>   /usr/local/lib/libtk8.6.dylib \
>>   /usr/local/bin/wish8.6
>>
>> There is a bug in tcltk with IDs on the libraries which I have worked-around for R, but not for wish.
>>
>> Back to the original question - do you have any example of a file that doesn't work so I could test? Exif chunks are fairly rare in PNG and are a more late extension so I couldn't find any examples.
> 
> The code in Wayne's original message (copied below) generated the offending file:
> 
> library(tcltk)
> 
> fname <- "Rplot.png"
> png(filename = fname, width = 500, height = 500)
> hist(rnorm(20))
> dev.off()
> 
> tkimage.create("photo", file = fname)

There are several png() devices for R.  The default on macOS is to use 
Quartz, and that depends on macOS system functions so might well have 
changed with Mojave -> Catalina.

As a workaround, try e.g. png(type='cairo').  E.g.

fname <- file.path(tempdir(), "Rplot.png")
png(filename = fname, width = 500, height = 500, type="cairo")
hist(rnorm(20))
dev.off()

library(tcltk)
tkimage.create("photo", file = fname)

works for me on Catalina.


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From urb@nek @end|ng |rom r-project@org  Fri Jun 12 09:17:37 2020
From: urb@nek @end|ng |rom r-project@org (Simon Urbanek)
Date: Fri, 12 Jun 2020 19:17:37 +1200
Subject: [Rd] 
 tcltk image reading problem (on a mac?): [tcl] encountered an
 unsupported criticial chunk type "eXIf"
In-Reply-To: <39ffed02-7044-fc01-970e-986cebf1cb2f@stats.ox.ac.uk>
References: <FEAE9DA5-8206-4025-BA52-790717E27455@contoso.com>
 <274D88FD-B4E7-40E4-9814-24C5B70F858D@gmail.com>
 <22794_1591915402_05BMhLe6010602_BN8PR05MB6321E2E5C596C22180D6E1C7FC800@BN8PR05MB6321.namprd05.prod.outlook.com>
 <E574B396-3A22-4749-89DA-9027389AC78F@mcmaster.ca>
 <41413BD1-966E-4454-B674-AB58EC4786C0@uwaterloo.ca>
 <AE3CE86B-5591-4794-8687-3CFC9E1F97EB@R-project.org>
 <52B0A0EF-3BF4-4010-B21A-CD85B0C4B33E@mcmaster.ca>
 <39ffed02-7044-fc01-970e-986cebf1cb2f@stats.ox.ac.uk>
Message-ID: <C4FFE728-6888-426B-8116-A9CD6EAB367C@r-project.org>

Ah, thanks, Brian, so the issue is that Catalina is now embedding Exif tags while previous versions didn?t. Tcltk never supported them, but it only came up now as Catalina is generating them. I?ll check if tcltk has ever fixed it.

Sent from my iPhone

> On 12 Jun 2020, at 19:00, Prof Brian Ripley <ripley at stats.ox.ac.uk> wrote:
> 
>> On 12/06/2020 03:49, Fox, John wrote:
>> Dear Simon,
>>> On Jun 11, 2020, at 9:00 PM, Simon Urbanek <simon.urbanek at r-project.org> wrote:
>>> 
>>> Wayne,
>>> 
>>> that one is unrelated, but interesting - you can fix it with
>>> 
>>> sudo install_name_tool -change \
>>>  /usr/local/lib:/opt/X11/lib/libtk8.6.dylib \
>>>  /usr/local/lib/libtk8.6.dylib \
>>>  /usr/local/bin/wish8.6
>>> 
>>> There is a bug in tcltk with IDs on the libraries which I have worked-around for R, but not for wish.
>>> 
>>> Back to the original question - do you have any example of a file that doesn't work so I could test? Exif chunks are fairly rare in PNG and are a more late extension so I couldn't find any examples.
>> The code in Wayne's original message (copied below) generated the offending file:
>> library(tcltk)
>> fname <- "Rplot.png"
>> png(filename = fname, width = 500, height = 500)
>> hist(rnorm(20))
>> dev.off()
>> tkimage.create("photo", file = fname)
> 
> There are several png() devices for R.  The default on macOS is to use Quartz, and that depends on macOS system functions so might well have changed with Mojave -> Catalina.
> 
> As a workaround, try e.g. png(type='cairo').  E.g.
> 
> fname <- file.path(tempdir(), "Rplot.png")
> png(filename = fname, width = 500, height = 500, type="cairo")
> hist(rnorm(20))
> dev.off()
> 
> library(tcltk)
> tkimage.create("photo", file = fname)
> 
> works for me on Catalina.
> 
> 
> -- 
> Brian D. Ripley,                  ripley at stats.ox.ac.uk
> Emeritus Professor of Applied Statistics, University of Oxford
> 


From rwo|d|ord @end|ng |rom uw@ter|oo@c@  Fri Jun 12 15:53:26 2020
From: rwo|d|ord @end|ng |rom uw@ter|oo@c@ (Wayne Oldford)
Date: Fri, 12 Jun 2020 13:53:26 +0000
Subject: [Rd] 
 tcltk image reading problem (on a mac?): [tcl] encountered an
 unsupported criticial chunk type "eXIf"
In-Reply-To: <39ffed02-7044-fc01-970e-986cebf1cb2f@stats.ox.ac.uk>
References: <FEAE9DA5-8206-4025-BA52-790717E27455@contoso.com>
 <274D88FD-B4E7-40E4-9814-24C5B70F858D@gmail.com>
 <22794_1591915402_05BMhLe6010602_BN8PR05MB6321E2E5C596C22180D6E1C7FC800@BN8PR05MB6321.namprd05.prod.outlook.com>
 <E574B396-3A22-4749-89DA-9027389AC78F@mcmaster.ca>
 <41413BD1-966E-4454-B674-AB58EC4786C0@uwaterloo.ca>
 <AE3CE86B-5591-4794-8687-3CFC9E1F97EB@R-project.org>
 <52B0A0EF-3BF4-4010-B21A-CD85B0C4B33E@mcmaster.ca>
 <39ffed02-7044-fc01-970e-986cebf1cb2f@stats.ox.ac.uk>
Message-ID: <4547282C-E31D-4279-933C-C2C8DA012B4D@uwaterloo.ca>


Thanks everyone for getting a solution.

Brian's solution works for me too. 

Thanks again!!

Wayne


?-----Original Message-----
From: Prof Brian Ripley <ripley at stats.ox.ac.uk>
Date: Friday, June 12, 2020 at 3:00 AM
To: "Fox, John" <jfox at mcmaster.ca>, Simon Urbanek <simon.urbanek at r-project.org>
Cc: Wayne Oldford <rwoldford at uwaterloo.ca>, "r-devel at r-project.org" <r-devel at R-project.org>
Subject: Re: [Rd] tcltk image reading problem (on a mac?): [tcl] encountered an unsupported criticial chunk type "eXIf"

    On 12/06/2020 03:49, Fox, John wrote:
    > Dear Simon,
    > 
    >> On Jun 11, 2020, at 9:00 PM, Simon Urbanek <simon.urbanek at r-project.org> wrote:
    >>
    >> Wayne,
    >>
    >> that one is unrelated, but interesting - you can fix it with
    >>
    >> sudo install_name_tool -change \
    >>   /usr/local/lib:/opt/X11/lib/libtk8.6.dylib \
    >>   /usr/local/lib/libtk8.6.dylib \
    >>   /usr/local/bin/wish8.6
    >>
    >> There is a bug in tcltk with IDs on the libraries which I have worked-around for R, but not for wish.
    >>
    >> Back to the original question - do you have any example of a file that doesn't work so I could test? Exif chunks are fairly rare in PNG and are a more late extension so I couldn't find any examples.
    > 
    > The code in Wayne's original message (copied below) generated the offending file:
    > 
    > library(tcltk)
    > 
    > fname <- "Rplot.png"
    > png(filename = fname, width = 500, height = 500)
    > hist(rnorm(20))
    > dev.off()
    > 
    > tkimage.create("photo", file = fname)
    
    There are several png() devices for R.  The default on macOS is to use 
    Quartz, and that depends on macOS system functions so might well have 
    changed with Mojave -> Catalina.
    
    As a workaround, try e.g. png(type='cairo').  E.g.
    
    fname <- file.path(tempdir(), "Rplot.png")
    png(filename = fname, width = 500, height = 500, type="cairo")
    hist(rnorm(20))
    dev.off()
    
    library(tcltk)
    tkimage.create("photo", file = fname)
    
    works for me on Catalina.
    
    
    -- 
    Brian D. Ripley,                  ripley at stats.ox.ac.uk
    Emeritus Professor of Applied Statistics, University of Oxford
    


From @ko@ty@h@k @end|ng |rom u||@edu  Fri Jun 12 16:17:11 2020
From: @ko@ty@h@k @end|ng |rom u||@edu (Scott Kostyshak)
Date: Fri, 12 Jun 2020 10:17:11 -0400
Subject: [Rd] Marking a ticket as a (potential) regression in bug tracker?
Message-ID: <20200612141711.b67mfiizy46jyoo2@tallinn>

Is there a way to mark a ticket as a potential regression in the bug
tracker? I think the following issue is a regression:

  https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17684

I've just tested (2020-06-12 r78687) and what I believe to be a
regression is still there. I don't think the bug has bitten many people,
so I don't think it is critical, but often it is helpful to mark bugs as
regressions in trackers.

Thanks,

Scott


-- 
Scott Kostyshak
Assistant Professor of Economics
University of Florida
https://people.clas.ufl.edu/skostyshak/


