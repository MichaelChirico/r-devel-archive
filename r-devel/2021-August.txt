From dom|n|c@comto|@ @end|ng |rom gm@||@com  Mon Aug  2 08:36:27 2021
From: dom|n|c@comto|@ @end|ng |rom gm@||@com (Dominic Comtois)
Date: Mon, 2 Aug 2021 02:36:27 -0400
Subject: [Rd] I changed my vignette's file name to lowercase,
 then realized the url was case-sensitive
Message-ID: <CAEfsz7oeTPcOBWegHUz+GEu5mb-gR43c9W4rzXtWWqm9YAe74w@mail.gmail.com>

I changed my "Introduction.html" vignette's name to "introduction.html",
realizing only after the fact that CRAN's URLs are case sensitive.

Would the solution of adding to my package's source a new Introduction.html
file pointing to introduction.html using a <meta http-equiv="refresh" ...>
be a viable one? Or is there maybe another, better solution?

Thanks in advance

Dominic Comtois, summarytools author & maintainer

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Aug  2 11:59:49 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 2 Aug 2021 11:59:49 +0200
Subject: [Rd] I changed my vignette's file name to lowercase,
 then realized the url was case-sensitive
In-Reply-To: <CAEfsz7oeTPcOBWegHUz+GEu5mb-gR43c9W4rzXtWWqm9YAe74w@mail.gmail.com>
References: <CAEfsz7oeTPcOBWegHUz+GEu5mb-gR43c9W4rzXtWWqm9YAe74w@mail.gmail.com>
Message-ID: <24839.49685.969972.970703@stat.math.ethz.ch>

Dear Dominic,

This is the wrong mailing list for such questions
Do use 'R-help' or 'R-package-devel' instead, please.

(and also please do use  __plain text__
 instead of  "formatted" / "rich text" / ... e-mail  )

Best,
Martin Maechler


>>>>> Dominic Comtois 
>>>>>     on Mon, 2 Aug 2021 02:36:27 -0400 writes:

    > I changed my "Introduction.html" vignette's name to
    > "introduction.html", realizing only after the fact that
    > CRAN's URLs are case sensitive.

    > Would the solution of adding to my package's source a new
    > Introduction.html file pointing to introduction.html using
    > a <meta http-equiv="refresh" ...> be a viable one? Or is
    > there maybe another, better solution?

    > Thanks in advance

    > Dominic Comtois, summarytools author & maintainer

    > 	[[alternative HTML version deleted]]

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From pd@|gd @end|ng |rom gm@||@com  Mon Aug  2 12:08:49 2021
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Mon, 2 Aug 2021 12:08:49 +0200
Subject: [Rd] I changed my vignette's file name to lowercase,
 then realized the url was case-sensitive
In-Reply-To: <24839.49685.969972.970703@stat.math.ethz.ch>
References: <CAEfsz7oeTPcOBWegHUz+GEu5mb-gR43c9W4rzXtWWqm9YAe74w@mail.gmail.com>
 <24839.49685.969972.970703@stat.math.ethz.ch>
Message-ID: <7612B9A9-6497-4428-BCA4-2012DEBCA1DA@gmail.com>

R-help would surely be wrong, no? (R-package-devel is optimal, I agree)

- Peter

> On 2 Aug 2021, at 11:59 , Martin Maechler <maechler at stat.math.ethz.ch> wrote:
> 
> Dear Dominic,
> 
> This is the wrong mailing list for such questions
> Do use 'R-help' or 'R-package-devel' instead, please.
> 
> (and also please do use  __plain text__
> instead of  "formatted" / "rich text" / ... e-mail  )
> 
> Best,
> Martin Maechler
> 
> 
>>>>>> Dominic Comtois 
>>>>>>    on Mon, 2 Aug 2021 02:36:27 -0400 writes:
> 
>> I changed my "Introduction.html" vignette's name to
>> "introduction.html", realizing only after the fact that
>> CRAN's URLs are case sensitive.
> 
>> Would the solution of adding to my package's source a new
>> Introduction.html file pointing to introduction.html using
>> a <meta http-equiv="refresh" ...> be a viable one? Or is
>> there maybe another, better solution?
> 
>> Thanks in advance
> 
>> Dominic Comtois, summarytools author & maintainer
> 
>> 	[[alternative HTML version deleted]]
> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From dom|n|c@comto|@ @end|ng |rom gm@||@com  Mon Aug  2 13:39:42 2021
From: dom|n|c@comto|@ @end|ng |rom gm@||@com (Dominic Comtois)
Date: Mon, 2 Aug 2021 07:39:42 -0400
Subject: [Rd] I changed my vignette's file name to lowercase,
 then realized the url was case-sensitive
In-Reply-To: <7612B9A9-6497-4428-BCA4-2012DEBCA1DA@gmail.com>
References: <CAEfsz7oeTPcOBWegHUz+GEu5mb-gR43c9W4rzXtWWqm9YAe74w@mail.gmail.com>
 <24839.49685.969972.970703@stat.math.ethz.ch>
 <7612B9A9-6497-4428-BCA4-2012DEBCA1DA@gmail.com>
Message-ID: <CAEfsz7pu_x-LpYfbsx=VWsgx_fBN8sTMJEmRPu41mmniZoAs6A@mail.gmail.com>

Oops, indeed I intended to use R-package-devel.

Thx & have a nice day

	[[alternative HTML version deleted]]


From kry|ov@r00t @end|ng |rom gm@||@com  Thu Aug  5 19:42:23 2021
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Thu, 5 Aug 2021 19:42:23 +0200
Subject: [Rd] \Sexpr[results=hide] produces \verb{ newlines }
In-Reply-To: <24837.44825.296961.407663@stat.math.ethz.ch>
References: <20210729174838.658c0da7@trisector>
 <24837.44825.296961.407663@stat.math.ethz.ch>
Message-ID: <20210805194223.5e3cbdec@trisector>

Hello Martin,

On Sat, 31 Jul 2021 22:14:17 +0200
Martin Maechler <maechler at stat.math.ethz.ch> wrote:

> I have implemented a version of your patch in my local copy of
> R-devel and tested your example, also with  Rd2latex() ..
> interestingly   Rd2txt()  does not produce the extra new lines
> even without your patch.

That's interesting, indeed. I think that flushBuffer() is responsible
for collapsing multiple blank lines into one in that case, but they do
get preserved in the buffer up to before that.

> I plan to commit your proposal after the weekend unless has 
> reasons against that.

Thanks for the review!

-- 
Best regards,
Ivan


From Andre@G||||bert @end|ng |rom chu-rouen@|r  Sat Aug  7 12:40:24 2021
From: Andre@G||||bert @end|ng |rom chu-rouen@|r (GILLIBERT, Andre)
Date: Sat, 7 Aug 2021 10:40:24 +0000
Subject: [Rd] Redundant source code for random number generation
Message-ID: <73d3aa5257b64e2a8b50c1801edf6ae7@chu-rouen.fr>

Dear R developers,


When trying to fix poor performances of the runif() function (I can easily make it three times faster if you are interested in performance patches, maybe six times faster with a bit of refactoring of R source code), I noticed some redundant code in R source code (R-devel of 2021-08-05).

Indeed, the family of random number generation functions (runif, rnorm, rchisq, rbeta, rbinom, etc.) is implemented via Internal functions described in src/main/names.c and implemented as do_random1, do_random2 and do_random3 in src/main/random.c.


They are also reimplemented in src/library/stats/src/random.c in three main functions (random1, random2, random3) that will eventually be stored in a dynamic library (stats.so or stats.dll).


For instance, the stats::runif R function is implemented as:

function (n, min = 0, max = 1)
.Call(C_runif, n, min, max)


but could equivalently be implemented as:

function(n, min = 0, max = 1)

.Internal(runif(n, min, max))


The former calls the src/library/stats/src/random.c implementation (in stats.so or stats.dll) while the latter would call the src/main/random.c implementation (in the main R binary).


The two implementations (src/main/random.c and src/library/stats/src/random.c) are similar but slightly different on small details. For instance, rbinom always return a vector of doubles (REAL) in src/main/random.c while it tries to return a vector of integers in src/library/stats/src/random.c, unless the integers are too large to fit in an INT.


I see no obvious reason of maintaining both source codes. Actually the src/main/random.c seems to be unused in normal R programs. There could be some weird programs that use the .Internal call, but I do not think that there are many.


There are several strategies to merge both, but I want some feedback of people who know well the R source code before proposing patches.


--

Sincerely

Andr? GILLIBERT

	[[alternative HTML version deleted]]


From b@row||ng@on @end|ng |rom |@nc@@ter@@c@uk  Mon Aug  9 16:06:34 2021
From: b@row||ng@on @end|ng |rom |@nc@@ter@@c@uk (Barry Rowlingson)
Date: Mon, 9 Aug 2021 15:06:34 +0100
Subject: [Rd] attach "warning" is a message
Message-ID: <CANVKczPU53gOHxFxdaZZE92jDrhx4zKXueUWeeDYciQOjZoT4g@mail.gmail.com>

If I mask something via `attach`:

> d = data.frame(x=1:10)
> x=1
> attach(d)
The following object is masked _by_ .GlobalEnv:

    x
>

I get that message. The documentation for `attach` uses the phrase
"warnings", although the message isn't coming from `warning()`:

warn.conflicts: logical.  If ?TRUE?, warnings are printed about
          ?conflicts? from attaching the database, unless that database
          contains an object ?.conflicts.OK?.  A conflict is a function
          masking a function, or a non-function masking a non-function.

and so you can't trap them with options(warn=...) and so on. This sent me
briefly down the wrong track while trying to figure out why R was showing a
masking error in one context but not another - I wondered if I'd supressed
warning()s in the other context.

Personally I'd like these messages to be coming from warning() since that
seems the appropriate way to warn someone they've done something which
might have unwanted effects. But fixing the documentation to say "If
?TRUE?, *messages* are printed" is probably less likely to break existing
code.

Happy to add something to bugzilla if anyone thinks I'm not being overly
pedantic here.

Barry

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Tue Aug 10 01:28:19 2021
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Tue, 10 Aug 2021 11:28:19 +1200
Subject: [Rd] attach "warning" is a message
In-Reply-To: <CANVKczPU53gOHxFxdaZZE92jDrhx4zKXueUWeeDYciQOjZoT4g@mail.gmail.com>
References: <CANVKczPU53gOHxFxdaZZE92jDrhx4zKXueUWeeDYciQOjZoT4g@mail.gmail.com>
Message-ID: <6F805968-4234-4100-91FA-5CC1E6BC8347@R-project.org>


Barry,

it is not a warning nor plain output, it is a message, so you can use 

> d = data.frame(x=1:10)
> x=1
> suppressMessages(attach(d))
>

Looking at the history, this used to be cat() but got changed to a message in R 3.2.0 (r65385, CCIng Martin in case he remembers the rationale for warning vs message). I don't know for sure why it is not a warning, but I can see that it is more in the line with informative messages (like package masking) as opposed to a warning - in fact the change suggest that the intention was to synchonize both. That said, I guess the two options are to clarify the documentation (also in library()) or change to a warning - not sure what the consequences of the latter would be.

Cheers,
Simon



> On 10/08/2021, at 2:06 AM, Barry Rowlingson <b.rowlingson at lancaster.ac.uk> wrote:
> 
> If I mask something via `attach`:
> 
>> d = data.frame(x=1:10)
>> x=1
>> attach(d)
> The following object is masked _by_ .GlobalEnv:
> 
>    x
>> 
> 
> I get that message. The documentation for `attach` uses the phrase
> "warnings", although the message isn't coming from `warning()`:
> 
> warn.conflicts: logical.  If ?TRUE?, warnings are printed about
>          ?conflicts? from attaching the database, unless that database
>          contains an object ?.conflicts.OK?.  A conflict is a function
>          masking a function, or a non-function masking a non-function.
> 
> and so you can't trap them with options(warn=...) and so on. This sent me
> briefly down the wrong track while trying to figure out why R was showing a
> masking error in one context but not another - I wondered if I'd supressed
> warning()s in the other context.
> 
> Personally I'd like these messages to be coming from warning() since that
> seems the appropriate way to warn someone they've done something which
> might have unwanted effects. But fixing the documentation to say "If
> ?TRUE?, *messages* are printed" is probably less likely to break existing
> code.
> 
> Happy to add something to bugzilla if anyone thinks I'm not being overly
> pedantic here.
> 
> Barry
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From pd@|gd @end|ng |rom gm@||@com  Tue Aug 10 10:18:08 2021
From: pd@|gd @end|ng |rom gm@||@com (Peter Dalgaard)
Date: Tue, 10 Aug 2021 10:18:08 +0200
Subject: [Rd] R 4.1.1 is released
Message-ID: <8A0CEFBD-74CF-4928-A587-1C58811F799B@gmail.com>

The build system rolled up R-4.1.1.tar.gz (codename "Kick Things") this morning.

The list below details the changes in this release. 

You can get the source code from

https://cran.r-project.org/src/base/R-4/R-4.1.1.tar.gz

or wait for it to be mirrored at a CRAN site nearer to you.

Binaries for various platforms will appear in due course.


For the R Core Team,

Peter Dalgaard

These are the checksums (md5 and SHA-256) for the freshly created files, in case you wish
to check that they are uncorrupted:

MD5 (AUTHORS) = da5e7c699a83608d0f1e39c458d9fc56
MD5 (COPYING) = eb723b61539feef013de476e68b5c50a
MD5 (COPYING.LIB) = a6f89e2100d9b6cdffcea4f398e37343
MD5 (FAQ) = 6094024214a482c0d01d2ab2adca4b3f
MD5 (INSTALL) = 7893f754308ca31f1ccf62055090ad7b
MD5 (NEWS) = fbc4810ff26ebcec514ebaa1c1909ad7
MD5 (NEWS.0) = bfcd7c147251b5474d96848c6f57e5a8
MD5 (NEWS.1) = eb78c4d053ec9c32b815cf0c2ebea801
MD5 (NEWS.2) = a767f7809324c73c49eaff47d14bce81
MD5 (NEWS.3) = e55ed2c8a547b827b46e08eb7137ba23
MD5 (R-latest.tar.gz) = c278cfeb85b1564540ab214e45fe68d9
MD5 (README) = f468f281c919665e276a1b691decbbe6
MD5 (RESOURCES) = a79b9b338cab09bd665f6b62ac6f455b
MD5 (THANKS) = 251d20510bfc3cc93b82c5a99f7efcc6
MD5 (VERSION-INFO.dcf) = 34443dff7fcea700c8ec4740e5804374
MD5 (R-4/R-4.1.1.tar.gz) = c278cfeb85b1564540ab214e45fe68d9

9704a7d96c350a48417ef215888a29f1993ee5dec1b73cb95755e8625b860200  AUTHORS
e6d6a009505e345fe949e1310334fcb0747f28dae2856759de102ab66b722cb4  COPYING
6095e9ffa777dd22839f7801aa845b31c9ed07f3d6bf8a26dc5d2dec8ccc0ef3  COPYING.LIB
2894e7a88634a08c05bfafb8a694a26b635e4042160aab46fa6a0f4eb68ea91e  FAQ
f87461be6cbaecc4dce44ac58e5bd52364b0491ccdadaf846cb9b452e9550f31  INSTALL
e8bdaf546cf65fdc5bf2a81fa5334572886ff2f1317ec6cdc9e61d6de3532dd4  NEWS
4e21b62f515b749f80997063fceab626d7258c7d650e81a662ba8e0640f12f62  NEWS.0
12b30c724117b1b2b11484673906a6dcd48a361f69fc420b36194f9218692d01  NEWS.1
ba74618bc3f4c0e336dca13d472402a1863d12ba6f7f91a1782bc469ee986f6d  NEWS.2
1910a2405300b9bc7c76beeb0753a5249cf799afe175ce28f8d782fab723e012  NEWS.3
515e03265752257d0b7036f380f82e42b46ed8473f54f25c7b67ed25bbbdd364  R-latest.tar.gz
2fdd3e90f23f32692d4b3a0c0452f2c219a10882033d1774f8cadf25886c3ddc  README
8b7d3856100220f4555d4d57140829f2e81c27eccec5b441f5dce616e9ec9061  RESOURCES
c9c7cb32308b4e560a22c858819ade9de524a602abd4e92d1c328c89f8037d73  THANKS
02686ea05e64304a755bf776cdeeadafd2c5017a13f9203f1db9278287c81aa6  VERSION-INFO.dcf
515e03265752257d0b7036f380f82e42b46ed8473f54f25c7b67ed25bbbdd364  R-4/R-4.1.1.tar.gz

This is the relevant part of the NEWS file

CHANGES IN R 4.1.1:

  NEW FEATURES:

    * require(pkg, quietly = TRUE) is quieter and in particular does
      not warn if the package is not found.

  DEPRECATED AND DEFUNCT:

    * Use of ftp:// URIs should be regarded as deprecated, with
      on-going support confined to method = "libcurl" and not routinely
      tested.  (Nowadays no major browser supports them.)

    * The non-default method = "internal" is deprecated for http:// and
      ftp:// URIs for both download.file and url.

    * On Windows, method = "wininet" is deprecated for http://,
      https:// and ftp:// URIs for both download.file and url.  (A
      warning is only given for ftp://.)

      For ftp:// URIs the default method is now "libcurl" if available
      (which it is on CRAN builds).

      method = "wininet" remains the default for http:// and https://
      URIs but if libcurl is available, using method = "libcurl" is
      preferred.

  INSTALLATION:

    * make check now works also without a LaTeX installation.  (Thanks
      to Sebastian Meyer's PR#18103.)

  BUG FIXES:

    * make check-devel works again in an R build configured with
      --without-recommended-packages.

    * qnbinom(p, size, mu) for large size/mu is correct now in a range
      of cases (PR#18095); similarly for the (size, prob)
      parametrization of the negative binomial.  Also qpois() and
      qbinom() are better and or faster for extreme cases.  The
      underlying C code has been modularized and is common to all four
      cases of discrete distributions.

    * gap.axis is now part of the axis() arguments which are passed
      from bxp(), and hence boxplot().  (Thanks to Martin Smith's
      report and suggestions in PR#18109.)

    * .First and .Last can again be set from the site profile.

    * seq.int(from, to, *) and seq.default(..) now work better in large
      range cases where from-to is infinite where the two boundaries
      are finite.

    * all.equal(x,y) now returns TRUE correctly also when several
      entries of abs(x) and abs(y) are close to .Machine$double.xmax,
      the largest finite numeric.

    * model.frame() now clears the object bit when removing the class
      attribute of a value via na.action (PR#18100).

    * charClass() now works with multi-character strings on Windows
      (PR#18104, fixed by Bill Dunlap).

    * encodeString() on Solaris now works again in Latin-1 encoding on
      characters represented differently in UTF-8.  Support for
      surrogate pairs on Solaris has been improved.

    * file.show() on Windows now works with non-ASCII path names
      representable in the current native encoding (PR#18132).

    * Embedded R on Windows can now find R home directory via the
      registry even when installed only for the current user
      (PR#18135).

    * pretty(x) with finite x now returns finite values also in the
      case where the extreme x values are close in size to the maximal
      representable number .Machine$double.xmax.

      Also, it's been tweaked for very small ranges and when a boundary
      is close (or equal) to zero; e.g., pretty(c(0,1e-317)) no longer
      has negative numbers, currently still warning about a very small
      range, and pretty(2^-(1024 - 2^-1/(c(24,10)))) is more accurate.

    * The error message for not finding vignette files when weaving has
      correct file sizes now. (Thanks to Sebastian Meyer's PR#18154.)

    * dnbinom(20, <large>, 1) now correctly gives 0, and similar cases
      are more accurate with underflow precaution.  (Reported by
      Francisco Vera Alcivar in PR#18072.)

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Aug 10 11:50:01 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 10 Aug 2021 11:50:01 +0200
Subject: [Rd] attach "warning" is a message
In-Reply-To: <6F805968-4234-4100-91FA-5CC1E6BC8347@R-project.org>
References: <CANVKczPU53gOHxFxdaZZE92jDrhx4zKXueUWeeDYciQOjZoT4g@mail.gmail.com>
 <6F805968-4234-4100-91FA-5CC1E6BC8347@R-project.org>
Message-ID: <24850.19401.473687.481057@stat.math.ethz.ch>

>>>>> Simon Urbanek 
>>>>>     on Tue, 10 Aug 2021 11:28:19 +1200 writes:

    > Barry,

    > it is not a warning nor plain output, it is a message, so you can use 

    >> d = data.frame(x=1:10)
    >> x=1
    >> suppressMessages(attach(d))
    >> 

    > Looking at the history, this used to be cat() but got changed to a message in R 3.2.0 (r65385, CCIng Martin in case he remembers the rationale for warning vs message). I don't know for sure why it is not a warning, but I can see that it is more in the line with informative messages (like package masking) as opposed to a warning - in fact the change suggest that the intention was to synchonize both. That said, I guess the two options are to clarify the documentation (also in library()) or change to a warning - not sure what the consequences of the latter would be.

    > Cheers,
    > Simon

Thank you, Simon.
One rationale back then was that  message() *is* in some sense
closer to cat()  than warning() is (and indeed, to synchronize
with the conflict messages from `library(.)` or `require(.)`.
Also, I would say that a message is more appropriate here than a
warning when someone explicitly attach()es something to the
search() path (s)he may get a notice about masking but to be
warned is too strong {warnings being made into errors in some setups}.

So I'd propose to only update the documentation i.e.
help(attach).

Martin


    >> On 10/08/2021, at 2:06 AM, Barry Rowlingson <b.rowlingson at lancaster.ac.uk> wrote:
    >> 
    >> If I mask something via `attach`:
    >> 
    >>> d = data.frame(x=1:10)
    >>> x=1
    >>> attach(d)
    >> The following object is masked _by_ .GlobalEnv:
    >> 
    >> x
    >>> 
    >> 
    >> I get that message. The documentation for `attach` uses the phrase
    >> "warnings", although the message isn't coming from `warning()`:
    >> 
    >> warn.conflicts: logical.  If ?TRUE?, warnings are printed about
    >> ?conflicts? from attaching the database, unless that database
    >> contains an object ?.conflicts.OK?.  A conflict is a function
    >> masking a function, or a non-function masking a non-function.
    >> 
    >> and so you can't trap them with options(warn=...) and so on. This sent me
    >> briefly down the wrong track while trying to figure out why R was showing a
    >> masking error in one context but not another - I wondered if I'd supressed
    >> warning()s in the other context.
    >> 
    >> Personally I'd like these messages to be coming from warning() since that
    >> seems the appropriate way to warn someone they've done something which
    >> might have unwanted effects. But fixing the documentation to say "If
    >> ?TRUE?, *messages* are printed" is probably less likely to break existing
    >> code.
    >> 
    >> Happy to add something to bugzilla if anyone thinks I'm not being overly
    >> pedantic here.
    >> 
    >> Barry
    >> 
    >> [[alternative HTML version deleted]]
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >>


From ggrothend|eck @end|ng |rom gm@||@com  Tue Aug 10 21:33:20 2021
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Tue, 10 Aug 2021 15:33:20 -0400
Subject: [Rd] problem with pipes, textConnection and read.dcf
Message-ID: <CAP01uRn+6zWEgmyGfNTb3aJJoLCy8mbhJFj6SiWWBktmXwsncA@mail.gmail.com>

This gives an error bit if the first gsub line is commented out then there is no
error even though it is equivalent code.

  L <- c("Variable:id", "Length:112630     ")

  L |>
    gsub(pattern = " ", replacement = "") |>
    gsub(pattern = " ", replacement = "") |>
    textConnection() |>
    read.dcf()
  ## Error in textConnection(gsub(gsub(L, pattern = " ", replacement = ""),  :
  ##  argument 'object' must deparse to a single character string

That is this works:

  L |>
    # gsub(pattern = " ", replacement = "") |>
    gsub(pattern = " ", replacement = "") |>
    textConnection() |>
    read.dcf()
  ##      Variable Length
  ## [1,] "id"     "112630"

  R.version.string
  ## [1] "R version 4.1.0 RC (2021-05-16 r80303)"
  win.version()
  ## [1] "Windows 10 x64 (build 19042)"

-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From pd@|gd @end|ng |rom gm@||@com  Tue Aug 10 22:00:16 2021
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Tue, 10 Aug 2021 22:00:16 +0200
Subject: [Rd] problem with pipes, textConnection and read.dcf
In-Reply-To: <CAP01uRn+6zWEgmyGfNTb3aJJoLCy8mbhJFj6SiWWBktmXwsncA@mail.gmail.com>
References: <CAP01uRn+6zWEgmyGfNTb3aJJoLCy8mbhJFj6SiWWBktmXwsncA@mail.gmail.com>
Message-ID: <A454DA3A-BD8D-418C-90FC-E5DE1CBB0725@gmail.com>

It's not a pipe issue:

> textConnection(gsub(gsub(L, pattern = " ", replacement = ""), pattern = " ", replacement = ""))
Error in textConnection(gsub(gsub(L, pattern = " ", replacement = ""),  : 
  argument 'object' must deparse to a single character string
> textConnection(gsub(L, pattern = " ", replacement = ""))
A connection with                                                          
description "gsub(L, pattern = \" \", replacement = \"\")"
class       "textConnection"                              
mode        "r"                                           
text        "text"                                        
opened      "opened"                                      
can read    "yes"                                         
can write   "no"                                          

I suppose the culprit is that the deparse(substitute(...)) construct in the definition of textConnection() can generate multiple lines if the object expression gets complicated.

> textConnection
function (object, open = "r", local = FALSE, name = deparse(substitute(object)), 
    encoding = c("", "bytes", "UTF-8")) 

This also suggests that setting name=something might be a cure.

-pd


> On 10 Aug 2021, at 21:33 , Gabor Grothendieck <ggrothendieck at gmail.com> wrote:
> 
> This gives an error bit if the first gsub line is commented out then there is no
> error even though it is equivalent code.
> 
>  L <- c("Variable:id", "Length:112630     ")
> 
>  L |>
>    gsub(pattern = " ", replacement = "") |>
>    gsub(pattern = " ", replacement = "") |>
>    textConnection() |>
>    read.dcf()
>  ## Error in textConnection(gsub(gsub(L, pattern = " ", replacement = ""),  :
>  ##  argument 'object' must deparse to a single character string
> 
> That is this works:
> 
>  L |>
>    # gsub(pattern = " ", replacement = "") |>
>    gsub(pattern = " ", replacement = "") |>
>    textConnection() |>
>    read.dcf()
>  ##      Variable Length
>  ## [1,] "id"     "112630"
> 
>  R.version.string
>  ## [1] "R version 4.1.0 RC (2021-05-16 r80303)"
>  win.version()
>  ## [1] "Windows 10 x64 (build 19042)"
> 
> -- 
> Statistics & Software Consulting
> GKX Group, GKX Associates Inc.
> tel: 1-877-GKX-GROUP
> email: ggrothendieck at gmail.com
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From iuke-tier@ey m@iii@g oii uiow@@edu  Tue Aug 10 22:14:11 2021
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Tue, 10 Aug 2021 15:14:11 -0500 (CDT)
Subject: [Rd] 
 [External]  problem with pipes, textConnection and read.dcf
In-Reply-To: <CAP01uRn+6zWEgmyGfNTb3aJJoLCy8mbhJFj6SiWWBktmXwsncA@mail.gmail.com>
References: <CAP01uRn+6zWEgmyGfNTb3aJJoLCy8mbhJFj6SiWWBktmXwsncA@mail.gmail.com>
Message-ID: <alpine.DEB.2.22.394.2108101452480.3514@luke-Latitude-7480>

Not an issue with pipes. The pipe just rewrites the expression to a
nested call and that is then evaluated. The call this produces is

> quote(L |>
+    gsub(pattern = " ", replacement = "") |>
+    gsub(pattern = " ", replacement = "") |>
+    textConnection() |>
+    read.dcf())
read.dcf(textConnection(gsub(gsub(L, pattern = " ", replacement = ""),
     pattern = " ", replacement = "")))

If you run that expression, or just the argument to read.dcf, then you
get the error you report. So the issue is somewhere in textConnection().
This produces a similar message:

read.dcf(textConnection(c(L, "aaaaaaaaaaaaaaaaaa", "bbbbbbbbbbbbbbbb", "cccccccccccccccc", "ddddddddddddddddddd")))

File a bug report and someone who understands the textConnection()
internals better than I do can take a look.

Best,

luke

On Tue, 10 Aug 2021, Gabor Grothendieck wrote:

> This gives an error bit if the first gsub line is commented out then there is no
> error even though it is equivalent code.
>
>  L <- c("Variable:id", "Length:112630     ")
>
>  L |>
>    gsub(pattern = " ", replacement = "") |>
>    gsub(pattern = " ", replacement = "") |>
>    textConnection() |>
>    read.dcf()
>  ## Error in textConnection(gsub(gsub(L, pattern = " ", replacement = ""),  :
>  ##  argument 'object' must deparse to a single character string
>
> That is this works:
>
>  L |>
>    # gsub(pattern = " ", replacement = "") |>
>    gsub(pattern = " ", replacement = "") |>
>    textConnection() |>
>    read.dcf()
>  ##      Variable Length
>  ## [1,] "id"     "112630"
>
>  R.version.string
>  ## [1] "R version 4.1.0 RC (2021-05-16 r80303)"
>  win.version()
>  ## [1] "Windows 10 x64 (build 19042)"
>
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Aug 11 08:59:30 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 11 Aug 2021 08:59:30 +0200
Subject: [Rd] problem with pipes, textConnection and read.dcf
In-Reply-To: <A454DA3A-BD8D-418C-90FC-E5DE1CBB0725@gmail.com>
References: <CAP01uRn+6zWEgmyGfNTb3aJJoLCy8mbhJFj6SiWWBktmXwsncA@mail.gmail.com>
 <A454DA3A-BD8D-418C-90FC-E5DE1CBB0725@gmail.com>
Message-ID: <24851.30034.457559.988756@stat.math.ethz.ch>

>>>>> peter dalgaard 
>>>>>     on Tue, 10 Aug 2021 22:00:16 +0200 writes:

    > It's not a pipe issue:

    >> textConnection(gsub(gsub(L, pattern = " ", replacement = ""), pattern = " ", replacement = ""))
    > Error in textConnection(gsub(gsub(L, pattern = " ", replacement = ""),  : 
    > argument 'object' must deparse to a single character string
    >> textConnection(gsub(L, pattern = " ", replacement = ""))
    > A connection with                                                          
    > description "gsub(L, pattern = \" \", replacement = \"\")"
    > class       "textConnection"                              
    > mode        "r"                                           
    > text        "text"                                        
    > opened      "opened"                                      
    > can read    "yes"                                         
    > can write   "no"                                          

    > I suppose the culprit is that the deparse(substitute(...)) construct in the definition of textConnection() can generate multiple lines if the object expression gets complicated.

    >> textConnection
    > function (object, open = "r", local = FALSE, name = deparse(substitute(object)), 
    > encoding = c("", "bytes", "UTF-8")) 

    > This also suggests that setting name=something might be a cure.

    > -pd

Indeed.

In R 4.0.0, I had introduced the deparse1() short cut to be used
in place of  deparse() in such cases:

NEWS has said

    ? New function deparse1() produces one string, wrapping deparse(),
      to be used typically in deparse1(substitute(*)), e.g., to fix
      PR#17671.

and the definition is a simple but useful oneliner

  deparse1 <- function (expr, collapse = " ", width.cutoff = 500L, ...) 
  paste(deparse(expr, width.cutoff, ...), collapse = collapse)


So I'm almost sure we should use  deparse1() in textConnection
(and will make check and potentially commit that unless ...)

Martin


    >> On 10 Aug 2021, at 21:33 , Gabor Grothendieck <ggrothendieck at gmail.com> wrote:
    >> 
    >> This gives an error bit if the first gsub line is commented out then there is no
    >> error even though it is equivalent code.
    >> 
    >> L <- c("Variable:id", "Length:112630     ")
    >> 
    >> L |>
    >> gsub(pattern = " ", replacement = "") |>
    >> gsub(pattern = " ", replacement = "") |>
    >> textConnection() |>
    >> read.dcf()
    >> ## Error in textConnection(gsub(gsub(L, pattern = " ", replacement = ""),  :
    >> ##  argument 'object' must deparse to a single character string
    >> 
    >> That is this works:
    >> 
    >> L |>
    >> # gsub(pattern = " ", replacement = "") |>
    >> gsub(pattern = " ", replacement = "") |>
    >> textConnection() |>
    >> read.dcf()
    >> ##      Variable Length
    >> ## [1,] "id"     "112630"
    >> 
    >> R.version.string
    >> ## [1] "R version 4.1.0 RC (2021-05-16 r80303)"
    >> win.version()
    >> ## [1] "Windows 10 x64 (build 19042)"
    >> 
    >> -- 
    >> Statistics & Software Consulting
    >> GKX Group, GKX Associates Inc.
    >> tel: 1-877-GKX-GROUP
    >> email: ggrothendieck at gmail.com
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel

    > -- 
    > Peter Dalgaard, Professor,
    > Center for Statistics, Copenhagen Business School
    > Solbjerg Plads 3, 2000 Frederiksberg, Denmark
    > Phone: (+45)38153501
    > Office: A 4.23
    > Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Wed Aug 11 15:15:15 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Wed, 11 Aug 2021 15:15:15 +0200
Subject: [Rd] difference of m1 <- lm(f, data) and update(m1, formula=f)
In-Reply-To: <24851.40349.481350.63082@stat.math.ethz.ch>
References: <LO2P265MB2605932206CC0D6418B8D1E5DDF89@LO2P265MB2605.GBRP265.PROD.OUTLOOK.COM>
 <24851.40349.481350.63082@stat.math.ethz.ch>
Message-ID: <24851.52579.85351.888589@stat.math.ethz.ch>

I'm diverting this from R-help to R-devel,

because I'm asking / musing if and if where we should / could
change R here (see below).

>>>>> Martin Maechler on 11 Aug 2021 11:51:25 +0200

>>>>> Tim Taylor .. on 08:45:48 +0000 writes:

    >> Manipulating formulas within different models I notice the following:

    >> m1 <- lm(formula = hp ~ cyl, data = mtcars)
    >> m2 <- update(m1, formula. = hp ~ cyl)
    >> all.equal(m1, m2)
    >> #> [1] TRUE
    >> identical(m1, m2)
    >> #> [1] FALSE
    >> waldo::compare(m1, m2)
    >> #> `old$call[[2]]` is a call
    >> #> `new$call[[2]]` is an S3 object of class <formula>, a call

    >> I'm aware formulas are a form of call but what I'm unsure
    >> of is whether there is meaningful difference between the
    >> two versions of the models? 

    > A good question.
    > In principle, the promise of an update()  method should be to
    > produce the *same* result as calling the original model-creation
    > (or more generally object-creation) function call.

    > So, already with identical(), you've shown that this is not
    > quite the case for simple lm(),
    > and indeed that is a bit undesirable.

    > To answer your question re "meaningful" difference,
    > given what I say above is:
    > No, there shouldn't be any relevant difference, and if there is,
    > that may considered a bug in the respective update() method,
    > here update.lm.

    > More about this in the following  R code snippet :

Again, a repr.ex.:

---0<-------0<-------0<-------0<-------0<-------0<-------0<----

m1 <- lm(formula = hp ~ cyl, data = mtcars)
m2  <- update(m1, formula. = hp ~ cyl)
m2a <- update(m1)
identical(m1, m2a)#>  TRUE !
## ==> calling update() & explicitly specifying the formula is "the problem"

identical(m1$call, m2$call) #> [1] FALSE
noCall <- function(x) x[setdiff(names(x), "call")]
identical(noCall(m1), noCall(m2))# TRUE!
## look closer:
c1 <- m1$call
c2 <- m2$call
str(as.list(c1))
## List of 3
##  $        : symbol lm
##  $ formula: language hp ~ cyl
##  $ data   : symbol mtcars

str(as.list(c2))
## List of 3
##  $        : symbol lm
##  $ formula:Class 'formula'  language hp ~ cyl
##   .. ..- attr(*, ".Environment")=<environment: R_GlobalEnv>
##  $ data   : symbol mtcars

identical(c1[-2], c2[-2]) # TRUE ==> so, indeed the difference is *only* in the formula ( = [2]) component
f1 <- c1$formula
f2 <- c2$formula
all.equal(f1,f2) # TRUE
identical(f1,f2) # FALSE

## Note that this is typically *not* visible if the user uses
## the accessor functions they should :
identical(formula(m1), formula(m2)) # TRUE !
## and indeed, the formula() method for 'lm'  does set the environment:
stats:::formula.lm

---0<-------0<-------0<-------0<-------0<-------0<-------0<----

We know that it has been important in  R  the formulas have an
environment and that's been the only R-core recommended way to
do non-standard evaluation (!! .. but let's skip that for now !!).

OTOH we have also kept the convention that a formula without
environment implicitly means its environment
is .GlobalEnv aka globalenv().

Currently, I think formula() methods then *should* always return
a formula *with* an environment .. even though that's not
claimed in the reference, i.e., ?formula.

Also, the print() method for formulas by default does *not* show the
environment if it is .GlobalEnv, as you can see on that help
already in the "Usage" section:

     ## S3 method for class 'formula'
     print(x, showEnv = !identical(e, .GlobalEnv), ...)
     
Now, I've looked at the update() here, which is update.default()
and the source code of that currently is

update.formula <- function (old, new, ...)
{
    tmp <- .Call(C_updateform, as.formula(old), as.formula(new))
    ## FIXME?: terms.formula() with "large" unneeded attributes:
    formula(terms.formula(tmp, simplify = TRUE))
}

where the important part is the "FIXME" comment (seen in the R
sources, but no longer in the R function after installation).

My current "idea" is to formalize what we see working here:
namely allow  update.formula() to *not* set the environment of
its result *if* that environment would be .GlobalEnv ..

--> I'm starting to test my proposal
but would still be *very* glad for comments, also contradicting
ones!

Martin


From iuke-tier@ey m@iii@g oii uiow@@edu  Wed Aug 11 17:24:08 2021
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Wed, 11 Aug 2021 10:24:08 -0500 (CDT)
Subject: [Rd] [External]  difference of m1 <- lm(f, data) and update(m1,
 formula=f)
In-Reply-To: <24851.52579.85351.888589@stat.math.ethz.ch>
References: <LO2P265MB2605932206CC0D6418B8D1E5DDF89@LO2P265MB2605.GBRP265.PROD.OUTLOOK.COM>
 <24851.40349.481350.63082@stat.math.ethz.ch>
 <24851.52579.85351.888589@stat.math.ethz.ch>
Message-ID: <alpine.DEB.2.22.394.2108110951070.3514@luke-Latitude-7480>

On Wed, 11 Aug 2021, Martin Maechler wrote:

> I'm diverting this from R-help to R-devel,
>
> because I'm asking / musing if and if where we should / could
> change R here (see below).
>
>>>>>> Martin Maechler on 11 Aug 2021 11:51:25 +0200
>
>>>>>> Tim Taylor .. on 08:45:48 +0000 writes:
>
>    >> Manipulating formulas within different models I notice the following:
>
>    >> m1 <- lm(formula = hp ~ cyl, data = mtcars)
>    >> m2 <- update(m1, formula. = hp ~ cyl)
>    >> all.equal(m1, m2)
>    >> #> [1] TRUE
>    >> identical(m1, m2)
>    >> #> [1] FALSE
>    >> waldo::compare(m1, m2)
>    >> #> `old$call[[2]]` is a call
>    >> #> `new$call[[2]]` is an S3 object of class <formula>, a call
>
>    >> I'm aware formulas are a form of call but what I'm unsure
>    >> of is whether there is meaningful difference between the
>    >> two versions of the models?
>
>    > A good question.
>    > In principle, the promise of an update()  method should be to
>    > produce the *same* result as calling the original model-creation
>    > (or more generally object-creation) function call.
>
>    > So, already with identical(), you've shown that this is not
>    > quite the case for simple lm(),
>    > and indeed that is a bit undesirable.
>
>    > To answer your question re "meaningful" difference,
>    > given what I say above is:
>    > No, there shouldn't be any relevant difference, and if there is,
>    > that may considered a bug in the respective update() method,
>    > here update.lm.
>
>    > More about this in the following  R code snippet :
>
> Again, a repr.ex.:
>
> ---0<-------0<-------0<-------0<-------0<-------0<-------0<----
>
> m1 <- lm(formula = hp ~ cyl, data = mtcars)
> m2  <- update(m1, formula. = hp ~ cyl)
> m2a <- update(m1)
> identical(m1, m2a)#>  TRUE !
> ## ==> calling update() & explicitly specifying the formula is "the problem"
>
> identical(m1$call, m2$call) #> [1] FALSE
> noCall <- function(x) x[setdiff(names(x), "call")]
> identical(noCall(m1), noCall(m2))# TRUE!
> ## look closer:
> c1 <- m1$call
> c2 <- m2$call
> str(as.list(c1))
> ## List of 3
> ##  $        : symbol lm
> ##  $ formula: language hp ~ cyl
> ##  $ data   : symbol mtcars
>
> str(as.list(c2))
> ## List of 3
> ##  $        : symbol lm
> ##  $ formula:Class 'formula'  language hp ~ cyl
> ##   .. ..- attr(*, ".Environment")=<environment: R_GlobalEnv>
> ##  $ data   : symbol mtcars
>
> identical(c1[-2], c2[-2]) # TRUE ==> so, indeed the difference is *only* in the formula ( = [2]) component
> f1 <- c1$formula
> f2 <- c2$formula
> all.equal(f1,f2) # TRUE
> identical(f1,f2) # FALSE
>
> ## Note that this is typically *not* visible if the user uses
> ## the accessor functions they should :
> identical(formula(m1), formula(m2)) # TRUE !
> ## and indeed, the formula() method for 'lm'  does set the environment:
> stats:::formula.lm
>
> ---0<-------0<-------0<-------0<-------0<-------0<-------0<----
>
> We know that it has been important in  R  the formulas have an
> environment and that's been the only R-core recommended way to
> do non-standard evaluation (!! .. but let's skip that for now !!).
>
> OTOH we have also kept the convention that a formula without
> environment implicitly means its environment
> is .GlobalEnv aka globalenv().
>
> Currently, I think formula() methods then *should* always return
> a formula *with* an environment .. even though that's not
> claimed in the reference, i.e., ?formula.
>
> Also, the print() method for formulas by default does *not* show the
> environment if it is .GlobalEnv, as you can see on that help
> already in the "Usage" section:
>
>     ## S3 method for class 'formula'
>     print(x, showEnv = !identical(e, .GlobalEnv), ...)
>
> Now, I've looked at the update() here, which is update.default()
> and the source code of that currently is
>
> update.formula <- function (old, new, ...)
> {
>    tmp <- .Call(C_updateform, as.formula(old), as.formula(new))
>    ## FIXME?: terms.formula() with "large" unneeded attributes:
>    formula(terms.formula(tmp, simplify = TRUE))
> }
>
> where the important part is the "FIXME" comment (seen in the R
> sources, but no longer in the R function after installation).
>
> My current "idea" is to formalize what we see working here:
> namely allow  update.formula() to *not* set the environment of
> its result *if* that environment would be .GlobalEnv ..
>
> --> I'm starting to test my proposal
> but would still be *very* glad for comments, also contradicting
> ones!

m1$call is the parsed expression for the call to lm(), so
m1$call$formula is the expression that was evaluated to produce the formula.
Typically this will be a call expression with `~` as the function.
It could also be a symbol:

> frm <- hp ~ cyl
> m3 <- lm(formula = frm, data = mtcars)
> m3$call$formula
frm

update.default is creating a new call object by putting in a new
expression for the formula argument. It so happens that putting in a
formula object actually works: The only difference between the AST for
a call of `~` and the formula such a call produces when evaluated is
the class and environment attributes the call adds, and most code that
works with expressions, like eval(), ignores attributes.

It would seem somewhat more consistent if update.default put the
expression that would produce the formula into the call (i.e. stripped
out the two attributes).

But I do not know if there is logic in base R code, never mind package
code, that takes advantage of the attributes on the formula expression
in if they are found. formula() looks in the 'terms' component so would
not be affects, but I don't know if something else might be.

Best,

luke


>
> Martin
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From d|pter|x@w@ng @end|ng |rom gm@||@com  Thu Aug 12 00:50:17 2021
From: d|pter|x@w@ng @end|ng |rom gm@||@com (Dipterix Wang)
Date: Wed, 11 Aug 2021 18:50:17 -0400
Subject: [Rd] Double to uint64_t on M1
Message-ID: <EE649952-4BB6-432A-B3CA-BD9B11DD9324@gmail.com>

Hi, 

I was trying to convert REALSXP to int64_t in C, then found that converting 2^63 is inconsistent across platforms:


On M1 ARM osx, 2^63 (double) bit converting to `int64_t` becomes 9223372036854775807
On x86_64 ubuntu server, 2^63 (double) bit converting to `int64_t` is -9223372036854775808

I was wondering if this is desired behavior to R?

Here's the code to replicate the results above.

print_bit <- Rcpp::cppFunction(r"(
SEXP print_bit(SEXP obj){

  int64_t tmp1 = *REAL0(obj);
  printf("%lld ", tmp1);

  return(R_NilValue);
}
)")

print_bit(2^63)

Thanks,
- Dipterix
	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Thu Aug 12 05:52:27 2021
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Thu, 12 Aug 2021 15:52:27 +1200
Subject: [Rd] Double to uint64_t on M1
In-Reply-To: <EE649952-4BB6-432A-B3CA-BD9B11DD9324@gmail.com>
References: <EE649952-4BB6-432A-B3CA-BD9B11DD9324@gmail.com>
Message-ID: <C582D4F5-6218-42CC-AC63-50CAB13D977E@R-project.org>


Dipterix,

this has nothing to do with R. 2^63 is too large to be represented as singed integer, so the behavior is undefined - to quote from the C99 specs (6.3.1.4):

"If the value of the integral part cannot be represented by the integer type, the behavior is undefined."

Your subject doesn't match your question as the uint64_t conversion is well-defined and the same on both platforms, but the conversion to int64_t in undefined.

Cheers,
Simon


> On 12/08/2021, at 10:50 AM, Dipterix Wang <dipterix.wang at gmail.com> wrote:
> 
> Hi, 
> 
> I was trying to convert REALSXP to int64_t in C, then found that converting 2^63 is inconsistent across platforms:
> 
> 
> On M1 ARM osx, 2^63 (double) bit converting to `int64_t` becomes 9223372036854775807
> On x86_64 ubuntu server, 2^63 (double) bit converting to `int64_t` is -9223372036854775808
> 
> I was wondering if this is desired behavior to R?
> 
> Here's the code to replicate the results above.
> 
> print_bit <- Rcpp::cppFunction(r"(
> SEXP print_bit(SEXP obj){
> 
>  int64_t tmp1 = *REAL0(obj);
>  printf("%lld ", tmp1);
> 
>  return(R_NilValue);
> }
> )")
> 
> print_bit(2^63)
> 
> Thanks,
> - Dipterix
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From d|pter|x@w@ng @end|ng |rom gm@||@com  Thu Aug 12 06:50:47 2021
From: d|pter|x@w@ng @end|ng |rom gm@||@com (Dipterix Wang)
Date: Thu, 12 Aug 2021 00:50:47 -0400
Subject: [Rd] Double to uint64_t on M1
In-Reply-To: <C582D4F5-6218-42CC-AC63-50CAB13D977E@R-project.org>
References: <EE649952-4BB6-432A-B3CA-BD9B11DD9324@gmail.com>
 <C582D4F5-6218-42CC-AC63-50CAB13D977E@R-project.org>
Message-ID: <FCD86C45-A75A-47FC-BAA6-ACBB4FD16892@gmail.com>

Thank you,

I guess I should convert double to uint64_t instead of int64_t...

The reason why I asked is because bit64 package `bit64::as.integer64(2^63)` produces different results on my machine vs. another server. This package converts double to int64_t directly. Looks like this is a bug in their package.

Thanks!

Best,

- Dipterix

> On Aug 11, 2021, at 11:52 PM, Simon Urbanek <simon.urbanek at R-project.org> wrote:
> 
> hing to do with R. 2^63 is too large to be represented as singed integer, so the behavior is undefined - to quote from the C99 specs (6.3.1.4):
> 
> "If the value of the integral part cannot be represented by the integer type, the behavior is undefined."
> 
> Your subject doesn't match your question as the uint64_t conversion is well-defined and the same on both platforms, but the conversion to int64_t in undefined


	[[alternative HTML version deleted]]


From tdhock5 @end|ng |rom gm@||@com  Thu Aug 12 06:58:33 2021
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Wed, 11 Aug 2021 21:58:33 -0700
Subject: [Rd] na.omit inconsistent with is.na on list
Message-ID: <CALK03d0vRmxNLzyU-s8O1Urg6yneYZeSKtdRizx5Z=ZZ57Fdcg@mail.gmail.com>

na.omit is documented as "na.omit returns the object with incomplete cases
removed." and "At present these will handle vectors," so I expected that
when it is used on a list, it should return the same thing as if we subset
via is.na; however I observed the following,

> L <- list(NULL, NA, 0)
> str(L[!is.na(L)])
List of 2
 $ : NULL
 $ : num 0
> str(na.omit(L))
List of 3
 $ : NULL
 $ : logi NA
 $ : num 0

Should na.omit be fixed so that it returns a result that is consistent with
is.na? I assume that is.na is the canonical definition of what should be
considered a missing value in R.

	[[alternative HTML version deleted]]


From tdhock5 @end|ng |rom gm@||@com  Thu Aug 12 07:16:06 2021
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Wed, 11 Aug 2021 22:16:06 -0700
Subject: [Rd] na.omit inconsistent with is.na on list
In-Reply-To: <CALK03d0vRmxNLzyU-s8O1Urg6yneYZeSKtdRizx5Z=ZZ57Fdcg@mail.gmail.com>
References: <CALK03d0vRmxNLzyU-s8O1Urg6yneYZeSKtdRizx5Z=ZZ57Fdcg@mail.gmail.com>
Message-ID: <CALK03d0pPSy5CL2AHZMtso5_7uXW5NfxZfC+mUsMm8yo8rOViA@mail.gmail.com>

Also, the na.omit method for data.frame with list column seems to be
inconsistent with is.na,

> L <- list(NULL, NA, 0)
> str(f <- data.frame(I(L)))
'data.frame': 3 obs. of  1 variable:
 $ L:List of 3
  ..$ : NULL
  ..$ : logi NA
  ..$ : num 0
  ..- attr(*, "class")= chr "AsIs"
> is.na(f)
         L
[1,] FALSE
[2,]  TRUE
[3,] FALSE
> na.omit(f)
   L
1
2 NA
3  0

On Wed, Aug 11, 2021 at 9:58 PM Toby Hocking <tdhock5 at gmail.com> wrote:

> na.omit is documented as "na.omit returns the object with incomplete cases
> removed." and "At present these will handle vectors," so I expected that
> when it is used on a list, it should return the same thing as if we subset
> via is.na; however I observed the following,
>
> > L <- list(NULL, NA, 0)
> > str(L[!is.na(L)])
> List of 2
>  $ : NULL
>  $ : num 0
> > str(na.omit(L))
> List of 3
>  $ : NULL
>  $ : logi NA
>  $ : num 0
>
> Should na.omit be fixed so that it returns a result that is consistent
> with is.na? I assume that is.na is the canonical definition of what
> should be considered a missing value in R.
>

	[[alternative HTML version deleted]]


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Thu Aug 12 09:57:28 2021
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Thu, 12 Aug 2021 08:57:28 +0100
Subject: [Rd] Double to uint64_t on M1
In-Reply-To: <C582D4F5-6218-42CC-AC63-50CAB13D977E@R-project.org>
References: <EE649952-4BB6-432A-B3CA-BD9B11DD9324@gmail.com>
 <C582D4F5-6218-42CC-AC63-50CAB13D977E@R-project.org>
Message-ID: <735e0e1e-4419-6bc2-2a02-6a3f683197b6@stats.ox.ac.uk>

On 12/08/2021 04:52, Simon Urbanek wrote:
> 
> Dipterix,
> 
> this has nothing to do with R. 2^63 is too large to be represented as singed integer, so the behavior is undefined - to quote from the C99 specs (6.3.1.4):
> 
> "If the value of the integral part cannot be represented by the integer type, the behavior is undefined."
> 
> Your subject doesn't match your question as the uint64_t conversion is well-defined and the same on both platforms, but the conversion to int64_t in undefined.

As I was writing a reply to say the same thing, a few more comments.

- the example is actually in C++, but also undefined there.

- R is more careful:
 > as.integer(2^31)
[1] NA
Warning message:
NAs introduced by coercion to integer range

- there is a sanitizer for this, on platforms including Linux and macOS 
(at least with clang, 
https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html#supported-platforms).

> 
> Cheers,
> Simon
> 
> 
>> On 12/08/2021, at 10:50 AM, Dipterix Wang <dipterix.wang at gmail.com> wrote:
>>
>> Hi,
>>
>> I was trying to convert REALSXP to int64_t in C, then found that converting 2^63 is inconsistent across platforms:
>>
>>
>> On M1 ARM osx, 2^63 (double) bit converting to `int64_t` becomes 9223372036854775807
>> On x86_64 ubuntu server, 2^63 (double) bit converting to `int64_t` is -9223372036854775808
>>
>> I was wondering if this is desired behavior to R?
>>
>> Here's the code to replicate the results above.
>>
>> print_bit <- Rcpp::cppFunction(r"(
>> SEXP print_bit(SEXP obj){
>>
>>   int64_t tmp1 = *REAL0(obj);
>>   printf("%lld ", tmp1);
>>
>>   return(R_NilValue);
>> }
>> )")
>>
>> print_bit(2^63)
>>
>> Thanks,
>> - Dipterix
>> 	[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From henr|k@bengt@@on @end|ng |rom gm@||@com  Thu Aug 12 10:22:05 2021
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Thu, 12 Aug 2021 10:22:05 +0200
Subject: [Rd] Force quitting a FORK cluster node on macOS and Solaris wreaks
 havoc
Message-ID: <CAFDcVCRbrue58KodpVHOzESkyTFgajRP514_m0q33bAy4WU=nA@mail.gmail.com>

The following smells like a bug in R to me, because it puts the main R
session into an unstable state.  Consider the following R script:

a <- 42
message("a=", a)
cl <- parallel::makeCluster(1L, type="FORK")
try(parallel::clusterEvalQ(cl, quit(save="no")))
message("parallel:::isChild()=", parallel:::isChild())
message("a=", a)
rm(a)

The purpose of this was to emulate what happens when an parallel
workers crashes.

Now, if you source() the above on macOS, you might(*) end up with:

> a <- 42
> message("a=", a)
a=42
> cl <- parallel::makeCluster(1L, type="FORK")
> try(parallel::clusterEvalQ(cl, quit(save="no")))
Error: Error in unserialize(node$con) : error reading from connection
> message("parallel:::isChild()=", parallel:::isChild())
parallel:::isChild()=FALSE
> message("a=", a)
a=42
> rm(a)
> try(parallel::clusterEvalQ(cl, quit(save="no")))
Error: Error in unserialize(node$con) : error reading from connection
> message("parallel:::isChild()=", parallel:::isChild())
parallel:::isChild()=FALSE
> message("a=", a)
Error: Error in message("a=", a) : object 'a' not found
Execution halted

Note how 'rm(a)' is supposed to be the last line of code to be
evaluated.  However, the force quitting of the FORK cluster node
appears to result in the main code being evaluated twice (in
parallel?).

(*) This does not happen on all macOS variants. For example, it works
fine on CRAN's 'r-release-macos-x86_64' but it does give the above
behavior on 'r-release-macos-arm64'.  I can reproduce it on GitHub
Actions (https://github.com/HenrikBengtsson/teeny/runs/3309235106?check_suite_focus=true#step:10:219)
but not on R-hub's 'macos-highsierra-release' and
'macos-highsierra-release-cran'.  I can also reproduce it on R-hub's
'solaris-x86-patched' and solaris-x86-patched-ods' machines.  However,
I still haven't found a Linux machine where this happens.

If one replaces quit(save="no") with tools::pskill(Sys.getpid()) or
parallel:::mcexit(0L), this behavior does not take place (at least not
on GitHub Actions and R-hub).

I don't have access to a macOS or a Solaris machine, so I cannot
investigate further myself. For example, could it be an issue with
quit(), or does is it possible to trigger by other means? And more
importantly, should this be fixed? Also, I'd be curious what happens
if you run the above in an interactive R session.

/Henrik


From Andre@G||||bert @end|ng |rom chu-rouen@|r  Thu Aug 12 11:51:47 2021
From: Andre@G||||bert @end|ng |rom chu-rouen@|r (GILLIBERT, Andre)
Date: Thu, 12 Aug 2021 09:51:47 +0000
Subject: [Rd] Problem in random number generation for Marsaglia-Multicarry +
 Kinderman-Ramage
Message-ID: <54745780b6c1421298e55e1e8c18d6ab@chu-rouen.fr>

Dear R developers,


In my opinion, I discovered a severe flaw that occur with the combination of the Marsaglia-Multicarry pseudo-random number generator associated to the Kinderman-Ramage algorithm to generate normally distributed numbers.


The sample program is very simple (tested on R-4.1.1 x86_64 on Windows 10):

set.seed(1, "Marsaglia-Multicarry", normal.kind="Kinderman-Ramage")
v=rnorm(1e7)
poisson.test(sum(v < (-4)))$conf.int # returns c(34.5, 62.5)
poisson.test(sum(v > (4)))$conf.int # returns c(334.2, 410.7)
pnorm(-4)*1e7 # returns 316.7


There should be approximatively 316 values less than -4 and 316 values greater than +4, bug there are far too few values less than -4.

Results are similar with other random seeds, and things are even more obvious with larger sample sizes.

The Kinderman-Ramage algorithm is fine when combined to Mersenne-Twister, and Marsaglia-Multicarry is fine when combined with the normal.kind="Inversion" algorithm, but the combination of Marsaglia-Multicarry and Kinderman-Ramage seems to have severe flaws.

R should at least warn for that combination !

What do you think? Should I file a bug report?

--
Sincerely
Andr? GILLIBERT

	[[alternative HTML version deleted]]


From Andre@G||||bert @end|ng |rom chu-rouen@|r  Thu Aug 12 12:26:44 2021
From: Andre@G||||bert @end|ng |rom chu-rouen@|r (GILLIBERT, Andre)
Date: Thu, 12 Aug 2021 10:26:44 +0000
Subject: [Rd] Problem in random number generation for Marsaglia-Multicarry +
 Ahrens-Dieter
Message-ID: <edcc1ed20f6a464ca0f49f77e5b8c225@chu-rouen.fr>

Dear R developers,

At the same time I discovered a flaw in Marsaglia-Multicarry + Kinderman-Ramage, I found another in Marsaglia-Multicarry + Ahrens-Dieter.
It is less obvious than for Kinderman-Ramage; so I created a new thread for this bug.

The following code shows the problem (tested on R 4.1.1 x86_64 for Windows 10):

== start of code sample ==
set.seed(1, "Marsaglia-Multicarry", normal.kind="Ahrens-Dieter")
v=rnorm(1e8)

q=qnorm(seq(0.01, 0.99, 0.01))
cv=cut(v, breaks=c(-Inf, q, +Inf))
observed=table(cv)
chisq.test(observed) # p < 2.2e-16
== end of code sample ==

The chisq.test returns a P-value < 2.2e-16 while it was expected to return a non-significant P-value.
The additionnal code below, shows severe irregularities in the distribution of quantiles:

== continuation of code sample ==
expected = chisq.test(observed)$expected
z = (observed - expected)/sqrt(expected)
mean (abs(z) > 6) # 58% of z-scores are greater than 6 while none should be
== end of code sample ==

The bug is specific to the combination Marsaglia-Multicarry + Ahrens-Dieter.
There is no problem with Marsaglia-Multicarry + Inversion or Mersenne-Twister + Ahrens-Dieter

I would expect at least a warning (or an error) from R for such a buggy combination.

--
Sincerely
Andr? GILLIBERT


	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Thu Aug 12 15:07:52 2021
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Thu, 12 Aug 2021 15:07:52 +0200
Subject: [Rd] 
 Problem in random number generation for Marsaglia-Multicarry +
 Kinderman-Ramage
In-Reply-To: <54745780b6c1421298e55e1e8c18d6ab@chu-rouen.fr>
References: <54745780b6c1421298e55e1e8c18d6ab@chu-rouen.fr>
Message-ID: <0EB03E15-B535-4D78-98D0-6A73E224235A@gmail.com>

With these matters, one has to be careful to distinguish between method error and implementation error. 

The reason for changing the RNG setup in R v. 1.7.0 was pretty much this kind of unfortunate interaction between M-M and K-R. There are even more egregious examples for the distribution of maxima of normal variables. Try e.g.

RNGversion("1.6.0") # Marsaglia-Multicarry, Kinderman-Ramage
 s <- replicate(1e6,max(rnorm(10)))
 plot(density(s))

(A further bug in K-R was fixed in 1.7.1, but that is tangential to this.)

A glimpse of the source of the problem is seen in the "microcorrelations" in this:
 
RNGkind("Mar");m <- matrix(runif(4e7),2)
 plot(m[1,],m[2,],xlim=c(0,1e-3),pch=".")
 m <- matrix(runif(4e7),2)
 points(m[1,],m[2,],pch=".")

These examples are from 2003, so the issue has been known for almost 2 decades. However, to the best of our knowledge, the M-M RNG is a faithful implementation of their method, so we have left the RNG in R's arsenal, in case someone needed it for some specific purpose. 

- pd

> On 12 Aug 2021, at 11:51 , GILLIBERT, Andre <Andre.Gillibert at chu-rouen.fr> wrote:
> 
> Dear R developers,
> 
> 
> In my opinion, I discovered a severe flaw that occur with the combination of the Marsaglia-Multicarry pseudo-random number generator associated to the Kinderman-Ramage algorithm to generate normally distributed numbers.
> 
> 
> The sample program is very simple (tested on R-4.1.1 x86_64 on Windows 10):
> 
> set.seed(1, "Marsaglia-Multicarry", normal.kind="Kinderman-Ramage")
> v=rnorm(1e7)
> poisson.test(sum(v < (-4)))$conf.int # returns c(34.5, 62.5)
> poisson.test(sum(v > (4)))$conf.int # returns c(334.2, 410.7)
> pnorm(-4)*1e7 # returns 316.7
> 
> 
> There should be approximatively 316 values less than -4 and 316 values greater than +4, bug there are far too few values less than -4.
> 
> Results are similar with other random seeds, and things are even more obvious with larger sample sizes.
> 
> The Kinderman-Ramage algorithm is fine when combined to Mersenne-Twister, and Marsaglia-Multicarry is fine when combined with the normal.kind="Inversion" algorithm, but the combination of Marsaglia-Multicarry and Kinderman-Ramage seems to have severe flaws.
> 
> R should at least warn for that combination !
> 
> What do you think? Should I file a bug report?
> 
> --
> Sincerely
> Andr? GILLIBERT
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From @tp @end|ng |rom p|@kor@k|@com  Thu Aug 12 21:19:44 2021
From: @tp @end|ng |rom p|@kor@k|@com (Andrew Piskorski)
Date: Thu, 12 Aug 2021 15:19:44 -0400
Subject: [Rd] Rprofile.site function or variable definitions break with R 4.1
Message-ID: <YRV0UJKvLRRuqrNr@piskorski.com>

With R 4.1, it seems you can no longer do much in your "Rprofile.site"
file.  Attempting to define any functions or set any variables there
gives errors like these:

  Error: cannot add binding of 'my_function_name' to the base environment
  Error: cannot add binding of 'my_variable_name' to the base environment

Presumably that's because of this change in R 4.1.0:

  https://cran.r-project.org/doc/manuals/r-patched/NEWS.html
  CHANGES IN R 4.1.0
  The base environment and its namespace are now locked (so one can no
  longer add bindings to these or remove from these).

Ok, but what's the recommended way to actually USE Rprofile.site now?
Should I move all my local configuration into a special package, and
do nothing in Rprofile.site except require() that package?

Thanks for your help and advice!

-- 
Andrew Piskorski <atp at piskorski.com>


From edd @end|ng |rom deb|@n@org  Thu Aug 12 21:40:11 2021
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Thu, 12 Aug 2021 14:40:11 -0500
Subject: [Rd] 
 Rprofile.site function or variable definitions break with R 4.1
In-Reply-To: <YRV0UJKvLRRuqrNr@piskorski.com>
References: <YRV0UJKvLRRuqrNr@piskorski.com>
Message-ID: <24853.31003.846696.955115@rob.eddelbuettel.com>


On 12 August 2021 at 15:19, Andrew Piskorski wrote:
| Ok, but what's the recommended way to actually USE Rprofile.site now?
| Should I move all my local configuration into a special package, and
| do nothing in Rprofile.site except require() that package?

Exactly as before. I set my mirror as I have before and nothing changes

  ## We set the cloud mirror, which is 'network-close' to everybody, as default
  local({
      r <- getOption("repos")
      r["CRAN"] <- "https://cloud.r-project.org"
      options(repos = r)
  })

I cannot help but think that you are shooting the messenger (here
Rprofile.site) for an actual behaviour change in R itself ?

Dirk

-- 
https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From g@bembecker @end|ng |rom gm@||@com  Thu Aug 12 22:09:37 2021
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Thu, 12 Aug 2021 13:09:37 -0700
Subject: [Rd] 
 Rprofile.site function or variable definitions break with R 4.1
In-Reply-To: <24853.31003.846696.955115@rob.eddelbuettel.com>
References: <YRV0UJKvLRRuqrNr@piskorski.com>
 <24853.31003.846696.955115@rob.eddelbuettel.com>
Message-ID: <CAD4oTHEHY4BXDjHdyKJ=E8FPLwLiL=UnPdmQw4bkVE4p7DKdQg@mail.gmail.com>

Hi Andrew and Dirk,

The other question to think about is what was your Rprofile.site doing
before. We can infer from this error that apparently it was defining things
*in the namespace for the base package*. How often is that actually what
you wanted it to do/a good idea?

I haven't played around with it, as I don't use Rprofile.site to actually
create/assign object only, like Dirk, set options or option-adjacent things
(such as .libPaths), but I imagine you could get it to put things into the
global environment or attach a special "local config" entry to the search
path an put things there, if you so desired.

Best,
~G

On Thu, Aug 12, 2021 at 12:41 PM Dirk Eddelbuettel <edd at debian.org> wrote:

>
> On 12 August 2021 at 15:19, Andrew Piskorski wrote:
> | Ok, but what's the recommended way to actually USE Rprofile.site now?
> | Should I move all my local configuration into a special package, and
> | do nothing in Rprofile.site except require() that package?
>
> Exactly as before. I set my mirror as I have before and nothing changes
>
>   ## We set the cloud mirror, which is 'network-close' to everybody, as
> default
>   local({
>       r <- getOption("repos")
>       r["CRAN"] <- "https://cloud.r-project.org"
>       options(repos = r)
>   })
>
> I cannot help but think that you are shooting the messenger (here
> Rprofile.site) for an actual behaviour change in R itself ?
>
> Dirk
>
> --
> https://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Thu Aug 12 22:18:58 2021
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Thu, 12 Aug 2021 13:18:58 -0700
Subject: [Rd] na.omit inconsistent with is.na on list
In-Reply-To: <CALK03d0pPSy5CL2AHZMtso5_7uXW5NfxZfC+mUsMm8yo8rOViA@mail.gmail.com>
References: <CALK03d0vRmxNLzyU-s8O1Urg6yneYZeSKtdRizx5Z=ZZ57Fdcg@mail.gmail.com>
 <CALK03d0pPSy5CL2AHZMtso5_7uXW5NfxZfC+mUsMm8yo8rOViA@mail.gmail.com>
Message-ID: <CAD4oTHGni5YDKES5yKtzNPqGDV3vrP+7YNFCAJ_Y0s-Cw0xeUQ@mail.gmail.com>

Hi Toby,

This definitely appears intentional, the first  expression of
stats:::na.omit.default is

   if (!is.atomic(object))

        return(object)


So it is explicitly just returning the object in non-atomic cases, which
includes lists. I was not involved in this decision (obviously) but my
guess is that it is due to the fact that what constitutes an observation
"being complete" in unclear in the list case. What should

na.omit(list(5, NA, c(NA, 5)))

return? Just the first element, or the first and the last? It seems, at
least to me, unclear. A small change to the documentation to to add "atomic
(in the sense of is.atomic returning \code{TRUE})" in front of "vectors"
or similar  where what types of objects are supported seems justified,
though, imho, as the current documentation is either ambiguous or
technically incorrect, depending on what we take "vector" to mean.

Best,
~G

On Wed, Aug 11, 2021 at 10:16 PM Toby Hocking <tdhock5 at gmail.com> wrote:

> Also, the na.omit method for data.frame with list column seems to be
> inconsistent with is.na,
>
> > L <- list(NULL, NA, 0)
> > str(f <- data.frame(I(L)))
> 'data.frame': 3 obs. of  1 variable:
>  $ L:List of 3
>   ..$ : NULL
>   ..$ : logi NA
>   ..$ : num 0
>   ..- attr(*, "class")= chr "AsIs"
> > is.na(f)
>          L
> [1,] FALSE
> [2,]  TRUE
> [3,] FALSE
> > na.omit(f)
>    L
> 1
> 2 NA
> 3  0
>
> On Wed, Aug 11, 2021 at 9:58 PM Toby Hocking <tdhock5 at gmail.com> wrote:
>
> > na.omit is documented as "na.omit returns the object with incomplete
> cases
> > removed." and "At present these will handle vectors," so I expected that
> > when it is used on a list, it should return the same thing as if we
> subset
> > via is.na; however I observed the following,
> >
> > > L <- list(NULL, NA, 0)
> > > str(L[!is.na(L)])
> > List of 2
> >  $ : NULL
> >  $ : num 0
> > > str(na.omit(L))
> > List of 3
> >  $ : NULL
> >  $ : logi NA
> >  $ : num 0
> >
> > Should na.omit be fixed so that it returns a result that is consistent
> > with is.na? I assume that is.na is the canonical definition of what
> > should be considered a missing value in R.
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Fri Aug 13 00:58:01 2021
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 13 Aug 2021 10:58:01 +1200
Subject: [Rd] 
 Force quitting a FORK cluster node on macOS and Solaris wreaks havoc
In-Reply-To: <CAFDcVCRbrue58KodpVHOzESkyTFgajRP514_m0q33bAy4WU=nA@mail.gmail.com>
References: <CAFDcVCRbrue58KodpVHOzESkyTFgajRP514_m0q33bAy4WU=nA@mail.gmail.com>
Message-ID: <4CF34F70-DCAC-4694-A8CF-38E7E0B43272@R-project.org>


Henrik,

I'm not quite sure I understand the report to be honest.

Just a quick comment here - using quit() in a forked child is not allowed, because the R clean-up is only intended for the master as it will be blowing away the master's state, connections, working directory, running master's exit handlers etc. That's why the children have to use either abort or mcexit() to terminate - which is what mcparallel() does. If you use q() a lot of things go wrong no matter the platform - e.g. try using ? in the master session after sourcing your code.

Cheers,
Simon


> On 12/08/2021, at 8:22 PM, Henrik Bengtsson <henrik.bengtsson at gmail.com> wrote:
> 
> The following smells like a bug in R to me, because it puts the main R
> session into an unstable state.  Consider the following R script:
> 
> a <- 42
> message("a=", a)
> cl <- parallel::makeCluster(1L, type="FORK")
> try(parallel::clusterEvalQ(cl, quit(save="no")))
> message("parallel:::isChild()=", parallel:::isChild())
> message("a=", a)
> rm(a)
> 
> The purpose of this was to emulate what happens when an parallel
> workers crashes.
> 
> Now, if you source() the above on macOS, you might(*) end up with:
> 
>> a <- 42
>> message("a=", a)
> a=42
>> cl <- parallel::makeCluster(1L, type="FORK")
>> try(parallel::clusterEvalQ(cl, quit(save="no")))
> Error: Error in unserialize(node$con) : error reading from connection
>> message("parallel:::isChild()=", parallel:::isChild())
> parallel:::isChild()=FALSE
>> message("a=", a)
> a=42
>> rm(a)
>> try(parallel::clusterEvalQ(cl, quit(save="no")))
> Error: Error in unserialize(node$con) : error reading from connection
>> message("parallel:::isChild()=", parallel:::isChild())
> parallel:::isChild()=FALSE
>> message("a=", a)
> Error: Error in message("a=", a) : object 'a' not found
> Execution halted
> 
> Note how 'rm(a)' is supposed to be the last line of code to be
> evaluated.  However, the force quitting of the FORK cluster node
> appears to result in the main code being evaluated twice (in
> parallel?).
> 
> (*) This does not happen on all macOS variants. For example, it works
> fine on CRAN's 'r-release-macos-x86_64' but it does give the above
> behavior on 'r-release-macos-arm64'.  I can reproduce it on GitHub
> Actions (https://github.com/HenrikBengtsson/teeny/runs/3309235106?check_suite_focus=true#step:10:219)
> but not on R-hub's 'macos-highsierra-release' and
> 'macos-highsierra-release-cran'.  I can also reproduce it on R-hub's
> 'solaris-x86-patched' and solaris-x86-patched-ods' machines.  However,
> I still haven't found a Linux machine where this happens.
> 
> If one replaces quit(save="no") with tools::pskill(Sys.getpid()) or
> parallel:::mcexit(0L), this behavior does not take place (at least not
> on GitHub Actions and R-hub).
> 
> I don't have access to a macOS or a Solaris machine, so I cannot
> investigate further myself. For example, could it be an issue with
> quit(), or does is it possible to trigger by other means? And more
> importantly, should this be fixed? Also, I'd be curious what happens
> if you run the above in an interactive R session.
> 
> /Henrik
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From tdhock5 @end|ng |rom gm@||@com  Fri Aug 13 01:30:34 2021
From: tdhock5 @end|ng |rom gm@||@com (Toby Hocking)
Date: Thu, 12 Aug 2021 16:30:34 -0700
Subject: [Rd] na.omit inconsistent with is.na on list
In-Reply-To: <CAD4oTHGni5YDKES5yKtzNPqGDV3vrP+7YNFCAJ_Y0s-Cw0xeUQ@mail.gmail.com>
References: <CALK03d0vRmxNLzyU-s8O1Urg6yneYZeSKtdRizx5Z=ZZ57Fdcg@mail.gmail.com>
 <CALK03d0pPSy5CL2AHZMtso5_7uXW5NfxZfC+mUsMm8yo8rOViA@mail.gmail.com>
 <CAD4oTHGni5YDKES5yKtzNPqGDV3vrP+7YNFCAJ_Y0s-Cw0xeUQ@mail.gmail.com>
Message-ID: <CALK03d1swkOx_iYgpMK3Lb-r5MyC9WPzMviJkVDv+EPwEgE5VA@mail.gmail.com>

Hi Gabe thanks for the feedback.

On Thu, Aug 12, 2021 at 1:19 PM Gabriel Becker <gabembecker at gmail.com>
wrote:

> Hi Toby,
>
> This definitely appears intentional, the first  expression of
> stats:::na.omit.default is
>
>    if (!is.atomic(object))
>
>         return(object)
>
> Based on this code it does seem that the documentation could be clarified
to say atomic vectors.

>
> So it is explicitly just returning the object in non-atomic cases, which
> includes lists. I was not involved in this decision (obviously) but my
> guess is that it is due to the fact that what constitutes an observation
> "being complete" in unclear in the list case. What should
>
> na.omit(list(5, NA, c(NA, 5)))
>
> return? Just the first element, or the first and the last? It seems, at
> least to me, unclear.
>
I agree in principle/theory that it is unclear, but in practice is.na has
an un-ambiguous answer (if list element is scalar NA then it is considered
missing, otherwise not).

> A small change to the documentation to to add "atomic (in the sense of
> is.atomic returning \code{TRUE})" in front of "vectors"  or similar  where
> what types of objects are supported seems justified, though, imho, as the
> current documentation is either ambiguous or technically incorrect,
> depending on what we take "vector" to mean.
>
> Best,
> ~G
>
> On Wed, Aug 11, 2021 at 10:16 PM Toby Hocking <tdhock5 at gmail.com> wrote:
>
>> Also, the na.omit method for data.frame with list column seems to be
>> inconsistent with is.na,
>>
>> > L <- list(NULL, NA, 0)
>> > str(f <- data.frame(I(L)))
>> 'data.frame': 3 obs. of  1 variable:
>>  $ L:List of 3
>>   ..$ : NULL
>>   ..$ : logi NA
>>   ..$ : num 0
>>   ..- attr(*, "class")= chr "AsIs"
>> > is.na(f)
>>          L
>> [1,] FALSE
>> [2,]  TRUE
>> [3,] FALSE
>> > na.omit(f)
>>    L
>> 1
>> 2 NA
>> 3  0
>>
>> On Wed, Aug 11, 2021 at 9:58 PM Toby Hocking <tdhock5 at gmail.com> wrote:
>>
>> > na.omit is documented as "na.omit returns the object with incomplete
>> cases
>> > removed." and "At present these will handle vectors," so I expected that
>> > when it is used on a list, it should return the same thing as if we
>> subset
>> > via is.na; however I observed the following,
>> >
>> > > L <- list(NULL, NA, 0)
>> > > str(L[!is.na(L)])
>> > List of 2
>> >  $ : NULL
>> >  $ : num 0
>> > > str(na.omit(L))
>> > List of 3
>> >  $ : NULL
>> >  $ : logi NA
>> >  $ : num 0
>> >
>> > Should na.omit be fixed so that it returns a result that is consistent
>> > with is.na? I assume that is.na is the canonical definition of what
>> > should be considered a missing value in R.
>> >
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>

	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Fri Aug 13 08:46:10 2021
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Thu, 12 Aug 2021 23:46:10 -0700
Subject: [Rd] na.omit inconsistent with is.na on list
In-Reply-To: <CALK03d1swkOx_iYgpMK3Lb-r5MyC9WPzMviJkVDv+EPwEgE5VA@mail.gmail.com>
References: <CALK03d0vRmxNLzyU-s8O1Urg6yneYZeSKtdRizx5Z=ZZ57Fdcg@mail.gmail.com>
 <CALK03d0pPSy5CL2AHZMtso5_7uXW5NfxZfC+mUsMm8yo8rOViA@mail.gmail.com>
 <CAD4oTHGni5YDKES5yKtzNPqGDV3vrP+7YNFCAJ_Y0s-Cw0xeUQ@mail.gmail.com>
 <CALK03d1swkOx_iYgpMK3Lb-r5MyC9WPzMviJkVDv+EPwEgE5VA@mail.gmail.com>
Message-ID: <CAD4oTHHrUhrnQJ-423JK1bT55QrF_kbg_3mP1xQVwpJJ73Q5aw@mail.gmail.com>

On Thu, Aug 12, 2021 at 4:30 PM Toby Hocking <tdhock5 at gmail.com> wrote:

> Hi Gabe thanks for the feedback.
>
> On Thu, Aug 12, 2021 at 1:19 PM Gabriel Becker <gabembecker at gmail.com>
> wrote:
>
>> Hi Toby,
>>
>> This definitely appears intentional, the first  expression of
>> stats:::na.omit.default is
>>
>>    if (!is.atomic(object))
>>
>>         return(object)
>>
>> Based on this code it does seem that the documentation could be clarified
> to say atomic vectors.
>
>>
>> So it is explicitly just returning the object in non-atomic cases, which
>> includes lists. I was not involved in this decision (obviously) but my
>> guess is that it is due to the fact that what constitutes an observation
>> "being complete" in unclear in the list case. What should
>>
>> na.omit(list(5, NA, c(NA, 5)))
>>
>> return? Just the first element, or the first and the last? It seems, at
>> least to me, unclear.
>>
> I agree in principle/theory that it is unclear, but in practice is.na has
> an un-ambiguous answer (if list element is scalar NA then it is considered
> missing, otherwise not).
>

Well, yes it's unambiguous, but I would argue less likely than the other
option to be correct. Remember what na.omit is supposed to do: "remove
observations which are not complete".

Now for data.frames, this means it removes any row (i.e. observation,
despite the internal structure) where *any* column contains an NA. The most
analogous interpretation of na.omit on a list, in the well behaved (ie list
of atomic vectors) case, I think, is that we consider it a ragged
collection of "observations", in which case  x[is.na(x)] with x a list
would do the wrong thing because it is not checking these "observations"
for completeness.

Perhaps others disagree with me about that, and anyway, this only works
when you can check the elements of the list for "completeness" at all, the
list can have anything for elements, and then checking for completeness
becomes impossible...

As is, I do also wonder if a warning should be thrown letting the user know
that their call isn't doing ANY of the possible things it could mean...

Best,
~G


> A small change to the documentation to to add "atomic (in the sense of
>> is.atomic returning \code{TRUE})" in front of "vectors"  or similar  where
>> what types of objects are supported seems justified, though, imho, as the
>> current documentation is either ambiguous or technically incorrect,
>> depending on what we take "vector" to mean.
>>
>> Best,
>> ~G
>>
>> On Wed, Aug 11, 2021 at 10:16 PM Toby Hocking <tdhock5 at gmail.com> wrote:
>>
>>> Also, the na.omit method for data.frame with list column seems to be
>>> inconsistent with is.na,
>>>
>>> > L <- list(NULL, NA, 0)
>>> > str(f <- data.frame(I(L)))
>>> 'data.frame': 3 obs. of  1 variable:
>>>  $ L:List of 3
>>>   ..$ : NULL
>>>   ..$ : logi NA
>>>   ..$ : num 0
>>>   ..- attr(*, "class")= chr "AsIs"
>>> > is.na(f)
>>>          L
>>> [1,] FALSE
>>> [2,]  TRUE
>>> [3,] FALSE
>>> > na.omit(f)
>>>    L
>>> 1
>>> 2 NA
>>> 3  0
>>>
>>> On Wed, Aug 11, 2021 at 9:58 PM Toby Hocking <tdhock5 at gmail.com> wrote:
>>>
>>> > na.omit is documented as "na.omit returns the object with incomplete
>>> cases
>>> > removed." and "At present these will handle vectors," so I expected
>>> that
>>> > when it is used on a list, it should return the same thing as if we
>>> subset
>>> > via is.na; however I observed the following,
>>> >
>>> > > L <- list(NULL, NA, 0)
>>> > > str(L[!is.na(L)])
>>> > List of 2
>>> >  $ : NULL
>>> >  $ : num 0
>>> > > str(na.omit(L))
>>> > List of 3
>>> >  $ : NULL
>>> >  $ : logi NA
>>> >  $ : num 0
>>> >
>>> > Should na.omit be fixed so that it returns a result that is consistent
>>> > with is.na? I assume that is.na is the canonical definition of what
>>> > should be considered a missing value in R.
>>> >
>>>
>>>         [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>

	[[alternative HTML version deleted]]


From |uc@r @end|ng |rom |edor@project@org  Fri Aug 13 09:26:48 2021
From: |uc@r @end|ng |rom |edor@project@org (=?UTF-8?Q?I=C3=B1aki_Ucar?=)
Date: Fri, 13 Aug 2021 09:26:48 +0200
Subject: [Rd] na.omit inconsistent with is.na on list
In-Reply-To: <CAD4oTHGni5YDKES5yKtzNPqGDV3vrP+7YNFCAJ_Y0s-Cw0xeUQ@mail.gmail.com>
References: <CALK03d0vRmxNLzyU-s8O1Urg6yneYZeSKtdRizx5Z=ZZ57Fdcg@mail.gmail.com>
 <CALK03d0pPSy5CL2AHZMtso5_7uXW5NfxZfC+mUsMm8yo8rOViA@mail.gmail.com>
 <CAD4oTHGni5YDKES5yKtzNPqGDV3vrP+7YNFCAJ_Y0s-Cw0xeUQ@mail.gmail.com>
Message-ID: <CALEXWq1hQMpf1Cf9NEbEC6eAPsw+4-Uqka7ym5Dxc2PKRqfR9A@mail.gmail.com>

On Thu, 12 Aug 2021 at 22:20, Gabriel Becker <gabembecker at gmail.com> wrote:
>
> Hi Toby,
>
> This definitely appears intentional, the first  expression of
> stats:::na.omit.default is
>
>    if (!is.atomic(object))
>
>         return(object)

I don't follow your point. This only means that the *default* method
is not intended for non-atomic cases, but it doesn't mean it shouldn't
exist a method for lists.

> So it is explicitly just returning the object in non-atomic cases, which
> includes lists. I was not involved in this decision (obviously) but my
> guess is that it is due to the fact that what constitutes an observation
> "being complete" in unclear in the list case. What should
>
> na.omit(list(5, NA, c(NA, 5)))
>
> return? Just the first element, or the first and the last? It seems, at
> least to me, unclear. A small change to the documentation to to add "atomic

> is.na(list(5, NA, c(NA, 5)))
[1] FALSE  TRUE FALSE

Following Toby's argument, it's clear to me: the first and the last.

I?aki

> (in the sense of is.atomic returning \code{TRUE})" in front of "vectors"
> or similar  where what types of objects are supported seems justified,
> though, imho, as the current documentation is either ambiguous or
> technically incorrect, depending on what we take "vector" to mean.
>
> Best,
> ~G
>
> On Wed, Aug 11, 2021 at 10:16 PM Toby Hocking <tdhock5 at gmail.com> wrote:
>
> > Also, the na.omit method for data.frame with list column seems to be
> > inconsistent with is.na,
> >
> > > L <- list(NULL, NA, 0)
> > > str(f <- data.frame(I(L)))
> > 'data.frame': 3 obs. of  1 variable:
> >  $ L:List of 3
> >   ..$ : NULL
> >   ..$ : logi NA
> >   ..$ : num 0
> >   ..- attr(*, "class")= chr "AsIs"
> > > is.na(f)
> >          L
> > [1,] FALSE
> > [2,]  TRUE
> > [3,] FALSE
> > > na.omit(f)
> >    L
> > 1
> > 2 NA
> > 3  0
> >
> > On Wed, Aug 11, 2021 at 9:58 PM Toby Hocking <tdhock5 at gmail.com> wrote:
> >
> > > na.omit is documented as "na.omit returns the object with incomplete
> > cases
> > > removed." and "At present these will handle vectors," so I expected that
> > > when it is used on a list, it should return the same thing as if we
> > subset
> > > via is.na; however I observed the following,
> > >
> > > > L <- list(NULL, NA, 0)
> > > > str(L[!is.na(L)])
> > > List of 2
> > >  $ : NULL
> > >  $ : num 0
> > > > str(na.omit(L))
> > > List of 3
> > >  $ : NULL
> > >  $ : logi NA
> > >  $ : num 0
> > >
> > > Should na.omit be fixed so that it returns a result that is consistent
> > > with is.na? I assume that is.na is the canonical definition of what
> > > should be considered a missing value in R.
> > >
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel



-- 
I?aki ?car


From hugh@p@r@on@ge @end|ng |rom gm@||@com  Fri Aug 13 10:09:43 2021
From: hugh@p@r@on@ge @end|ng |rom gm@||@com (Hugh Parsonage)
Date: Fri, 13 Aug 2021 18:09:43 +1000
Subject: [Rd] na.omit inconsistent with is.na on list
In-Reply-To: <CALEXWq1hQMpf1Cf9NEbEC6eAPsw+4-Uqka7ym5Dxc2PKRqfR9A@mail.gmail.com>
References: <CALK03d0vRmxNLzyU-s8O1Urg6yneYZeSKtdRizx5Z=ZZ57Fdcg@mail.gmail.com>
 <CALK03d0pPSy5CL2AHZMtso5_7uXW5NfxZfC+mUsMm8yo8rOViA@mail.gmail.com>
 <CAD4oTHGni5YDKES5yKtzNPqGDV3vrP+7YNFCAJ_Y0s-Cw0xeUQ@mail.gmail.com>
 <CALEXWq1hQMpf1Cf9NEbEC6eAPsw+4-Uqka7ym5Dxc2PKRqfR9A@mail.gmail.com>
Message-ID: <CAJmOi+OEVLufPHwe1y8=1jb_Btmh=0m2TkvTZ6wkkwKGcbGsSw@mail.gmail.com>

The data.frame method deliberately skips non-atomic columns before
invoking is.na(x) so I think it is fair to assume this behaviour is
intentional and assumed.

Not so clear to me that there is a sensible answer for list columns.
(List columns seem to collide with the expectation that in each
variable every observation will be of the same type)

Consider your list L as

L <- list(NULL, NA, c(NA, NA))

Seems like every observation could have a claim to be 'missing' here.
Concretely, if a data.frame had a list column representing the lat-lon
of an observation, we might only be able to represent missing values
like c(NA, NA).

On Fri, 13 Aug 2021 at 17:27, I?aki Ucar <iucar at fedoraproject.org> wrote:
>
> On Thu, 12 Aug 2021 at 22:20, Gabriel Becker <gabembecker at gmail.com> wrote:
> >
> > Hi Toby,
> >
> > This definitely appears intentional, the first  expression of
> > stats:::na.omit.default is
> >
> >    if (!is.atomic(object))
> >
> >         return(object)
>
> I don't follow your point. This only means that the *default* method
> is not intended for non-atomic cases, but it doesn't mean it shouldn't
> exist a method for lists.
>
> > So it is explicitly just returning the object in non-atomic cases, which
> > includes lists. I was not involved in this decision (obviously) but my
> > guess is that it is due to the fact that what constitutes an observation
> > "being complete" in unclear in the list case. What should
> >
> > na.omit(list(5, NA, c(NA, 5)))
> >
> > return? Just the first element, or the first and the last? It seems, at
> > least to me, unclear. A small change to the documentation to to add "atomic
>
> > is.na(list(5, NA, c(NA, 5)))
> [1] FALSE  TRUE FALSE
>
> Following Toby's argument, it's clear to me: the first and the last.
>
> I?aki
>
> > (in the sense of is.atomic returning \code{TRUE})" in front of "vectors"
> > or similar  where what types of objects are supported seems justified,
> > though, imho, as the current documentation is either ambiguous or
> > technically incorrect, depending on what we take "vector" to mean.
> >
> > Best,
> > ~G
> >
> > On Wed, Aug 11, 2021 at 10:16 PM Toby Hocking <tdhock5 at gmail.com> wrote:
> >
> > > Also, the na.omit method for data.frame with list column seems to be
> > > inconsistent with is.na,
> > >
> > > > L <- list(NULL, NA, 0)
> > > > str(f <- data.frame(I(L)))
> > > 'data.frame': 3 obs. of  1 variable:
> > >  $ L:List of 3
> > >   ..$ : NULL
> > >   ..$ : logi NA
> > >   ..$ : num 0
> > >   ..- attr(*, "class")= chr "AsIs"
> > > > is.na(f)
> > >          L
> > > [1,] FALSE
> > > [2,]  TRUE
> > > [3,] FALSE
> > > > na.omit(f)
> > >    L
> > > 1
> > > 2 NA
> > > 3  0
> > >
> > > On Wed, Aug 11, 2021 at 9:58 PM Toby Hocking <tdhock5 at gmail.com> wrote:
> > >
> > > > na.omit is documented as "na.omit returns the object with incomplete
> > > cases
> > > > removed." and "At present these will handle vectors," so I expected that
> > > > when it is used on a list, it should return the same thing as if we
> > > subset
> > > > via is.na; however I observed the following,
> > > >
> > > > > L <- list(NULL, NA, 0)
> > > > > str(L[!is.na(L)])
> > > > List of 2
> > > >  $ : NULL
> > > >  $ : num 0
> > > > > str(na.omit(L))
> > > > List of 3
> > > >  $ : NULL
> > > >  $ : logi NA
> > > >  $ : num 0
> > > >
> > > > Should na.omit be fixed so that it returns a result that is consistent
> > > > with is.na? I assume that is.na is the canonical definition of what
> > > > should be considered a missing value in R.
> > > >
> > >
> > >         [[alternative HTML version deleted]]
> > >
> > > ______________________________________________
> > > R-devel at r-project.org mailing list
> > > https://stat.ethz.ch/mailman/listinfo/r-devel
> > >
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>
>
> --
> I?aki ?car
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From d@tr7320 @end|ng |rom un|@@ydney@edu@@u  Fri Aug 13 11:00:05 2021
From: d@tr7320 @end|ng |rom un|@@ydney@edu@@u (Dario Strbenac)
Date: Fri, 13 Aug 2021 09:00:05 +0000
Subject: [Rd] svd For Large Matrix
Message-ID: <SYBPR01MB4761CA7FD01EB93E4CF8511ACDFA9@SYBPR01MB4761.ausprd01.prod.outlook.com>

Good day,

I have a real scenario involving 45 million biological cells (samples) and 60 proteins (variables) which leads to a segmentation fault for svd. I thought this might be a good example of why it might benefit from a long vector upgrade.

test <- matrix(rnorm(45000000*60), ncol = 60)
testSVD <- svd(test)

 *** caught segfault ***
address 0x7fe93514d618, cause 'memory not mapped'

Traceback:
 1: La.svd(x, nu, nv)
 2: svd(test)

--------------------------------------
Dario Strbenac
University of Sydney
Camperdown NSW 2050
Australia


From iuke-tier@ey m@iii@g oii uiow@@edu  Fri Aug 13 16:58:26 2021
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Fri, 13 Aug 2021 09:58:26 -0500 (CDT)
Subject: [Rd] [External]  svd For Large Matrix
In-Reply-To: <SYBPR01MB4761CA7FD01EB93E4CF8511ACDFA9@SYBPR01MB4761.ausprd01.prod.outlook.com>
References: <SYBPR01MB4761CA7FD01EB93E4CF8511ACDFA9@SYBPR01MB4761.ausprd01.prod.outlook.com>
Message-ID: <alpine.DEB.2.22.394.2108130958100.3514@luke-Latitude-7480>

[copying the list]

svd() does support matrices with long vector data. Your example works
fine for me on a machine with enough memory with either the reference
BLAS/LAPACK or the BLAS/LAPACK used on Fedora 33 (flexiblas backed, I
believe, by a version of openBLAS). Take a look at sessionInfo() to
see what you are using and consider switching to another BLAS/LAPACK
if necessary. Running under gdb may help tracking down where the issue
is and reporting it for the BLAS/LAPACK you are using.

Best,

luke

On Fri, 13 Aug 2021, Dario Strbenac via R-devel wrote:

> Good day,
>
> I have a real scenario involving 45 million biological cells (samples) and 60 proteins (variables) which leads to a segmentation fault for svd. I thought this might be a good example of why it might benefit from a long vector upgrade.
>
> test <- matrix(rnorm(45000000*60), ncol = 60)
> testSVD <- svd(test)
>
> *** caught segfault ***
> address 0x7fe93514d618, cause 'memory not mapped'
>
> Traceback:
> 1: La.svd(x, nu, nv)
> 2: svd(test)
>
> --------------------------------------
> Dario Strbenac
> University of Sydney
> Camperdown NSW 2050
> Australia
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Fri Aug 13 17:49:14 2021
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Fri, 13 Aug 2021 16:49:14 +0100
Subject: [Rd] [External] svd For Large Matrix
In-Reply-To: <alpine.DEB.2.22.394.2108130958100.3514@luke-Latitude-7480>
References: <SYBPR01MB4761CA7FD01EB93E4CF8511ACDFA9@SYBPR01MB4761.ausprd01.prod.outlook.com>
 <alpine.DEB.2.22.394.2108130958100.3514@luke-Latitude-7480>
Message-ID: <7fdf2173-a187-3ac7-c726-5e2162199e13@stats.ox.ac.uk>

On 13/08/2021 15:58, luke-tierney at uiowa.edu wrote:
> [copying the list]
> 
> svd() does support matrices with long vector data. Your example works
> fine for me on a machine with enough memory with either the reference
> BLAS/LAPACK or the BLAS/LAPACK used on Fedora 33 (flexiblas backed, I
> believe, by a version of openBLAS). Take a look at sessionInfo() to
> see what you are using and consider switching to another BLAS/LAPACK
> if necessary. Running under gdb may help tracking down where the issue
> is and reporting it for the BLAS/LAPACK you are using.

See also 
https://cran.r-project.org/doc/manuals/r-devel/R-ints.html#Large-matrices which 
(to nuance Prof Tierney's comment) mentions that svd on long-vector 
*complex* data has been known to segfault (with the reference BLAS/Lapack).

My guess was that this was an out-of-memory condition not handled 
elegantly by the OS.  (There are many reasons why the posting guide asks 
for the output of sessionInfo().)

We do not have the statistical context but it seems unlikely that anyone 
is interested in each of the 45m samples, and for information on the 
proteins a quite small sample of cells would suffice.  And that not all 
45m left singular values are required (most likely none are, in which 
case the underlying Lapack routine can use a more efficient calculation).

> 
> Best,
> 
> luke
> 
> On Fri, 13 Aug 2021, Dario Strbenac via R-devel wrote:
> 
>> Good day,
>>
>> I have a real scenario involving 45 million biological cells (samples) 
>> and 60 proteins (variables) which leads to a segmentation fault for 
>> svd. I thought this might be a good example of why it might benefit 
>> from a long vector upgrade.
>>
>> test <- matrix(rnorm(45000000*60), ncol = 60)
>> testSVD <- svd(test)
>>
>> *** caught segfault ***
>> address 0x7fe93514d618, cause 'memory not mapped'
>>
>> Traceback:
>> 1: La.svd(x, nu, nv)
>> 2: svd(test)



-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From @ndre @end|ng |rom g||||bert@|r  Fri Aug 13 13:26:43 2021
From: @ndre @end|ng |rom g||||bert@|r (=?UTF-8?Q?Andr=c3=a9_GILLIBERT?=)
Date: Fri, 13 Aug 2021 13:26:43 +0200
Subject: [Rd] ,
 Problem in random number generation for Marsaglia-Multicarry +,
 Kinderman-Ramage
In-Reply-To: <0EB03E15-B535-4D78-98D0-6A73E224235A@gmail.com>
References: <54745780b6c1421298e55e1e8c18d6ab@chu-rouen.fr>
 <0EB03E15-B535-4D78-98D0-6A73E224235A@gmail.com>
Message-ID: <50bb3316-7510-d301-abf6-4aa88c4182e8@gillibert.fr>

Thank you.

It looks like the M-M generator is deeply flawed, although R 
implementation seems to be faithful.

I can understand that R keeps this generator for historical reasons.

However, R should at least warn that this generator is buggy and should 
not be used!

That could be as simple as a Warning message generated by set.seed().


-- 

Sincerely

Andr? GILLIBERT


 > With these matters, one has to be careful to distinguish between 
method error and implementation error.
 > The reason for changing the RNG setup in R v. 1.7.0 was pretty much 
this kind of unfortunate interaction between M-M and K-R. There are even 
more egregious examples for the distribution of maxima of normal 
variables. Try e.g.
 >
 > RNGversion("1.6.0") # Marsaglia-Multicarry, Kinderman-Ramage
 >? s <- replicate(1e6,max(rnorm(10)))
 >? plot(density(s))
 >
 > (A further bug in K-R was fixed in 1.7.1, but that is tangential to 
this.)
 >
 > A glimpse of the source of the problem is seen in the 
"microcorrelations" in this:
 ?>
 > RNGkind("Mar");m <- matrix(runif(4e7),2)
 >? plot(m[1,],m[2,],xlim=c(0,1e-3),pch=".")
 >? m <- matrix(runif(4e7),2)
 >? points(m[1,],m[2,],pch=".")
 >
 > These examples are from 2003, so the issue has been known for almost 
2 decades. However, to the best of our knowledge, the M-M RNG is a 
faithful implementation of their > method, so we have left the RNG in 
R's arsenal, in case someone needed it for some specific purpose.
 >
 > - pd
 >


From d@tr7320 @end|ng |rom un|@@ydney@edu@@u  Sat Aug 14 02:00:04 2021
From: d@tr7320 @end|ng |rom un|@@ydney@edu@@u (Dario Strbenac)
Date: Sat, 14 Aug 2021 00:00:04 +0000
Subject: [Rd] [External]  svd For Large Matrix
In-Reply-To: <alpine.DEB.2.22.394.2108130958100.3514@luke-Latitude-7480>
References: <SYBPR01MB4761CA7FD01EB93E4CF8511ACDFA9@SYBPR01MB4761.ausprd01.prod.outlook.com>
 <alpine.DEB.2.22.394.2108130958100.3514@luke-Latitude-7480>
Message-ID: <SYBPR01MB4761D9277370E4FDF84CA821CDFA9@SYBPR01MB4761.ausprd01.prod.outlook.com>

Good day,

Ah, I was confident it wouldn't be environment-specific but it is. My environment is

R version 4.1.0 (2021-05-18)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Debian GNU/Linux 10 (buster)

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/atlas/libblas.so.3.10.3
LAPACK: /usr/lib/x86_64-linux-gnu/atlas/liblapack.so.3.10.3

It crashes at about 180 GB RAM usage. The server has 1024 GB physical RAM in it. Modestly downsampling to 30 million cells avoids the segmentation fault. The segmentation fault originates from BLAS

Program received signal SIGSEGV, Segmentation fault.
0x00007ffff7649c10 in ATL_dgecopy () from /usr/lib/x86_64-linux-gnu/libblas.so.3

--------------------------------------
Dario Strbenac
University of Sydney
Camperdown NSW 2050
Australia

