From @purd|e@@ @end|ng |rom gm@||@com  Mon Feb  1 07:31:27 2021
From: @purd|e@@ @end|ng |rom gm@||@com (=?UTF-8?B?QWJieSBTcHVyZGxlICgvyZnLiGJpLyk=?=)
Date: Mon, 1 Feb 2021 19:31:27 +1300
Subject: [Rd] Allowing S3 methods of rounding functions to take `...`
In-Reply-To: <c141a85e-4497-e77b-5f95-041b63762dba@comcast.net>
References: <CABzLhzxvruahURQ3fCS2dOZOTYXhwaVyKP05qogmw4ougtZ5gA@mail.gmail.com>
 <CABzLhzxj758FgFEmw5wm-OOL0HX-Xht3TkYznkow5z93DhdXcQ@mail.gmail.com>
 <CAB8pepxCxCRJjO5kzLUFhb54QN04aA7Z5m64c0k+i4-CVGdJfw@mail.gmail.com>
 <CAD4oTHE5OOHn7Gv3g=dRAdxVhJDWXxWCU-PfiK6TgCHGXavPZw@mail.gmail.com>
 <CAB8pepx6LWU9g2EakRgxZdxOAuvVc3oHLDcPsEpO41uAuJB5Ug@mail.gmail.com>
 <c141a85e-4497-e77b-5f95-041b63762dba@comcast.net>
Message-ID: <CAB8pepzkwFj_iMa5B3pinWti=V8Akf=An937TJDfbktqUtEpLw@mail.gmail.com>

I've used S4 objects but with mostly S3 methods.
Currently, with two different versions.
(One extending a general purpose ObjectArray object, and the other
with partitioning information).

Sample below.

However, I'd really like to get back the suggestion(s) of adding
"dots" to the S3 methods.
I know I've said similar things before, but I think minimizing
constraints on object oriented programming is a good thing...
That principle applies to both S3 and S4...

#mono-fonts req. to read this
> x <- matrix (1:256, 8, 8)
> pm <- as.PartMatrix (x, c (2, 6), c (2, 6) )

> as.NestMatrix (pm)
     [,1]    [,2]    [,3]
[1,] <m 2x2> <m 2x4> <m 2x2>
[2,] <m 4x2> <m 4x4> <m 4x2>
[3,] <m 2x2> <m 2x4> <m 2x2>

> headt (pm, 4, c (1, 4) )
     [,1] [,2]    [,3]   [,6]    [,7] [,8]
[1,]  1    9   |  17   . 41   |  49   57
[2,]  2   10   |  18   . 42   |  50   58
     --   --   +  --   . --   +  --   --
[3,]  3   11   |  19   . 43   |  51   59
     ..   ..   .. ..   . ..   .. ..   ..
[8,]  8   16   |  24   . 48   |  56   64


On Sat, Jan 30, 2021 at 7:51 AM David Winsemius <dwinsemius at comcast.net> wrote:
>
>
> On 1/28/21 10:56 PM, Abby Spurdle wrote:
> > I've been writing functions for block matrices and more generally,
> > arrays of matrices.
> >
> > Presumably, the default transpose operation would transpose everything.
> > But there are situations where one might want to transpose the
> > top-level matrix (of submatrices) but not the submatrices, themselves.
> > Or vice versa.
>
>
> You could construct a matrix of lists and have the lists hold the
> sub-matrices.
>
>
> --
>
> David.
>
> >
> > On a side note, the help file for base::aperm is entitled "Array Transposition".
> > So, this topic is not quite as simple as it may sound.
> >
> > Interestingly, the aperm generic function *does* have dots.
> >
> >
> > On Fri, Jan 29, 2021 at 3:37 PM Gabriel Becker <gabembecker at gmail.com> wrote:
> >> Out of my naive curiosity, what arguments are you hoping a method for t() will take?
> >>
> >> I mean honestly an argument could be made that all S3 generics should take .... I don't think its an overwhelmingly compelling one, but I d see some merit to it given what an s3 generic is at its core.
> >>
> >> ~G
> >>
> >> On Thu, Jan 28, 2021 at 5:27 PM Abby Spurdle <spurdle.a at gmail.com> wrote:
> >>> That's a great suggestion Davis.
> >>>
> >>> While, we're on the topic...
> >>> Could we have a "dots" argument in base::t, the transpose function?
> >>>
> >>>
> >>> On Fri, Jan 29, 2021 at 4:48 AM Davis Vaughan <davis at rstudio.com> wrote:
> >>>> I should also say that I would be willing to attempt a patch for this, if
> >>>> others agree that this would be useful.
> >>>>
> >>>> - Davis
> >>>>
> >>>> On Thu, Jan 28, 2021 at 9:14 AM Davis Vaughan <davis at rstudio.com> wrote:
> >>>>
> >>>>> Hi all,
> >>>>>
> >>>>> I would like to propose adding `...` to the signatures of the following
> >>>>> rounding functions:
> >>>>>
> >>>>> - floor(x)
> >>>>> - ceiling(x)
> >>>>> - round(x, digits = 0)
> >>>>> - And possibly signif(x, digits = 6)
> >>>>>
> >>>>> The purpose would be to allow S3 methods to add additional arguments as
> >>>>> required.
> >>>>>
> >>>>> A few arguments in favor of this change:
> >>>>>
> >>>>> `trunc(x, ...)` already takes dots, which sets a precedent for the others
> >>>>> to do so as well. It is documented in the same help file as the other
> >>>>> rounding functions.
> >>>>>
> >>>>> Internally at the C level, a check is done to ensure that there is exactly
> >>>>> 1 arg for floor() and ceiling(), and either 1 or 2 args for round(). The
> >>>>> actual names of those arguments are not checked, however, and I believe
> >>>>> this is what allows `round.Date(x, ...)` and `round.POSIXt(x, unit)` to
> >>>>> exist, solely because they have 2 arguments. It seems like this is a bit of
> >>>>> a hack, since you couldn't create something similar for floor, like
> >>>>> `floor.POSIXt(x, unit)` (not saying this should exist, it is just for
> >>>>> argument's sake), because the 1 argument check would error on this. I think
> >>>>> adding `...` to the signature of the generics would better support what is
> >>>>> being done here.
> >>>>>
> >>>>> Additionally, I have a custom date-like S3 class of my own that I would
> >>>>> like to write floor(), ceiling(), and round() methods for, and they would
> >>>>> require passing additional arguments.
> >>>>>
> >>>>> If R core would like to make this change, they could probably tweak
> >>>>> `do_trunc()` to be a bit more general, and use it for floor() and
> >>>>> ceiling(), since it already allows `...`.
> >>>>>
> >>>>> A few references:
> >>>>>
> >>>>> Check for 1 arg in do_math1(), used by floor() and ceiling()
> >>>>>
> >>>>> https://github.com/wch/r-source/blob/fe82da3baf849fcd3cc7dbc31c6abc72b57aa083/src/main/arithmetic.c#L1270
> >>>>>
> >>>>> Check for 2 args in do_Math2(), used by round()
> >>>>>
> >>>>> https://github.com/wch/r-source/blob/fe82da3baf849fcd3cc7dbc31c6abc72b57aa083/src/main/arithmetic.c#L1655
> >>>>>
> >>>>> do_trunc() definition that allows `...`
> >>>>>
> >>>>> https://github.com/wch/r-source/blob/fe82da3baf849fcd3cc7dbc31c6abc72b57aa083/src/main/arithmetic.c#L1329-L1340
> >>>>>
> >>>>> - Davis
> >>>>>
> >>>>          [[alternative HTML version deleted]]
> >>>>
> >>>> ______________________________________________
> >>>> R-devel at r-project.org mailing list
> >>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>> ______________________________________________
> >>> R-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-devel
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel


From @purd|e@@ @end|ng |rom gm@||@com  Mon Feb  1 07:39:28 2021
From: @purd|e@@ @end|ng |rom gm@||@com (=?UTF-8?B?QWJieSBTcHVyZGxlICgvyZnLiGJpLyk=?=)
Date: Mon, 1 Feb 2021 19:39:28 +1300
Subject: [Rd] Allowing S3 methods of rounding functions to take `...`
In-Reply-To: <CAB8pepzkwFj_iMa5B3pinWti=V8Akf=An937TJDfbktqUtEpLw@mail.gmail.com>
References: <CABzLhzxvruahURQ3fCS2dOZOTYXhwaVyKP05qogmw4ougtZ5gA@mail.gmail.com>
 <CABzLhzxj758FgFEmw5wm-OOL0HX-Xht3TkYznkow5z93DhdXcQ@mail.gmail.com>
 <CAB8pepxCxCRJjO5kzLUFhb54QN04aA7Z5m64c0k+i4-CVGdJfw@mail.gmail.com>
 <CAD4oTHE5OOHn7Gv3g=dRAdxVhJDWXxWCU-PfiK6TgCHGXavPZw@mail.gmail.com>
 <CAB8pepx6LWU9g2EakRgxZdxOAuvVc3oHLDcPsEpO41uAuJB5Ug@mail.gmail.com>
 <c141a85e-4497-e77b-5f95-041b63762dba@comcast.net>
 <CAB8pepzkwFj_iMa5B3pinWti=V8Akf=An937TJDfbktqUtEpLw@mail.gmail.com>
Message-ID: <CAB8pepyBt2BbZdrtsUdHsgW0bg0PLimJrtfBhtiqrHb9CF7YAA@mail.gmail.com>

#correction to first line
x <- matrix (1:64, 8, 8)


From @purd|e@@ @end|ng |rom gm@||@com  Mon Feb  1 07:50:32 2021
From: @purd|e@@ @end|ng |rom gm@||@com (=?UTF-8?B?QWJieSBTcHVyZGxlICgvyZnLiGJpLyk=?=)
Date: Mon, 1 Feb 2021 19:50:32 +1300
Subject: [Rd] surprised matrix (1:256, 8, 8) doesn't cause error/warning
Message-ID: <CAB8pepzJtA0k+xwucuPgsX1U5YJSymy2eX5+XMvi=po5UGmJHw@mail.gmail.com>

I'm a little surprised that the following doesn't trigger an error or a warning.

matrix (1:256, 8, 8)

The help file says that the main argument is recycled, if it's too short.
But doesn't say what happens if it's too long.


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Feb  1 10:08:14 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 1 Feb 2021 10:08:14 +0100
Subject: [Rd] surprised matrix (1:256, 8, 8) doesn't cause error/warning
In-Reply-To: <CAB8pepzJtA0k+xwucuPgsX1U5YJSymy2eX5+XMvi=po5UGmJHw@mail.gmail.com>
References: <CAB8pepzJtA0k+xwucuPgsX1U5YJSymy2eX5+XMvi=po5UGmJHw@mail.gmail.com>
Message-ID: <24599.50430.981659.510862@stat.math.ethz.ch>

>>>>> Abby Spurdle (/??bi/) 
>>>>>     on Mon, 1 Feb 2021 19:50:32 +1300 writes:

    > I'm a little surprised that the following doesn't trigger an error or a warning.
    > matrix (1:256, 8, 8)

    > The help file says that the main argument is recycled, if it's too short.
    > But doesn't say what happens if it's too long.

It's somewhat subtler than one may assume :

> matrix(1:9, 2,3)
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
Warning message:
In matrix(1:9, 2, 3) :
  data length [9] is not a sub-multiple or multiple of the number of rows [2]

> matrix(1:8, 2,3)
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
Warning message:
In matrix(1:8, 2, 3) :
  data length [8] is not a sub-multiple or multiple of the number of columns [3]

> matrix(1:12, 2,3)
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
>

So it looks to me the current behavior is quite on purpose.
Are you sure it's not documented at all when reading the docs
carefully?  (I did *not*, just now).


From @purd|e@@ @end|ng |rom gm@||@com  Tue Feb  2 00:27:05 2021
From: @purd|e@@ @end|ng |rom gm@||@com (=?UTF-8?B?QWJieSBTcHVyZGxlICgvyZnLiGJpLyk=?=)
Date: Tue, 2 Feb 2021 12:27:05 +1300
Subject: [Rd] surprised matrix (1:256, 8, 8) doesn't cause error/warning
In-Reply-To: <24599.50430.981659.510862@stat.math.ethz.ch>
References: <CAB8pepzJtA0k+xwucuPgsX1U5YJSymy2eX5+XMvi=po5UGmJHw@mail.gmail.com>
 <24599.50430.981659.510862@stat.math.ethz.ch>
Message-ID: <CAB8pepzDXNHwgujFq9=gmehgTOFCExhd4QsuNvSN9SM=jefMpg@mail.gmail.com>

So, does that mean that a clean result is contingent on the length of
the data being a multiple of both the number of rows and columns?

However, this rule is not straightforward.

> #EXAMPLE 1
> #what I would expect
> matrix (1:12, 0, 0)
<0 x 0 matrix>
Warning message:
In matrix(1:12, 0, 0) : data length exceeds size of matrix

> #EXAMPLE 2
> #don't like this
> matrix (numeric (), 2, 3)
     [,1] [,2] [,3]
[1,]   NA   NA   NA
[2,]   NA   NA   NA

The first example is what I would expect, but is inconsistent with the
previous examples.
(Because zero is a valid multiple of twelve).

I dislike the second example with recycling of a zero-length vector.
This *is* covered in the help file, but also seems inconsistent with
the previous examples.
(Because two and three are not valid multiples of zero).

Also, I can't think of any reason why someone would want to construct
a matrix with extra data, and then discard part of it.
And even if there was, then why not allow an arbitrarily longer length?


On Mon, Feb 1, 2021 at 10:08 PM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> >>>>> Abby Spurdle (/??bi/)
> >>>>>     on Mon, 1 Feb 2021 19:50:32 +1300 writes:
>
>     > I'm a little surprised that the following doesn't trigger an error or a warning.
>     > matrix (1:256, 8, 8)
>
>     > The help file says that the main argument is recycled, if it's too short.
>     > But doesn't say what happens if it's too long.
>
> It's somewhat subtler than one may assume :
>
> > matrix(1:9, 2,3)
>      [,1] [,2] [,3]
> [1,]    1    3    5
> [2,]    2    4    6
> Warning message:
> In matrix(1:9, 2, 3) :
>   data length [9] is not a sub-multiple or multiple of the number of rows [2]
>
> > matrix(1:8, 2,3)
>      [,1] [,2] [,3]
> [1,]    1    3    5
> [2,]    2    4    6
> Warning message:
> In matrix(1:8, 2, 3) :
>   data length [8] is not a sub-multiple or multiple of the number of columns [3]
>
> > matrix(1:12, 2,3)
>      [,1] [,2] [,3]
> [1,]    1    3    5
> [2,]    2    4    6
> >
>
> So it looks to me the current behavior is quite on purpose.
> Are you sure it's not documented at all when reading the docs
> carefully?  (I did *not*, just now).


From one@kych@| @end|ng |rom gm@||@com  Fri Feb  5 22:01:17 2021
From: one@kych@| @end|ng |rom gm@||@com (Christopher Carbone)
Date: Fri, 5 Feb 2021 13:01:17 -0800
Subject: [Rd] Bug found in cut.Date, solution found
Message-ID: <CAGrWiDrvdpk9AssSaoaZkF+QuFFumxwm_s_TrKZDtr2S3cepQQ@mail.gmail.com>

Greetings,

I found a bug in the cut.Date function of base R. My session info is
at the bottom.

The bug is in the "months" section of the code. Consider the following:

# Create vector with 365 days of year and cut into 12 months
dates <- seq(as.Date("2021-1-1"),as.Date("2021-12-31"),by="day")
months <- cut(dates,"months",labels=1:12)
table(months)
# months
# 1  2  3  4  5  6  7  8  9 10 11 12
# 31 28 31 30 31 30 31 31 30 31 30 31
# cut.Date works perfectly

# Extend dates vector by adding following January and cut into 13 months
dates <- seq(as.Date("2021-1-1"),as.Date("2022-1-31"),by="day")
months <- cut(dates,"months",labels=1:13)
# Error in cut.default(unclass(x), unclass(breaks), labels = labels,
right = right,  :
#                        lengths of 'breaks' and 'labels' differ
months <- cut(dates,"months",labels=1:14)
table(months)
# months
# 1  2  3  4  5  6  7  8  9 10 11 12 13 14
# 31 28 31 30 31 30 31 31 30 31 30 31 31  0
# Bug: cut.Date adds a superfluous bin
# This is because February has less than 31 days
# Thus, the code adjusts the end into March instead of February

Inspecting the source code, I see the problem resides in lines 31
through 41, the section dealing with breaks="months":

    if (valid == 3L) {
      start$mday <- 1L
      start$isdst <- -1L
      end <- as.POSIXlt(max(x, na.rm = TRUE))
      step <- if (length(by2) == 2L)
        as.integer(by2[1L])
      else 1L
38  end <- as.POSIXlt(end + (31 * step * 86400))
      end$mday <- 1L
      end$isdst <- -1L
      breaks <- as.Date(seq(start, end, breaks))

When the end is adjusted in line 38, there are instances where an
unnecessary extra bin is created.
This is accounted for in the breaks="quarters" case by testing at the
end and removing the final break if necessary.
The same method employed here fixes the bug:

    if (valid == 3L) {
      start$mday <- 1L
      start$isdst <- -1L
     maxx <- max(x, na.rm = TRUE)   # Added line
     end <- as.POSIXlt(maxx)             # Modified line
      step <- if (length(by2) == 2L)
        as.integer(by2[1L])
      else 1L
      end <- as.POSIXlt(end + (31 * step * 86400))
      end$mday <- 1L
      end$isdst <- -1L
      breaks <- as.Date(seq(start, end, breaks))
     lb <- length(breaks)                   # Added line
     if (maxx < breaks[lb - 1])           # Added line
       breaks <- breaks[-lb]               # Added line

I modified cut.Date with the above code changes and stored it in a
function called cut_Date():

dates <- seq(as.Date("2021-1-1"),as.Date("2022-1-31"),by="day")
months <- cut_Date(dates,"months",labels=1:13)
table(months)
# months
# 1  2  3  4  5  6  7  8  9 10 11 12 13
# 31 28 31 30 31 30 31 31 30 31 30 31 31

Thanks for your time and consideration!

> sessionInfo()
R version 4.0.3 (2020-10-10)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 19041)

Matrix products: default

locale:
[1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United States.1252
[3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C
[5] LC_TIME=English_United States.1252

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_4.0.3 tools_4.0.3    tinytex_0.28   xfun_0.19

Many Blessings,
Christopher Carbone

"Follow your bliss and doors will open where you didn't know they were
going to be..."
-Joseph Campbell


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Feb  5 23:47:53 2021
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 5 Feb 2021 17:47:53 -0500
Subject: [Rd] Bug found in cut.Date, solution found
In-Reply-To: <CAGrWiDrvdpk9AssSaoaZkF+QuFFumxwm_s_TrKZDtr2S3cepQQ@mail.gmail.com>
References: <CAGrWiDrvdpk9AssSaoaZkF+QuFFumxwm_s_TrKZDtr2S3cepQQ@mail.gmail.com>
Message-ID: <f788e98e-b54d-15f1-5307-ab58f45d3929@gmail.com>

If you don't hear something from someone in R Core, you should submit 
this as a bug report on bugs.r-project.org.  (You might not have an 
account there; if you don't, someone from R Core will have to give you 
one.  Feel free to remind them if nothing happens in a few days!)

Duncan Murdoch

On 05/02/2021 4:01 p.m., Christopher Carbone wrote:
> Greetings,
> 
> I found a bug in the cut.Date function of base R. My session info is
> at the bottom.
> 
> The bug is in the "months" section of the code. Consider the following:
> 
> # Create vector with 365 days of year and cut into 12 months
> dates <- seq(as.Date("2021-1-1"),as.Date("2021-12-31"),by="day")
> months <- cut(dates,"months",labels=1:12)
> table(months)
> # months
> # 1  2  3  4  5  6  7  8  9 10 11 12
> # 31 28 31 30 31 30 31 31 30 31 30 31
> # cut.Date works perfectly
> 
> # Extend dates vector by adding following January and cut into 13 months
> dates <- seq(as.Date("2021-1-1"),as.Date("2022-1-31"),by="day")
> months <- cut(dates,"months",labels=1:13)
> # Error in cut.default(unclass(x), unclass(breaks), labels = labels,
> right = right,  :
> #                        lengths of 'breaks' and 'labels' differ
> months <- cut(dates,"months",labels=1:14)
> table(months)
> # months
> # 1  2  3  4  5  6  7  8  9 10 11 12 13 14
> # 31 28 31 30 31 30 31 31 30 31 30 31 31  0
> # Bug: cut.Date adds a superfluous bin
> # This is because February has less than 31 days
> # Thus, the code adjusts the end into March instead of February
> 
> Inspecting the source code, I see the problem resides in lines 31
> through 41, the section dealing with breaks="months":
> 
>      if (valid == 3L) {
>        start$mday <- 1L
>        start$isdst <- -1L
>        end <- as.POSIXlt(max(x, na.rm = TRUE))
>        step <- if (length(by2) == 2L)
>          as.integer(by2[1L])
>        else 1L
> 38  end <- as.POSIXlt(end + (31 * step * 86400))
>        end$mday <- 1L
>        end$isdst <- -1L
>        breaks <- as.Date(seq(start, end, breaks))
> 
> When the end is adjusted in line 38, there are instances where an
> unnecessary extra bin is created.
> This is accounted for in the breaks="quarters" case by testing at the
> end and removing the final break if necessary.
> The same method employed here fixes the bug:
> 
>      if (valid == 3L) {
>        start$mday <- 1L
>        start$isdst <- -1L
>       maxx <- max(x, na.rm = TRUE)   # Added line
>       end <- as.POSIXlt(maxx)             # Modified line
>        step <- if (length(by2) == 2L)
>          as.integer(by2[1L])
>        else 1L
>        end <- as.POSIXlt(end + (31 * step * 86400))
>        end$mday <- 1L
>        end$isdst <- -1L
>        breaks <- as.Date(seq(start, end, breaks))
>       lb <- length(breaks)                   # Added line
>       if (maxx < breaks[lb - 1])           # Added line
>         breaks <- breaks[-lb]               # Added line
> 
> I modified cut.Date with the above code changes and stored it in a
> function called cut_Date():
> 
> dates <- seq(as.Date("2021-1-1"),as.Date("2022-1-31"),by="day")
> months <- cut_Date(dates,"months",labels=1:13)
> table(months)
> # months
> # 1  2  3  4  5  6  7  8  9 10 11 12 13
> # 31 28 31 30 31 30 31 31 30 31 30 31 31
> 
> Thanks for your time and consideration!
> 
>> sessionInfo()
> R version 4.0.3 (2020-10-10)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 19041)
> 
> Matrix products: default
> 
> locale:
> [1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United States.1252
> [3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C
> [5] LC_TIME=English_United States.1252
> 
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
> 
> loaded via a namespace (and not attached):
> [1] compiler_4.0.3 tools_4.0.3    tinytex_0.28   xfun_0.19
> 
> Many Blessings,
> Christopher Carbone
> 
> "Follow your bliss and doors will open where you didn't know they were
> going to be..."
> -Joseph Campbell
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From m@tth|@@-gond@n @end|ng |rom gmx@de  Sat Feb  6 14:11:53 2021
From: m@tth|@@-gond@n @end|ng |rom gmx@de (Matthias Gondan)
Date: Sat, 6 Feb 2021 14:11:53 +0100
Subject: [Rd] sprintf, check number of parameters
Message-ID: <1M5QJJ-1l7Xtn0F3F-001USW@mail.gmx.net>

Dear developers,

This is a follow-up from an earlier mail about warnings of unused arguments in sprintf:

1. This should obviously raise an error (and it does):
sprintf('%i %i', 1)
Fehler in sprintf("%i %i", 1) : zu wenig Argumente [= too few arguments]

2. This should, in my opinion, raise a warning about an unused argument (and I think it does in now R-devel):
sprintf('%i', 1, 2)

3. From the conversation below, it seems that this also raises a warning (in R-devel):
sprintf('%1$i', 1, 2)

I think that one should be suppressed. When I reported this a few months ago, I didn?t really have a use case for (3), but now I think I have found something. Suppose I have a function that calculates some descriptive statistics, mean, sd, available cases, missings, something like the one below:

msnx = function(x, mask='%1$.1f (SD=%2$.1f, n=%3$i, NA=%4$i)')
{
  m = mean(x, na.rm=TRUE)
  s = sd(x, na.rm=TRUE)
  n = sum(!is.na(x))
  na = sum(is.na(x))
  
  sprintf(mask, m, s, n, na)
}

The mask is meant to help formatting it a bit.

msnx(T0)
[1] "30.7 (SD=4.7, n=104, NA=0)"

Now I want a ?less detailed? summary, so I invoke the function with something like

msnx(T0, mask='%1$.1f (SD=%2$.1f)')
[1] "30.7 (SD=4.7)"

In my opinion, in the last example, sprintf should not raise the warning in (2) if all arguments in the mask are ?dollared?. I am still a bit unsure since the example uses a function that calculate things that aren?t being used (n and na), and this could be considered bad programming style. But there might be other use cases, and it is, nevertheless, a deliberate choice to skip arguments 3$ and 4$.

Best wishes,

Matthias



Dear Matthias,

thanks for the suggestion, R-devel now warns on unused arguments by 
format (both numbered and un-numbered). It seems that the new warning is 
useful, often it finds cases when arguments were accidentally passed to 
sprintf but had been meant for a different function.

R allows combining both numbered and un-numbered references in a single 
format, even though it may be better to avoid and POSIX does not allow 
that.

Best
Tomas

On 9/20/20 1:03 PM, Matthias Gondan wrote:
> Dear R developers,
>
> I am wondering if this should raise an error or a warning.
>
>> sprintf('%.f, %.f', 1, 2, 3)
> [1] "1, 2"
>
> I am aware that R has ?numbered? sprintf arguments (sprintf('%1$.f', ?), and in that case, omissing of specific arguments may be intended. But in the usual syntax, omission of an argument is probably a mistake.
>
> Thank you for your consideration.
>
> Best wishes,
>
> Matthias

	[[alternative HTML version deleted]]


From wo||g@ng@huber @end|ng |rom emb|@org  Sat Feb  6 20:13:07 2021
From: wo||g@ng@huber @end|ng |rom emb|@org (Wolfgang Huber)
Date: Sat, 6 Feb 2021 20:13:07 +0100
Subject: [Rd] surprised matrix (1:256, 8, 8) doesn't cause error/warning
In-Reply-To: <CAB8pepzDXNHwgujFq9=gmehgTOFCExhd4QsuNvSN9SM=jefMpg@mail.gmail.com>
References: <CAB8pepzJtA0k+xwucuPgsX1U5YJSymy2eX5+XMvi=po5UGmJHw@mail.gmail.com>
 <24599.50430.981659.510862@stat.math.ethz.ch>
 <CAB8pepzDXNHwgujFq9=gmehgTOFCExhd4QsuNvSN9SM=jefMpg@mail.gmail.com>
Message-ID: <AD151E87-C3A8-4098-9BFB-E78C65D7A8A7@embl.org>

FWIW, I paste below a possible change to the warnings generating part of the do_matrix function in R/src/main/array.c that adds the kind of warning that Abby is asking for, and that IMHO would more often help users find bugs in their code than interfere with intended behaviour.

> matrix (1:6, nrow = 2, ncol = 3)

> matrix (1:12, nrow = 2, ncol = 3)
    [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
Warning message:
In matrix(1:12, nrow = 2, ncol = 3) :
 data length incompatible with size of matrix

> matrix (1:7, nrow = 2, ncol = 3)
Warning messages:
1: In matrix(1:7, nrow = 2, ncol = 3) :
 data length [7] is not a sub-multiple or multiple of the number of rows [2]
2: In matrix(1:7, nrow = 2, ncol = 3) :
 data length incompatible with size of matrix

> matrix (1:8, nrow = 2, ncol = 3)
Warning messages:
1: In matrix(1:8, nrow = 2, ncol = 3) :
 data length [8] is not a sub-multiple or multiple of the number of columns [3]
2: In matrix(1:8, nrow = 2, ncol = 3) :
 data length incompatible with size of matrix

> matrix (1:6, nrow = 0, ncol = 0)
<0 x 0 matrix>
> matrix (numeric(0), nrow = 2, ncol = 3)
    [,1] [,2] [,3]
[1,]   NA   NA   NA
[2,]   NA   NA   NA

> matrix(1:2, ncol = 8)
    [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
[1,]    1    2    1    2    1    2    1    2

It would be nice to combine the new warning with that about ?...not a sub-multiple or multiple?? into a single warning, if appropriate (as in two of the examples above), but that would require bigger surgery way above my payscale.

Kind regards
	Wolfgang Huber


Index: array.c
===================================================================
--- array.c	(revision 79951)
+++ array.c	(working copy)
@@ -133,18 +133,19 @@
	    nc = (int) ceil((double) lendat / (double) nr);
    }

-    if(lendat > 0) {
+    if (lendat > 1) {
	R_xlen_t nrc = (R_xlen_t) nr * nc;
-	if (lendat > 1 && nrc % lendat != 0) {
+	if ((nrc % lendat) != 0) {
	    if (((lendat > nr) && (lendat / nr) * nr != lendat) ||
		((lendat < nr) && (nr / lendat) * lendat != nr))
		warning(_("data length [%d] is not a sub-multiple or multiple of the number of rows [%d]"), lendat, nr);
	    else if (((lendat > nc) && (lendat / nc) * nc != lendat) ||
		     ((lendat < nc) && (nc / lendat) * lendat != nc))
-		warning(_("data length [%d] is not a sub-multiple or multiple of the number of columns [%d]"), lendat, nc);
-	}
-	else if ((lendat > 1) && (nrc == 0)){
+		    warning(_("data length [%d] is not a sub-multiple or multiple of the number of columns [%d]"), lendat, nc);
+	if (nrc == 0)
	    warning(_("data length exceeds size of matrix"));
+        if (nrc != lendat)
+            warning(_("data length incompatible with size of matrix"));
	}
    }


------
// And here, for easy checking that part of the code in the new form:
 if (lendat > 1) {
	R_xlen_t nrc = (R_xlen_t) nr * nc;
	if ((nrc % lendat) != 0) {
	    if (((lendat > nr) && (lendat / nr) * nr != lendat) ||
		((lendat < nr) && (nr / lendat) * lendat != nr))
		warning(_("data length [%d] is not a sub-multiple or multiple of the number of rows [%d]"), lendat, nr);
	    else if (((lendat > nc) && (lendat / nc) * nc != lendat) ||
		     ((lendat < nc) && (nc / lendat) * lendat != nc))
		    warning(_("data length [%d] is not a sub-multiple or multiple of the number of columns [%d]"), lendat, nc);
	if (nrc == 0)
	    warning(_("data length exceeds size of matrix"));
       if (nrc != lendat)  
           warning(_("data length incompatible with size of matrix"));
	}
   }

> Il giorno 2feb2021, alle ore 00:27, Abby Spurdle (/??bi/) <spurdle.a at gmail.com> ha scritto:
> 
> So, does that mean that a clean result is contingent on the length of
> the data being a multiple of both the number of rows and columns?
> 
> However, this rule is not straightforward.
> 
>> #EXAMPLE 1
>> #what I would expect
>> matrix (1:12, 0, 0)
> <0 x 0 matrix>
> Warning message:
> In matrix(1:12, 0, 0) : data length exceeds size of matrix
> 
>> #EXAMPLE 2
>> #don't like this
>> matrix (numeric (), 2, 3)
>    [,1] [,2] [,3]
> [1,]   NA   NA   NA
> [2,]   NA   NA   NA
> 
> The first example is what I would expect, but is inconsistent with the
> previous examples.
> (Because zero is a valid multiple of twelve).
> 
> I dislike the second example with recycling of a zero-length vector.
> This *is* covered in the help file, but also seems inconsistent with
> the previous examples.
> (Because two and three are not valid multiples of zero).
> 
> Also, I can't think of any reason why someone would want to construct
> a matrix with extra data, and then discard part of it.
> And even if there was, then why not allow an arbitrarily longer length?
> 
> 
> On Mon, Feb 1, 2021 at 10:08 PM Martin Maechler
> <maechler at stat.math.ethz.ch> wrote:
>> 
>>>>>>> Abby Spurdle (/??bi/)
>>>>>>>   on Mon, 1 Feb 2021 19:50:32 +1300 writes:
>> 
>>> I'm a little surprised that the following doesn't trigger an error or a warning.
>>> matrix (1:256, 8, 8)
>> 
>>> The help file says that the main argument is recycled, if it's too short.
>>> But doesn't say what happens if it's too long.
>> 
>> It's somewhat subtler than one may assume :
>> 
>>> matrix(1:9, 2,3)
>>    [,1] [,2] [,3]
>> [1,]    1    3    5
>> [2,]    2    4    6
>> Warning message:
>> In matrix(1:9, 2, 3) :
>> data length [9] is not a sub-multiple or multiple of the number of rows [2]
>> 
>>> matrix(1:8, 2,3)
>>    [,1] [,2] [,3]
>> [1,]    1    3    5
>> [2,]    2    4    6
>> Warning message:
>> In matrix(1:8, 2, 3) :
>> data length [8] is not a sub-multiple or multiple of the number of columns [3]
>> 
>>> matrix(1:12, 2,3)
>>    [,1] [,2] [,3]
>> [1,]    1    3    5
>> [2,]    2    4    6
>>> 
>> 
>> So it looks to me the current behavior is quite on purpose.
>> Are you sure it's not documented at all when reading the docs
>> carefully?  (I did *not*, just now).
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From hugh@p@r@on@ge @end|ng |rom gm@||@com  Mon Feb  8 14:25:35 2021
From: hugh@p@r@on@ge @end|ng |rom gm@||@com (Hugh Parsonage)
Date: Tue, 9 Feb 2021 00:25:35 +1100
Subject: [Rd] Does type raw really have no ordering?
Message-ID: <CAJmOi+PZKcmr88eAVT0b+iAKkfwtbhjUzuk3SNeJMZ6TJMHX5g@mail.gmail.com>

In the help for Extremes  ?min

> Note that all versions fail for raw and complex vectors since these have no ordering.

This makes sense for complex vectors, yet `raw` vectors seem to have a
natural order. Indeed:

which.min(as.raw(c(5L, 2L, 1L, 99L)))

works and would identify the minimum.  Similarly comparison operators
work on raw vectors (and fail, expectedly, on complex ones).

Is there something peculiar to min() and friends that make raw vectors
invalid input?


Hugh.


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Mon Feb  8 17:47:42 2021
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Mon, 8 Feb 2021 16:47:42 +0000
Subject: [Rd] Does type raw really have no ordering?
In-Reply-To: <CAJmOi+PZKcmr88eAVT0b+iAKkfwtbhjUzuk3SNeJMZ6TJMHX5g@mail.gmail.com>
References: <CAJmOi+PZKcmr88eAVT0b+iAKkfwtbhjUzuk3SNeJMZ6TJMHX5g@mail.gmail.com>
Message-ID: <e19ab2f5-1790-b38e-e00c-eff8717ad41d@stats.ox.ac.uk>

On 08/02/2021 13:25, Hugh Parsonage wrote:
> In the help for Extremes  ?min
> 
>> Note that all versions fail for raw and complex vectors since these have no ordering.
> 
> This makes sense for complex vectors, yet `raw` vectors seem to have a
> natural order. Indeed:
> 
> which.min(as.raw(c(5L, 2L, 1L, 99L)))
> 
> works and would identify the minimum.  Similarly comparison operators
> work on raw vectors (and fail, expectedly, on complex ones).
> 
> Is there something peculiar to min() and friends that make raw vectors
> invalid input?

Please re-read the help for which.min: as it says you computed on an 
internal coercion to double.  Doubles do have an ordering.

Like factors, raw vectors have numeric codes, but that does not imply 
that the ordering of the numeric codes is relevant to the original 
object.  And reading the help for comparisons would have informed you

      Raw vectors should not really be considered to have an order, but
      the numeric order of the byte representation is used.

One use case for a raw vector is to store bytes in an unspecified 8-bit 
encoding.  What ordering would be relevant depends on the encoding - 
this is even true for the ASCII subset - some people sort AaBb some 
AB...ab and some locales even sort aAbB (although I have never seen that 
recommended for human usage).

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Feb  9 11:58:43 2021
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 9 Feb 2021 11:58:43 +0100
Subject: [Rd] surprised matrix (1:256, 8, 8) doesn't cause error/warning
In-Reply-To: <6219F78B-C3C0-4A22-91C3-D9ABAA45856A@embl.org>
References: <CAB8pepzJtA0k+xwucuPgsX1U5YJSymy2eX5+XMvi=po5UGmJHw@mail.gmail.com>
 <24599.50430.981659.510862@stat.math.ethz.ch>
 <CAB8pepzDXNHwgujFq9=gmehgTOFCExhd4QsuNvSN9SM=jefMpg@mail.gmail.com>
 <6219F78B-C3C0-4A22-91C3-D9ABAA45856A@embl.org>
Message-ID: <24610.27363.60482.680529@stat.math.ethz.ch>

>>>>> Wolfgang Huber 
>>>>>     on Sat, 6 Feb 2021 19:49:11 +0100 writes:

    > FWIW, I paste below a possible change to the warnings generating part of the do_matrix function in R/src/main/array.c that adds the kind of warning that Abby is asking for, and that IMHO would more often help users find bugs in their code than interfere with intended behaviour.

Thank you, Wolfgang.
Honestly,  I had originally not wanted to get into this.

Functions that have been in use for longer than R exists (namely
in S / S+) without the need for changes  is not something we'd
typically easily consider for a change.
{well, in the very old times,  0-extent matrices did not exist,
 so there were *some* changes during matrix()'s history ..}

But I think Abby and you have a point here.... so I have been
looking at your patch .. and from code reading had wondered
about another  behavior which *was* not quite consistent,
and you eliminated completely with your patch:

op <- options(warn=1)
for(n in 0:2) { cat(n,":\n") ; print(matrix(seq_len(n), 0, 0)) }
options(op)

shows (in released R)

0 :
<0 x 0 matrix>
1 :
<0 x 0 matrix>
2 :
Warning in matrix(seq_len(n), 0, 0) :
  data length exceeds size of matrix
<0 x 0 matrix>
> 

and it is really seems not logical that in matrix(x, 0,0),
 'x' of  size 1 and  size (>=) 2  are treated differently.
For consistency,  size 1  "should"  also warn (but read on!)

After your patch, theres' no warning in any case .. which is
consistent, within the  matrix(x, 0,0) situation  but not consistent
with your proposal to warn more often when  matrix(x, n,k)  is
"obviously" using inconsistent dimensions.

When trying to let   matrix(1, 0,0)  also warn,
I quickly found that this produces many new warnings in our (R
base packages) examples and tests, notably from construction
such as

	 matrix(NA, 0, 3)
or
	 matrix(NA_character_, 0, 4)

which would all have to be re-written as

      matrix(logical()  , 0, 3)
or    matrix(character(), 0, 4)

The latter *is* more strictly self-consistent, but do we really
want to impose such strictness ?

My conclusion:  Not at this moment

OTOH, I'd re-add the warning for  length(x) > 1  which has
been there in the current code (but not your patch).
{{No need to send another patch, I've changed too many small
  things already, for me to be useful}}

This still needs adaption of one of the regression tests of R
itself, and needs (at least) one of the tests of the Matrix package
(warning turned into error, from options(warn = 2)).

I'm willing to go that route, but I'm sure this will entail some
work by other package authors, too (and hence CRAN maintainers etc).

Opinions?


    >> matrix (1:6, nrow = 2, ncol = 3)

    >> matrix (1:12, nrow = 2, ncol = 3)
    > [,1] [,2] [,3]
    > [1,]    1    3    5
    > [2,]    2    4    6
    > Warning message:
    > In matrix(1:12, nrow = 2, ncol = 3) :
    > data length incompatible with size of matrix

    >> matrix (1:7, nrow = 2, ncol = 3)
    > Warning messages:
    > 1: In matrix(1:7, nrow = 2, ncol = 3) :
    > data length [7] is not a sub-multiple or multiple of the number of rows [2]
    > 2: In matrix(1:7, nrow = 2, ncol = 3) :
    > data length incompatible with size of matrix

    >> matrix (1:8, nrow = 2, ncol = 3)
    > Warning messages:
    > 1: In matrix(1:8, nrow = 2, ncol = 3) :
    > data length [8] is not a sub-multiple or multiple of the number of columns [3]
    > 2: In matrix(1:8, nrow = 2, ncol = 3) :
    > data length incompatible with size of matrix

    >> matrix (1:6, nrow = 0, ncol = 0)
    > <0 x 0 matrix>
    >> matrix (numeric(0), nrow = 2, ncol = 3)
    > [,1] [,2] [,3]
    > [1,]   NA   NA   NA
    > [2,]   NA   NA   NA

    >> matrix(1:2, ncol = 8)
    > [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
    > [1,]    1    2    1    2    1    2    1    2

    > It would be nice to combine the new warning with that about ?...not a sub-multiple or multiple?? into a single warning, if appropriate (as in two of the examples above), but that would require bigger surgery way above my payscale.

I agree that in those cases it should only show one warning, and
to keep things simple I'd say it should just be the 2nd of those
above  or more precisely (I have to check if that's correct)

  "data length larger than size of matrix"

Martin

    > Kind regards
    > Wolfgang Huber


    > Index: array.c
    > ===================================================================
    > --- array.c	(revision 79951)
    > +++ array.c	(working copy)
    > @@ -133,18 +133,19 @@
    > nc = (int) ceil((double) lendat / (double) nr);
    > }

    > -    if(lendat > 0) {
    > +    if (lendat > 1) {
    > R_xlen_t nrc = (R_xlen_t) nr * nc;
    > -	if (lendat > 1 && nrc % lendat != 0) {
    > +	if ((nrc % lendat) != 0) {
    > if (((lendat > nr) && (lendat / nr) * nr != lendat) ||
    > ((lendat < nr) && (nr / lendat) * lendat != nr))
    > warning(_("data length [%d] is not a sub-multiple or multiple of the number of rows [%d]"), lendat, nr);
    > else if (((lendat > nc) && (lendat / nc) * nc != lendat) ||
    > ((lendat < nc) && (nc / lendat) * lendat != nc))
    > -		warning(_("data length [%d] is not a sub-multiple or multiple of the number of columns [%d]"), lendat, nc);
    > -	}
    > -	else if ((lendat > 1) && (nrc == 0)){
    > +		    warning(_("data length [%d] is not a sub-multiple or multiple of the number of columns [%d]"), lendat, nc);
    > +	if (nrc == 0)
    > warning(_("data length exceeds size of matrix"));
    > +        if (nrc != lendat)
    > +            warning(_("data length incompatible with size of matrix"));
    > }
    > }


    > ------
    > // And here, for easy checking that part of the code in the new form:
    > if (lendat > 1) {
    > R_xlen_t nrc = (R_xlen_t) nr * nc;
    > if ((nrc % lendat) != 0) {
    > if (((lendat > nr) && (lendat / nr) * nr != lendat) ||
    > ((lendat < nr) && (nr / lendat) * lendat != nr))
    > warning(_("data length [%d] is not a sub-multiple or multiple of the number of rows [%d]"), lendat, nr);
    > else if (((lendat > nc) && (lendat / nc) * nc != lendat) ||
    > ((lendat < nc) && (nc / lendat) * lendat != nc))
    > warning(_("data length [%d] is not a sub-multiple or multiple of the number of columns [%d]"), lendat, nc);
    > if (nrc == 0)
    > warning(_("data length exceeds size of matrix"));
    > if (nrc != lendat)  
    > warning(_("data length incompatible with size of matrix"));
    > }
    > }

    >> Il giorno 2feb2021, alle ore 00:27, Abby Spurdle (/??bi/) <spurdle.a at gmail.com> ha scritto:
    >> 
    >> So, does that mean that a clean result is contingent on the length of
    >> the data being a multiple of both the number of rows and columns?
    >> 
    >> However, this rule is not straightforward.
    >> 
    >>> #EXAMPLE 1
    >>> #what I would expect
    >>> matrix (1:12, 0, 0)
    >> <0 x 0 matrix>
    >> Warning message:
    >> In matrix(1:12, 0, 0) : data length exceeds size of matrix
    >> 
    >>> #EXAMPLE 2
    >>> #don't like this
    >>> matrix (numeric (), 2, 3)
    >> [,1] [,2] [,3]
    >> [1,]   NA   NA   NA
    >> [2,]   NA   NA   NA
    >> 
    >> The first example is what I would expect, but is inconsistent with the
    >> previous examples.
    >> (Because zero is a valid multiple of twelve).
    >> 
    >> I dislike the second example with recycling of a zero-length vector.
    >> This *is* covered in the help file, but also seems inconsistent with
    >> the previous examples.
    >> (Because two and three are not valid multiples of zero).
    >> 
    >> Also, I can't think of any reason why someone would want to construct
    >> a matrix with extra data, and then discard part of it.
    >> And even if there was, then why not allow an arbitrarily longer length?
    >> 
    >> 
    >> On Mon, Feb 1, 2021 at 10:08 PM Martin Maechler
    >> <maechler at stat.math.ethz.ch> wrote:
    >>> 
    >>>>>>>> Abby Spurdle (/??bi/)
    >>>>>>>> on Mon, 1 Feb 2021 19:50:32 +1300 writes:
    >>> 
    >>>> I'm a little surprised that the following doesn't trigger an error or a warning.
    >>>> matrix (1:256, 8, 8)
    >>> 
    >>>> The help file says that the main argument is recycled, if it's too short.
    >>>> But doesn't say what happens if it's too long.
    >>> 
    >>> It's somewhat subtler than one may assume :
    >>> 
    >>>> matrix(1:9, 2,3)
    >>> [,1] [,2] [,3]
    >>> [1,]    1    3    5
    >>> [2,]    2    4    6
    >>> Warning message:
    >>> In matrix(1:9, 2, 3) :
    >>> data length [9] is not a sub-multiple or multiple of the number of rows [2]
    >>> 
    >>>> matrix(1:8, 2,3)
    >>> [,1] [,2] [,3]
    >>> [1,]    1    3    5
    >>> [2,]    2    4    6
    >>> Warning message:
    >>> In matrix(1:8, 2, 3) :
    >>> data length [8] is not a sub-multiple or multiple of the number of columns [3]
    >>> 
    >>>> matrix(1:12, 2,3)
    >>> [,1] [,2] [,3]
    >>> [1,]    1    3    5
    >>> [2,]    2    4    6
    >>>> 
    >>> 
    >>> So it looks to me the current behavior is quite on purpose.
    >>> Are you sure it's not documented at all when reading the docs
    >>> carefully?  (I did *not*, just now).
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel


From wo||g@ng@huber @end|ng |rom emb|@org  Tue Feb  9 15:52:06 2021
From: wo||g@ng@huber @end|ng |rom emb|@org (Wolfgang Huber)
Date: Tue, 9 Feb 2021 15:52:06 +0100
Subject: [Rd] surprised matrix (1:256, 8, 8) doesn't cause error/warning
In-Reply-To: <24610.27363.60482.680529@stat.math.ethz.ch>
References: <CAB8pepzJtA0k+xwucuPgsX1U5YJSymy2eX5+XMvi=po5UGmJHw@mail.gmail.com>
 <24599.50430.981659.510862@stat.math.ethz.ch>
 <CAB8pepzDXNHwgujFq9=gmehgTOFCExhd4QsuNvSN9SM=jefMpg@mail.gmail.com>
 <6219F78B-C3C0-4A22-91C3-D9ABAA45856A@embl.org>
 <24610.27363.60482.680529@stat.math.ethz.ch>
Message-ID: <5B83ED91-69E7-4853-970C-6520AB948C37@embl.org>

Hi Martin

Thank you! I very much understand your reservations and know it was a bit cheeky to poke.

I agree that in those cases where my (naive) patch results in two warnings, keeping only the new one would better.
No strong opinion about the case where either ncol or nrow is 0. Maybe a compromise would be to live with the inconsistency of only warning if length(data)>1, in order to allow legacy code such as  matrix(NA, 0, 3). Assuming that the main objective is not consistency but more robust users? R code.

Btw if one were to refactor this properly (which I do not propose!), shouldn?t `matrix` just be a wrapper to `array`, whose added value is the inference of missing `nrow` and `ncol` values and dealing with `byrow`?

	Kind regards, and thanks again	
		Wolfgang


> Il giorno 9feb2021, alle ore 11:58, Martin Maechler <maechler at stat.math.ethz.ch> ha scritto:
> 
>>>>>> Wolfgang Huber 
>>>>>>    on Sat, 6 Feb 2021 19:49:11 +0100 writes:
> 
>> FWIW, I paste below a possible change to the warnings generating part of the do_matrix function in R/src/main/array.c that adds the kind of warning that Abby is asking for, and that IMHO would more often help users find bugs in their code than interfere with intended behaviour.
> 
> Thank you, Wolfgang.
> Honestly,  I had originally not wanted to get into this.
> 
> Functions that have been in use for longer than R exists (namely
> in S / S+) without the need for changes  is not something we'd
> typically easily consider for a change.
> {well, in the very old times,  0-extent matrices did not exist,
> so there were *some* changes during matrix()'s history ..}
> 
> But I think Abby and you have a point here.... so I have been
> looking at your patch .. and from code reading had wondered
> about another  behavior which *was* not quite consistent,
> and you eliminated completely with your patch:
> 
> op <- options(warn=1)
> for(n in 0:2) { cat(n,":\n") ; print(matrix(seq_len(n), 0, 0)) }
> options(op)
> 
> shows (in released R)
> 
> 0 :
> <0 x 0 matrix>
> 1 :
> <0 x 0 matrix>
> 2 :
> Warning in matrix(seq_len(n), 0, 0) :
>  data length exceeds size of matrix
> <0 x 0 matrix>
>> 
> 
> and it is really seems not logical that in matrix(x, 0,0),
> 'x' of  size 1 and  size (>=) 2  are treated differently.
> For consistency,  size 1  "should"  also warn (but read on!)
> 
> After your patch, theres' no warning in any case .. which is
> consistent, within the  matrix(x, 0,0) situation  but not consistent
> with your proposal to warn more often when  matrix(x, n,k)  is
> "obviously" using inconsistent dimensions.
> 
> When trying to let   matrix(1, 0,0)  also warn,
> I quickly found that this produces many new warnings in our (R
> base packages) examples and tests, notably from construction
> such as
> 
> 	 matrix(NA, 0, 3)
> or
> 	 matrix(NA_character_, 0, 4)
> 
> which would all have to be re-written as
> 
>      matrix(logical()  , 0, 3)
> or    matrix(character(), 0, 4)
> 
> The latter *is* more strictly self-consistent, but do we really
> want to impose such strictness ?
> 
> My conclusion:  Not at this moment
> 
> OTOH, I'd re-add the warning for  length(x) > 1  which has
> been there in the current code (but not your patch).
> {{No need to send another patch, I've changed too many small
>  things already, for me to be useful}}
> 
> This still needs adaption of one of the regression tests of R
> itself, and needs (at least) one of the tests of the Matrix package
> (warning turned into error, from options(warn = 2)).
> 
> I'm willing to go that route, but I'm sure this will entail some
> work by other package authors, too (and hence CRAN maintainers etc).
> 
> Opinions?
> 
> 
>>> matrix (1:6, nrow = 2, ncol = 3)
> 
>>> matrix (1:12, nrow = 2, ncol = 3)
>> [,1] [,2] [,3]
>> [1,]    1    3    5
>> [2,]    2    4    6
>> Warning message:
>> In matrix(1:12, nrow = 2, ncol = 3) :
>> data length incompatible with size of matrix
> 
>>> matrix (1:7, nrow = 2, ncol = 3)
>> Warning messages:
>> 1: In matrix(1:7, nrow = 2, ncol = 3) :
>> data length [7] is not a sub-multiple or multiple of the number of rows [2]
>> 2: In matrix(1:7, nrow = 2, ncol = 3) :
>> data length incompatible with size of matrix
> 
>>> matrix (1:8, nrow = 2, ncol = 3)
>> Warning messages:
>> 1: In matrix(1:8, nrow = 2, ncol = 3) :
>> data length [8] is not a sub-multiple or multiple of the number of columns [3]
>> 2: In matrix(1:8, nrow = 2, ncol = 3) :
>> data length incompatible with size of matrix
> 
>>> matrix (1:6, nrow = 0, ncol = 0)
>> <0 x 0 matrix>
>>> matrix (numeric(0), nrow = 2, ncol = 3)
>> [,1] [,2] [,3]
>> [1,]   NA   NA   NA
>> [2,]   NA   NA   NA
> 
>>> matrix(1:2, ncol = 8)
>> [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
>> [1,]    1    2    1    2    1    2    1    2
> 
>> It would be nice to combine the new warning with that about ?...not a sub-multiple or multiple?? into a single warning, if appropriate (as in two of the examples above), but that would require bigger surgery way above my payscale.
> 
> I agree that in those cases it should only show one warning, and
> to keep things simple I'd say it should just be the 2nd of those
> above  or more precisely (I have to check if that's correct)
> 
>  "data length larger than size of matrix"
> 
> Martin
> 
>> Kind regards
>> Wolfgang Huber
> 
> 
>> Index: array.c
>> ===================================================================
>> --- array.c	(revision 79951)
>> +++ array.c	(working copy)
>> @@ -133,18 +133,19 @@
>> nc = (int) ceil((double) lendat / (double) nr);
>> }
> 
>> -    if(lendat > 0) {
>> +    if (lendat > 1) {
>> R_xlen_t nrc = (R_xlen_t) nr * nc;
>> -	if (lendat > 1 && nrc % lendat != 0) {
>> +	if ((nrc % lendat) != 0) {
>> if (((lendat > nr) && (lendat / nr) * nr != lendat) ||
>> ((lendat < nr) && (nr / lendat) * lendat != nr))
>> warning(_("data length [%d] is not a sub-multiple or multiple of the number of rows [%d]"), lendat, nr);
>> else if (((lendat > nc) && (lendat / nc) * nc != lendat) ||
>> ((lendat < nc) && (nc / lendat) * lendat != nc))
>> -		warning(_("data length [%d] is not a sub-multiple or multiple of the number of columns [%d]"), lendat, nc);
>> -	}
>> -	else if ((lendat > 1) && (nrc == 0)){
>> +		    warning(_("data length [%d] is not a sub-multiple or multiple of the number of columns [%d]"), lendat, nc);
>> +	if (nrc == 0)
>> warning(_("data length exceeds size of matrix"));
>> +        if (nrc != lendat)
>> +            warning(_("data length incompatible with size of matrix"));
>> }
>> }
> 
> 
>> ------
>> // And here, for easy checking that part of the code in the new form:
>> if (lendat > 1) {
>> R_xlen_t nrc = (R_xlen_t) nr * nc;
>> if ((nrc % lendat) != 0) {
>> if (((lendat > nr) && (lendat / nr) * nr != lendat) ||
>> ((lendat < nr) && (nr / lendat) * lendat != nr))
>> warning(_("data length [%d] is not a sub-multiple or multiple of the number of rows [%d]"), lendat, nr);
>> else if (((lendat > nc) && (lendat / nc) * nc != lendat) ||
>> ((lendat < nc) && (nc / lendat) * lendat != nc))
>> warning(_("data length [%d] is not a sub-multiple or multiple of the number of columns [%d]"), lendat, nc);
>> if (nrc == 0)
>> warning(_("data length exceeds size of matrix"));
>> if (nrc != lendat)  
>> warning(_("data length incompatible with size of matrix"));
>> }
>> }
> 
>>> Il giorno 2feb2021, alle ore 00:27, Abby Spurdle (/??bi/) <spurdle.a at gmail.com> ha scritto:
>>> 
>>> So, does that mean that a clean result is contingent on the length of
>>> the data being a multiple of both the number of rows and columns?
>>> 
>>> However, this rule is not straightforward.
>>> 
>>>> #EXAMPLE 1
>>>> #what I would expect
>>>> matrix (1:12, 0, 0)
>>> <0 x 0 matrix>
>>> Warning message:
>>> In matrix(1:12, 0, 0) : data length exceeds size of matrix
>>> 
>>>> #EXAMPLE 2
>>>> #don't like this
>>>> matrix (numeric (), 2, 3)
>>> [,1] [,2] [,3]
>>> [1,]   NA   NA   NA
>>> [2,]   NA   NA   NA
>>> 
>>> The first example is what I would expect, but is inconsistent with the
>>> previous examples.
>>> (Because zero is a valid multiple of twelve).
>>> 
>>> I dislike the second example with recycling of a zero-length vector.
>>> This *is* covered in the help file, but also seems inconsistent with
>>> the previous examples.
>>> (Because two and three are not valid multiples of zero).
>>> 
>>> Also, I can't think of any reason why someone would want to construct
>>> a matrix with extra data, and then discard part of it.
>>> And even if there was, then why not allow an arbitrarily longer length?
>>> 
>>> 
>>> On Mon, Feb 1, 2021 at 10:08 PM Martin Maechler
>>> <maechler at stat.math.ethz.ch> wrote:
>>>> 
>>>>>>>>> Abby Spurdle (/??bi/)
>>>>>>>>> on Mon, 1 Feb 2021 19:50:32 +1300 writes:
>>>> 
>>>>> I'm a little surprised that the following doesn't trigger an error or a warning.
>>>>> matrix (1:256, 8, 8)
>>>> 
>>>>> The help file says that the main argument is recycled, if it's too short.
>>>>> But doesn't say what happens if it's too long.
>>>> 
>>>> It's somewhat subtler than one may assume :
>>>> 
>>>>> matrix(1:9, 2,3)
>>>> [,1] [,2] [,3]
>>>> [1,]    1    3    5
>>>> [2,]    2    4    6
>>>> Warning message:
>>>> In matrix(1:9, 2, 3) :
>>>> data length [9] is not a sub-multiple or multiple of the number of rows [2]
>>>> 
>>>>> matrix(1:8, 2,3)
>>>> [,1] [,2] [,3]
>>>> [1,]    1    3    5
>>>> [2,]    2    4    6
>>>> Warning message:
>>>> In matrix(1:8, 2, 3) :
>>>> data length [8] is not a sub-multiple or multiple of the number of columns [3]
>>>> 
>>>>> matrix(1:12, 2,3)
>>>> [,1] [,2] [,3]
>>>> [1,]    1    3    5
>>>> [2,]    2    4    6
>>>>> 
>>>> 
>>>> So it looks to me the current behavior is quite on purpose.
>>>> Are you sure it's not documented at all when reading the docs
>>>> carefully?  (I did *not*, just now).
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @vr@h@m@@d|er @end|ng |rom gm@||@com  Wed Feb 10 04:15:08 2021
From: @vr@h@m@@d|er @end|ng |rom gm@||@com (Avraham Adler)
Date: Wed, 10 Feb 2021 03:15:08 +0000
Subject: [Rd] From .Fortran to .Call?
In-Reply-To: <CAL6gwn+=pJXMrUyJTx7utNUMXk+BSfyXnTVz2BnxeGyi9GveJw@mail.gmail.com>
References: <4972E445-44EB-4E2E-B9CB-4A274972BE71@illinois.edu>
 <20201219205313.01df8259@Tarkus>
 <22b9d8f5-dba6-e58c-56e5-b0389daa243a@stanford.edu>
 <CAL6gwnL5de4UU2uTs=z=Q1552QKRd+p1NmesSn5sz6Nvp5K2MA@mail.gmail.com>
 <B71E1276-B63C-4766-BA81-27649AC3AE14@illinois.edu>
 <579c7a2c-e6d7-f3da-2b2e-2a1fc1ecdbd9@stanford.edu>
 <5d7ef351-b778-e094-6cc6-d08d27dc6035@stanford.edu>
 <3318E414-C42D-4C3D-AC05-4D801B087681@illinois.edu>
 <CAL6gwn+=pJXMrUyJTx7utNUMXk+BSfyXnTVz2BnxeGyi9GveJw@mail.gmail.com>
Message-ID: <CAL6gwnJ99yY_h-3Tib5xfG6wOONAastjQpU7N-PO=nC+D5dWsw@mail.gmail.com>

I had some time, so I updated a toy package I have for explaining R
and Fortran use to use both the .Call and the .Fortran interfaces [1].
I think the actual Fortran code is as close to identical as I can
reasonably make it. On my computer, the .Call interface (_f) is around
4 times as fast as the .Fortran interface (_f2).

Bill, I don't know if you can, or should, "just" change .Fortran to
.Call. You certainly cannot do the reverse. I think my source code
made as minimal a change as possible; maybe that would help.

-------
set.seed(77)
A <- runif(100, 0, 2000)
microbenchmark(LLC_f(A, 500, 500), LLC_f2(A, 500, 500), times =
10000L, control = list(order = 'block'), check = 'equal')
Unit: nanoseconds
                expr  min   lq      mean median   uq   max neval cld
  LLC_f(A, 500, 500)  700  702  799.5906    801  802  6601 10000  a
 LLC_f2(A, 500, 500) 3000 3101 3328.8712   3201 3401 19802 10000   b
--------

Thanks,

Avi

[1] https://github.com/aadler/SimpFort


On Sat, Dec 26, 2020 at 10:48 PM Avraham Adler <avraham.adler at gmail.com> wrote:
>
> I?ve tried recoding some of Delaporte to use the .Fortran interface and I don?t know what I?m doing wrong but it either doesn?t work or crashes my R instance completely.
>
> Avi
>
> On Sat, Dec 26, 2020 at 11:48 AM Koenker, Roger W <rkoenker at illinois.edu> wrote:
>>
>> I?ve recoded a version of one of my quantile regression fitting functions to use .C64 from dotCall64 rather than .Fortran.
>> For a moderately large problem with n = 500,000 and p = 5, and solving for  1:49/50 quantiles the new version shows
>> a 3% speedup, although for smaller problems it is actually slower that the .Fortran version.  So, I?m (provisionally)
>> unimpressed by the claims that .Fortran has a big ?overhead? performance penalty.  Compared to the(more than) an order of
>> magnitude (base 10) improvement that moving from R to fortran produces,  3% isn?t really worth the (admittedly) minimal
>> additional coding effort.
>>
>> > On Dec 24, 2020, at 12:39 AM, Balasubramanian Narasimhan <naras at stanford.edu> wrote:
>> >
>> > Also, just came to know about dotcall64::.C64() (on CRAN) which allows for Fortran to be called using .Call().
>> >
>> > -Naras
>> >
>> > On 12/23/20 8:34 AM, Balasubramanian Narasimhan wrote:
>> >> I think it should be pretty easy to fix up SUtools to use the .Call instead of .Fortran following along the lines of
>> >>
>> >> https://urldefense.com/v3/__https://github.com/wrathematics/Romp__;!!DZ3fjg!r3_sswU4ZHCe3huoGUy2boX-Vr7aUS-RaExyeh_Rsv8gvGiABcqzvOOKZinG4kC7RtA$
>> >> I too deal with a lot of f77 and so I will most likely finish it before the new year, if not earlier. (Would welcome testers besides myself.)
>> >>
>> >> Incidentally, any idea of what the performance hit is, quantitatively? I confess I never paid attention to it myself as most Fortran code I use seems pretty fast, i.e. glmnet.
>> >>
>> >> -Naras
>> >>
>> >>
>> >> On 12/23/20 3:57 AM, Koenker, Roger W wrote:
>> >>> Thanks to all and best wishes for a better 2021.
>> >>>
>> >>> Unfortunately I remain somewhat confused:
>> >>>
>> >>>     o  Bill reveals an elegant way to get from my rudimentary registration setup to
>> >>>     one that would explicitly type the C interface functions,
>> >>>
>> >>>     o Ivan seems to suggest that there would be no performance gain from doing this.
>> >>>
>> >>>     o  Naras?s pcLasso package does use the explicit C typing, but then uses .Fortran
>> >>>     not .Call.
>> >>>
>> >>>     o  Avi uses .Call and cites the Romp package https://urldefense.com/v3/__https://github.com/wrathematics/Romp__;!!DZ3fjg!r3_sswU4ZHCe3huoGUy2boX-Vr7aUS-RaExyeh_Rsv8gvGiABcqzvOOKZinG4kC7RtA$     where it is asserted that "there is a (nearly) deprecated interface .Fortran() which you
>> >>>     should not use due to its large performance overhead.?
>> >>>
>> >>> As the proverbial naive R (ab)user I?m left wondering:
>> >>>
>> >>>     o  if I updated my quantreg_init.c file in accordance with Bill?s suggestion could I
>> >>>     then simply change my .Fortran calls to .Call?
>> >>>
>> >>>     o  and if so, do I need to include ALL the fortran subroutines in my src directory
>> >>>     or only the ones called from R?
>> >>>
>> >>>     o  and in either case could I really expect to see a significant performance gain?
>> >>>
>> >>> Finally, perhaps I should stipulate that my fortran is strictly f77, so no modern features
>> >>> are in play, indeed most of the code is originally written in ratfor, Brian Kernighan?s
>> >>> dialect from ancient times at Bell Labs.
>> >>>
>> >>> Again,  thanks to all for any advice,
>> >>> Roger
>> >>>
>> >>>
>> >>>> On Dec 23, 2020, at 1:11 AM, Avraham Adler <avraham.adler at gmail.com> wrote:
>> >>>>
>> >>>> Hello, Ivan.
>> >>>>
>> >>>> I used .Call instead of .Fortran in the Delaporte package [1]. What
>> >>>> helped me out a lot was Drew Schmidt's Romp examples and descriptions
>> >>>> [2]. If you are more comfortable with the older Fortran interface,
>> >>>> Tomasz Kalinowski has a package which uses Fortran 2018 more
>> >>>> efficiently [3]. I haven't tried this last in practice, however.
>> >>>>
>> >>>> Hope that helps,
>> >>>>
>> >>>> Avi
>> >>>>
>> >>>> [1] https://urldefense.com/v3/__https://CRAN.R-project.org/package=Delaporte__;!!DZ3fjg!s1-ihrZ9DPUtXpxdIpJPA1VedpZFt12Ahmn4CycOmile_uSahFZnJPn_5KPITBN5NK8$
>> >>>> [2] https://urldefense.com/v3/__https://github.com/wrathematics/Romp__;!!DZ3fjg!s1-ihrZ9DPUtXpxdIpJPA1VedpZFt12Ahmn4CycOmile_uSahFZnJPn_5KPISF5aCYs$
>> >>>> [3] https://urldefense.com/v3/__https://github.com/t-kalinowski/RFI__;!!DZ3fjg!s1-ihrZ9DPUtXpxdIpJPA1VedpZFt12Ahmn4CycOmile_uSahFZnJPn_5KPIbwXmXqY$
>> >>>>
>> >>>> Tomasz Kalinowski
>> >>>>
>> >>>>
>> >>>>
>> >>>> On Tue, Dec 22, 2020 at 7:24 PM Balasubramanian Narasimhan
>> >>>> <naras at stanford.edu> wrote:
>> >>>>> To deal with such Fortran issues in several packages I deal with, I
>> >>>>> wrote the SUtools package (https://urldefense.com/v3/__https://github.com/bnaras/SUtools__;!!DZ3fjg!s1-ihrZ9DPUtXpxdIpJPA1VedpZFt12Ahmn4CycOmile_uSahFZnJPn_5KPIJ5BbDwA$ ) that you
>> >>>>> can try.  The current version generates the registration assuming
>> >>>>> implicit Fortran naming conventions though. (I've been meaning to
>> >>>>> upgrade it to use the gfortran -fc-prototypes-external flag which should
>> >>>>> be easy; I might just finish that during these holidays.)
>> >>>>>
>> >>>>> There's a vignette as well:
>> >>>>> https://urldefense.com/v3/__https://bnaras.github.io/SUtools/articles/SUtools.html__;!!DZ3fjg!s1-ihrZ9DPUtXpxdIpJPA1VedpZFt12Ahmn4CycOmile_uSahFZnJPn_5KPITq9-Quc$
>> >>>>>
>> >>>>> -Naras
>> >>>>>
>> >>>>>
>> >>>>> On 12/19/20 9:53 AM, Ivan Krylov wrote:
>> >>>>>> On Sat, 19 Dec 2020 17:04:59 +0000
>> >>>>>> "Koenker, Roger W" <rkoenker at illinois.edu> wrote:
>> >>>>>>
>> >>>>>>> There are comments in various places, including R-extensions ?5.4
>> >>>>>>> suggesting that .Fortran is (nearly) deprecated and hinting that use
>> >>>>>>> of .Call is more efficient and now preferred for packages.
>> >>>>>> My understanding of ?5.4 and 5.5 is that explicit routine registration
>> >>>>>> is what's important for efficiency, and your package already does that
>> >>>>>> (i.e. calls R_registerRoutines()). The only two things left to add
>> >>>>>> would be types (REALSXP/INTSXP/...) and styles (R_ARG_IN,
>> >>>>>> R_ARG_OUT/...) of the arguments of each subroutine.
>> >>>>>>
>> >>>>>> Switching to .Call makes sense if you want to change the interface of
>> >>>>>> your native subroutines to accept arbitrary heavily structured SEXPs
>> >>>>>> (and switching to .External could be useful if you wanted to play with
>> >>>>>> evaluation of the arguments).
>> >>>>>>
>> >>>>> ______________________________________________
>> >>>>> R-devel at r-project.org mailing list
>> >>>>> https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-devel__;!!DZ3fjg!s1-ihrZ9DPUtXpxdIpJPA1VedpZFt12Ahmn4CycOmile_uSahFZnJPn_5KPIr_nqkqg$
>> >>
>> >> ______________________________________________
>> >> R-devel at r-project.org mailing list
>> >> https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-devel__;!!DZ3fjg!r3_sswU4ZHCe3huoGUy2boX-Vr7aUS-RaExyeh_Rsv8gvGiABcqzvOOKZinGvMnBkW0$
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
> --
> Sent from Gmail Mobile


From tobm@r @end|ng |rom ceh@@c@uk  Thu Feb 11 17:55:14 2021
From: tobm@r @end|ng |rom ceh@@c@uk (Marthews, Toby R.)
Date: Thu, 11 Feb 2021 16:55:14 +0000
Subject: [Rd] Request for a crop option on R's standard plot context menu
Message-ID: <CWXP123MB3429545A65FE3EF62D70CF318F8C9@CWXP123MB3429.GBRP123.PROD.OUTLOOK.COM>

Dear R Dev,

I hope you don't mind a request for a feature from a long-time R user (happily using R since 2005).

I use R for lots of plotting for my work, e.g. for my current project I have a script that generates 300 plots. I generally copy these all as bitmaps and put them directly into a Word document for my report (see e.g. attached screenshot).

I am always required to maximise the plots to get the best resolution, but that always means I get lots of white space when I copy the plot into Word. Cropping them takes a reasonable amount of time (e.g. an entire day to crop all 300 for this project).

I'm wondering whether it would be possible to have an option added to the plot window context menu for "Cropped bitmap" or "Crop whitespace"? I think this would be VERY useful because all the online tools I've seen for batch-cropping a set of images require the same crop to be applied to all images (e.g. https://www.youtube.com/watch?v=icbpS0OH9a0 ) and that's not the case for my plots (some of my plots are panel plots, some simpler plots).

I know it's a bit cheeky to ask for something that I have no idea how to code up myself: I am just hoping that this feedback might go somewhere useful. R can really do 99% of things kind of perfectly so it seems churlish to point out the 1%, but if this is an easy thing to add in then at least I would use it pretty much every project I work on!

Many thanks and best regards,

Best regards,

Toby

PS. I know I could modify my script so that it creates windows of exactly the right size (dev.new), but doing that would mean I would have to recalculate the sizes if I changed anything on the plots at all (e.g. aspect, x label) so I would lose probably more time pursuing that option. Also, I've found that using lots of dev.new commands makes it difficult for colleagues who use RStudio to use my scripts.
   I am also aware I could export these images as pdfs, but then I would have to open 300 pdfs, extract the images and crop them all in 3rd party software. Again, perfectly possible but I am searching for a slightly quicker solution (!).


Dr Toby Marthews

UKCEH Band 6 Researcher in Global Surface Science (Hydro-Climate Risks)

   Mob: +44 753 2168305, web: www.tobymarthews.com<http://www.tobymarthews.com>



This email and any attachments are intended solely for the named recipients and are confidential. If you are not the intended recipient please reply to the email to highlight the error and delete this email from your system; you must not use, disclose, copy or distribute this email or any of its attachments. UKCEH has taken every reasonable precaution to minimise risk of this email or any attachments containing viruses or malware but the recipient should carry out its own virus and malware checks before opening the attachments. UKCEH does not accept any liability for any losses or damages which the recipient may sustain due to presence of any viruses. Opinions, conclusions or other information in this message and attachments that are not related directly to UKCEH business are solely those of the author and do not represent the views of UKCEH. We process your personal data in accordance with our Privacy Notice, available on the UKCEH website.
https://www.ceh.ac.uk/privacy-notice

-------------- next part --------------
A non-text attachment was scrubbed...
Name: Plot context menu.png
Type: image/png
Size: 100320 bytes
Desc: Plot context menu.png
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20210211/eee7ee24/attachment.png>

From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Fri Feb 12 12:25:48 2021
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Fri, 12 Feb 2021 11:25:48 +0000
Subject: [Rd] Unexpected behavior of '[' in an apply instruction
Message-ID: <a8eac065-c1ea-a165-2d92-c4802b4d0373@sapo.pt>

Hello,

This came up in this StackOverflow post [1].

If x is an array with n dimensions, how to subset by just one dimension?
If n is known, it's simple, add the required number of commas in their 
proper places.
But what if the user doesn't know the value of n?

The example below has n = 3, and subsets by the 1st dim. The apply loop 
solves the problem as expected but note that the index i has length(i) > 1.


x <- array(1:60, dim = c(10, 2, 3))

d <- 1L
i <- 1:5
apply(x, MARGIN = -d, '[', i)
x[i, , ]


If length(i) == 1, argument drop = FALSE doesn't work as I expected it 
to work, only the other way does:


i <- 1L
apply(x, MARGIN = -d, '[', i, drop = FALSE)
x[i, , drop = FALSE]


What am I missing?

[1] 
https://stackoverflow.com/questions/66168564/is-there-a-native-r-syntax-to-extract-rows-of-an-array

Thanks in advance,

Rui Barradas


From @|mon@urb@nek @end|ng |rom R-project@org  Fri Feb 12 21:32:02 2021
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Sat, 13 Feb 2021 09:32:02 +1300
Subject: [Rd] 
 Request for a crop option on R's standard plot context menu
In-Reply-To: <CWXP123MB3429545A65FE3EF62D70CF318F8C9@CWXP123MB3429.GBRP123.PROD.OUTLOOK.COM>
References: <CWXP123MB3429545A65FE3EF62D70CF318F8C9@CWXP123MB3429.GBRP123.PROD.OUTLOOK.COM>
Message-ID: <53D47F27-ABEF-4369-B42B-7FB0295C6381@R-project.org>

Toby,

R provides more convenient ways for this - using window devices for any output other than screen is not its intended function. I would recommend using the off-screen devices devices such as pdf() or png() to generate output which also gives you far more control. Also please note that the amount of margins you include in the plots is entirely up to you, it should not be necessary to crop anything after the fact if you set mar/oma to the desired values.

That said, it is just a simple one-liner "magick::image_trim('foo.png')" to trim an image if you want to go that route.

Cheers,
Simon



> On Feb 12, 2021, at 5:55 AM, Marthews, Toby R. via R-devel <r-devel at r-project.org> wrote:
> 
> Dear R Dev,
> 
> I hope you don't mind a request for a feature from a long-time R user (happily using R since 2005).
> 
> I use R for lots of plotting for my work, e.g. for my current project I have a script that generates 300 plots. I generally copy these all as bitmaps and put them directly into a Word document for my report (see e.g. attached screenshot).
> 
> I am always required to maximise the plots to get the best resolution, but that always means I get lots of white space when I copy the plot into Word. Cropping them takes a reasonable amount of time (e.g. an entire day to crop all 300 for this project).
> 
> I'm wondering whether it would be possible to have an option added to the plot window context menu for "Cropped bitmap" or "Crop whitespace"? I think this would be VERY useful because all the online tools I've seen for batch-cropping a set of images require the same crop to be applied to all images (e.g. https://www.youtube.com/watch?v=icbpS0OH9a0 ) and that's not the case for my plots (some of my plots are panel plots, some simpler plots).
> 
> I know it's a bit cheeky to ask for something that I have no idea how to code up myself: I am just hoping that this feedback might go somewhere useful. R can really do 99% of things kind of perfectly so it seems churlish to point out the 1%, but if this is an easy thing to add in then at least I would use it pretty much every project I work on!
> 
> Many thanks and best regards,
> 
> Best regards,
> 
> Toby
> 
> PS. I know I could modify my script so that it creates windows of exactly the right size (dev.new), but doing that would mean I would have to recalculate the sizes if I changed anything on the plots at all (e.g. aspect, x label) so I would lose probably more time pursuing that option. Also, I've found that using lots of dev.new commands makes it difficult for colleagues who use RStudio to use my scripts.
>   I am also aware I could export these images as pdfs, but then I would have to open 300 pdfs, extract the images and crop them all in 3rd party software. Again, perfectly possible but I am searching for a slightly quicker solution (!).
> 
> 
> Dr Toby Marthews
> 
> UKCEH Band 6 Researcher in Global Surface Science (Hydro-Climate Risks)
> 
>   Mob: +44 753 2168305, web: www.tobymarthews.com<http://www.tobymarthews.com>
> 
> 
> 
> This email and any attachments are intended solely for the named recipients and are confidential. If you are not the intended recipient please reply to the email to highlight the error and delete this email from your system; you must not use, disclose, copy or distribute this email or any of its attachments. UKCEH has taken every reasonable precaution to minimise risk of this email or any attachments containing viruses or malware but the recipient should carry out its own virus and malware checks before opening the attachments. UKCEH does not accept any liability for any losses or damages which the recipient may sustain due to presence of any viruses. Opinions, conclusions or other information in this message and attachments that are not related directly to UKCEH business are solely those of the author and do not represent the views of UKCEH. We process your personal data in accordance with our Privacy Notice, available on the UKCEH website.
> https://www.ceh.ac.uk/privacy-notice
> <Plot context menu.png>______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


	[[alternative HTML version deleted]]


From h@nk|n@rob|n @end|ng |rom gm@||@com  Fri Feb 12 21:45:46 2021
From: h@nk|n@rob|n @end|ng |rom gm@||@com (robin hankin)
Date: Sat, 13 Feb 2021 09:45:46 +1300
Subject: [Rd] Unexpected behavior of '[' in an apply instruction
In-Reply-To: <a8eac065-c1ea-a165-2d92-c4802b4d0373@sapo.pt>
References: <a8eac065-c1ea-a165-2d92-c4802b4d0373@sapo.pt>
Message-ID: <CAHHjBM5PhQfxw3xSZXxuQAuWqTi83eN=EiuCQC7rtC35bS3R9A@mail.gmail.com>

Rui

> x <- array(runif(60), dim = c(10, 2, 3))
> array(x[slice.index(x,1) %in% 1:5],c(5,dim(x)[-1]))

(I don't see this on stackoverflow; should I post this there too?)  Most of
the magic package is devoted to handling arrays of arbitrary dimensions and
this functionality might be good to include if anyone would find it useful.

HTH

Robin


<hankin.robin at gmail.com>


On Sat, Feb 13, 2021 at 12:26 AM Rui Barradas <ruipbarradas at sapo.pt> wrote:

> Hello,
>
> This came up in this StackOverflow post [1].
>
> If x is an array with n dimensions, how to subset by just one dimension?
> If n is known, it's simple, add the required number of commas in their
> proper places.
> But what if the user doesn't know the value of n?
>
> The example below has n = 3, and subsets by the 1st dim. The apply loop
> solves the problem as expected but note that the index i has length(i) > 1.
>
>
> x <- array(1:60, dim = c(10, 2, 3))
>
> d <- 1L
> i <- 1:5
> apply(x, MARGIN = -d, '[', i)
> x[i, , ]
>
>
> If length(i) == 1, argument drop = FALSE doesn't work as I expected it
> to work, only the other way does:
>
>
> i <- 1L
> apply(x, MARGIN = -d, '[', i, drop = FALSE)
> x[i, , drop = FALSE]
>
>
> What am I missing?
>
> [1]
>
> https://stackoverflow.com/questions/66168564/is-there-a-native-r-syntax-to-extract-rows-of-an-array
>
> Thanks in advance,
>
> Rui Barradas
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Fri Feb 12 22:23:38 2021
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Fri, 12 Feb 2021 21:23:38 +0000
Subject: [Rd] Unexpected behavior of '[' in an apply instruction
In-Reply-To: <CAHHjBM5PhQfxw3xSZXxuQAuWqTi83eN=EiuCQC7rtC35bS3R9A@mail.gmail.com>
References: <a8eac065-c1ea-a165-2d92-c4802b4d0373@sapo.pt>
 <CAHHjBM5PhQfxw3xSZXxuQAuWqTi83eN=EiuCQC7rtC35bS3R9A@mail.gmail.com>
Message-ID: <f13cf55f-1210-cfb6-bf74-ea73fcaaa707@sapo.pt>

Hello,

Yes, although there is an accepted solution, I believe you should post 
this solution there. It's a base R solution, what the question asks for.

And thanks, I would have never reminded myself of slice.index.

Rui Barradas

?s 20:45 de 12/02/21, robin hankin escreveu:
> Rui
> 
>  > x <- array(runif(60), dim = c(10, 2, 3))
>  > array(x[slice.index(x,1) %in% 1:5],c(5,dim(x)[-1]))
> 
> (I don't see this on stackoverflow; should I post this there too?)? Most 
> of the magic package is devoted to handling arrays of arbitrary 
> dimensions and this functionality might be good to include if anyone 
> would find it useful.
> 
> HTH
> 
> Robin
> 
> 
> <mailto:hankin.robin at gmail.com>
> 
> 
> On Sat, Feb 13, 2021 at 12:26 AM Rui Barradas <ruipbarradas at sapo.pt 
> <mailto:ruipbarradas at sapo.pt>> wrote:
> 
>     Hello,
> 
>     This came up in this StackOverflow post [1].
> 
>     If x is an array with n dimensions, how to subset by just one dimension?
>     If n is known, it's simple, add the required number of commas in their
>     proper places.
>     But what if the user doesn't know the value of n?
> 
>     The example below has n = 3, and subsets by the 1st dim. The apply loop
>     solves the problem as expected but note that the index i has
>     length(i) > 1.
> 
> 
>     x <- array(1:60, dim = c(10, 2, 3))
> 
>     d <- 1L
>     i <- 1:5
>     apply(x, MARGIN = -d, '[', i)
>     x[i, , ]
> 
> 
>     If length(i) == 1, argument drop = FALSE doesn't work as I expected it
>     to work, only the other way does:
> 
> 
>     i <- 1L
>     apply(x, MARGIN = -d, '[', i, drop = FALSE)
>     x[i, , drop = FALSE]
> 
> 
>     What am I missing?
> 
>     [1]
>     https://stackoverflow.com/questions/66168564/is-there-a-native-r-syntax-to-extract-rows-of-an-array
> 
>     Thanks in advance,
> 
>     Rui Barradas
> 
>     ______________________________________________
>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
>


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Fri Feb 12 23:49:50 2021
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Sokol Serguei)
Date: Fri, 12 Feb 2021 23:49:50 +0100
Subject: [Rd] Unexpected behavior of '[' in an apply instruction
In-Reply-To: <f13cf55f-1210-cfb6-bf74-ea73fcaaa707@sapo.pt>
References: <a8eac065-c1ea-a165-2d92-c4802b4d0373@sapo.pt>
 <CAHHjBM5PhQfxw3xSZXxuQAuWqTi83eN=EiuCQC7rtC35bS3R9A@mail.gmail.com>
 <f13cf55f-1210-cfb6-bf74-ea73fcaaa707@sapo.pt>
Message-ID: <8de49c5d-8e9b-31fd-4c2b-212db94a2ccf@insa-toulouse.fr>

Le 12/02/2021 ? 22:23, Rui Barradas a ?crit?:
> Hello,
>
> Yes, although there is an accepted solution, I believe you should post 
> this solution there. It's a base R solution, what the question asks for.
>
> And thanks, I would have never reminded myself of slice.index.

There is another approach -- produce a call to `[`() putting there 
"required number of commas in their proper places" programmatically. 
Even if it does not lead to a very readable expression, I think it 
merits to be mentioned.

 ? x <- array(1:60, dim = c(10, 2, 3))
 ? ld=length(dim(x))
 ? i=1 # i.e. the first row but can be a slice 1:5, whatever
 ? do.call(`[`, c(alist(x, i), alist(,)[rep(1,ld-1)], alist(drop=FALSE)))

Best,
Serguei.

>
> Rui Barradas
>
> ?s 20:45 de 12/02/21, robin hankin escreveu:
>> Rui
>>
>> ?> x <- array(runif(60), dim = c(10, 2, 3))
>> ?> array(x[slice.index(x,1) %in% 1:5],c(5,dim(x)[-1]))
>>
>> (I don't see this on stackoverflow; should I post this there too?)? 
>> Most of the magic package is devoted to handling arrays of arbitrary 
>> dimensions and this functionality might be good to include if anyone 
>> would find it useful.
>>
>> HTH
>>
>> Robin
>>
>>
>> <mailto:hankin.robin at gmail.com>
>>
>>
>> On Sat, Feb 13, 2021 at 12:26 AM Rui Barradas <ruipbarradas at sapo.pt 
>> <mailto:ruipbarradas at sapo.pt>> wrote:
>>
>> ??? Hello,
>>
>> ??? This came up in this StackOverflow post [1].
>>
>> ??? If x is an array with n dimensions, how to subset by just one 
>> dimension?
>> ??? If n is known, it's simple, add the required number of commas in 
>> their
>> ??? proper places.
>> ??? But what if the user doesn't know the value of n?
>>
>> ??? The example below has n = 3, and subsets by the 1st dim. The 
>> apply loop
>> ??? solves the problem as expected but note that the index i has
>> ??? length(i) > 1.
>>
>>
>> ??? x <- array(1:60, dim = c(10, 2, 3))
>>
>> ??? d <- 1L
>> ??? i <- 1:5
>> ??? apply(x, MARGIN = -d, '[', i)
>> ??? x[i, , ]
>>
>>
>> ??? If length(i) == 1, argument drop = FALSE doesn't work as I 
>> expected it
>> ??? to work, only the other way does:
>>
>>
>> ??? i <- 1L
>> ??? apply(x, MARGIN = -d, '[', i, drop = FALSE)
>> ??? x[i, , drop = FALSE]
>>
>>
>> ??? What am I missing?
>>
>> ??? [1]
>> https://stackoverflow.com/questions/66168564/is-there-a-native-r-syntax-to-extract-rows-of-an-array
>>
>> ??? Thanks in advance,
>>
>> ??? Rui Barradas
>>
>> ??? ______________________________________________
>> ??? R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>> ??? https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From @oko| @end|ng |rom |n@@-tou|ou@e@|r  Sat Feb 13 00:08:48 2021
From: @oko| @end|ng |rom |n@@-tou|ou@e@|r (Sokol Serguei)
Date: Sat, 13 Feb 2021 00:08:48 +0100
Subject: [Rd] Unexpected behavior of '[' in an apply instruction
In-Reply-To: <8de49c5d-8e9b-31fd-4c2b-212db94a2ccf@insa-toulouse.fr>
References: <a8eac065-c1ea-a165-2d92-c4802b4d0373@sapo.pt>
 <CAHHjBM5PhQfxw3xSZXxuQAuWqTi83eN=EiuCQC7rtC35bS3R9A@mail.gmail.com>
 <f13cf55f-1210-cfb6-bf74-ea73fcaaa707@sapo.pt>
 <8de49c5d-8e9b-31fd-4c2b-212db94a2ccf@insa-toulouse.fr>
Message-ID: <1a3b16a2-c3ca-6189-e353-3e6b6e2b9131@insa-toulouse.fr>

Le 12/02/2021 ? 23:49, Sokol Serguei a ?crit?:
> Le 12/02/2021 ? 22:23, Rui Barradas a ?crit?:
>> Hello,
>>
>> Yes, although there is an accepted solution, I believe you should 
>> post this solution there. It's a base R solution, what the question 
>> asks for.
>>
>> And thanks, I would have never reminded myself of slice.index.
>
> There is another approach -- produce a call to `[`() putting there 
> "required number of commas in their proper places" programmatically. 
> Even if it does not lead to a very readable expression, I think it 
> merits to be mentioned.
>
> ? x <- array(1:60, dim = c(10, 2, 3))
> ? ld=length(dim(x))
> ? i=1 # i.e. the first row but can be a slice 1:5, whatever
> ? do.call(`[`, c(alist(x, i), alist(,)[rep(1,ld-1)], alist(drop=FALSE)))

Or slightly shorter:

 ? do.call(`[`, alist(x, i, ,drop=FALSE)[c(1,2,rep(3,ld-1),4)])

>
> Best,
> Serguei.
>
>>
>> Rui Barradas
>>
>> ?s 20:45 de 12/02/21, robin hankin escreveu:
>>> Rui
>>>
>>> ?> x <- array(runif(60), dim = c(10, 2, 3))
>>> ?> array(x[slice.index(x,1) %in% 1:5],c(5,dim(x)[-1]))
>>>
>>> (I don't see this on stackoverflow; should I post this there too?)? 
>>> Most of the magic package is devoted to handling arrays of arbitrary 
>>> dimensions and this functionality might be good to include if anyone 
>>> would find it useful.
>>>
>>> HTH
>>>
>>> Robin
>>>
>>>
>>> <mailto:hankin.robin at gmail.com>
>>>
>>>
>>> On Sat, Feb 13, 2021 at 12:26 AM Rui Barradas <ruipbarradas at sapo.pt 
>>> <mailto:ruipbarradas at sapo.pt>> wrote:
>>>
>>> ??? Hello,
>>>
>>> ??? This came up in this StackOverflow post [1].
>>>
>>> ??? If x is an array with n dimensions, how to subset by just one 
>>> dimension?
>>> ??? If n is known, it's simple, add the required number of commas in 
>>> their
>>> ??? proper places.
>>> ??? But what if the user doesn't know the value of n?
>>>
>>> ??? The example below has n = 3, and subsets by the 1st dim. The 
>>> apply loop
>>> ??? solves the problem as expected but note that the index i has
>>> ??? length(i) > 1.
>>>
>>>
>>> ??? x <- array(1:60, dim = c(10, 2, 3))
>>>
>>> ??? d <- 1L
>>> ??? i <- 1:5
>>> ??? apply(x, MARGIN = -d, '[', i)
>>> ??? x[i, , ]
>>>
>>>
>>> ??? If length(i) == 1, argument drop = FALSE doesn't work as I 
>>> expected it
>>> ??? to work, only the other way does:
>>>
>>>
>>> ??? i <- 1L
>>> ??? apply(x, MARGIN = -d, '[', i, drop = FALSE)
>>> ??? x[i, , drop = FALSE]
>>>
>>>
>>> ??? What am I missing?
>>>
>>> ??? [1]
>>> https://stackoverflow.com/questions/66168564/is-there-a-native-r-syntax-to-extract-rows-of-an-array 
>>>
>>>
>>> ??? Thanks in advance,
>>>
>>> ??? Rui Barradas
>>>
>>> ??? ______________________________________________
>>> ??? R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>>> ??? https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


From @v|gro@@ @end|ng |rom ver|zon@net  Sat Feb 13 02:24:13 2021
From: @v|gro@@ @end|ng |rom ver|zon@net (Avi Gross)
Date: Fri, 12 Feb 2021 20:24:13 -0500
Subject: [Rd] Unexpected behavior of '[' in an apply instruction
In-Reply-To: <8de49c5d-8e9b-31fd-4c2b-212db94a2ccf@insa-toulouse.fr>
References: <a8eac065-c1ea-a165-2d92-c4802b4d0373@sapo.pt>
 <CAHHjBM5PhQfxw3xSZXxuQAuWqTi83eN=EiuCQC7rtC35bS3R9A@mail.gmail.com>
 <f13cf55f-1210-cfb6-bf74-ea73fcaaa707@sapo.pt>
 <8de49c5d-8e9b-31fd-4c2b-212db94a2ccf@insa-toulouse.fr>
Message-ID: <0b6501d701a6$f0517c70$d0f47550$@verizon.net>

Just to be different, the premise was that you do not know how many dimensions the array had. But that is easily available using dim() including how many items are in each dimension. So, in principle, you can use a normal indexing method perhaps in a loop to get what you want. Not sexy but doable. You can treat the array x as a vector just like lower level R does and access the contents using the formula it uses.

-----Original Message-----
From: R-devel <r-devel-bounces at r-project.org> On Behalf Of Sokol Serguei
Sent: Friday, February 12, 2021 5:50 PM
To: r-devel at r-project.org
Subject: Re: [Rd] Unexpected behavior of '[' in an apply instruction

Le 12/02/2021 ? 22:23, Rui Barradas a ?crit :
> Hello,
>
> Yes, although there is an accepted solution, I believe you should post 
> this solution there. It's a base R solution, what the question asks for.
>
> And thanks, I would have never reminded myself of slice.index.

There is another approach -- produce a call to `[`() putting there "required number of commas in their proper places" programmatically. 
Even if it does not lead to a very readable expression, I think it merits to be mentioned.

   x <- array(1:60, dim = c(10, 2, 3))
   ld=length(dim(x))
   i=1 # i.e. the first row but can be a slice 1:5, whatever
   do.call(`[`, c(alist(x, i), alist(,)[rep(1,ld-1)], alist(drop=FALSE)))

Best,
Serguei.

>
> Rui Barradas
>
> ?s 20:45 de 12/02/21, robin hankin escreveu:
>> Rui
>>
>>  > x <- array(runif(60), dim = c(10, 2, 3))
>>  > array(x[slice.index(x,1) %in% 1:5],c(5,dim(x)[-1]))
>>
>> (I don't see this on stackoverflow; should I post this there too?) 
>> Most of the magic package is devoted to handling arrays of arbitrary 
>> dimensions and this functionality might be good to include if anyone 
>> would find it useful.
>>
>> HTH
>>
>> Robin
>>
>>
>> <mailto:hankin.robin at gmail.com>
>>
>>
>> On Sat, Feb 13, 2021 at 12:26 AM Rui Barradas <ruipbarradas at sapo.pt 
>> <mailto:ruipbarradas at sapo.pt>> wrote:
>>
>>     Hello,
>>
>>     This came up in this StackOverflow post [1].
>>
>>     If x is an array with n dimensions, how to subset by just one 
>> dimension?
>>     If n is known, it's simple, add the required number of commas in 
>> their
>>     proper places.
>>     But what if the user doesn't know the value of n?
>>
>>     The example below has n = 3, and subsets by the 1st dim. The 
>> apply loop
>>     solves the problem as expected but note that the index i has
>>     length(i) > 1.
>>
>>
>>     x <- array(1:60, dim = c(10, 2, 3))
>>
>>     d <- 1L
>>     i <- 1:5
>>     apply(x, MARGIN = -d, '[', i)
>>     x[i, , ]
>>
>>
>>     If length(i) == 1, argument drop = FALSE doesn't work as I 
>> expected it
>>     to work, only the other way does:
>>
>>
>>     i <- 1L
>>     apply(x, MARGIN = -d, '[', i, drop = FALSE)
>>     x[i, , drop = FALSE]
>>
>>
>>     What am I missing?
>>
>>     [1]
>> https://stackoverflow.com/questions/66168564/is-there-a-native-r-synt
>> ax-to-extract-rows-of-an-array
>>
>>     Thanks in advance,
>>
>>     Rui Barradas
>>
>>     ______________________________________________
>>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>>     https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From ggrothend|eck @end|ng |rom gm@||@com  Sat Feb 13 14:08:33 2021
From: ggrothend|eck @end|ng |rom gm@||@com (Gabor Grothendieck)
Date: Sat, 13 Feb 2021 08:08:33 -0500
Subject: [Rd] replicate evaluates its second argument in wrong environment
Message-ID: <CAP01uRm4Px6T7rMK3+Mho9S1Sv3aVmteM4gjDS19_14yPZtG6A@mail.gmail.com>

Currently replicate used within sapply within a function can fail
because it gets the environment for its second argument, which is
currently hard coded to be the parent frame, wrong.  See this link for
a full example of how it goes wrong and how it could be made to work
if it were possible to pass an envir argument to it.

https://stackoverflow.com/questions/66184446/sapplya-replicate-b-expression-no-longer-works-inside-a-function/66185079#66185079

-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


