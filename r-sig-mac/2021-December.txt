From du@@@@dr|@n @end|ng |rom gm@||@com  Thu Dec  2 12:22:32 2021
From: du@@@@dr|@n @end|ng |rom gm@||@com (=?UTF-8?B?QWRyaWFuIER1yJlh?=)
Date: Thu, 2 Dec 2021 13:22:32 +0200
Subject: [R-SIG-Mac] unable to install from source packages needing compiled
 C code
Message-ID: <CAJ=0CtCN4hsAd2=76Y-TfXsOWfKiqA08-Jw0fm6GXLXRQM9P7g@mail.gmail.com>

Dear All,

I am not sure when this started, presumably after upgrading my OS to
Monterey 12.0.1
With packages needing compilation, under a Terminal I get this error:

/Library/Frameworks/R.framework/Resources/include/R.h:55:11: fatal error:
'stdlib.h' file not found
# include <stdlib.h> /* Not used by R itself, but widely assumed in
packages */
          ^~~~~~~~~~
1 error generated.

I've searched over the Internet, the most common problem is the absence of
the Command Line Tools, but I do have those installed.

An old topic mentioned installing:
/Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.
pkg

However the /Library/Developer/CommandLineTools/ directory does not hold a
"Packages" subdirectory.

Does anyone else have this problem?

Thanks very much in advance for any hint,
Adrian

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Thu Dec  2 21:56:16 2021
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 3 Dec 2021 09:56:16 +1300
Subject: [R-SIG-Mac] 
 unable to install from source packages needing compiled C code
In-Reply-To: <CAJ=0CtCN4hsAd2=76Y-TfXsOWfKiqA08-Jw0fm6GXLXRQM9P7g@mail.gmail.com>
References: <CAJ=0CtCN4hsAd2=76Y-TfXsOWfKiqA08-Jw0fm6GXLXRQM9P7g@mail.gmail.com>
Message-ID: <42B59E15-B902-4C4D-8C3A-18B47AD3D8CF@R-project.org>


Adrian,

please check your tools. The error looks like you may be mixing different compilers. So, first check that you are using Xcode tools (command line tools or Xcode itself doesn't matter) and not Homebrew or other non-Apple compilers as they need additional configuration. For example:

$ xcode-select -p
/Applications/Xcode.app/Contents/Developer

$ xcrun --show-sdk-path
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk

$ which clang
/usr/bin/clang

$ clang --version
Apple clang version 12.0.5 (clang-1205.0.22.11)
Target: arm64-apple-darwin20.6.0
Thread model: posix
InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin


If in doubt, you can always use
sudo xcode-select --install
to make sure you have the tools.

Second, make sure you don't have old overrides in ~/.R such as Makeconf or similar. Remove ~/.R if needed.

Finally, if you still have issues, please post the full output since you didn't give us any details whatsoever so we can only guess.

Cheers,
Simon



> On Dec 3, 2021, at 12:22 AM, Adrian Du?a <dusa.adrian at gmail.com> wrote:
> 
> Dear All,
> 
> I am not sure when this started, presumably after upgrading my OS to
> Monterey 12.0.1
> With packages needing compilation, under a Terminal I get this error:
> 
> /Library/Frameworks/R.framework/Resources/include/R.h:55:11: fatal error:
> 'stdlib.h' file not found
> # include <stdlib.h> /* Not used by R itself, but widely assumed in
> packages */
>          ^~~~~~~~~~
> 1 error generated.
> 
> I've searched over the Internet, the most common problem is the absence of
> the Command Line Tools, but I do have those installed.
> 
> An old topic mentioned installing:
> /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.
> pkg
> 
> However the /Library/Developer/CommandLineTools/ directory does not hold a
> "Packages" subdirectory.
> 
> Does anyone else have this problem?
> 
> Thanks very much in advance for any hint,
> Adrian
> 
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 


From du@@@@dr|@n @end|ng |rom gm@||@com  Thu Dec  2 22:12:31 2021
From: du@@@@dr|@n @end|ng |rom gm@||@com (=?UTF-8?B?QWRyaWFuIER1yJlh?=)
Date: Thu, 2 Dec 2021 23:12:31 +0200
Subject: [R-SIG-Mac] 
 unable to install from source packages needing compiled C code
In-Reply-To: <42B59E15-B902-4C4D-8C3A-18B47AD3D8CF@R-project.org>
References: <CAJ=0CtCN4hsAd2=76Y-TfXsOWfKiqA08-Jw0fm6GXLXRQM9P7g@mail.gmail.com>
 <42B59E15-B902-4C4D-8C3A-18B47AD3D8CF@R-project.org>
Message-ID: <CAJ=0CtDhSw72Wu73ubPoi-TDsEXAsJvs9qCZX=-=ohTrFKgryA@mail.gmail.com>

Thank you Simon,

I have the official Apple CLT, but not the full Xcode. If needed I can
install that as well, with a difference of about 10GB more space
getting used.
This is what I get:

$ xcode-select -p
/Library/Developer/CommandLineTools

$ xcrun --show-sdk-path
/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk

$ which clang
/usr/local/opt/llvm/bin/clang

$ clang --version
clang version 11.1.0
Target: x86_64-apple-darwin21.1.0
Thread model: posix
InstalledDir: /usr/local/opt/llvm/bin

There is a difference in clang, which I remember to have installed to test
various settings for the compiled code in the package QCA.
This error is about package admisc, which gave the following output:

 $ R CMD INSTALL admisc_0.20-5.tar.gz
* installing to library ?/Users/dusadrian/Library/R/x86_64/4.1/library?
* installing *source* package ?admisc? ...
** using staged installation
** libs
clang -mmacosx-version-min=10.13
-I"/Library/Frameworks/R.framework/Resources/include" -DNDEBUG
-I/usr/local/include   -fPIC  -g -O1 -c admisc.c -o admisc.o
In file included from admisc.c:1:
/Library/Frameworks/R.framework/Resources/include/R.h:55:11: fatal error:
'stdlib.h' file not found
# include <stdlib.h> /* Not used by R itself, but widely assumed in
packages */
          ^~~~~~~~~~
1 error generated.
make: *** [admisc.o] Error 1
ERROR: compilation failed for package ?admisc?
* removing ?/Users/dusadrian/Library/R/x86_64/4.1/library/admisc?
* restoring previous ?/Users/dusadrian/Library/R/x86_64/4.1/library/admisc?


In the meantime I've tried various things (like copying stdlib.h from
somewhere else in /usr/local/include/, but to no avail since it now
complains about

* installing to library ?/Users/dusadrian/Library/R/x86_64/4.1/library?
* installing *source* package ?admisc? ...
** using staged installation
** libs
clang -mmacosx-version-min=10.13
-I"/Library/Frameworks/R.framework/Resources/include" -DNDEBUG
-I/usr/local/include   -fPIC  -g -O1 -c admisc.c -o admisc.o
In file included from admisc.c:1:
In file included from
/Library/Frameworks/R.framework/Resources/include/R.h:55:
In file included from /usr/local/include/stdlib.h:64:
In file included from /usr/local/include/_types.h:27:
/usr/local/include/sys/_types.h:33:10: fatal error: 'machine/_types.h' file
not found
#include <machine/_types.h>
         ^~~~~~~~~~~~~~~~~~
1 error generated.
make: *** [admisc.o] Error 1
ERROR: compilation failed for package ?admisc?
* removing ?/Users/dusadrian/Library/R/x86_64/4.1/library/admisc?
* restoring previous ?/Users/dusadrian/Library/R/x86_64/4.1/library/admisc?


I have tried both:
sudo rm -rf /Library/Developer/CommandLineTools
xcode-select --install

as well as downloading the CLT from developer.apple.com and installing from
the corresponding .dmg file, same issue.

It looks like it misses the headers, for some reason.
Best,
Adrian


On Thu, 2 Dec 2021 at 22:57, Simon Urbanek <simon.urbanek at r-project.org>
wrote:

>
> Adrian,
>
> please check your tools. The error looks like you may be mixing different
> compilers. So, first check that you are using Xcode tools (command line
> tools or Xcode itself doesn't matter) and not Homebrew or other non-Apple
> compilers as they need additional configuration. For example:
>
> $ xcode-select -p
> /Applications/Xcode.app/Contents/Developer
>
> $ xcrun --show-sdk-path
>
> /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk
>
> $ which clang
> /usr/bin/clang
>
> $ clang --version
> Apple clang version 12.0.5 (clang-1205.0.22.11)
> Target: arm64-apple-darwin20.6.0
> Thread model: posix
> InstalledDir:
> /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin
>
>
> If in doubt, you can always use
> sudo xcode-select --install
> to make sure you have the tools.
>
> Second, make sure you don't have old overrides in ~/.R such as Makeconf or
> similar. Remove ~/.R if needed.
>
> Finally, if you still have issues, please post the full output since you
> didn't give us any details whatsoever so we can only guess.
>
> Cheers,
> Simon
>
>
>
> > On Dec 3, 2021, at 12:22 AM, Adrian Du?a <dusa.adrian at gmail.com> wrote:
> >
> > Dear All,
> >
> > I am not sure when this started, presumably after upgrading my OS to
> > Monterey 12.0.1
> > With packages needing compilation, under a Terminal I get this error:
> >
> > /Library/Frameworks/R.framework/Resources/include/R.h:55:11: fatal error:
> > 'stdlib.h' file not found
> > # include <stdlib.h> /* Not used by R itself, but widely assumed in
> > packages */
> >          ^~~~~~~~~~
> > 1 error generated.
> >
> > I've searched over the Internet, the most common problem is the absence
> of
> > the Command Line Tools, but I do have those installed.
> >
> > An old topic mentioned installing:
> >
> /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.
> > pkg
> >
> > However the /Library/Developer/CommandLineTools/ directory does not hold
> a
> > "Packages" subdirectory.
> >
> > Does anyone else have this problem?
> >
> > Thanks very much in advance for any hint,
> > Adrian
> >
> >       [[alternative HTML version deleted]]
> >
> > _______________________________________________
> > R-SIG-Mac mailing list
> > R-SIG-Mac at r-project.org
> > https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> >
>
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Thu Dec  2 22:28:35 2021
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 3 Dec 2021 10:28:35 +1300
Subject: [R-SIG-Mac] 
 unable to install from source packages needing compiled C code
In-Reply-To: <CAJ=0CtDhSw72Wu73ubPoi-TDsEXAsJvs9qCZX=-=ohTrFKgryA@mail.gmail.com>
References: <CAJ=0CtCN4hsAd2=76Y-TfXsOWfKiqA08-Jw0fm6GXLXRQM9P7g@mail.gmail.com>
 <42B59E15-B902-4C4D-8C3A-18B47AD3D8CF@R-project.org>
 <CAJ=0CtDhSw72Wu73ubPoi-TDsEXAsJvs9qCZX=-=ohTrFKgryA@mail.gmail.com>
Message-ID: <2DE9C5C0-3BC2-4115-AF60-5E106F0FA70C@R-project.org>


Adrian,


> On Dec 3, 2021, at 10:12 AM, Adrian Du?a <dusa.adrian at gmail.com> wrote:
> 
> Thank you Simon,
> 
> I have the official Apple CLT, but not the full Xcode. If needed I can install that as well, with a difference of about 10GB more space getting used.
> This is what I get:
> 
> $ xcode-select -p
> /Library/Developer/CommandLineTools
> 
> $ xcrun --show-sdk-path
> /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
> 
> $ which clang
> /usr/local/opt/llvm/bin/clang
> 


^^^-- this is your problem. You're not using Xcode so that's exactly what I said, you have a broken compiler. Remove /usr/local/opt and it should work.

Cheers,
Simon


From kev|nu@hey @end|ng |rom gm@||@com  Fri Dec  3 00:32:06 2021
From: kev|nu@hey @end|ng |rom gm@||@com (Kevin Ushey)
Date: Thu, 2 Dec 2021 15:32:06 -0800
Subject: [R-SIG-Mac] 
 unable to install from source packages needing compiled C code
In-Reply-To: <2DE9C5C0-3BC2-4115-AF60-5E106F0FA70C@R-project.org>
References: <CAJ=0CtCN4hsAd2=76Y-TfXsOWfKiqA08-Jw0fm6GXLXRQM9P7g@mail.gmail.com>
 <42B59E15-B902-4C4D-8C3A-18B47AD3D8CF@R-project.org>
 <CAJ=0CtDhSw72Wu73ubPoi-TDsEXAsJvs9qCZX=-=ohTrFKgryA@mail.gmail.com>
 <2DE9C5C0-3BC2-4115-AF60-5E106F0FA70C@R-project.org>
Message-ID: <CAJXgQP3W+BxATugBe-=NcgU9QXHnwuQSJXR4pap72CP_CMqj-w@mail.gmail.com>

This may also make your life challenging:

/usr/local/include/sys/_types.h:33:10: fatal error: 'machine/_types.h' file
not found
#include <machine/_types.h>
         ^~~~~~~~~~~~~~~~~~
1 error generated.

You have some headers installed in /usr/local/include that are
shadowing the default macOS toolchain's headers, and those appear to
be incompatible with the system toolchain. You'll likely need to
remove those as well.

To be complete, x86_64 builds of R usually have something like:

CPPFLAGS = -I/usr/local/include

within their Makeconf; if you've placed headers there that shadow the
default system headers, they'll be used instead.

tl;dr: you probably need to do a couple things.

(1) Remove /usr/local/opt/llvm/bin from your PATH so llvm clang stops
shadowing the system clang;
(2) Remove the system headers in /usr/local/include that are masking
your system header includes.

You could also probably force the use of system clang in R by setting
CC = /usr/bin/clang and CXX = /usr/bin/clang++ in (say) ~/.R/Makevars,
but I haven't tried that.

Best,
Kevin

On Thu, Dec 2, 2021 at 1:29 PM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
>
>
> Adrian,
>
>
> > On Dec 3, 2021, at 10:12 AM, Adrian Du?a <dusa.adrian at gmail.com> wrote:
> >
> > Thank you Simon,
> >
> > I have the official Apple CLT, but not the full Xcode. If needed I can install that as well, with a difference of about 10GB more space getting used.
> > This is what I get:
> >
> > $ xcode-select -p
> > /Library/Developer/CommandLineTools
> >
> > $ xcrun --show-sdk-path
> > /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
> >
> > $ which clang
> > /usr/local/opt/llvm/bin/clang
> >
>
>
> ^^^-- this is your problem. You're not using Xcode so that's exactly what I said, you have a broken compiler. Remove /usr/local/opt and it should work.
>
> Cheers,
> Simon
>
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac


From @|mon@urb@nek @end|ng |rom R-project@org  Fri Dec  3 00:59:40 2021
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 3 Dec 2021 12:59:40 +1300
Subject: [R-SIG-Mac] 
 unable to install from source packages needing compiled C code
In-Reply-To: <CAJXgQP3W+BxATugBe-=NcgU9QXHnwuQSJXR4pap72CP_CMqj-w@mail.gmail.com>
References: <CAJ=0CtCN4hsAd2=76Y-TfXsOWfKiqA08-Jw0fm6GXLXRQM9P7g@mail.gmail.com>
 <42B59E15-B902-4C4D-8C3A-18B47AD3D8CF@R-project.org>
 <CAJ=0CtDhSw72Wu73ubPoi-TDsEXAsJvs9qCZX=-=ohTrFKgryA@mail.gmail.com>
 <2DE9C5C0-3BC2-4115-AF60-5E106F0FA70C@R-project.org>
 <CAJXgQP3W+BxATugBe-=NcgU9QXHnwuQSJXR4pap72CP_CMqj-w@mail.gmail.com>
Message-ID: <56B13382-D498-4DA2-912B-3293C6F923EF@R-project.org>


Kevin has a good point, there is likely a lot more messed up in your system. A good way to restore normality is something like:

sudo -i
cd /usr/local
mkdir .disable
mv * .disable/

Things should work then. You can undo the above with something like

sudo -i
cd /usr/local
mv .disable/* .
rmdir .disable

On older macOS versions it was so much easier since you could simple rename /usr/local but Apple doesn't want us to do such simple things anymore ...

Cheers,
Simon



> On Dec 3, 2021, at 12:32 PM, Kevin Ushey <kevinushey at gmail.com> wrote:
> 
> This may also make your life challenging:
> 
> /usr/local/include/sys/_types.h:33:10: fatal error: 'machine/_types.h' file
> not found
> #include <machine/_types.h>
>         ^~~~~~~~~~~~~~~~~~
> 1 error generated.
> 
> You have some headers installed in /usr/local/include that are
> shadowing the default macOS toolchain's headers, and those appear to
> be incompatible with the system toolchain. You'll likely need to
> remove those as well.
> 
> To be complete, x86_64 builds of R usually have something like:
> 
> CPPFLAGS = -I/usr/local/include
> 
> within their Makeconf; if you've placed headers there that shadow the
> default system headers, they'll be used instead.
> 
> tl;dr: you probably need to do a couple things.
> 
> (1) Remove /usr/local/opt/llvm/bin from your PATH so llvm clang stops
> shadowing the system clang;
> (2) Remove the system headers in /usr/local/include that are masking
> your system header includes.
> 
> You could also probably force the use of system clang in R by setting
> CC = /usr/bin/clang and CXX = /usr/bin/clang++ in (say) ~/.R/Makevars,
> but I haven't tried that.
> 
> Best,
> Kevin
> 
> On Thu, Dec 2, 2021 at 1:29 PM Simon Urbanek
> <simon.urbanek at r-project.org> wrote:
>> 
>> 
>> Adrian,
>> 
>> 
>>> On Dec 3, 2021, at 10:12 AM, Adrian Du?a <dusa.adrian at gmail.com> wrote:
>>> 
>>> Thank you Simon,
>>> 
>>> I have the official Apple CLT, but not the full Xcode. If needed I can install that as well, with a difference of about 10GB more space getting used.
>>> This is what I get:
>>> 
>>> $ xcode-select -p
>>> /Library/Developer/CommandLineTools
>>> 
>>> $ xcrun --show-sdk-path
>>> /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
>>> 
>>> $ which clang
>>> /usr/local/opt/llvm/bin/clang
>>> 
>> 
>> 
>> ^^^-- this is your problem. You're not using Xcode so that's exactly what I said, you have a broken compiler. Remove /usr/local/opt and it should work.
>> 
>> Cheers,
>> Simon
>> 
>> _______________________________________________
>> R-SIG-Mac mailing list
>> R-SIG-Mac at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 


From du@@@@dr|@n @end|ng |rom gm@||@com  Fri Dec  3 01:05:40 2021
From: du@@@@dr|@n @end|ng |rom gm@||@com (=?UTF-8?B?QWRyaWFuIER1yJlh?=)
Date: Fri, 3 Dec 2021 02:05:40 +0200
Subject: [R-SIG-Mac] 
 unable to install from source packages needing compiled C code
In-Reply-To: <CAJXgQP3W+BxATugBe-=NcgU9QXHnwuQSJXR4pap72CP_CMqj-w@mail.gmail.com>
References: <CAJ=0CtCN4hsAd2=76Y-TfXsOWfKiqA08-Jw0fm6GXLXRQM9P7g@mail.gmail.com>
 <42B59E15-B902-4C4D-8C3A-18B47AD3D8CF@R-project.org>
 <CAJ=0CtDhSw72Wu73ubPoi-TDsEXAsJvs9qCZX=-=ohTrFKgryA@mail.gmail.com>
 <2DE9C5C0-3BC2-4115-AF60-5E106F0FA70C@R-project.org>
 <CAJXgQP3W+BxATugBe-=NcgU9QXHnwuQSJXR4pap72CP_CMqj-w@mail.gmail.com>
Message-ID: <CAJ=0CtDKi+w+pyFaYPBBohV5-scEFo_2ND5X1FWRt-QRr8P+nQ@mail.gmail.com>

Thanks again, problem solved.
Removing llvm from /usr/local/opt does the trick.

Kevin's suggestion to have a Makevars file pointing to the system clang
also worked, although I have no idea which headers from /usr/local/include
are masking and which are not. I've removed all and get no more errors or
warnings.

Best wishes,
Adrian



On Fri, 3 Dec 2021 at 01:32, Kevin Ushey <kevinushey at gmail.com> wrote:

> This may also make your life challenging:
>
> /usr/local/include/sys/_types.h:33:10: fatal error: 'machine/_types.h' file
> not found
> #include <machine/_types.h>
>          ^~~~~~~~~~~~~~~~~~
> 1 error generated.
>
> You have some headers installed in /usr/local/include that are
> shadowing the default macOS toolchain's headers, and those appear to
> be incompatible with the system toolchain. You'll likely need to
> remove those as well.
>
> To be complete, x86_64 builds of R usually have something like:
>
> CPPFLAGS = -I/usr/local/include
>
> within their Makeconf; if you've placed headers there that shadow the
> default system headers, they'll be used instead.
>
> tl;dr: you probably need to do a couple things.
>
> (1) Remove /usr/local/opt/llvm/bin from your PATH so llvm clang stops
> shadowing the system clang;
> (2) Remove the system headers in /usr/local/include that are masking
> your system header includes.
>
> You could also probably force the use of system clang in R by setting
> CC = /usr/bin/clang and CXX = /usr/bin/clang++ in (say) ~/.R/Makevars,
> but I haven't tried that.
>
> Best,
> Kevin
>
> On Thu, Dec 2, 2021 at 1:29 PM Simon Urbanek
> <simon.urbanek at r-project.org> wrote:
> >
> >
> > Adrian,
> >
> >
> > > On Dec 3, 2021, at 10:12 AM, Adrian Du?a <dusa.adrian at gmail.com>
> wrote:
> > >
> > > Thank you Simon,
> > >
> > > I have the official Apple CLT, but not the full Xcode. If needed I can
> install that as well, with a difference of about 10GB more space getting
> used.
> > > This is what I get:
> > >
> > > $ xcode-select -p
> > > /Library/Developer/CommandLineTools
> > >
> > > $ xcrun --show-sdk-path
> > > /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
> > >
> > > $ which clang
> > > /usr/local/opt/llvm/bin/clang
> > >
> >
> >
> > ^^^-- this is your problem. You're not using Xcode so that's exactly
> what I said, you have a broken compiler. Remove /usr/local/opt and it
> should work.
> >
> > Cheers,
> > Simon
> >
> > _______________________________________________
> > R-SIG-Mac mailing list
> > R-SIG-Mac at r-project.org
> > https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>

	[[alternative HTML version deleted]]


From z|vwo|kow|ck| @end|ng |rom gm@||@com  Thu Dec  9 18:13:41 2021
From: z|vwo|kow|ck| @end|ng |rom gm@||@com (Ziv Wolkowicki)
Date: Thu, 9 Dec 2021 09:13:41 -0800
Subject: [R-SIG-Mac] Reverse search not working in ARM binary of R-4.1.2 (or
 4.1.0) from CRAN
Message-ID: <6E99B5FD-9122-474F-9D20-ED3FF3AEBBE5@gmail.com>

Team,

I have an unusual issue I am only observing on specific binaries of R. I used to have ARM build of R-4.1.0 from https://cran.r-project.org/bin/macosx/ <https://cran.r-project.org/bin/macosx/>, and updated to R-4.1.2 running on my M1 Mac. Hitting ?Ctrl+R? (reverse search of previously run commands) did nothing on either version. It does not react in any way. Though it reacts to Ctrl+C for example, so it is respond to some signals.

The unusual thing is, installing the ARM version for R-4.1.2 from homebrew, and also the x86 Mac build of R-4.1.2 from https://cran.r-project.org/bin/macosx/ <https://cran.r-project.org/bin/macosx/>, Ctrl+R works just fine.

I still have both homebrew and pre-packaged versions installed on my system if you need some additional information or experiments run.

Thanks,
Ziv


	[[alternative HTML version deleted]]


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Thu Dec  9 22:17:47 2021
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Thu, 9 Dec 2021 21:17:47 +0000
Subject: [R-SIG-Mac] 
 Reverse search not working in ARM binary of R-4.1.2 (or
 4.1.0) from CRAN
In-Reply-To: <6E99B5FD-9122-474F-9D20-ED3FF3AEBBE5@gmail.com>
References: <6E99B5FD-9122-474F-9D20-ED3FF3AEBBE5@gmail.com>
Message-ID: <3b84230e-7add-8b4d-0658-3e59606f6498@stats.ox.ac.uk>

On 09/12/2021 17:13, Ziv Wolkowicki wrote:
> Team,
> 
> I have an unusual issue I am only observing on specific binaries of R. I used to have ARM build of R-4.1.0 from https://cran.r-project.org/bin/macosx/ <https://cran.r-project.org/bin/macosx/>, and updated to R-4.1.2 running on my M1 Mac. Hitting ?Ctrl+R? (reverse search of previously run commands) did nothing on either version. It does not react in any way. Though it reacts to Ctrl+C for example, so it is respond to some signals.

Hmm, what does extSoftversion() say? I see
 
     readline
  "4.2 (EditLine wrapper)"

So it is not using readline, and it is that which supports Ctrl-R (which 
is not a signal).  This is all in the R-admin manual for you to read ....

> The unusual thing is, installing the ARM version for R-4.1.2 from homebrew, and also the x86 Mac build of R-4.1.2 from https://cran.r-project.org/bin/macosx/ <https://cran.r-project.org/bin/macosx/>, Ctrl+R works just fine.

Whereas the Intel (x86_64, sic) build is built with readline.  My guess 
is that Homebrew's R was too, but extSoftversion() would tell you -- 
OTOH last time I looked it was built without cairo support.  (But 
Homebrew is not supported here.)

> I still have both homebrew and pre-packaged versions installed on my system if you need some additional information or experiments run.
> 
> Thanks,
> Ziv
> 
> 
> 	[[alternative HTML version deleted]]

Please do as the posting guide asked and not send HTNL (so we don't have 
to decipher doubled URLs).

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From @|mon@urb@nek @end|ng |rom R-project@org  Thu Dec  9 22:30:06 2021
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 10 Dec 2021 10:30:06 +1300
Subject: [R-SIG-Mac] 
 Reverse search not working in ARM binary of R-4.1.2 (or
 4.1.0) from CRAN
In-Reply-To: <6E99B5FD-9122-474F-9D20-ED3FF3AEBBE5@gmail.com>
References: <6E99B5FD-9122-474F-9D20-ED3FF3AEBBE5@gmail.com>
Message-ID: <06E70D54-42A1-409C-A2A7-245744A50564@R-project.org>

Ziv,

the released arm binaries use libedit from the system (supplied by Apple) which doesn't support reverse-search. The latest nightly binaries now include readline instead - see https://mac.R-project.org

Cheers,
Simon



> On Dec 10, 2021, at 6:13 AM, Ziv Wolkowicki <zivwolkowicki at gmail.com> wrote:
> 
> Team,
> 
> I have an unusual issue I am only observing on specific binaries of R. I used to have ARM build of R-4.1.0 from https://cran.r-project.org/bin/macosx/ <https://cran.r-project.org/bin/macosx/>, and updated to R-4.1.2 running on my M1 Mac. Hitting ?Ctrl+R? (reverse search of previously run commands) did nothing on either version. It does not react in any way. Though it reacts to Ctrl+C for example, so it is respond to some signals.
> 
> The unusual thing is, installing the ARM version for R-4.1.2 from homebrew, and also the x86 Mac build of R-4.1.2 from https://cran.r-project.org/bin/macosx/ <https://cran.r-project.org/bin/macosx/>, Ctrl+R works just fine.
> 
> I still have both homebrew and pre-packaged versions installed on my system if you need some additional information or experiments run.
> 
> Thanks,
> Ziv
> 
> 
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 


From m@tt@whee|er @end|ng |rom n|h@gov  Tue Dec 14 14:06:06 2021
From: m@tt@whee|er @end|ng |rom n|h@gov (Wheeler, Matt (NIH/NIEHS) [E])
Date: Tue, 14 Dec 2021 13:06:06 +0000
Subject: [R-SIG-Mac] Strange C/C++ Compile Errors
Message-ID: <BLAPR09MB7010DA12E3986E9299B28E0083759@BLAPR09MB7010.namprd09.prod.outlook.com>

I hope someone can help me with my C++/Rcpp compile issue. I am building a package, which will eventually be on CRAN, but I am currently looking to have it available to collaborators who use macOS. I have successfully compiled it for Linux and Windows (it passes the CRAN checks), but I have had no such luck for macOS. Here, I get strange compile errors based upon namespaces. For example, the first two errors are below:



In file included from RcppExports.cpp:4:

In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/RcppGSL/include/RcppGSL.h:25:

In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/RcppGSL/include/RcppGSLForward.h:24:

In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/Rcpp/include/RcppCommon.h:30:

In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/Rcpp/include/Rcpp/r/headers.h:66:

In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/Rcpp/include/Rcpp/platform/compiler.h:100:

In file included from /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/cmath:308:

In file included from /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/math.h:308:

In file included from ./include/stdlib.h:36:

/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/cstdlib:99:9: error: no member named 'size_t' in the global namespace

using ::size_t;



In file included from RcppExports.cpp:4:

In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/RcppGSL/include/RcppGSL.h:25:

In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/RcppGSL/include/RcppGSLForward.h:24:

In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/Rcpp/include/RcppCommon.h:30:

In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/Rcpp/include/Rcpp/r/headers.h:66:

In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/Rcpp/include/Rcpp/platform/compiler.h:153:

In file included from /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/unordered_map:435:

In file included from /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__hash_table:15:

In file included from /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/memory:673:

/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/new:319:5: error: no member named 'posix_memalign' in the global namespace

 ::posix_memalign(&__result, __alignment, __size);

 ~~^

/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/new:330:5: error: reference to unresolved using declaration

 ::free(__ptr);



Essentially, all of the errors are based upon namespace issues.

I have seen that having a ~/.R/Makevars file messes things up, so I emptied that directory. I further have no h files in '/usr/local/include,'

which will cause other build errors (i.e. I use NLOPT and GSL), but I want to get through this right now. Based upon other threads, I have the following for Xcode:



%xcode-select -p

/Library/Developer/CommandLineTools

%xcrun --show-sdk-path

/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk

%which clang

/usr/bin/clang



Now, this is happening on two Macs. The first is an M1 with macOS Monterey 12.01, and I got it with a clean IT build. The second is the one I use for work. It is an Intel using Catalina 10.15.7 (19H1519). I can understand why the second one may be messed up. When the issue occurred almost a year ago, I was in a research phase, couldn't figure out the solution, installed brew gcc and had R compile with this 'nonstandard' compiler with many no-no hacks. It was a hack, but it worked. Now, I need to distribute this to the masses, and it is still not working on a fresh machine and a newer version of macOS. Before I go further, I want to see if there is some setup issue on my machine(s), possibly something I need to talk about to IT.



Further, the file RcppExports.cpp is automatically generated in Rcpp, so I don't think it is a code issue, but it is a dependency issue with clang, but here I am not knowledgeable enough to fix. Quite honestly, Apple?s compiler setup is baffling, but I am used to /usr/include/ etc.   I can also compile Rcpp from source code, and I have compiled other packages on these machines.



Thanks in advance,



Matt


	[[alternative HTML version deleted]]


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Tue Dec 14 15:40:41 2021
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Tue, 14 Dec 2021 14:40:41 +0000
Subject: [R-SIG-Mac] Strange C/C++ Compile Errors
In-Reply-To: <BLAPR09MB7010DA12E3986E9299B28E0083759@BLAPR09MB7010.namprd09.prod.outlook.com>
References: <BLAPR09MB7010DA12E3986E9299B28E0083759@BLAPR09MB7010.namprd09.prod.outlook.com>
Message-ID: <1e16b45e-ef80-d915-d6a1-5194b5cce19e@stats.ox.ac.uk>

You have not shown us the compiler command line used, nor made a 
reproducible example available (and we might need both).

The suspicious line is

 > In file included from ./include/stdlib.h:36:

It looks like you may have a file in the package which is masking a 
system header, but we don't have any information to go on.


On 14/12/2021 13:06, Wheeler, Matt (NIH/NIEHS) [E] via R-SIG-Mac wrote:
> I hope someone can help me with my C++/Rcpp compile issue. I am building a package, which will eventually be on CRAN, but I am currently looking to have it available to collaborators who use macOS. I have successfully compiled it for Linux and Windows (it passes the CRAN checks), but I have had no such luck for macOS. Here, I get strange compile errors based upon namespaces. For example, the first two errors are below:
> 
> 
> 
> In file included from RcppExports.cpp:4:
> 
> In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/RcppGSL/include/RcppGSL.h:25:
> 
> In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/RcppGSL/include/RcppGSLForward.h:24:
> 
> In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/Rcpp/include/RcppCommon.h:30:
> 
> In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/Rcpp/include/Rcpp/r/headers.h:66:
> 
> In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/Rcpp/include/Rcpp/platform/compiler.h:100:
> 
> In file included from /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/cmath:308:
> 
> In file included from /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/math.h:308:
> 
> In file included from ./include/stdlib.h:36:
> 
> /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/cstdlib:99:9: error: no member named 'size_t' in the global namespace
> 
> using ::size_t;
> 
> 
> 
> In file included from RcppExports.cpp:4:
> 
> In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/RcppGSL/include/RcppGSL.h:25:
> 
> In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/RcppGSL/include/RcppGSLForward.h:24:
> 
> In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/Rcpp/include/RcppCommon.h:30:
> 
> In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/Rcpp/include/Rcpp/r/headers.h:66:
> 
> In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/Rcpp/include/Rcpp/platform/compiler.h:153:
> 
> In file included from /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/unordered_map:435:
> 
> In file included from /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__hash_table:15:
> 
> In file included from /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/memory:673:
> 
> /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/new:319:5: error: no member named 'posix_memalign' in the global namespace
> 
>   ::posix_memalign(&__result, __alignment, __size);
> 
>   ~~^
> 
> /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/new:330:5: error: reference to unresolved using declaration
> 
>   ::free(__ptr);
> 
> 
> 
> Essentially, all of the errors are based upon namespace issues.
> 
> I have seen that having a ~/.R/Makevars file messes things up, so I emptied that directory. I further have no h files in '/usr/local/include,'
> 
> which will cause other build errors (i.e. I use NLOPT and GSL), but I want to get through this right now. Based upon other threads, I have the following for Xcode:
> 
> 
> 
> %xcode-select -p
> 
> /Library/Developer/CommandLineTools
> 
> %xcrun --show-sdk-path
> 
> /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
> 
> %which clang
> 
> /usr/bin/clang
> 
> 
> 
> Now, this is happening on two Macs. The first is an M1 with macOS Monterey 12.01, and I got it with a clean IT build. The second is the one I use for work. It is an Intel using Catalina 10.15.7 (19H1519). I can understand why the second one may be messed up. When the issue occurred almost a year ago, I was in a research phase, couldn't figure out the solution, installed brew gcc and had R compile with this 'nonstandard' compiler with many no-no hacks. It was a hack, but it worked. Now, I need to distribute this to the masses, and it is still not working on a fresh machine and a newer version of macOS. Before I go further, I want to see if there is some setup issue on my machine(s), possibly something I need to talk about to IT.
> 
> 
> 
> Further, the file RcppExports.cpp is automatically generated in Rcpp, so I don't think it is a code issue, but it is a dependency issue with clang, but here I am not knowledgeable enough to fix. Quite honestly, Apple?s compiler setup is baffling, but I am used to /usr/include/ etc.   I can also compile Rcpp from source code, and I have compiled other packages on these machines.
> 
> 
> 
> Thanks in advance,
> 
> 
> 
> Matt
> 
> 
> 	[[alternative HTML version deleted]]
> 
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From m@tt@whee|er @end|ng |rom n|h@gov  Tue Dec 14 21:20:11 2021
From: m@tt@whee|er @end|ng |rom n|h@gov (Wheeler, Matt (NIH/NIEHS) [E])
Date: Tue, 14 Dec 2021 20:20:11 +0000
Subject: [R-SIG-Mac] [EXTERNAL] Re:  Strange C/C++ Compile Errors
In-Reply-To: <1e16b45e-ef80-d915-d6a1-5194b5cce19e@stats.ox.ac.uk>
References: <BLAPR09MB7010DA12E3986E9299B28E0083759@BLAPR09MB7010.namprd09.prod.outlook.com>
 <1e16b45e-ef80-d915-d6a1-5194b5cce19e@stats.ox.ac.uk>
Message-ID: <BLAPR09MB70100CAE2C895FB4FB8A82C483759@BLAPR09MB7010.namprd09.prod.outlook.com>

Apologies for not giving all of the information, but for such little information, you were able to find the problem.  In my haste to ?fix? the problem 11 months ago, I introduced a dumb dependency ?gnu:stlib.h? that I forgot about. Thank you for your gracious reply.

Cheers,

Matt


From: Prof Brian Ripley <ripley at stats.ox.ac.uk>
Date: Tuesday, December 14, 2021 at 9:44 AM
To: Wheeler, Matt (NIH/NIEHS) [E] <matt.wheeler at nih.gov>, r-sig-mac at r-project.org <r-sig-mac at r-project.org>
Subject: [EXTERNAL] Re: [R-SIG-Mac] Strange C/C++ Compile Errors
CAUTION: This email originated from outside of the organization. Do not click links or open attachments unless you recognize the sender and are confident the content is safe.


You have not shown us the compiler command line used, nor made a
reproducible example available (and we might need both).

The suspicious line is

 > In file included from ./include/stdlib.h:36:

It looks like you may have a file in the package which is masking a
system header, but we don't have any information to go on.


On 14/12/2021 13:06, Wheeler, Matt (NIH/NIEHS) [E] via R-SIG-Mac wrote:
> I hope someone can help me with my C++/Rcpp compile issue. I am building a package, which will eventually be on CRAN, but I am currently looking to have it available to collaborators who use macOS. I have successfully compiled it for Linux and Windows (it passes the CRAN checks), but I have had no such luck for macOS. Here, I get strange compile errors based upon namespaces. For example, the first two errors are below:
>
>
>
> In file included from RcppExports.cpp:4:
>
> In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/RcppGSL/include/RcppGSL.h:25:
>
> In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/RcppGSL/include/RcppGSLForward.h:24:
>
> In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/Rcpp/include/RcppCommon.h:30:
>
> In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/Rcpp/include/Rcpp/r/headers.h:66:
>
> In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/Rcpp/include/Rcpp/platform/compiler.h:100:
>
> In file included from /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/cmath:308:
>
> In file included from /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/math.h:308:
>
> In file included from ./include/stdlib.h:36:
>
> /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/cstdlib:99:9: error: no member named 'size_t' in the global namespace
>
> using ::size_t;
>
>
>
> In file included from RcppExports.cpp:4:
>
> In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/RcppGSL/include/RcppGSL.h:25:
>
> In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/RcppGSL/include/RcppGSLForward.h:24:
>
> In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/Rcpp/include/RcppCommon.h:30:
>
> In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/Rcpp/include/Rcpp/r/headers.h:66:
>
> In file included from /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/Rcpp/include/Rcpp/platform/compiler.h:153:
>
> In file included from /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/unordered_map:435:
>
> In file included from /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__hash_table:15:
>
> In file included from /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/memory:673:
>
> /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/new:319:5: error: no member named 'posix_memalign' in the global namespace
>
>   ::posix_memalign(&__result, __alignment, __size);
>
>   ~~^
>
> /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/new:330:5: error: reference to unresolved using declaration
>
>   ::free(__ptr);
>
>
>
> Essentially, all of the errors are based upon namespace issues.
>
> I have seen that having a ~/.R/Makevars file messes things up, so I emptied that directory. I further have no h files in '/usr/local/include,'
>
> which will cause other build errors (i.e. I use NLOPT and GSL), but I want to get through this right now. Based upon other threads, I have the following for Xcode:
>
>
>
> %xcode-select -p
>
> /Library/Developer/CommandLineTools
>
> %xcrun --show-sdk-path
>
> /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
>
> %which clang
>
> /usr/bin/clang
>
>
>
> Now, this is happening on two Macs. The first is an M1 with macOS Monterey 12.01, and I got it with a clean IT build. The second is the one I use for work. It is an Intel using Catalina 10.15.7 (19H1519). I can understand why the second one may be messed up. When the issue occurred almost a year ago, I was in a research phase, couldn't figure out the solution, installed brew gcc and had R compile with this 'nonstandard' compiler with many no-no hacks. It was a hack, but it worked. Now, I need to distribute this to the masses, and it is still not working on a fresh machine and a newer version of macOS. Before I go further, I want to see if there is some setup issue on my machine(s), possibly something I need to talk about to IT.
>
>
>
> Further, the file RcppExports.cpp is automatically generated in Rcpp, so I don't think it is a code issue, but it is a dependency issue with clang, but here I am not knowledgeable enough to fix. Quite honestly, Apple?s compiler setup is baffling, but I am used to /usr/include/ etc.   I can also compile Rcpp from source code, and I have compiled other packages on these machines.
>
>
>
> Thanks in advance,
>
>
>
> Matt
>
>
>       [[alternative HTML version deleted]]
>
>
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac


--
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford

_______________________________________________
R-SIG-Mac mailing list
R-SIG-Mac at r-project.org
https://stat.ethz.ch/mailman/listinfo/r-sig-mac

	[[alternative HTML version deleted]]


From m@tthew@heun @end|ng |rom me@com  Mon Dec 20 03:16:13 2021
From: m@tthew@heun @end|ng |rom me@com (Matthew Heun)
Date: Sun, 19 Dec 2021 21:16:13 -0500
Subject: [R-SIG-Mac] Missing qpdf
Message-ID: <C81D7EFD-97AD-4765-979C-40B165A2739C@me.com>

All:

I'm hoping this list is the right place to post this question.  If not, feel free to direct me elsewhere.  I also looked for a search option for this list but couldn't find one.  Sorry!

I'm on a new M1 Pro MacBook Pro.  (Yay!)  I installed the arm64 version of R and the latest version of RStudio.  I'm now setting up for package development with RStudio.  When checking any of my packages in RStudio (Build|Check Package), I see:


checking data for ASCII and uncompressed saves ... OK
   WARNING
  ?qpdf? is needed for checks on size reduction of PDFs


This warning does not appear on my Intel Mac.


I attempted the following to try to eliminate this warning:

* Installed qpdf (from https://mac.r-project.org/libs-arm64/) into /opt/R/arm64/bin. 

* As suggested at https://mac.r-project.org/libs-arm64/, I added /opt/R/arm64/bin to PATH such that I see the following in the macOS Terminal app:

mkh2 at Mac91836 ~ % echo $PATH
/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/TeX/texbin:/opt/X11/bin:/Library/Apple/usr/bin:/opt/R/arm64/bin

and

mkh2 at Mac91836 ~ % which qpdf
/opt/R/arm64/bin/qpdf


However, the problem persists.


Is there something else I should be doing to eliminate this warning?


Any suggestions will be welcome.

Thanks,

Matt


P.S.  Many, many thanks to everyone who keeps R for Mac viable!  Your contributions are incredibly valuable.

From @|mon@urb@nek @end|ng |rom R-project@org  Mon Dec 20 04:02:26 2021
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Mon, 20 Dec 2021 16:02:26 +1300
Subject: [R-SIG-Mac] Missing qpdf
In-Reply-To: <C81D7EFD-97AD-4765-979C-40B165A2739C@me.com>
References: <C81D7EFD-97AD-4765-979C-40B165A2739C@me.com>
Message-ID: <3362E326-20E5-4581-84F1-2AE39E8E22A5@R-project.org>

Matt,

First option: try using the latest R from https://mac.R-project.org since the latest releases include qpdf in the distribution so there is no need to install it externally.

Second option: use R instead of RStudio since the latter is just a complicated way to call "R CMD check" so calling it directly should work.

Third option: ask RStudio support how to get it to work since that requires manipulation of (exported) PATH inside RStudio.

Cheers,
Simon


> On Dec 20, 2021, at 3:16 PM, Matthew Heun via R-SIG-Mac <r-sig-mac at r-project.org> wrote:
> 
> All:
> 
> I'm hoping this list is the right place to post this question.  If not, feel free to direct me elsewhere.  I also looked for a search option for this list but couldn't find one.  Sorry!
> 
> I'm on a new M1 Pro MacBook Pro.  (Yay!)  I installed the arm64 version of R and the latest version of RStudio.  I'm now setting up for package development with RStudio.  When checking any of my packages in RStudio (Build|Check Package), I see:
> 
> 
> checking data for ASCII and uncompressed saves ... OK
>   WARNING
>  ?qpdf? is needed for checks on size reduction of PDFs
> 
> 
> This warning does not appear on my Intel Mac.
> 
> 
> I attempted the following to try to eliminate this warning:
> 
> * Installed qpdf (from https://mac.r-project.org/libs-arm64/) into /opt/R/arm64/bin. 
> 
> * As suggested at https://mac.r-project.org/libs-arm64/, I added /opt/R/arm64/bin to PATH such that I see the following in the macOS Terminal app:
> 
> mkh2 at Mac91836 ~ % echo $PATH
> /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/TeX/texbin:/opt/X11/bin:/Library/Apple/usr/bin:/opt/R/arm64/bin
> 
> and
> 
> mkh2 at Mac91836 ~ % which qpdf
> /opt/R/arm64/bin/qpdf
> 
> 
> However, the problem persists.
> 
> 
> Is there something else I should be doing to eliminate this warning?
> 
> 
> Any suggestions will be welcome.
> 
> Thanks,
> 
> Matt
> 
> 
> P.S.  Many, many thanks to everyone who keeps R for Mac viable!  Your contributions are incredibly valuable.
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 


From m@tthew@heun @end|ng |rom me@com  Mon Dec 20 21:09:40 2021
From: m@tthew@heun @end|ng |rom me@com (Matthew Heun)
Date: Mon, 20 Dec 2021 15:09:40 -0500
Subject: [R-SIG-Mac] Missing qpdf
In-Reply-To: <3362E326-20E5-4581-84F1-2AE39E8E22A5@R-project.org>
References: <C81D7EFD-97AD-4765-979C-40B165A2739C@me.com>
 <3362E326-20E5-4581-84F1-2AE39E8E22A5@R-project.org>
Message-ID: <6A893420-9DDD-4028-BD26-DF157D57CEBF@me.com>

Thanks! 

The "First option" worked for me.  Specifically, I installed the "R-4.1-branch 4.1.2 patched" version from https://mac.r-project.org, and everything works (without the external installation of qpdf).

Happy Holidays!

Cheers,

Matt






> On Dec 19, 2021, at 10:02 PM, Simon Urbanek <simon.urbanek at R-project.org> wrote:
> 
> Matt,
> 
> First option: try using the latest R from https://mac.R-project.org since the latest releases include qpdf in the distribution so there is no need to install it externally.
> 
> Second option: use R instead of RStudio since the latter is just a complicated way to call "R CMD check" so calling it directly should work.
> 
> Third option: ask RStudio support how to get it to work since that requires manipulation of (exported) PATH inside RStudio.
> 
> Cheers,
> Simon
> 
> 
>> On Dec 20, 2021, at 3:16 PM, Matthew Heun via R-SIG-Mac <r-sig-mac at r-project.org> wrote:
>> 
>> All:
>> 
>> I'm hoping this list is the right place to post this question.  If not, feel free to direct me elsewhere.  I also looked for a search option for this list but couldn't find one.  Sorry!
>> 
>> I'm on a new M1 Pro MacBook Pro.  (Yay!)  I installed the arm64 version of R and the latest version of RStudio.  I'm now setting up for package development with RStudio.  When checking any of my packages in RStudio (Build|Check Package), I see:
>> 
>> 
>> checking data for ASCII and uncompressed saves ... OK
>>  WARNING
>> ?qpdf? is needed for checks on size reduction of PDFs
>> 
>> 
>> This warning does not appear on my Intel Mac.
>> 
>> 
>> I attempted the following to try to eliminate this warning:
>> 
>> * Installed qpdf (from https://mac.r-project.org/libs-arm64/) into /opt/R/arm64/bin. 
>> 
>> * As suggested at https://mac.r-project.org/libs-arm64/, I added /opt/R/arm64/bin to PATH such that I see the following in the macOS Terminal app:
>> 
>> mkh2 at Mac91836 ~ % echo $PATH
>> /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/TeX/texbin:/opt/X11/bin:/Library/Apple/usr/bin:/opt/R/arm64/bin
>> 
>> and
>> 
>> mkh2 at Mac91836 ~ % which qpdf
>> /opt/R/arm64/bin/qpdf
>> 
>> 
>> However, the problem persists.
>> 
>> 
>> Is there something else I should be doing to eliminate this warning?
>> 
>> 
>> Any suggestions will be welcome.
>> 
>> Thanks,
>> 
>> Matt
>> 
>> 
>> P.S.  Many, many thanks to everyone who keeps R for Mac viable!  Your contributions are incredibly valuable.
>> _______________________________________________
>> R-SIG-Mac mailing list
>> R-SIG-Mac at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>> 
> 


From m@tthew@heun @end|ng |rom me@com  Tue Dec 21 21:21:30 2021
From: m@tthew@heun @end|ng |rom me@com (Matthew Heun)
Date: Tue, 21 Dec 2021 15:21:30 -0500
Subject: [R-SIG-Mac] .Machine differences between Intel and M1
Message-ID: <5A1BFBFD-3D30-46A8-A146-F6AFE5BE3497@me.com>

All:

I'm seeing some test failures on a new M1 Pro machine that I do not see on my Intel machine.  I'm investigating whether the test failures are caused by machine precision differences.  On my M1 Pro machine, differences of large numbers are greater than a specified tolerance.  (On my Intel machine, differences between the supposed same numbers are within tolerance.)

The output of .Machine shows some differences.  I have 2 questions below, each identified by "****".

(1) For sizeof.longdouble, I see the following:

Intel machine:

> $sizeof.longdouble
> [1] 16

M1 Pro machine:

> $sizeof.longdouble
> [1] 8



?.Machine says:

sizeof.longdouble	
the number of bytes in a C long double type. Will be zero if there is no such type (or its use was disabled when R was built), otherwise possibly12 (most 32-bit builds) or 16 (most 64-bit builds).

The M1 Pro uses a 64-bit architecture.  So this result is surprising to me.

Furthermore, 

> > capabilities("long.double")
> long.double 
>        TRUE 

So somebody thinks that long doubles are supported.

**** Is the difference in sizeof.longdouble between the Intel and M1 architectures expected?


(2) Also, my M1 Pro machine is missing additional fields (that the Intel machine reports):

> $longdouble.eps
> [1] 1.084202e-19
> 
> $longdouble.neg.eps
> [1] 5.421011e-20
> 
> $longdouble.digits
> [1] 64
> 
> $longdouble.rounding
> [1] 5
> 
> $longdouble.guard
> [1] 0
> 
> $longdouble.ulp.digits
> [1] -63
> 
> $longdouble.neg.ulp.digits
> [1] -64
> 
> $longdouble.exponent
> [1] 15
> 
> $longdouble.min.exp
> [1] -16382
> 
> $longdouble.max.exp
> [1] 16384

**** Is there a reason why the above entries are missing from the output of .Machine on the M1 Pro machine?



My R installation is:  4.1.2 Patched (2021/12/16, r81394)



Any help will be appreciated.



Cheers,

Matt


From @|mon@urb@nek @end|ng |rom R-project@org  Tue Dec 21 21:46:39 2021
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 22 Dec 2021 09:46:39 +1300
Subject: [R-SIG-Mac] .Machine differences between Intel and M1
In-Reply-To: <5A1BFBFD-3D30-46A8-A146-F6AFE5BE3497@me.com>
References: <5A1BFBFD-3D30-46A8-A146-F6AFE5BE3497@me.com>
Message-ID: <57A3D2B6-8C63-4F74-A599-EA8C47C51AEF@R-project.org>

Matt,

yes, arm64 does not support long doubles. In C the long double type is 64-bit there so has the same precision as doubles (this is allowed by the standard).

Cheers,
Simon


> On Dec 22, 2021, at 9:21 AM, Matthew Heun via R-SIG-Mac <r-sig-mac at r-project.org> wrote:
> 
> All:
> 
> I'm seeing some test failures on a new M1 Pro machine that I do not see on my Intel machine.  I'm investigating whether the test failures are caused by machine precision differences.  On my M1 Pro machine, differences of large numbers are greater than a specified tolerance.  (On my Intel machine, differences between the supposed same numbers are within tolerance.)
> 
> The output of .Machine shows some differences.  I have 2 questions below, each identified by "****".
> 
> (1) For sizeof.longdouble, I see the following:
> 
> Intel machine:
> 
>> $sizeof.longdouble
>> [1] 16
> 
> M1 Pro machine:
> 
>> $sizeof.longdouble
>> [1] 8
> 
> 
> 
> ?.Machine says:
> 
> sizeof.longdouble	
> the number of bytes in a C long double type. Will be zero if there is no such type (or its use was disabled when R was built), otherwise possibly12 (most 32-bit builds) or 16 (most 64-bit builds).
> 
> The M1 Pro uses a 64-bit architecture.  So this result is surprising to me.
> 
> Furthermore, 
> 
>>> capabilities("long.double")
>> long.double 
>>       TRUE 
> 
> So somebody thinks that long doubles are supported.
> 
> **** Is the difference in sizeof.longdouble between the Intel and M1 architectures expected?
> 
> 
> (2) Also, my M1 Pro machine is missing additional fields (that the Intel machine reports):
> 
>> $longdouble.eps
>> [1] 1.084202e-19
>> 
>> $longdouble.neg.eps
>> [1] 5.421011e-20
>> 
>> $longdouble.digits
>> [1] 64
>> 
>> $longdouble.rounding
>> [1] 5
>> 
>> $longdouble.guard
>> [1] 0
>> 
>> $longdouble.ulp.digits
>> [1] -63
>> 
>> $longdouble.neg.ulp.digits
>> [1] -64
>> 
>> $longdouble.exponent
>> [1] 15
>> 
>> $longdouble.min.exp
>> [1] -16382
>> 
>> $longdouble.max.exp
>> [1] 16384
> 
> **** Is there a reason why the above entries are missing from the output of .Machine on the M1 Pro machine?
> 
> 
> 
> My R installation is:  4.1.2 Patched (2021/12/16, r81394)
> 
> 
> 
> Any help will be appreciated.
> 
> 
> 
> Cheers,
> 
> Matt
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Tue Dec 21 22:10:03 2021
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Tue, 21 Dec 2021 21:10:03 +0000
Subject: [R-SIG-Mac] .Machine differences between Intel and M1
In-Reply-To: <57A3D2B6-8C63-4F74-A599-EA8C47C51AEF@R-project.org>
References: <5A1BFBFD-3D30-46A8-A146-F6AFE5BE3497@me.com>
 <57A3D2B6-8C63-4F74-A599-EA8C47C51AEF@R-project.org>
Message-ID: <ad3fca57-bb98-e0d9-e36f-ff732a47bade@stats.ox.ac.uk>

On 21/12/2021 20:46, Simon Urbanek wrote:
> Matt,
> 
> yes, arm64 does not support long doubles. In C the long double type is 64-bit there so has the same precision as doubles (this is allowed by the standard).

And documented in ?.Machine.

However, I see on my M1 Pro

> capabilities("long.double")
long.double
       FALSE

on all the arm64 builds I have installed, including the current CRAN 
distribution (of 4.1.2) and that at mac.r-project.org (see below).  So I 
have no idea why TRUE is reported below (if this really was an arm64 
build run on the M1 Pro).

R version 4.1.2 Patched (2021-12-16 r81394) -- "Bird Hippie"
...
 > capabilities('long.double')
long.double
       FALSE


> Cheers,
> Simon
> 
> 
>> On Dec 22, 2021, at 9:21 AM, Matthew Heun via R-SIG-Mac <r-sig-mac at r-project.org> wrote:
>>
>> All:
>>
>> I'm seeing some test failures on a new M1 Pro machine that I do not see on my Intel machine.  I'm investigating whether the test failures are caused by machine precision differences.  On my M1 Pro machine, differences of large numbers are greater than a specified tolerance.  (On my Intel machine, differences between the supposed same numbers are within tolerance.)

A small number of packages (and R itself) have needed tolerances 
increased for checks on arm64.

>>
>> The output of .Machine shows some differences.  I have 2 questions below, each identified by "****".
>>
>> (1) For sizeof.longdouble, I see the following:
>>
>> Intel machine:
>>
>>> $sizeof.longdouble
>>> [1] 16
>>
>> M1 Pro machine:
>>
>>> $sizeof.longdouble
>>> [1] 8
>>
>>
>>
>> ?.Machine says:
>>
>> sizeof.longdouble	
>> the number of bytes in a C long double type. Will be zero if there is no such type (or its use was disabled when R was built), otherwise possibly12 (most 32-bit builds) or 16 (most 64-bit builds).
>>
>> The M1 Pro uses a 64-bit architecture.  So this result is surprising to me.
>>
>> Furthermore,
>>
>>>> capabilities("long.double")
>>> long.double
>>>        TRUE
>>
>> So somebody thinks that long doubles are supported.
>>
>> **** Is the difference in sizeof.longdouble between the Intel and M1 architectures expected?
>>
>>
>> (2) Also, my M1 Pro machine is missing additional fields (that the Intel machine reports):
>>
>>> $longdouble.eps
>>> [1] 1.084202e-19
>>>
>>> $longdouble.neg.eps
>>> [1] 5.421011e-20
>>>
>>> $longdouble.digits
>>> [1] 64
>>>
>>> $longdouble.rounding
>>> [1] 5
>>>
>>> $longdouble.guard
>>> [1] 0
>>>
>>> $longdouble.ulp.digits
>>> [1] -63
>>>
>>> $longdouble.neg.ulp.digits
>>> [1] -64
>>>
>>> $longdouble.exponent
>>> [1] 15
>>>
>>> $longdouble.min.exp
>>> [1] -16382
>>>
>>> $longdouble.max.exp
>>> [1] 16384
>>
>> **** Is there a reason why the above entries are missing from the output of .Machine on the M1 Pro machine?
>>
>>
>>
>> My R installation is:  4.1.2 Patched (2021/12/16, r81394)
>>
>>
>>
>> Any help will be appreciated.
>>
>>
>>
>> Cheers,
>>
>> Matt


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From m@tthew@heun @end|ng |rom me@com  Wed Dec 22 02:55:19 2021
From: m@tthew@heun @end|ng |rom me@com (Matthew Heun)
Date: Tue, 21 Dec 2021 20:55:19 -0500
Subject: [R-SIG-Mac] .Machine differences between Intel and M1
In-Reply-To: <ad3fca57-bb98-e0d9-e36f-ff732a47bade@stats.ox.ac.uk>
References: <5A1BFBFD-3D30-46A8-A146-F6AFE5BE3497@me.com>
 <57A3D2B6-8C63-4F74-A599-EA8C47C51AEF@R-project.org>
 <ad3fca57-bb98-e0d9-e36f-ff732a47bade@stats.ox.ac.uk>
Message-ID: <C2EFFCB3-3F49-4104-880A-B07375B8C31A@me.com>

All:

In fact, I also have

> > capabilities("long.double")
> long.double 
>       FALSE 

on my M1 machine.  I made a mistake earlier (was "on" the Intel machine, accidentally).  I'm sorry for misleading anyone.

I will need to adjust the tolerance on my tests for the M1.  I think that's somewhat unfortunate, but what can we do?

I really appreciate the insights from Simon and Brian.  Thank you so much for the quick answers!

Happy Holidays, everyone.

Cheers,

Matt






> On Dec 21, 2021, at 4:10 PM, Prof Brian Ripley <ripley at stats.ox.ac.uk> wrote:
> 
> On 21/12/2021 20:46, Simon Urbanek wrote:
>> Matt,
>> yes, arm64 does not support long doubles. In C the long double type is 64-bit there so has the same precision as doubles (this is allowed by the standard).
> 
> And documented in ?.Machine.
> 
> However, I see on my M1 Pro
> 
>> capabilities("long.double")
> long.double
>      FALSE
> 
> on all the arm64 builds I have installed, including the current CRAN distribution (of 4.1.2) and that at mac.r-project.org (see below).  So I have no idea why TRUE is reported below (if this really was an arm64 build run on the M1 Pro).
> 
> R version 4.1.2 Patched (2021-12-16 r81394) -- "Bird Hippie"
> ...
> > capabilities('long.double')
> long.double
>      FALSE
> 
> 
>> Cheers,
>> Simon
>>> On Dec 22, 2021, at 9:21 AM, Matthew Heun via R-SIG-Mac <r-sig-mac at r-project.org> wrote:
>>> 
>>> All:
>>> 
>>> I'm seeing some test failures on a new M1 Pro machine that I do not see on my Intel machine.  I'm investigating whether the test failures are caused by machine precision differences.  On my M1 Pro machine, differences of large numbers are greater than a specified tolerance.  (On my Intel machine, differences between the supposed same numbers are within tolerance.)
> 
> A small number of packages (and R itself) have needed tolerances increased for checks on arm64.
> 
>>> 
>>> The output of .Machine shows some differences.  I have 2 questions below, each identified by "****".
>>> 
>>> (1) For sizeof.longdouble, I see the following:
>>> 
>>> Intel machine:
>>> 
>>>> $sizeof.longdouble
>>>> [1] 16
>>> 
>>> M1 Pro machine:
>>> 
>>>> $sizeof.longdouble
>>>> [1] 8
>>> 
>>> 
>>> 
>>> ?.Machine says:
>>> 
>>> sizeof.longdouble	
>>> the number of bytes in a C long double type. Will be zero if there is no such type (or its use was disabled when R was built), otherwise possibly12 (most 32-bit builds) or 16 (most 64-bit builds).
>>> 
>>> The M1 Pro uses a 64-bit architecture.  So this result is surprising to me.
>>> 
>>> Furthermore,
>>> 
>>>>> capabilities("long.double")
>>>> long.double
>>>>       TRUE
>>> 
>>> So somebody thinks that long doubles are supported.
>>> 
>>> **** Is the difference in sizeof.longdouble between the Intel and M1 architectures expected?
>>> 
>>> 
>>> (2) Also, my M1 Pro machine is missing additional fields (that the Intel machine reports):
>>> 
>>>> $longdouble.eps
>>>> [1] 1.084202e-19
>>>> 
>>>> $longdouble.neg.eps
>>>> [1] 5.421011e-20
>>>> 
>>>> $longdouble.digits
>>>> [1] 64
>>>> 
>>>> $longdouble.rounding
>>>> [1] 5
>>>> 
>>>> $longdouble.guard
>>>> [1] 0
>>>> 
>>>> $longdouble.ulp.digits
>>>> [1] -63
>>>> 
>>>> $longdouble.neg.ulp.digits
>>>> [1] -64
>>>> 
>>>> $longdouble.exponent
>>>> [1] 15
>>>> 
>>>> $longdouble.min.exp
>>>> [1] -16382
>>>> 
>>>> $longdouble.max.exp
>>>> [1] 16384
>>> 
>>> **** Is there a reason why the above entries are missing from the output of .Machine on the M1 Pro machine?
>>> 
>>> 
>>> 
>>> My R installation is:  4.1.2 Patched (2021/12/16, r81394)
>>> 
>>> 
>>> 
>>> Any help will be appreciated.
>>> 
>>> 
>>> 
>>> Cheers,
>>> 
>>> Matt
> 
> 
> -- 
> Brian D. Ripley,                  ripley at stats.ox.ac.uk
> Emeritus Professor of Applied Statistics, University of Oxford


From er|ch@neuw|rth @end|ng |rom un|v|e@@c@@t  Sun Dec 26 12:04:51 2021
From: er|ch@neuw|rth @end|ng |rom un|v|e@@c@@t (Erich Neuwirth)
Date: Sun, 26 Dec 2021 12:04:51 +0100
Subject: [R-SIG-Mac] Compiling Cairo package
Message-ID: <EB35B7DD-28D7-4C13-B06B-4DB7E379AE0A@univie.ac.at>

I am trying to compile Cairo.
I get the following error

xlib-backend.c:34:10: fatal error: 'X11/Intrinsic.h' file not found
#include <X11/Intrinsic.h>      /*->    Xlib.h  Xutil.h Xresource.h .. */

I have X11/Intrinsic.h in /opt/X11/include

I tried

Sys.setenv(LD_LIBRARY_PATH="/opt/X11:/opt/X11/lib")
Sys.getenv("LD_LIBRARY_PATH")
system("export LD_LIBRARY_PATH?)

and compiled again, but I get the same error.

What do I need to do so Intrinsic.h is found by the compiler?

Erich


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 699 bytes
Desc: Message signed with OpenPGP
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20211226/32ced4d9/attachment.sig>

From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Dec 26 12:36:03 2021
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 26 Dec 2021 06:36:03 -0500
Subject: [R-SIG-Mac] Compiling Cairo package
In-Reply-To: <EB35B7DD-28D7-4C13-B06B-4DB7E379AE0A@univie.ac.at>
References: <EB35B7DD-28D7-4C13-B06B-4DB7E379AE0A@univie.ac.at>
Message-ID: <c33b227b-fcd5-e62c-6e27-27feab368bd1@gmail.com>

On 26/12/2021 6:04 a.m., Erich Neuwirth wrote:
> I am trying to compile Cairo.
> I get the following error
> 
> xlib-backend.c:34:10: fatal error: 'X11/Intrinsic.h' file not found
> #include <X11/Intrinsic.h>      /*->    Xlib.h  Xutil.h Xresource.h .. */
> 
> I have X11/Intrinsic.h in /opt/X11/include
> 
> I tried
> 
> Sys.setenv(LD_LIBRARY_PATH="/opt/X11:/opt/X11/lib")
> Sys.getenv("LD_LIBRARY_PATH")
> system("export LD_LIBRARY_PATH?)
> 
> and compiled again, but I get the same error.
> 
> What do I need to do so Intrinsic.h is found by the compiler?

Usually the location of include files is set at configure time.  For R, 
I use

   ../R-devel-src/configure --with-x --x-includes=/opt/X11/include 
--x-libraries=/opt/X11/lib

It's not clear to me whether Cairo is the R package or an external 
library, but if it's the R package, you might try

   install.packages("Cairo", type = "source", configure.args = 
"--x-includes=/opt/X11/include --x-libraries=/opt/X11/lib")

Duncan Murdoch


From er|ch@neuw|rth @end|ng |rom un|v|e@@c@@t  Sun Dec 26 16:00:05 2021
From: er|ch@neuw|rth @end|ng |rom un|v|e@@c@@t (Erich Neuwirth)
Date: Sun, 26 Dec 2021 16:00:05 +0100
Subject: [R-SIG-Mac] Compiling Cairo package
In-Reply-To: <c33b227b-fcd5-e62c-6e27-27feab368bd1@gmail.com>
References: <EB35B7DD-28D7-4C13-B06B-4DB7E379AE0A@univie.ac.at>
 <c33b227b-fcd5-e62c-6e27-27feab368bd1@gmail.com>
Message-ID: <FD1C6F65-0430-4A98-8CD5-4C4B57574282@univie.ac.at>

Duncan?s suggestion did not work
So I tried

Sys.setenv(LD_LIBRARY_PATH="/opt/X11:/opt/X11/lib")
system("export LD_LIBRARY_PATH")
Sys.setenv(C_INCLUDE_PATH="/opt/X11/include")
system("export C_INCLUDE_PATH")
Sys.getenv()

and then simply doing

install.packages(?Cairo?)
worked.


> On 26.12.2021, at 12:36, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> 
> On 26/12/2021 6:04 a.m., Erich Neuwirth wrote:
>> I am trying to compile Cairo.
>> I get the following error
>> xlib-backend.c:34:10: fatal error: 'X11/Intrinsic.h' file not found
>> #include <X11/Intrinsic.h>      /*->    Xlib.h  Xutil.h Xresource.h .. */
>> I have X11/Intrinsic.h in /opt/X11/include
>> I tried
>> Sys.setenv(LD_LIBRARY_PATH="/opt/X11:/opt/X11/lib")
>> Sys.getenv("LD_LIBRARY_PATH")
>> system("export LD_LIBRARY_PATH?)
>> and compiled again, but I get the same error.
>> What do I need to do so Intrinsic.h is found by the compiler?
> 
> Usually the location of include files is set at configure time.  For R, I use
> 
>  ../R-devel-src/configure --with-x --x-includes=/opt/X11/include --x-libraries=/opt/X11/lib
> 
> It's not clear to me whether Cairo is the R package or an external library, but if it's the R package, you might try
> 
>  install.packages("Cairo", type = "source", configure.args = "--x-includes=/opt/X11/include --x-libraries=/opt/X11/lib")
> 
> Duncan Murdoch
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 699 bytes
Desc: Message signed with OpenPGP
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20211226/34cb5275/attachment.sig>

From @|mon@urb@nek @end|ng |rom R-project@org  Wed Dec 29 00:17:51 2021
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 29 Dec 2021 12:17:51 +1300
Subject: [R-SIG-Mac] Compiling Cairo package
In-Reply-To: <FD1C6F65-0430-4A98-8CD5-4C4B57574282@univie.ac.at>
References: <EB35B7DD-28D7-4C13-B06B-4DB7E379AE0A@univie.ac.at>
 <c33b227b-fcd5-e62c-6e27-27feab368bd1@gmail.com>
 <FD1C6F65-0430-4A98-8CD5-4C4B57574282@univie.ac.at>
Message-ID: <F56269E5-F16E-43EA-B66A-2D4E6AE16FDE@R-project.org>

Erich,

can you, please, send me the full output and the exact setup you used? I suspect you may be using XQuartz 2.8.0 or higher which has broken pkg-config files - latest XQuartz requires a patch to make any compilation against it work (see https://github.com/R-macos/recipes/blob/master/other/tcltk/pkgconfig.patch for what we do to compile Tk).

From what I can see the only line that has actually any effect at all is

Sys.setenv(C_INCLUDE_PATH="/opt/X11/include")

so all the others are likely not needed, but I'm not sure of your setup so can't test.

Cheers,
Simon



> On Dec 27, 2021, at 4:00 AM, Erich Neuwirth <erich.neuwirth at univie.ac.at> wrote:
> 
> Duncan?s suggestion did not work
> So I tried
> 
> Sys.setenv(LD_LIBRARY_PATH="/opt/X11:/opt/X11/lib")
> system("export LD_LIBRARY_PATH")
> Sys.setenv(C_INCLUDE_PATH="/opt/X11/include")
> system("export C_INCLUDE_PATH")
> Sys.getenv()
> 
> and then simply doing
> 
> install.packages(?Cairo?)
> worked.
> 
> 
>> On 26.12.2021, at 12:36, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>> 
>> On 26/12/2021 6:04 a.m., Erich Neuwirth wrote:
>>> I am trying to compile Cairo.
>>> I get the following error
>>> xlib-backend.c:34:10: fatal error: 'X11/Intrinsic.h' file not found
>>> #include <X11/Intrinsic.h>      /*->    Xlib.h  Xutil.h Xresource.h .. */
>>> I have X11/Intrinsic.h in /opt/X11/include
>>> I tried
>>> Sys.setenv(LD_LIBRARY_PATH="/opt/X11:/opt/X11/lib")
>>> Sys.getenv("LD_LIBRARY_PATH")
>>> system("export LD_LIBRARY_PATH?)
>>> and compiled again, but I get the same error.
>>> What do I need to do so Intrinsic.h is found by the compiler?
>> 
>> Usually the location of include files is set at configure time.  For R, I use
>> 
>> ../R-devel-src/configure --with-x --x-includes=/opt/X11/include --x-libraries=/opt/X11/lib
>> 
>> It's not clear to me whether Cairo is the R package or an external library, but if it's the R package, you might try
>> 
>> install.packages("Cairo", type = "source", configure.args = "--x-includes=/opt/X11/include --x-libraries=/opt/X11/lib")
>> 
>> Duncan Murdoch
>> 
>> _______________________________________________
>> R-SIG-Mac mailing list
>> R-SIG-Mac at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac


From er|ch@neuw|rth @end|ng |rom un|v|e@@c@@t  Wed Dec 29 01:03:06 2021
From: er|ch@neuw|rth @end|ng |rom un|v|e@@c@@t (Erich Neuwirth)
Date: Wed, 29 Dec 2021 01:03:06 +0100
Subject: [R-SIG-Mac] Compiling Cairo package
In-Reply-To: <F56269E5-F16E-43EA-B66A-2D4E6AE16FDE@R-project.org>
References: <EB35B7DD-28D7-4C13-B06B-4DB7E379AE0A@univie.ac.at>
 <c33b227b-fcd5-e62c-6e27-27feab368bd1@gmail.com>
 <FD1C6F65-0430-4A98-8CD5-4C4B57574282@univie.ac.at>
 <F56269E5-F16E-43EA-B66A-2D4E6AE16FDE@R-project.org>
Message-ID: <A0BA0B43-D7AF-46B9-9065-4A2F99BFA6C2@univie.ac.at>

MacOS 11.6.2 (iMac Late 2014, Intel)
XQuartz 2.8.1 (xorg-server 1.20.11)
R 4.1.2

cd /opt/X11
? ls
bin     etc     include lib     libexec share   var

Just setting
Sys.setenv(C_INCLUDE_PATH="/opt/X11/include")

is sufficient, then package Cairo compiles


Also just setting
Sys.setenv(PKG_CONFIG_PATH="/opt/X11/lib/pkgconfig:/usr/local/lib/pkgconfig:/usr/lib/pkgconfig")
works

I got the same results on
MacOS 12.1 (MacBookPro 2021, M1)
everything else as on the Intel machine


> On 29.12.2021, at 00:17, Simon Urbanek <simon.urbanek at R-project.org> wrote:
> 
> Erich,
> 
> can you, please, send me the full output and the exact setup you used? I suspect you may be using XQuartz 2.8.0 or higher which has broken pkg-config files - latest XQuartz requires a patch to make any compilation against it work (see https://github.com/R-macos/recipes/blob/master/other/tcltk/pkgconfig.patch for what we do to compile Tk).
> 
> From what I can see the only line that has actually any effect at all is
> 
> Sys.setenv(C_INCLUDE_PATH="/opt/X11/include")
> 
> so all the others are likely not needed, but I'm not sure of your setup so can't test.
> 
> Cheers,
> Simon
> 
> 
> 
>> On Dec 27, 2021, at 4:00 AM, Erich Neuwirth <erich.neuwirth at univie.ac.at> wrote:
>> 
>> Duncan?s suggestion did not work
>> So I tried
>> 
>> Sys.setenv(LD_LIBRARY_PATH="/opt/X11:/opt/X11/lib")
>> system("export LD_LIBRARY_PATH")
>> Sys.setenv(C_INCLUDE_PATH="/opt/X11/include")
>> system("export C_INCLUDE_PATH")
>> Sys.getenv()
>> 
>> and then simply doing
>> 
>> install.packages(?Cairo?)
>> worked.
>> 
>> 
>>> On 26.12.2021, at 12:36, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>> 
>>> On 26/12/2021 6:04 a.m., Erich Neuwirth wrote:
>>>> I am trying to compile Cairo.
>>>> I get the following error
>>>> xlib-backend.c:34:10: fatal error: 'X11/Intrinsic.h' file not found
>>>> #include <X11/Intrinsic.h>      /*->    Xlib.h  Xutil.h Xresource.h .. */
>>>> I have X11/Intrinsic.h in /opt/X11/include
>>>> I tried
>>>> Sys.setenv(LD_LIBRARY_PATH="/opt/X11:/opt/X11/lib")
>>>> Sys.getenv("LD_LIBRARY_PATH")
>>>> system("export LD_LIBRARY_PATH?)
>>>> and compiled again, but I get the same error.
>>>> What do I need to do so Intrinsic.h is found by the compiler?
>>> 
>>> Usually the location of include files is set at configure time.  For R, I use
>>> 
>>> ../R-devel-src/configure --with-x --x-includes=/opt/X11/include --x-libraries=/opt/X11/lib
>>> 
>>> It's not clear to me whether Cairo is the R package or an external library, but if it's the R package, you might try
>>> 
>>> install.packages("Cairo", type = "source", configure.args = "--x-includes=/opt/X11/include --x-libraries=/opt/X11/lib")
>>> 
>>> Duncan Murdoch
>>> 
>>> _______________________________________________
>>> R-SIG-Mac mailing list
>>> R-SIG-Mac at r-project.org
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>> 
>> _______________________________________________
>> R-SIG-Mac mailing list
>> R-SIG-Mac at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 699 bytes
Desc: Message signed with OpenPGP
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20211229/849ee932/attachment.sig>

