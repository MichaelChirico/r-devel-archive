From p@tr|ck@@chr@tz @end|ng |rom gm@||@com  Fri Apr  1 15:08:48 2022
From: p@tr|ck@@chr@tz @end|ng |rom gm@||@com (Patrick Schratz)
Date: Fri, 01 Apr 2022 15:08:48 +0200
Subject: [R-SIG-Mac] CRAN installer for macOS - directory permissions
Message-ID: <36345395-F4E6-4069-9900-990E283FA7AC@gmail.com>

Dear fellow R users on macOS,

I'd like to discuss the current directory permissions set by the CRAN 
installer for macOS (https://cran.r-project.org/).
The installers installs R into `/Library/Frameworks/R.framework/` with 
775 permissions.
In contrast to 755, 775 also gives the defined group write permissions.
The group for `/Library/Frameworks/R.framework/` is `admin`.
Many users use a Mac in a single-user setup, i.e. only one user is using 
the machine.
This is usually also an administrator, i.e. the user is a member of the 
`admin` group.

## The problem

Being a member of `admin` group gives subsequently write access into the 
R system library, i.e. the library which stores the package which are 
bundled with the installer (base, MASS, parallel, etc.).
This is problematic for several reasons:
- user packages are mixed with system packages
- if a new R version is installed, all packages in the system library 
are lost as they are getting overwritten by the CRAN installer
- on other platforms (Windows, Linux) the system library is not writable 
by default, hence the behaviour of the macOS CRAN installer is different 
from the other platforms

Besides the differing experience for users on macOS compared to other 
platforms (which constantly causes confusion for R users switching 
platforms), the above also causes many unneeded R package downloads, 
e.g. users are forced to reinstall all packages for every patch version 
update of R.

In case you are wondering why R does not offer to create a user library 
as on other platforms: if the system library is writable (or R detects 
any writable library configured in the repos option), the prompt will 
not appear.
If a user manually creates a user library at the expected path (e.g 
.`$HOME/Library/R/arm64/4.1/library`), R will pick it up and packages 
will go into the user library.
However, most R users don't want to bother with this and are no experts 
in their local library management.

## How can the following possibly be solved?

AFAICS the easiest way would be to set 755 instead of 775 permissions 
for the `/Library/Frameworks/R.framework/` folder.
I don't see a reason why write permissions for the `admin` group would 
be needed.

I've tested this in a few scenarios and did not face any issues.
Also I've come across an interesting observation while doing so:
While R in the terminal offers the creation of the user lib if 
permissions are 755

```
[ins] r$> .libPaths()
[1] 
"/Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library"

[ins] r$> install.packages("<package>")
Warning in install.packages("<package>") :
   'lib = 
"/Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library"' 
is not writable

[ins] Would you like to use a personal library instead? (yes/No/cancel) 
yes
[ins] Would you like to create a personal library
```

RStudio does it even silently in the background (which is quite nice 
imo).
To reproduce:
1. Install R for Mac via the CRAN installer
2. `sudo chmod -R 755 /Library/Frameworks/R.framework/`
3. `R -q -e ".libPaths()"` (should only return the system library)
4. Open RStudio
5. `R -q -e ".libPaths()"` (should return two libraries, with the user 
lib being the first)

If for some reasons 755 cannot be set for the `R.frameworks` 
directories, then the group defined for `R.frameworks` (and recursive 
directories) could possibly be changed to prevent direct writes access 
to the R system lib.

Last, I wanted to ask if the source code for the CRAN installer is 
publicly available? I could not find it and would be interested to take 
a look into it.
If this is not possible for some reason, I would also be interested in 
getting to know the reason for this decision.

Best regards,
Patrick
	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Fri Apr  1 23:43:40 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Sat, 2 Apr 2022 10:43:40 +1300
Subject: [R-SIG-Mac] CRAN installer for macOS - directory permissions
In-Reply-To: <36345395-F4E6-4069-9900-990E283FA7AC@gmail.com>
References: <36345395-F4E6-4069-9900-990E283FA7AC@gmail.com>
Message-ID: <9200B51A-3A42-42B1-8E1F-4A31C61D5AFA@R-project.org>

Patrick,

thanks for starting the discussion.

The choice is deliberate: the admin group on macOS corresponds to users that are allowed to install system-wide software so it allows all admins on the machine to install packages which is the expected way on macOS.

Also the versioning of the R framework as x.y is also deliberate - upgrading R to a new patch version does *not* require re-installation of packages, they work by design so in fact the system location is the safest way to do that. Also note that packages are never removed by the installer.

Packages are not compatible beyond the patch version so the current setup avoids the most common problem where users inadvertently use packages installed for an incompatible previous R version leading to crashes. To make R upgrades easy the R GUI Package Installer offers specifically the option to install packages from the previous R version. This allows for a clean and safe upgrade of R.

So out of the items listed in "The problem" they are all not true with the exception of the comparison with the other platforms, but even that difference is very subtle as it only affects the default on the first installation and not regular use (and I'm, not even sure it that is true since admin users can still install in the system location on other platforms). The user has full control over where they install a package - it's a simple click to change the default to whatever you prefer. Also I'd like to point out that once you start using the user library, it becomes the default for install.packages() so typically installing packages into system location requires deliberate choice over the user library(*). Note that the behavior of the user library is common across platforms, so I'm not really sure the is any real difference.

I would argue that the current setup tends to be a lot safer than the alternatives, because it allows commonly used packages to be installed at the system level and private packages to be installed at user level. This is also the design typically used on shared machines, where you separate local packages from user packages where local ones are installed by administrators - so exactly the same setup. Moreover R upgrades are a lot cleaner, since you can easily upgrade all system packages at once so you don't have to worry about individual users having stale packages - the biggest problem for admins.

I'd be happy to hear from more Mac user if there are reasons to change the default, but as I outlined the choices were deliberate after weighting the pros and cons. In my view the major issue with the proposal it that is would prevent sharing of packages, make R upgrades a lot harder and prevent admin users from using the current tools for package management - and that includes the ability to separate system and user packages on single-user machines.

Cheers,
Simon


(*) while looking into this I noticed there is a bug in the latest R GUI where Renviron and the GUI don't agree on the location of the user library (due to the addition of the architecture to the path) so I agree that the the GUI should be fixed to
match the location.




> On Apr 2, 2022, at 2:08 AM, Patrick Schratz <patrick.schratz at gmail.com> wrote:
> 
> Dear fellow R users on macOS,
> 
> I'd like to discuss the current directory permissions set by the CRAN 
> installer for macOS (https://cran.r-project.org/).
> The installers installs R into `/Library/Frameworks/R.framework/` with 
> 775 permissions.
> In contrast to 755, 775 also gives the defined group write permissions.
> The group for `/Library/Frameworks/R.framework/` is `admin`.
> Many users use a Mac in a single-user setup, i.e. only one user is using 
> the machine.
> This is usually also an administrator, i.e. the user is a member of the 
> `admin` group.
> 
> ## The problem
> 
> Being a member of `admin` group gives subsequently write access into the 
> R system library, i.e. the library which stores the package which are 
> bundled with the installer (base, MASS, parallel, etc.).
> This is problematic for several reasons:
> - user packages are mixed with system packages
> - if a new R version is installed, all packages in the system library 
> are lost as they are getting overwritten by the CRAN installer
> - on other platforms (Windows, Linux) the system library is not writable 
> by default, hence the behaviour of the macOS CRAN installer is different 
> from the other platforms
> 
> Besides the differing experience for users on macOS compared to other 
> platforms (which constantly causes confusion for R users switching 
> platforms), the above also causes many unneeded R package downloads, 
> e.g. users are forced to reinstall all packages for every patch version 
> update of R.
> 
> In case you are wondering why R does not offer to create a user library 
> as on other platforms: if the system library is writable (or R detects 
> any writable library configured in the repos option), the prompt will 
> not appear.
> If a user manually creates a user library at the expected path (e.g 
> .`$HOME/Library/R/arm64/4.1/library`), R will pick it up and packages 
> will go into the user library.
> However, most R users don't want to bother with this and are no experts 
> in their local library management.
> 
> ## How can the following possibly be solved?
> 
> AFAICS the easiest way would be to set 755 instead of 775 permissions 
> for the `/Library/Frameworks/R.framework/` folder.
> I don't see a reason why write permissions for the `admin` group would 
> be needed.
> 
> I've tested this in a few scenarios and did not face any issues.
> Also I've come across an interesting observation while doing so:
> While R in the terminal offers the creation of the user lib if 
> permissions are 755
> 
> ```
> [ins] r$> .libPaths()
> [1] 
> "/Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library"
> 
> [ins] r$> install.packages("<package>")
> Warning in install.packages("<package>") :
>   'lib = 
> "/Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library"' 
> is not writable
> 
> [ins] Would you like to use a personal library instead? (yes/No/cancel) 
> yes
> [ins] Would you like to create a personal library
> ```
> 
> RStudio does it even silently in the background (which is quite nice 
> imo).
> To reproduce:
> 1. Install R for Mac via the CRAN installer
> 2. `sudo chmod -R 755 /Library/Frameworks/R.framework/`
> 3. `R -q -e ".libPaths()"` (should only return the system library)
> 4. Open RStudio
> 5. `R -q -e ".libPaths()"` (should return two libraries, with the user 
> lib being the first)
> 
> If for some reasons 755 cannot be set for the `R.frameworks` 
> directories, then the group defined for `R.frameworks` (and recursive 
> directories) could possibly be changed to prevent direct writes access 
> to the R system lib.
> 
> Last, I wanted to ask if the source code for the CRAN installer is 
> publicly available? I could not find it and would be interested to take 
> a look into it.
> If this is not possible for some reason, I would also be interested in 
> getting to know the reason for this decision.
> 
> Best regards,
> Patrick
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 


From je@n@th|ou|ou@e @end|ng |rom un|v-|yon1@|r  Sat Apr  2 22:44:34 2022
From: je@n@th|ou|ou@e @end|ng |rom un|v-|yon1@|r (Jean Thioulouse)
Date: Sat, 2 Apr 2022 22:44:34 +0200
Subject: [R-SIG-Mac] CRAN installer for macOS - directory permissions
In-Reply-To: <9200B51A-3A42-42B1-8E1F-4A31C61D5AFA@R-project.org>
References: <36345395-F4E6-4069-9900-990E283FA7AC@gmail.com>
 <9200B51A-3A42-42B1-8E1F-4A31C61D5AFA@R-project.org>
Message-ID: <2AEDBAED-1E8F-482F-B512-AC6435CA7080@univ-lyon1.fr>

Hi

Personally I see no reason to change the current setup. In fact, I think that changing it could raise serious problems for many Mac users who are used to it.

Jean


> Le 1 avr. 2022 ? 23:43, Simon Urbanek <simon.urbanek at R-project.org> a ?crit :
> 
> Patrick,
> 
> thanks for starting the discussion.
> 
> The choice is deliberate: the admin group on macOS corresponds to users that are allowed to install system-wide software so it allows all admins on the machine to install packages which is the expected way on macOS.
> 
> Also the versioning of the R framework as x.y is also deliberate - upgrading R to a new patch version does *not* require re-installation of packages, they work by design so in fact the system location is the safest way to do that. Also note that packages are never removed by the installer.
> 
> Packages are not compatible beyond the patch version so the current setup avoids the most common problem where users inadvertently use packages installed for an incompatible previous R version leading to crashes. To make R upgrades easy the R GUI Package Installer offers specifically the option to install packages from the previous R version. This allows for a clean and safe upgrade of R.
> 
> So out of the items listed in "The problem" they are all not true with the exception of the comparison with the other platforms, but even that difference is very subtle as it only affects the default on the first installation and not regular use (and I'm, not even sure it that is true since admin users can still install in the system location on other platforms). The user has full control over where they install a package - it's a simple click to change the default to whatever you prefer. Also I'd like to point out that once you start using the user library, it becomes the default for install.packages() so typically installing packages into system location requires deliberate choice over the user library(*). Note that the behavior of the user library is common across platforms, so I'm not really sure the is any real difference.
> 
> I would argue that the current setup tends to be a lot safer than the alternatives, because it allows commonly used packages to be installed at the system level and private packages to be installed at user level. This is also the design typically used on shared machines, where you separate local packages from user packages where local ones are installed by administrators - so exactly the same setup. Moreover R upgrades are a lot cleaner, since you can easily upgrade all system packages at once so you don't have to worry about individual users having stale packages - the biggest problem for admins.
> 
> I'd be happy to hear from more Mac user if there are reasons to change the default, but as I outlined the choices were deliberate after weighting the pros and cons. In my view the major issue with the proposal it that is would prevent sharing of packages, make R upgrades a lot harder and prevent admin users from using the current tools for package management - and that includes the ability to separate system and user packages on single-user machines.
> 
> Cheers,
> Simon
> 
> 
> (*) while looking into this I noticed there is a bug in the latest R GUI where Renviron and the GUI don't agree on the location of the user library (due to the addition of the architecture to the path) so I agree that the the GUI should be fixed to
> match the location.
> 
> 
> 
> 
>> On Apr 2, 2022, at 2:08 AM, Patrick Schratz <patrick.schratz at gmail.com> wrote:
>> 
>> Dear fellow R users on macOS,
>> 
>> I'd like to discuss the current directory permissions set by the CRAN 
>> installer for macOS (https://cran.r-project.org/).
>> The installers installs R into `/Library/Frameworks/R.framework/` with 
>> 775 permissions.
>> In contrast to 755, 775 also gives the defined group write permissions.
>> The group for `/Library/Frameworks/R.framework/` is `admin`.
>> Many users use a Mac in a single-user setup, i.e. only one user is using 
>> the machine.
>> This is usually also an administrator, i.e. the user is a member of the 
>> `admin` group.
>> 
>> ## The problem
>> 
>> Being a member of `admin` group gives subsequently write access into the 
>> R system library, i.e. the library which stores the package which are 
>> bundled with the installer (base, MASS, parallel, etc.).
>> This is problematic for several reasons:
>> - user packages are mixed with system packages
>> - if a new R version is installed, all packages in the system library 
>> are lost as they are getting overwritten by the CRAN installer
>> - on other platforms (Windows, Linux) the system library is not writable 
>> by default, hence the behaviour of the macOS CRAN installer is different 
>> from the other platforms
>> 
>> Besides the differing experience for users on macOS compared to other 
>> platforms (which constantly causes confusion for R users switching 
>> platforms), the above also causes many unneeded R package downloads, 
>> e.g. users are forced to reinstall all packages for every patch version 
>> update of R.
>> 
>> In case you are wondering why R does not offer to create a user library 
>> as on other platforms: if the system library is writable (or R detects 
>> any writable library configured in the repos option), the prompt will 
>> not appear.
>> If a user manually creates a user library at the expected path (e.g 
>> .`$HOME/Library/R/arm64/4.1/library`), R will pick it up and packages 
>> will go into the user library.
>> However, most R users don't want to bother with this and are no experts 
>> in their local library management.
>> 
>> ## How can the following possibly be solved?
>> 
>> AFAICS the easiest way would be to set 755 instead of 775 permissions 
>> for the `/Library/Frameworks/R.framework/` folder.
>> I don't see a reason why write permissions for the `admin` group would 
>> be needed.
>> 
>> I've tested this in a few scenarios and did not face any issues.
>> Also I've come across an interesting observation while doing so:
>> While R in the terminal offers the creation of the user lib if 
>> permissions are 755
>> 
>> ```
>> [ins] r$> .libPaths()
>> [1] 
>> "/Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library"
>> 
>> [ins] r$> install.packages("<package>")
>> Warning in install.packages("<package>") :
>> 'lib = 
>> "/Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library"' 
>> is not writable
>> 
>> [ins] Would you like to use a personal library instead? (yes/No/cancel) 
>> yes
>> [ins] Would you like to create a personal library
>> ```
>> 
>> RStudio does it even silently in the background (which is quite nice 
>> imo).
>> To reproduce:
>> 1. Install R for Mac via the CRAN installer
>> 2. `sudo chmod -R 755 /Library/Frameworks/R.framework/`
>> 3. `R -q -e ".libPaths()"` (should only return the system library)
>> 4. Open RStudio
>> 5. `R -q -e ".libPaths()"` (should return two libraries, with the user 
>> lib being the first)
>> 
>> If for some reasons 755 cannot be set for the `R.frameworks` 
>> directories, then the group defined for `R.frameworks` (and recursive 
>> directories) could possibly be changed to prevent direct writes access 
>> to the R system lib.
>> 
>> Last, I wanted to ask if the source code for the CRAN installer is 
>> publicly available? I could not find it and would be interested to take 
>> a look into it.
>> If this is not possible for some reason, I would also be interested in 
>> getting to know the reason for this decision.
>> 
>> Best regards,
>> Patrick
>> 	[[alternative HTML version deleted]]
>> 
>> _______________________________________________
>> R-SIG-Mac mailing list
>> R-SIG-Mac at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>> 
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac


From p@tr|ck@@chr@tz @end|ng |rom gm@||@com  Sun Apr  3 10:26:32 2022
From: p@tr|ck@@chr@tz @end|ng |rom gm@||@com (Patrick Schratz)
Date: Sun, 03 Apr 2022 10:26:32 +0200
Subject: [R-SIG-Mac] CRAN installer for macOS - directory permissions
In-Reply-To: <9200B51A-3A42-42B1-8E1F-4A31C61D5AFA@R-project.org>
References: <36345395-F4E6-4069-9900-990E283FA7AC@gmail.com>
 <9200B51A-3A42-42B1-8E1F-4A31C61D5AFA@R-project.org>
Message-ID: <4F79D380-A4F5-4562-97C2-7B0C4693EEB7@gmail.com>

Hi Simon,

thanks for your extensive reply.

> The choice is deliberate: the admin group on macOS corresponds to users that are allowed to install system-wide software so it allows all admins on the machine to install packages which is the expected way on macOS.

I think this choice is unfortunate as it contrasts with existing behavior on other platforms where one needs to explicitly request admin privileges by either using `sudo` or starting R as an admin.
On macOS, packages just go into the system lib ?silently? because of the write permissions granted via the `admin` group.
See also my comments further down for more details on this.

> Also the versioning of the R framework as x.y is also deliberate - upgrading R to a new patch version does *not* require re-installation of packages, they work by design so in fact the system location is the safest way to do that. Also note that packages are never removed by the installer.

Thanks, I am aware that a patch update does not require a reinstallation as the packages are functional across minor versions.

I checked again and was indeed wrong, patch updates from the CRAN installer do not remove additional custom packages in the system lib.
I was confused by some custom approaches of mine which cause this behavior - sorry for this!

> So out of the items listed in "The problem" they are all not true with the exception of the comparison with the other platforms, but even that difference is very subtle as it only affects the default on the first installation and not regular use (and I'm, not even sure it that is true since admin users can still install in the system location on other platforms).

On Linux you would need to do explicitly invoke `sudo R` to allow writing into the system lib.
The issue on macOS is that a regular start of `R` allows system lib write permissions.
In my current view I think a similar behavior as on Linux would be great, i.e. to explicitly having to request admin privileges for this task.

I don?t understand the part ?as it only affects the default on the first installation and not regular use? of your reply - could you clarify this?
Unless a user creates a user lib manually, packages will always go into the system lib - not only on first use - but I might be misunderstanding your comment here.

> I would argue that the current setup tends to be a lot safer than the alternatives, because it allows commonly used packages to be installed at the system level and private packages to be installed at user level. This is also the design typically used on shared machines, where you separate local packages from user packages where local ones are installed by administrators - so exactly the same setup. Moreover R upgrades are a lot cleaner, since you can easily upgrade all system packages at once so you don't have to worry about individual users having stale packages - the biggest problem for admins.

Yes and no.
Sometimes system admins want to install certain packages globally - however, I never do so for the following reason:
Often this will lead to multiple package installations, i.e. one in the syslib and one in the user lib (if the user installs the package again for some reason which quite often happens).
Often these duplicated packages will have different versions and users are confused which one is actually loaded (the user lib one is as it is first in the path).

Aside from this practical point, Macs are rarely used in a shared way.
And even if, I?d highly favor having to request write permissions into the syslib rather it happening by default.

Imagine a scenario where the admin of a shared Mac constantly writes into the syslib (because this is the default). This syslib is then also used by other non-admin users on the system.
I don?t think this is a desired scenario and might cause lot?s of confusion (not even mentioning the fact if all people in this scenario are aware what?s going on given that this is a niche topic).
Here I think a one-time central installation of R and then only working with user libs (as on Linux) would be preferable.

From a technical perspective, I know that setting `root:root` on macOS is not possible. My proposed change to `755` (and leaving `root:admin`) would however exactly mimic this (**and the one of Linux installs**) behavior:

- admins would need to do `sudo R` to install into the system library
- otherwise they are prompted to create a user library

Which downsides would this approach have? Currently I don?t see any. It would even harmonize CRAN installer behavior across platforms.

> I'd be happy to hear from more Mac user if there are reasons to change the default, but as I outlined the choices were deliberate after weighting the pros and cons. In my view the major issue with the proposal it that is would prevent sharing of packages, make R upgrades a lot harder and prevent admin users from using the current tools for package management - and that includes the ability to separate system and user packages on single-user machines.

I?ll try to vision the practical changes of this:

- Patch update experience would not change as custom packages will be in the user lib for the respective minor version (by default)
- Admins are **still** able to install into the system lib when using `sudo R`
- AFAICS admins will still be able to separate system and user packages as they can use `sudo R` for syslib installs. To me, the proposed change would even make the behaviour more clear than before (which requires to create a hidden folder (user lib) in the right place to actually use a user lib).

Let me know if I overlook something - but currently I don?t see any downside but various positive impacts.

> Last, I wanted to ask if the source code for the CRAN installer is publicly available? I could not find it and would be interested to take a look into it. If this is not possible for some reason, I would also be interested in getting to know the reason for this decision.

I?d also still appreciate a reply to this - maybe it got overlooked.


Cheers
Patrick

On 1 Apr 2022, at 23:43, Simon Urbanek wrote:

> Patrick,
>
> thanks for starting the discussion.
>
> The choice is deliberate: the admin group on macOS corresponds to users that are allowed to install system-wide software so it allows all admins on the machine to install packages which is the expected way on macOS.
>
> Also the versioning of the R framework as x.y is also deliberate - upgrading R to a new patch version does *not* require re-installation of packages, they work by design so in fact the system location is the safest way to do that. Also note that packages are never removed by the installer.
>
> Packages are not compatible beyond the patch version so the current setup avoids the most common problem where users inadvertently use packages installed for an incompatible previous R version leading to crashes. To make R upgrades easy the R GUI Package Installer offers specifically the option to install packages from the previous R version. This allows for a clean and safe upgrade of R.
>
> So out of the items listed in "The problem" they are all not true with the exception of the comparison with the other platforms, but even that difference is very subtle as it only affects the default on the first installation and not regular use (and I'm, not even sure it that is true since admin users can still install in the system location on other platforms). The user has full control over where they install a package - it's a simple click to change the default to whatever you prefer. Also I'd like to point out that once you start using the user library, it becomes the default for install.packages() so typically installing packages into system location requires deliberate choice over the user library(*). Note that the behavior of the user library is common across platforms, so I'm not really sure the is any real difference.
>
> I would argue that the current setup tends to be a lot safer than the alternatives, because it allows commonly used packages to be installed at the system level and private packages to be installed at user level. This is also the design typically used on shared machines, where you separate local packages from user packages where local ones are installed by administrators - so exactly the same setup. Moreover R upgrades are a lot cleaner, since you can easily upgrade all system packages at once so you don't have to worry about individual users having stale packages - the biggest problem for admins.
>
> I'd be happy to hear from more Mac user if there are reasons to change the default, but as I outlined the choices were deliberate after weighting the pros and cons. In my view the major issue with the proposal it that is would prevent sharing of packages, make R upgrades a lot harder and prevent admin users from using the current tools for package management - and that includes the ability to separate system and user packages on single-user machines.
>
> Cheers,
> Simon
>
>
> (*) while looking into this I noticed there is a bug in the latest R GUI where Renviron and the GUI don't agree on the location of the user library (due to the addition of the architecture to the path) so I agree that the the GUI should be fixed to
> match the location.
>
>
>
>
>> On Apr 2, 2022, at 2:08 AM, Patrick Schratz <patrick.schratz at gmail.com> wrote:
>>
>> Dear fellow R users on macOS,
>>
>> I'd like to discuss the current directory permissions set by the CRAN
>> installer for macOS (https://cran.r-project.org/).
>> The installers installs R into `/Library/Frameworks/R.framework/` with
>> 775 permissions.
>> In contrast to 755, 775 also gives the defined group write permissions.
>> The group for `/Library/Frameworks/R.framework/` is `admin`.
>> Many users use a Mac in a single-user setup, i.e. only one user is using
>> the machine.
>> This is usually also an administrator, i.e. the user is a member of the
>> `admin` group.
>>
>> ## The problem
>>
>> Being a member of `admin` group gives subsequently write access into the
>> R system library, i.e. the library which stores the package which are
>> bundled with the installer (base, MASS, parallel, etc.).
>> This is problematic for several reasons:
>> - user packages are mixed with system packages
>> - if a new R version is installed, all packages in the system library
>> are lost as they are getting overwritten by the CRAN installer
>> - on other platforms (Windows, Linux) the system library is not writable
>> by default, hence the behaviour of the macOS CRAN installer is different
>> from the other platforms
>>
>> Besides the differing experience for users on macOS compared to other
>> platforms (which constantly causes confusion for R users switching
>> platforms), the above also causes many unneeded R package downloads,
>> e.g. users are forced to reinstall all packages for every patch version
>> update of R.
>>
>> In case you are wondering why R does not offer to create a user library
>> as on other platforms: if the system library is writable (or R detects
>> any writable library configured in the repos option), the prompt will
>> not appear.
>> If a user manually creates a user library at the expected path (e.g
>> .`$HOME/Library/R/arm64/4.1/library`), R will pick it up and packages
>> will go into the user library.
>> However, most R users don't want to bother with this and are no experts
>> in their local library management.
>>
>> ## How can the following possibly be solved?
>>
>> AFAICS the easiest way would be to set 755 instead of 775 permissions
>> for the `/Library/Frameworks/R.framework/` folder.
>> I don't see a reason why write permissions for the `admin` group would
>> be needed.
>>
>> I've tested this in a few scenarios and did not face any issues.
>> Also I've come across an interesting observation while doing so:
>> While R in the terminal offers the creation of the user lib if
>> permissions are 755
>>
>> ```
>> [ins] r$> .libPaths()
>> [1]
>> "/Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library"
>>
>> [ins] r$> install.packages("<package>")
>> Warning in install.packages("<package>") :
>>   'lib =
>> "/Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library"'
>> is not writable
>>
>> [ins] Would you like to use a personal library instead? (yes/No/cancel)
>> yes
>> [ins] Would you like to create a personal library
>> ```
>>
>> RStudio does it even silently in the background (which is quite nice
>> imo).
>> To reproduce:
>> 1. Install R for Mac via the CRAN installer
>> 2. `sudo chmod -R 755 /Library/Frameworks/R.framework/`
>> 3. `R -q -e ".libPaths()"` (should only return the system library)
>> 4. Open RStudio
>> 5. `R -q -e ".libPaths()"` (should return two libraries, with the user
>> lib being the first)
>>
>> If for some reasons 755 cannot be set for the `R.frameworks`
>> directories, then the group defined for `R.frameworks` (and recursive
>> directories) could possibly be changed to prevent direct writes access
>> to the R system lib.
>>
>> Last, I wanted to ask if the source code for the CRAN installer is
>> publicly available? I could not find it and would be interested to take
>> a look into it.
>> If this is not possible for some reason, I would also be interested in
>> getting to know the reason for this decision.
>>
>> Best regards,
>> Patrick
>> 	[[alternative HTML version deleted]]
>>
>> _______________________________________________
>> R-SIG-Mac mailing list
>> R-SIG-Mac at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20220403/e111bd9a/attachment-0001.html>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 870 bytes
Desc: OpenPGP digital signature
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20220403/e111bd9a/attachment-0001.sig>

From kev|nu@hey @end|ng |rom gm@||@com  Sun Apr  3 19:11:55 2022
From: kev|nu@hey @end|ng |rom gm@||@com (Kevin Ushey)
Date: Sun, 3 Apr 2022 10:11:55 -0700
Subject: [R-SIG-Mac] CRAN installer for macOS - directory permissions
In-Reply-To: <4F79D380-A4F5-4562-97C2-7B0C4693EEB7@gmail.com>
References: <36345395-F4E6-4069-9900-990E283FA7AC@gmail.com>
 <9200B51A-3A42-42B1-8E1F-4A31C61D5AFA@R-project.org>
 <4F79D380-A4F5-4562-97C2-7B0C4693EEB7@gmail.com>
Message-ID: <CAJXgQP0JKNXjKnhdwMOaeASn4sEqqVSkt9m90pycGV6Qu4PxvQ@mail.gmail.com>

I agree with the general sentiment that package installation into the
system library should require some explicit user gesture; that is, invoking
sudo, or explicitly requesting the system library path during package
installation, or similar.

I'm guessing that, when the average macOS user installs an R package, their
intention is to just install that package for themselves, not all other
users on the system. That is, they're behaving as a user, not an
administrator -- they're probably not thinking about the potential
consequences of changing the set of installed packages for other users as
well.

In addition, I'm guessing most users don't know (or want to think about)
library paths, so many users won't know that creating a user library is an
option, or will struggle to find that solution.


Best,
Kevin


On Sun, Apr 3, 2022, 1:26 AM Patrick Schratz <patrick.schratz at gmail.com>
wrote:

> Hi Simon,
>
> thanks for your extensive reply.
>
> The choice is deliberate: the admin group on macOS corresponds to users
> that are allowed to install system-wide software so it allows all admins on
> the machine to install packages which is the expected way on macOS.
>
> I think this choice is unfortunate as it contrasts with existing behavior
> on other platforms where one needs to explicitly request admin privileges
> by either using sudo or starting R as an admin.
> On macOS, packages just go into the system lib ?silently? because of the
> write permissions granted via the admin group.
> See also my comments further down for more details on this.
>
> Also the versioning of the R framework as x.y is also deliberate -
> upgrading R to a new patch version does *not* require re-installation of
> packages, they work by design so in fact the system location is the safest
> way to do that. Also note that packages are never removed by the installer.
>
> Thanks, I am aware that a patch update does not require a reinstallation
> as the packages are functional across minor versions.
>
> I checked again and was indeed wrong, patch updates from the CRAN
> installer do not remove additional custom packages in the system lib.
> I was confused by some custom approaches of mine which cause this behavior
> - sorry for this!
>
> So out of the items listed in "The problem" they are all not true with the
> exception of the comparison with the other platforms, but even that
> difference is very subtle as it only affects the default on the first
> installation and not regular use (and I'm, not even sure it that is true
> since admin users can still install in the system location on other
> platforms).
>
> On Linux you would need to do explicitly invoke sudo R to allow writing
> into the system lib.
> The issue on macOS is that a regular start of R allows system lib write
> permissions.
> In my current view I think a similar behavior as on Linux would be great,
> i.e. to explicitly having to request admin privileges for this task.
>
> I don?t understand the part ?as it only affects the default on the first
> installation and not regular use? of your reply - could you clarify this?
> Unless a user creates a user lib manually, packages will always go into
> the system lib - not only on first use - but I might be misunderstanding
> your comment here.
>
> I would argue that the current setup tends to be a lot safer than the
> alternatives, because it allows commonly used packages to be installed at
> the system level and private packages to be installed at user level. This
> is also the design typically used on shared machines, where you separate
> local packages from user packages where local ones are installed by
> administrators - so exactly the same setup. Moreover R upgrades are a lot
> cleaner, since you can easily upgrade all system packages at once so you
> don't have to worry about individual users having stale packages - the
> biggest problem for admins.
>
> Yes and no.
> Sometimes system admins want to install certain packages globally -
> however, I never do so for the following reason:
> Often this will lead to multiple package installations, i.e. one in the
> syslib and one in the user lib (if the user installs the package again for
> some reason which quite often happens).
> Often these duplicated packages will have different versions and users are
> confused which one is actually loaded (the user lib one is as it is first
> in the path).
>
> Aside from this practical point, Macs are rarely used in a shared way.
> And even if, I?d highly favor having to request write permissions into the
> syslib rather it happening by default.
>
> Imagine a scenario where the admin of a shared Mac constantly writes into
> the syslib (because this is the default). This syslib is then also used by
> other non-admin users on the system.
> I don?t think this is a desired scenario and might cause lot?s of
> confusion (not even mentioning the fact if all people in this scenario are
> aware what?s going on given that this is a niche topic).
> Here I think a one-time central installation of R and then only working
> with user libs (as on Linux) would be preferable.
>
> From a technical perspective, I know that setting root:root on macOS is
> not possible. My proposed change to 755 (and leaving root:admin) would
> however exactly mimic this (*and the one of Linux installs*) behavior:
>
>    - admins would need to do sudo R to install into the system library
>    - otherwise they are prompted to create a user library
>
> Which downsides would this approach have? Currently I don?t see any. It
> would even harmonize CRAN installer behavior across platforms.
>
> I'd be happy to hear from more Mac user if there are reasons to change the
> default, but as I outlined the choices were deliberate after weighting the
> pros and cons. In my view the major issue with the proposal it that is
> would prevent sharing of packages, make R upgrades a lot harder and prevent
> admin users from using the current tools for package management - and that
> includes the ability to separate system and user packages on single-user
> machines.
>
> I?ll try to vision the practical changes of this:
>
>    - Patch update experience would not change as custom packages will be
>    in the user lib for the respective minor version (by default)
>    - Admins are *still* able to install into the system lib when using sudo
>    R
>    - AFAICS admins will still be able to separate system and user
>    packages as they can use sudo R for syslib installs. To me, the
>    proposed change would even make the behaviour more clear than before (which
>    requires to create a hidden folder (user lib) in the right place to
>    actually use a user lib).
>
> Let me know if I overlook something - but currently I don?t see any
> downside but various positive impacts.
>
> Last, I wanted to ask if the source code for the CRAN installer is
> publicly available? I could not find it and would be interested to take a
> look into it. If this is not possible for some reason, I would also be
> interested in getting to know the reason for this decision.
>
> I?d also still appreciate a reply to this - maybe it got overlooked.
>
> Cheers
> Patrick
>
> On 1 Apr 2022, at 23:43, Simon Urbanek wrote:
>
> Patrick,
>
> thanks for starting the discussion.
>
> The choice is deliberate: the admin group on macOS corresponds to users
> that are allowed to install system-wide software so it allows all admins on
> the machine to install packages which is the expected way on macOS.
>
> Also the versioning of the R framework as x.y is also deliberate -
> upgrading R to a new patch version does *not* require re-installation of
> packages, they work by design so in fact the system location is the safest
> way to do that. Also note that packages are never removed by the installer.
>
> Packages are not compatible beyond the patch version so the current setup
> avoids the most common problem where users inadvertently use packages
> installed for an incompatible previous R version leading to crashes. To
> make R upgrades easy the R GUI Package Installer offers specifically the
> option to install packages from the previous R version. This allows for a
> clean and safe upgrade of R.
>
> So out of the items listed in "The problem" they are all not true with the
> exception of the comparison with the other platforms, but even that
> difference is very subtle as it only affects the default on the first
> installation and not regular use (and I'm, not even sure it that is true
> since admin users can still install in the system location on other
> platforms). The user has full control over where they install a package -
> it's a simple click to change the default to whatever you prefer. Also I'd
> like to point out that once you start using the user library, it becomes
> the default for install.packages() so typically installing packages into
> system location requires deliberate choice over the user library(*). Note
> that the behavior of the user library is common across platforms, so I'm
> not really sure the is any real difference.
>
> I would argue that the current setup tends to be a lot safer than the
> alternatives, because it allows commonly used packages to be installed at
> the system level and private packages to be installed at user level. This
> is also the design typically used on shared machines, where you separate
> local packages from user packages where local ones are installed by
> administrators - so exactly the same setup. Moreover R upgrades are a lot
> cleaner, since you can easily upgrade all system packages at once so you
> don't have to worry about individual users having stale packages - the
> biggest problem for admins.
>
> I'd be happy to hear from more Mac user if there are reasons to change the
> default, but as I outlined the choices were deliberate after weighting the
> pros and cons. In my view the major issue with the proposal it that is
> would prevent sharing of packages, make R upgrades a lot harder and prevent
> admin users from using the current tools for package management - and that
> includes the ability to separate system and user packages on single-user
> machines.
>
> Cheers,
> Simon
>
> (*) while looking into this I noticed there is a bug in the latest R GUI
> where Renviron and the GUI don't agree on the location of the user library
> (due to the addition of the architecture to the path) so I agree that the
> the GUI should be fixed to
> match the location.
>
> On Apr 2, 2022, at 2:08 AM, Patrick Schratz <patrick.schratz at gmail.com>
> wrote:
>
> Dear fellow R users on macOS,
>
> I'd like to discuss the current directory permissions set by the CRAN
> installer for macOS (https://cran.r-project.org/).
> The installers installs R into `/Library/Frameworks/R.framework/` with
> 775 permissions.
> In contrast to 755, 775 also gives the defined group write permissions.
> The group for `/Library/Frameworks/R.framework/` is `admin`.
> Many users use a Mac in a single-user setup, i.e. only one user is using
> the machine.
> This is usually also an administrator, i.e. the user is a member of the
> `admin` group.
>
> ## The problem
>
> Being a member of `admin` group gives subsequently write access into the
> R system library, i.e. the library which stores the package which are
> bundled with the installer (base, MASS, parallel, etc.).
> This is problematic for several reasons:
> - user packages are mixed with system packages
> - if a new R version is installed, all packages in the system library
> are lost as they are getting overwritten by the CRAN installer
> - on other platforms (Windows, Linux) the system library is not writable
> by default, hence the behaviour of the macOS CRAN installer is different
> from the other platforms
>
> Besides the differing experience for users on macOS compared to other
> platforms (which constantly causes confusion for R users switching
> platforms), the above also causes many unneeded R package downloads,
> e.g. users are forced to reinstall all packages for every patch version
> update of R.
>
> In case you are wondering why R does not offer to create a user library
> as on other platforms: if the system library is writable (or R detects
> any writable library configured in the repos option), the prompt will
> not appear.
> If a user manually creates a user library at the expected path (e.g
> .`$HOME/Library/R/arm64/4.1/library`), R will pick it up and packages
> will go into the user library.
> However, most R users don't want to bother with this and are no experts
> in their local library management.
>
> ## How can the following possibly be solved?
>
> AFAICS the easiest way would be to set 755 instead of 775 permissions
> for the `/Library/Frameworks/R.framework/` folder.
> I don't see a reason why write permissions for the `admin` group would
> be needed.
>
> I've tested this in a few scenarios and did not face any issues.
> Also I've come across an interesting observation while doing so:
> While R in the terminal offers the creation of the user lib if
> permissions are 755
>
> ```
> [ins] r$> .libPaths()
> [1]
> "/Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library"
>
> [ins] r$> install.packages("<package>")
> Warning in install.packages("<package>") :
> 'lib =
> "/Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library"'
> is not writable
>
> [ins] Would you like to use a personal library instead? (yes/No/cancel)
> yes
> [ins] Would you like to create a personal library
> ```
>
> RStudio does it even silently in the background (which is quite nice
> imo).
> To reproduce:
> 1. Install R for Mac via the CRAN installer
> 2. `sudo chmod -R 755 /Library/Frameworks/R.framework/`
> 3. `R -q -e ".libPaths()"` (should only return the system library)
> 4. Open RStudio
> 5. `R -q -e ".libPaths()"` (should return two libraries, with the user
> lib being the first)
>
> If for some reasons 755 cannot be set for the `R.frameworks`
> directories, then the group defined for `R.frameworks` (and recursive
> directories) could possibly be changed to prevent direct writes access
> to the R system lib.
>
> Last, I wanted to ask if the source code for the CRAN installer is
> publicly available? I could not find it and would be interested to take
> a look into it.
> If this is not possible for some reason, I would also be interested in
> getting to know the reason for this decision.
>
> Best regards,
> Patrick
> [[alternative HTML version deleted]]
>
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>

	[[alternative HTML version deleted]]


From c@@rd|@g@bor @end|ng |rom gm@||@com  Mon Apr  4 18:49:12 2022
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Mon, 4 Apr 2022 18:49:12 +0200
Subject: [R-SIG-Mac] editline instead of readline in R-4.2 and R-4.3 builds
Message-ID: <CABtg=K=pH_SS5QUaCi4V6pwYJ2htSjntYvmuz5yNrTYrf06rTw@mail.gmail.com>

FYI, in case this was not intentional. G.

? R-4.1-arm64 -q -e 'extSoftVersion()["readline"]'
> extSoftVersion()["readline"]
readline
   "5.2"

? R-4.2-arm64 -q -e 'extSoftVersion()["readline"]'
> extSoftVersion()["readline"]
                readline
"4.2 (EditLine wrapper)"

? R-4.3-arm64 -q -e 'extSoftVersion()["readline"]'
> extSoftVersion()["readline"]
                readline
"4.2 (EditLine wrapper)"


From c@@rd|@g@bor @end|ng |rom gm@||@com  Mon Apr  4 18:59:10 2022
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Mon, 4 Apr 2022 18:59:10 +0200
Subject: [R-SIG-Mac] get-task-allow entitlement
Message-ID: <CABtg=KkjDWaz4-2_Wt1hE-9-w3t6i4cs=yQT15ftXL-ofTR9-A@mail.gmail.com>

Simon, I wonder if you would consider adding the get-task-allow
entitlement to the R builds.

get-task-allow allows debugging with lldb or other debuggers, and also
enables core dumps.

Apple suggests that you avoid get-task-allow in production builds:
https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution/resolving_common_notarization_issues?language=objc
However, they also note here that a legitimate use case for it is
allowing the debugging of plugins, which is exactly the case we have
for R:

"To enable debugging a plug-in in the context of a host executable,
the host can include the com.apple.security.get-task-allow entitlement
if it also includes the Disable Library Validation Entitlement. Don?t
disable library validation for executables that don?t host plug-ins
because library validation protects them from loading untrusted code."

R already has disable-library-validation of course.

FWIW node.js, which is a similar environment to R, in that it needs
load extension packages, added this to their builds:
https://github.com/nodejs/node/pull/34378
https://github.com/nodejs/node/commit/b0e4970b8fe0dbd6bf437b3b06d0438d906ea94d

G.


From @|mon@urb@nek @end|ng |rom R-project@org  Tue Apr  5 01:00:47 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Tue, 5 Apr 2022 11:00:47 +1200
Subject: [R-SIG-Mac] 
 editline instead of readline in R-4.2 and R-4.3 builds
In-Reply-To: <CABtg=K=pH_SS5QUaCi4V6pwYJ2htSjntYvmuz5yNrTYrf06rTw@mail.gmail.com>
References: <CABtg=K=pH_SS5QUaCi4V6pwYJ2htSjntYvmuz5yNrTYrf06rTw@mail.gmail.com>
Message-ID: <9334B16A-634B-483B-9C56-B07E0AE8D46A@R-project.org>

G?bor,

thank you very much for testing, this is a good catch. The readline library was missing from the build machine. I was doing a clean re-build of the image and readline5 is not part of the r-base-dev recipes group (since it is optional) so it was not included in the automated setup. Now added manually.

Thanks,
Simon


> On 5/04/2022, at 4:49 AM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> 
> FYI, in case this was not intentional. G.
> 
> ? R-4.1-arm64 -q -e 'extSoftVersion()["readline"]'
>> extSoftVersion()["readline"]
> readline
>   "5.2"
> 
> ? R-4.2-arm64 -q -e 'extSoftVersion()["readline"]'
>> extSoftVersion()["readline"]
>                readline
> "4.2 (EditLine wrapper)"
> 
> ? R-4.3-arm64 -q -e 'extSoftVersion()["readline"]'
>> extSoftVersion()["readline"]
>                readline
> "4.2 (EditLine wrapper)"
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 


From @|mon@urb@nek @end|ng |rom R-project@org  Tue Apr  5 01:04:54 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Tue, 5 Apr 2022 11:04:54 +1200
Subject: [R-SIG-Mac] get-task-allow entitlement
In-Reply-To: <CABtg=KkjDWaz4-2_Wt1hE-9-w3t6i4cs=yQT15ftXL-ofTR9-A@mail.gmail.com>
References: <CABtg=KkjDWaz4-2_Wt1hE-9-w3t6i4cs=yQT15ftXL-ofTR9-A@mail.gmail.com>
Message-ID: <4D4838F5-C2EB-49DE-994F-E6A393F5987B@R-project.org>

G?bor,

thanks. I will check the notarization process to see if Apple will allow it. There are some restrictions for processes that have get-task-allow entitlement, so if it is allowed I'll would ask for some more testing to make sure this doesn't affect something else in the R ecosystem. I agree that having to clear the entitlements to debug R is a bit of a pain.

Thanks,
Simon



> On 5/04/2022, at 4:59 AM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> 
> Simon, I wonder if you would consider adding the get-task-allow
> entitlement to the R builds.
> 
> get-task-allow allows debugging with lldb or other debuggers, and also
> enables core dumps.
> 
> Apple suggests that you avoid get-task-allow in production builds:
> https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution/resolving_common_notarization_issues?language=objc
> However, they also note here that a legitimate use case for it is
> allowing the debugging of plugins, which is exactly the case we have
> for R:
> 
> "To enable debugging a plug-in in the context of a host executable,
> the host can include the com.apple.security.get-task-allow entitlement
> if it also includes the Disable Library Validation Entitlement. Don?t
> disable library validation for executables that don?t host plug-ins
> because library validation protects them from loading untrusted code."
> 
> R already has disable-library-validation of course.
> 
> FWIW node.js, which is a similar environment to R, in that it needs
> load extension packages, added this to their builds:
> https://github.com/nodejs/node/pull/34378
> https://github.com/nodejs/node/commit/b0e4970b8fe0dbd6bf437b3b06d0438d906ea94d
> 
> G.
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 


From c@@rd|@g@bor @end|ng |rom gm@||@com  Tue Apr  5 09:28:11 2022
From: c@@rd|@g@bor @end|ng |rom gm@||@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Tue, 5 Apr 2022 09:28:11 +0200
Subject: [R-SIG-Mac] get-task-allow entitlement
In-Reply-To: <4D4838F5-C2EB-49DE-994F-E6A393F5987B@R-project.org>
References: <CABtg=KkjDWaz4-2_Wt1hE-9-w3t6i4cs=yQT15ftXL-ofTR9-A@mail.gmail.com>
 <4D4838F5-C2EB-49DE-994F-E6A393F5987B@R-project.org>
Message-ID: <CABtg=K=iuQEDvza0ygVUody=_OasCo8VKpGksueQf8UJQTNmeA@mail.gmail.com>

Thanks! node.js is notarized with these entitlements, so I am fairly
sure that Apple will allow it.

I have re-signed all my R installations and added this entitlement
some time ago, and haven't seen any issues so far. But yeah, that is
not much testing at all.

Btw. if anyone wants to add it to already installed R versions, it
goes like this. Replace the version number (installation directory) as
needed:
codesign -d --xml --entitlements -
/Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/bin/exec/R
> ~/r.entitlements
/usr/libexec/PlistBuddy -c "Add :com.apple.security.get-task-allow
bool true" ~/r.entitlements
sudo codesign -s - -f --entitlements ~/r.entitlements
/Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/bin/exec/R

I have also added this to https://github.com/gaborcsardi/rim so you can run
rim system allow-debugger --all
to update all installed versions of R.

Thanks for considering this,
G.

On Tue, Apr 5, 2022 at 1:04 AM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
>
> G?bor,
>
> thanks. I will check the notarization process to see if Apple will allow it. There are some restrictions for processes that have get-task-allow entitlement, so if it is allowed I'll would ask for some more testing to make sure this doesn't affect something else in the R ecosystem. I agree that having to clear the entitlements to debug R is a bit of a pain.
>
> Thanks,
> Simon
>
>
>
> > On 5/04/2022, at 4:59 AM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> >
> > Simon, I wonder if you would consider adding the get-task-allow
> > entitlement to the R builds.
> >
> > get-task-allow allows debugging with lldb or other debuggers, and also
> > enables core dumps.
> >
> > Apple suggests that you avoid get-task-allow in production builds:
> > https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution/resolving_common_notarization_issues?language=objc
> > However, they also note here that a legitimate use case for it is
> > allowing the debugging of plugins, which is exactly the case we have
> > for R:
> >
> > "To enable debugging a plug-in in the context of a host executable,
> > the host can include the com.apple.security.get-task-allow entitlement
> > if it also includes the Disable Library Validation Entitlement. Don?t
> > disable library validation for executables that don?t host plug-ins
> > because library validation protects them from loading untrusted code."
> >
> > R already has disable-library-validation of course.
> >
> > FWIW node.js, which is a similar environment to R, in that it needs
> > load extension packages, added this to their builds:
> > https://github.com/nodejs/node/pull/34378
> > https://github.com/nodejs/node/commit/b0e4970b8fe0dbd6bf437b3b06d0438d906ea94d
> >
> > G.
> >
> > _______________________________________________
> > R-SIG-Mac mailing list
> > R-SIG-Mac at r-project.org
> > https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> >
>


From @|mon@urb@nek @end|ng |rom R-project@org  Wed Apr  6 11:07:40 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 6 Apr 2022 21:07:40 +1200
Subject: [R-SIG-Mac] get-task-allow entitlement
In-Reply-To: <CABtg=K=iuQEDvza0ygVUody=_OasCo8VKpGksueQf8UJQTNmeA@mail.gmail.com>
References: <CABtg=KkjDWaz4-2_Wt1hE-9-w3t6i4cs=yQT15ftXL-ofTR9-A@mail.gmail.com>
 <4D4838F5-C2EB-49DE-994F-E6A393F5987B@R-project.org>
 <CABtg=K=iuQEDvza0ygVUody=_OasCo8VKpGksueQf8UJQTNmeA@mail.gmail.com>
Message-ID: <DE595FD4-DB74-4662-A291-0B3AF6C50F1D@R-project.org>

G?bor,

thanks, I have enabled the get-task-allow entitlement in the nightly builds so next round should have it enabled. I have tested it and Apple has notarized the resulting package so it should be ok.

Cheers,
Simon



> On Apr 5, 2022, at 7:28 PM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> 
> Thanks! node.js is notarized with these entitlements, so I am fairly
> sure that Apple will allow it.
> 
> I have re-signed all my R installations and added this entitlement
> some time ago, and haven't seen any issues so far. But yeah, that is
> not much testing at all.
> 
> Btw. if anyone wants to add it to already installed R versions, it
> goes like this. Replace the version number (installation directory) as
> needed:
> codesign -d --xml --entitlements -
> /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/bin/exec/R
>> ~/r.entitlements
> /usr/libexec/PlistBuddy -c "Add :com.apple.security.get-task-allow
> bool true" ~/r.entitlements
> sudo codesign -s - -f --entitlements ~/r.entitlements
> /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/bin/exec/R
> 
> I have also added this to https://github.com/gaborcsardi/rim so you can run
> rim system allow-debugger --all
> to update all installed versions of R.
> 
> Thanks for considering this,
> G.
> 
> On Tue, Apr 5, 2022 at 1:04 AM Simon Urbanek
> <simon.urbanek at r-project.org> wrote:
>> 
>> G?bor,
>> 
>> thanks. I will check the notarization process to see if Apple will allow it. There are some restrictions for processes that have get-task-allow entitlement, so if it is allowed I'll would ask for some more testing to make sure this doesn't affect something else in the R ecosystem. I agree that having to clear the entitlements to debug R is a bit of a pain.
>> 
>> Thanks,
>> Simon
>> 
>> 
>> 
>>> On 5/04/2022, at 4:59 AM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>>> 
>>> Simon, I wonder if you would consider adding the get-task-allow
>>> entitlement to the R builds.
>>> 
>>> get-task-allow allows debugging with lldb or other debuggers, and also
>>> enables core dumps.
>>> 
>>> Apple suggests that you avoid get-task-allow in production builds:
>>> https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution/resolving_common_notarization_issues?language=objc
>>> However, they also note here that a legitimate use case for it is
>>> allowing the debugging of plugins, which is exactly the case we have
>>> for R:
>>> 
>>> "To enable debugging a plug-in in the context of a host executable,
>>> the host can include the com.apple.security.get-task-allow entitlement
>>> if it also includes the Disable Library Validation Entitlement. Don?t
>>> disable library validation for executables that don?t host plug-ins
>>> because library validation protects them from loading untrusted code."
>>> 
>>> R already has disable-library-validation of course.
>>> 
>>> FWIW node.js, which is a similar environment to R, in that it needs
>>> load extension packages, added this to their builds:
>>> https://github.com/nodejs/node/pull/34378
>>> https://github.com/nodejs/node/commit/b0e4970b8fe0dbd6bf437b3b06d0438d906ea94d
>>> 
>>> G.
>>> 
>>> _______________________________________________
>>> R-SIG-Mac mailing list
>>> R-SIG-Mac at r-project.org
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>> 
>> 
> 


From v@r|n@@ch@ @end|ng |rom y@hoo@|r  Wed Apr  6 21:53:33 2022
From: v@r|n@@ch@ @end|ng |rom y@hoo@|r (varin sacha)
Date: Wed, 6 Apr 2022 19:53:33 +0000 (UTC)
Subject: [R-SIG-Mac] CRAN and packages problems
In-Reply-To: <BDEF75D3-978C-44AB-BD44-C1D7A698AEBF@R-project.org>
References: <778782749.3221045.1648135588736.ref@mail.yahoo.com>
 <778782749.3221045.1648135588736@mail.yahoo.com>
 <BDEF75D3-978C-44AB-BD44-C1D7A698AEBF@R-project.org>
Message-ID: <53363449.604913.1649274813971@mail.yahoo.com>

Hi,

Really thank you for your response,

Best,
SV






Le jeudi 24 mars 2022, 21:41:15 UTC+1, Simon Urbanek <simon.urbanek at r-project.org> a ?crit : 





The SSL certificate check for stat.ethz.ch fails. Given that it is actually valid (see below), the problem is on your end. Possible causes are

a) intermittent issue - try again or try another mirror

b) too old macOS with expired root certificates - see https://stat.ethz.ch/pipermail/r-sig-mac/2021-November/014228.html

c) bad proxy - remove the proxy or contact the proxy administrator

d) someone is messing with your network - worry

Cheers,
Simon


Certificate:
? ? Data:
[...]
? ? ? ? Issuer: C = US, O = Let's Encrypt, CN = R3
? ? ? ? Validity
? ? ? ? ? ? Not Before: Feb 25 03:44:39 2022 GMT
? ? ? ? ? ? Not After : May 26 03:44:38 2022 GMT
? ? ? ? Subject: CN = stat.ethz.ch


> On Mar 25, 2022, at 4:26 AM, varin sacha via R-SIG-Mac <r-sig-mac at r-project.org> wrote:
> 
> Dear R-experts,
> 
> Can somebody tell me what is going on ?
> 
> Here is what I get :
> 
> download.file('https://stat.ethz.ch/CRAN/src/contrib/PACKAGES','PACKAGES')
> 
> essai de l'URL 'https://stat.ethz.ch/CRAN/src/contrib/PACKAGES'
> Erreur dans download.file("https://stat.ethz.ch/CRAN/src/contrib/PACKAGES",? :
>? impossible d'ouvrir l'URL 'https://stat.ethz.ch/CRAN/src/contrib/PACKAGES'
> De plus : Message d'avis :
> Dans download.file("https://stat.ethz.ch/CRAN/src/contrib/PACKAGES",? :
>? URL 'https://stat.ethz.ch/CRAN/src/contrib/PACKAGES': statut 'Peer certificate cannot be authenticated with given CA certificates'

> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac

> 


From @|mon@urb@nek @end|ng |rom R-project@org  Tue Apr 12 01:57:20 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Tue, 12 Apr 2022 11:57:20 +1200
Subject: [R-SIG-Mac] [R-pkg-devel] Build Environment for Mac OS Catalina
In-Reply-To: <9f465b29-0d9d-a692-b356-95fc22fed9d6@gmail.com>
References: <9f465b29-0d9d-a692-b356-95fc22fed9d6@gmail.com>
Message-ID: <0ABF6EE1-858D-47F5-A00E-15316C608100@R-project.org>

Russel,

this is Mac-specific hence more appropriate for R-SIG-Mac, so moving there.

If you are running Catalina then you have Intel Mac so for CRAN R you simply need XCode and that's it (on a clean Mac you can simply run sudo xcode-select --install). There is nothing special - the only exception is if your package contains Fortran code in which case you just install a Fortran compilers from https://mac.r-project.org/tools/gfortran-8.2-Mojave.dmg

However, since you are using Homebrew then things are a lot more complicated. Homebrew toolchains are not compatible with native Mac binaries and they create its own ecosystem which seems to be broken according to your post.

I would recommend deleting /opt/local then check if you have other incompatible libraries in /usr/local. For severe case of misconfiguration best way to remove (or move aside) everything from /usr/local and start from scratch.

Typically the easiest is to install CRAN R as that does not conflict with anything native and it does not require special tools. You can still use Homebrew to install 3rd party libraries that you may need, but make sure you do NOT install any compilers as they tend to wreak havoc on the system with the conflicting libraries. If your dependencies are supported by CRAN then you can fetch them from https://mac.r-project.org/bin/ or you can re-build them yourself using https://github.com/R-macos/recipes

Cheers,
Simon


> On 12/04/2022, at 11:30 AM, Russell Almond <russell.g.almond at gmail.com> wrote:
> 
> I'm doing my development on an older version of Mac OS, running Catalina.  I'm a bit confused as to what the proper development environment is because the stuff on https://mac.r-project.org/tools seems to be for either more recent or older versions of MacOS.  I also seem to have screwed up something in my toolchain (the curious can see my question at https://stackoverflow.com/questions/71790401/otool-is-referencing-an-old-version-of-libffi ).
> 
> I have a couple of related questions:
> 
> 1) What is the right set of instructions for setting up the tool chain for Mac OS Catalina?
> 
> 2) I'm currently using the R install from homebrew, but I thought I saw something about a different version of R that I should be using.  Is that still current advise?
> 
> Thanks, Googling the answers to these questions points me at some pages that are clearly out of date.
> 
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
> 


From ru@@e||@g@@|mond @end|ng |rom gm@||@com  Tue Apr 12 16:19:34 2022
From: ru@@e||@g@@|mond @end|ng |rom gm@||@com (Russell Almond)
Date: Tue, 12 Apr 2022 10:19:34 -0400
Subject: [R-SIG-Mac] [R-pkg-devel] Build Environment for Mac OS Catalina
In-Reply-To: <0ABF6EE1-858D-47F5-A00E-15316C608100@R-project.org>
References: <9f465b29-0d9d-a692-b356-95fc22fed9d6@gmail.com>
 <0ABF6EE1-858D-47F5-A00E-15316C608100@R-project.org>
Message-ID: <EBB0FBAE-32ED-4BFC-B414-1A372A73822C@gmail.com>

Thanks for your help.  An older version of homebrew had installed a conflicting older version of `otool` in /opt/local/bin.  Updating was not cleaning the old version.  Once I cleaned manually cleaned that out, it seemed to work.  

I posted details on stack exchange for the curious.  https://stackoverflow.com/questions/71790401/otool-is-referencing-an-old-version-of-libffi/71844231#71844231 <https://stackoverflow.com/questions/71790401/otool-is-referencing-an-old-version-of-libffi/71844231#71844231>

So my R package is now compiling!

	?Russell
(I?m not subscribed to R-SIG-Mac, so if somebody who is could forward this answer, that would be good.)
 

> On Apr 11, 2022, at 19:57, Simon Urbanek <simon.urbanek at R-project.org> wrote:
> 
> Russel,
> 
> this is Mac-specific hence more appropriate for R-SIG-Mac, so moving there.
> 
> If you are running Catalina then you have Intel Mac so for CRAN R you simply need XCode and that's it (on a clean Mac you can simply run sudo xcode-select --install). There is nothing special - the only exception is if your package contains Fortran code in which case you just install a Fortran compilers from https://mac.r-project.org/tools/gfortran-8.2-Mojave.dmg
> 
> However, since you are using Homebrew then things are a lot more complicated. Homebrew toolchains are not compatible with native Mac binaries and they create its own ecosystem which seems to be broken according to your post.
> 
> I would recommend deleting /opt/local then check if you have other incompatible libraries in /usr/local. For severe case of misconfiguration best way to remove (or move aside) everything from /usr/local and start from scratch.
> 
> Typically the easiest is to install CRAN R as that does not conflict with anything native and it does not require special tools. You can still use Homebrew to install 3rd party libraries that you may need, but make sure you do NOT install any compilers as they tend to wreak havoc on the system with the conflicting libraries. If your dependencies are supported by CRAN then you can fetch them from https://mac.r-project.org/bin/ or you can re-build them yourself using https://github.com/R-macos/recipes
> 
> Cheers,
> Simon
> 
> 
>> On 12/04/2022, at 11:30 AM, Russell Almond <russell.g.almond at gmail.com> wrote:
>> 
>> I'm doing my development on an older version of Mac OS, running Catalina.  I'm a bit confused as to what the proper development environment is because the stuff on https://mac.r-project.org/tools seems to be for either more recent or older versions of MacOS.  I also seem to have screwed up something in my toolchain (the curious can see my question at https://stackoverflow.com/questions/71790401/otool-is-referencing-an-old-version-of-libffi ).
>> 
>> I have a couple of related questions:
>> 
>> 1) What is the right set of instructions for setting up the tool chain for Mac OS Catalina?
>> 
>> 2) I'm currently using the R install from homebrew, but I thought I saw something about a different version of R that I should be using.  Is that still current advise?
>> 
>> Thanks, Googling the answers to these questions points me at some pages that are clearly out of date.
>> 
>> ______________________________________________
>> R-package-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>> 
> 


	[[alternative HTML version deleted]]


From p@tr|ck@@chr@tz @end|ng |rom gm@||@com  Wed Apr 13 10:43:01 2022
From: p@tr|ck@@chr@tz @end|ng |rom gm@||@com (Patrick Schratz)
Date: Wed, 13 Apr 2022 10:43:01 +0200
Subject: [R-SIG-Mac] CRAN installer for macOS - directory permissions
In-Reply-To: <4F79D380-A4F5-4562-97C2-7B0C4693EEB7@gmail.com>
References: <36345395-F4E6-4069-9900-990E283FA7AC@gmail.com>
 <9200B51A-3A42-42B1-8E1F-4A31C61D5AFA@R-project.org>
 <4F79D380-A4F5-4562-97C2-7B0C4693EEB7@gmail.com>
Message-ID: <3C199AC9-CAB7-4195-9522-46C154C528F6@gmail.com>

@Simon

A response to my last reply would be appreciated.
It also seems that I am not the only one sharing this view and even more people might be interested in your knowledge and thoughts about this topic :)

Related to this Q: Are the macOS CRAN policies actively discussed by a team of people (who might eventually also be willing to share their thoughts or could be addressed with such questions) or are you solely responsible for it?

Best,
Patrick

On 3 Apr 2022, at 10:26, Patrick Schratz wrote:

> Hi Simon,
>
> thanks for your extensive reply.
>
>> The choice is deliberate: the admin group on macOS corresponds to users that are allowed to install system-wide software so it allows all admins on the machine to install packages which is the expected way on macOS.
>
> I think this choice is unfortunate as it contrasts with existing behavior on other platforms where one needs to explicitly request admin privileges by either using `sudo` or starting R as an admin.
> On macOS, packages just go into the system lib ?silently? because of the write permissions granted via the `admin` group.
> See also my comments further down for more details on this.
>
>> Also the versioning of the R framework as x.y is also deliberate - upgrading R to a new patch version does *not* require re-installation of packages, they work by design so in fact the system location is the safest way to do that. Also note that packages are never removed by the installer.
>
> Thanks, I am aware that a patch update does not require a reinstallation as the packages are functional across minor versions.
>
> I checked again and was indeed wrong, patch updates from the CRAN installer do not remove additional custom packages in the system lib.
> I was confused by some custom approaches of mine which cause this behavior - sorry for this!
>
>> So out of the items listed in "The problem" they are all not true with the exception of the comparison with the other platforms, but even that difference is very subtle as it only affects the default on the first installation and not regular use (and I'm, not even sure it that is true since admin users can still install in the system location on other platforms).
>
> On Linux you would need to do explicitly invoke `sudo R` to allow writing into the system lib.
> The issue on macOS is that a regular start of `R` allows system lib write permissions.
> In my current view I think a similar behavior as on Linux would be great, i.e. to explicitly having to request admin privileges for this task.
>
> I don?t understand the part ?as it only affects the default on the first installation and not regular use? of your reply - could you clarify this?
> Unless a user creates a user lib manually, packages will always go into the system lib - not only on first use - but I might be misunderstanding your comment here.
>
>> I would argue that the current setup tends to be a lot safer than the alternatives, because it allows commonly used packages to be installed at the system level and private packages to be installed at user level. This is also the design typically used on shared machines, where you separate local packages from user packages where local ones are installed by administrators - so exactly the same setup. Moreover R upgrades are a lot cleaner, since you can easily upgrade all system packages at once so you don't have to worry about individual users having stale packages - the biggest problem for admins.
>
> Yes and no.
> Sometimes system admins want to install certain packages globally - however, I never do so for the following reason:
> Often this will lead to multiple package installations, i.e. one in the syslib and one in the user lib (if the user installs the package again for some reason which quite often happens).
> Often these duplicated packages will have different versions and users are confused which one is actually loaded (the user lib one is as it is first in the path).
>
> Aside from this practical point, Macs are rarely used in a shared way.
> And even if, I?d highly favor having to request write permissions into the syslib rather it happening by default.
>
> Imagine a scenario where the admin of a shared Mac constantly writes into the syslib (because this is the default). This syslib is then also used by other non-admin users on the system.
> I don?t think this is a desired scenario and might cause lot?s of confusion (not even mentioning the fact if all people in this scenario are aware what?s going on given that this is a niche topic).
> Here I think a one-time central installation of R and then only working with user libs (as on Linux) would be preferable.
>
> From a technical perspective, I know that setting `root:root` on macOS is not possible. My proposed change to `755` (and leaving `root:admin`) would however exactly mimic this (**and the one of Linux installs**) behavior:
>
> - admins would need to do `sudo R` to install into the system library
> - otherwise they are prompted to create a user library
>
> Which downsides would this approach have? Currently I don?t see any. It would even harmonize CRAN installer behavior across platforms.
>
>> I'd be happy to hear from more Mac user if there are reasons to change the default, but as I outlined the choices were deliberate after weighting the pros and cons. In my view the major issue with the proposal it that is would prevent sharing of packages, make R upgrades a lot harder and prevent admin users from using the current tools for package management - and that includes the ability to separate system and user packages on single-user machines.
>
> I?ll try to vision the practical changes of this:
>
> - Patch update experience would not change as custom packages will be in the user lib for the respective minor version (by default)
> - Admins are **still** able to install into the system lib when using `sudo R`
> - AFAICS admins will still be able to separate system and user packages as they can use `sudo R` for syslib installs. To me, the proposed change would even make the behaviour more clear than before (which requires to create a hidden folder (user lib) in the right place to actually use a user lib).
>
> Let me know if I overlook something - but currently I don?t see any downside but various positive impacts.
>
>> Last, I wanted to ask if the source code for the CRAN installer is publicly available? I could not find it and would be interested to take a look into it. If this is not possible for some reason, I would also be interested in getting to know the reason for this decision.
>
> I?d also still appreciate a reply to this - maybe it got overlooked.
>
>
> Cheers
> Patrick
>
> On 1 Apr 2022, at 23:43, Simon Urbanek wrote:
>
>> Patrick,
>>
>> thanks for starting the discussion.
>>
>> The choice is deliberate: the admin group on macOS corresponds to users that are allowed to install system-wide software so it allows all admins on the machine to install packages which is the expected way on macOS.
>>
>> Also the versioning of the R framework as x.y is also deliberate - upgrading R to a new patch version does *not* require re-installation of packages, they work by design so in fact the system location is the safest way to do that. Also note that packages are never removed by the installer.
>>
>> Packages are not compatible beyond the patch version so the current setup avoids the most common problem where users inadvertently use packages installed for an incompatible previous R version leading to crashes. To make R upgrades easy the R GUI Package Installer offers specifically the option to install packages from the previous R version. This allows for a clean and safe upgrade of R.
>>
>> So out of the items listed in "The problem" they are all not true with the exception of the comparison with the other platforms, but even that difference is very subtle as it only affects the default on the first installation and not regular use (and I'm, not even sure it that is true since admin users can still install in the system location on other platforms). The user has full control over where they install a package - it's a simple click to change the default to whatever you prefer. Also I'd like to point out that once you start using the user library, it becomes the default for install.packages() so typically installing packages into system location requires deliberate choice over the user library(*). Note that the behavior of the user library is common across platforms, so I'm not really sure the is any real difference.
>>
>> I would argue that the current setup tends to be a lot safer than the alternatives, because it allows commonly used packages to be installed at the system level and private packages to be installed at user level. This is also the design typically used on shared machines, where you separate local packages from user packages where local ones are installed by administrators - so exactly the same setup. Moreover R upgrades are a lot cleaner, since you can easily upgrade all system packages at once so you don't have to worry about individual users having stale packages - the biggest problem for admins.
>>
>> I'd be happy to hear from more Mac user if there are reasons to change the default, but as I outlined the choices were deliberate after weighting the pros and cons. In my view the major issue with the proposal it that is would prevent sharing of packages, make R upgrades a lot harder and prevent admin users from using the current tools for package management - and that includes the ability to separate system and user packages on single-user machines.
>>
>> Cheers,
>> Simon
>>
>>
>> (*) while looking into this I noticed there is a bug in the latest R GUI where Renviron and the GUI don't agree on the location of the user library (due to the addition of the architecture to the path) so I agree that the the GUI should be fixed to
>> match the location.
>>
>>
>>
>>
>>> On Apr 2, 2022, at 2:08 AM, Patrick Schratz <patrick.schratz at gmail.com> wrote:
>>>
>>> Dear fellow R users on macOS,
>>>
>>> I'd like to discuss the current directory permissions set by the CRAN
>>> installer for macOS (https://cran.r-project.org/).
>>> The installers installs R into `/Library/Frameworks/R.framework/` with
>>> 775 permissions.
>>> In contrast to 755, 775 also gives the defined group write permissions.
>>> The group for `/Library/Frameworks/R.framework/` is `admin`.
>>> Many users use a Mac in a single-user setup, i.e. only one user is using
>>> the machine.
>>> This is usually also an administrator, i.e. the user is a member of the
>>> `admin` group.
>>>
>>> ## The problem
>>>
>>> Being a member of `admin` group gives subsequently write access into the
>>> R system library, i.e. the library which stores the package which are
>>> bundled with the installer (base, MASS, parallel, etc.).
>>> This is problematic for several reasons:
>>> - user packages are mixed with system packages
>>> - if a new R version is installed, all packages in the system library
>>> are lost as they are getting overwritten by the CRAN installer
>>> - on other platforms (Windows, Linux) the system library is not writable
>>> by default, hence the behaviour of the macOS CRAN installer is different
>>> from the other platforms
>>>
>>> Besides the differing experience for users on macOS compared to other
>>> platforms (which constantly causes confusion for R users switching
>>> platforms), the above also causes many unneeded R package downloads,
>>> e.g. users are forced to reinstall all packages for every patch version
>>> update of R.
>>>
>>> In case you are wondering why R does not offer to create a user library
>>> as on other platforms: if the system library is writable (or R detects
>>> any writable library configured in the repos option), the prompt will
>>> not appear.
>>> If a user manually creates a user library at the expected path (e.g
>>> .`$HOME/Library/R/arm64/4.1/library`), R will pick it up and packages
>>> will go into the user library.
>>> However, most R users don't want to bother with this and are no experts
>>> in their local library management.
>>>
>>> ## How can the following possibly be solved?
>>>
>>> AFAICS the easiest way would be to set 755 instead of 775 permissions
>>> for the `/Library/Frameworks/R.framework/` folder.
>>> I don't see a reason why write permissions for the `admin` group would
>>> be needed.
>>>
>>> I've tested this in a few scenarios and did not face any issues.
>>> Also I've come across an interesting observation while doing so:
>>> While R in the terminal offers the creation of the user lib if
>>> permissions are 755
>>>
>>> ```
>>> [ins] r$> .libPaths()
>>> [1]
>>> "/Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library"
>>>
>>> [ins] r$> install.packages("<package>")
>>> Warning in install.packages("<package>") :
>>>   'lib =
>>> "/Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library"'
>>> is not writable
>>>
>>> [ins] Would you like to use a personal library instead? (yes/No/cancel)
>>> yes
>>> [ins] Would you like to create a personal library
>>> ```
>>>
>>> RStudio does it even silently in the background (which is quite nice
>>> imo).
>>> To reproduce:
>>> 1. Install R for Mac via the CRAN installer
>>> 2. `sudo chmod -R 755 /Library/Frameworks/R.framework/`
>>> 3. `R -q -e ".libPaths()"` (should only return the system library)
>>> 4. Open RStudio
>>> 5. `R -q -e ".libPaths()"` (should return two libraries, with the user
>>> lib being the first)
>>>
>>> If for some reasons 755 cannot be set for the `R.frameworks`
>>> directories, then the group defined for `R.frameworks` (and recursive
>>> directories) could possibly be changed to prevent direct writes access
>>> to the R system lib.
>>>
>>> Last, I wanted to ask if the source code for the CRAN installer is
>>> publicly available? I could not find it and would be interested to take
>>> a look into it.
>>> If this is not possible for some reason, I would also be interested in
>>> getting to know the reason for this decision.
>>>
>>> Best regards,
>>> Patrick
>>> 	[[alternative HTML version deleted]]
>>>
>>> _______________________________________________
>>> R-SIG-Mac mailing list
>>> R-SIG-Mac at r-project.org
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20220413/5a9c260a/attachment-0001.html>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 870 bytes
Desc: OpenPGP digital signature
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20220413/5a9c260a/attachment-0001.sig>

From @|mon@urb@nek @end|ng |rom R-project@org  Sun Apr 17 04:38:28 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Sun, 17 Apr 2022 14:38:28 +1200
Subject: [R-SIG-Mac] Please test R 4.2.0 pre-releases
Message-ID: <C98614D4-FCD3-43A0-B346-A2A9E206915D@R-project.org>

Dear Mac users,

we are nearing the release of R 4.2.0 (on Friday) which introduces some significant changes not only in R itself, but also in some Mac-specific build settings. Please help us by testing R pre-releases *before* the release such that any obvious issues can be caught prior to the release. The nightly pre-releases both for Intel Macs (high-sierra build) as well as M1 Macs (big-sur build) are available at

https://mac.r-project.org/

The nightly Installer packages (R-4.2-branch.pkg) are created just like the release and signed, but not always Apple notarized, so to install hold the <Ctrl> key when opening and pick "Open" in the dialog box if prompted.

Package binaries for R 4.2.0 are also now available on CRAN, please report any issues to me. The Mac Builder has also been updated to use latest libraries and it now defaults to the R pre-release.

Thanks,
Simon


From du@@@@dr|@n @end|ng |rom un|buc@ro  Sun Apr 17 19:50:26 2022
From: du@@@@dr|@n @end|ng |rom un|buc@ro (=?UTF-8?B?QWRyaWFuIER1yJlh?=)
Date: Sun, 17 Apr 2022 20:50:26 +0300
Subject: [R-SIG-Mac] Please test R 4.2.0 pre-releases
In-Reply-To: <C98614D4-FCD3-43A0-B346-A2A9E206915D@R-project.org>
References: <C98614D4-FCD3-43A0-B346-A2A9E206915D@R-project.org>
Message-ID: <CAJ=0CtAnMQFyndqZpOyd0UQJaxc_WFRNWaTH6VZ_kYKZ700ugw@mail.gmail.com>

Hello Simon,

A couple of things, here.
>From a terminal, using R CMD INSTALL, as well as using install.packages()
from within R, packages get installed into the default .libPaths() location:
/Library/Frameworks/R.framework/Versions/4.2/Resources/library/

However, using the RGui menu Packages & Data / Package Installer, packages
are installed in the R_LIBS_USER:
/Users/dusadrian/Library/R/x86_64/4.2/library

Since .libPaths() does not know this location, packages installed this way
are not found.

Also, most likely unrelated to R 4.2 but to some unicode problems on
Monterey, when using double-tab autocomplete in the RGui
(R for macOS GUI 1.78-devel High Sierra build 8067), I get an additional
red message:
IsMenuKeyEvent: found no unichar data in event; retranslated without
deadkeys to produce ' '

If this could somehow be captured and silenced by the GUI, it would be
perfect. Otherwise, any hint on what should be done would be greatly
appreciated.

I hope this helps,
Adrian

On Sun, 17 Apr 2022 at 05:38, Simon Urbanek <simon.urbanek at r-project.org>
wrote:

> Dear Mac users,
>
> we are nearing the release of R 4.2.0 (on Friday) which introduces some
> significant changes not only in R itself, but also in some Mac-specific
> build settings. Please help us by testing R pre-releases *before* the
> release such that any obvious issues can be caught prior to the release.
> The nightly pre-releases both for Intel Macs (high-sierra build) as well as
> M1 Macs (big-sur build) are available at
>
> https://mac.r-project.org/
>
> The nightly Installer packages (R-4.2-branch.pkg) are created just like
> the release and signed, but not always Apple notarized, so to install hold
> the <Ctrl> key when opening and pick "Open" in the dialog box if prompted.
>
> Package binaries for R 4.2.0 are also now available on CRAN, please report
> any issues to me. The Mac Builder has also been updated to use latest
> libraries and it now defaults to the R pre-release.
>
> Thanks,
> Simon
>
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>


-- 
Adrian Dusa
University of Bucharest
Romanian Social Data Archive
Soseaua Panduri nr. 90-92
050663 Bucharest sector 5
Romania
https://adriandusa.eu

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Sun Apr 17 23:29:36 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Mon, 18 Apr 2022 09:29:36 +1200
Subject: [R-SIG-Mac] Please test R 4.2.0 pre-releases
In-Reply-To: <CAJ=0CtAnMQFyndqZpOyd0UQJaxc_WFRNWaTH6VZ_kYKZ700ugw@mail.gmail.com>
References: <C98614D4-FCD3-43A0-B346-A2A9E206915D@R-project.org>
 <CAJ=0CtAnMQFyndqZpOyd0UQJaxc_WFRNWaTH6VZ_kYKZ700ugw@mail.gmail.com>
Message-ID: <5D0FCD24-D919-42A3-BEA7-2AFDA4202BF5@R-project.org>

Adrian,

thanks for testing!

1) Re package installation:

The regular R rules apply here: If the user-specific library (see Sys.getenv("R_LIBS_USER")) exists at the time of the start of R, then R will prepend it to the search path (see ?.libPaths). The default in install.packages() is to pick the first entry of .libPaths() (see ?install.packages) so packages will be installed into the user library if it is present and at the system location otherwise. Again, this is standard R behavior on all platforms.

The Package Installer in the R.app GUI gives you full control - you are explicitly setting the location where you want to install the package. However, no effort is made to check that the target location is on you current search path. I can see that this may be confusing in case where you don't have a user library (and thus it is not on .libPaths()) and then install packages "At User Level" which creates the user library, but packages installed there will be only found on the next start of R since the library did not exist when R was constructing the .libPaths(). I can modify the GUI to check and make sure the user library is added to the path after it has been created.

2) tab-complete: can you elaborate on that one? I cannot reporduce the error, so please send more details instructions how to reproduce.

Thanks,
Simon



> On Apr 18, 2022, at 5:50 AM, Adrian Du?a <dusa.adrian at unibuc.ro> wrote:
> 
> Hello Simon,
> 
> A couple of things, here.
> From a terminal, using R CMD INSTALL, as well as using install.packages() from within R, packages get installed into the default .libPaths() location:
> /Library/Frameworks/R.framework/Versions/4.2/Resources/library/
> 
> However, using the RGui menu Packages & Data / Package Installer, packages are installed in the R_LIBS_USER:
> /Users/dusadrian/Library/R/x86_64/4.2/library
> 
> Since .libPaths() does not know this location, packages installed this way are not found.
> 
> Also, most likely unrelated to R 4.2 but to some unicode problems on Monterey, when using double-tab autocomplete in the RGui
> (R for macOS GUI 1.78-devel High Sierra build 8067), I get an additional red message:
> IsMenuKeyEvent: found no unichar data in event; retranslated without deadkeys to produce '	'
> 
> If this could somehow be captured and silenced by the GUI, it would be perfect. Otherwise, any hint on what should be done would be greatly appreciated.
> 
> I hope this helps,
> Adrian
> 
> On Sun, 17 Apr 2022 at 05:38, Simon Urbanek <simon.urbanek at r-project.org> wrote:
> Dear Mac users,
> 
> we are nearing the release of R 4.2.0 (on Friday) which introduces some significant changes not only in R itself, but also in some Mac-specific build settings. Please help us by testing R pre-releases *before* the release such that any obvious issues can be caught prior to the release. The nightly pre-releases both for Intel Macs (high-sierra build) as well as M1 Macs (big-sur build) are available at
> 
> https://mac.r-project.org/
> 
> The nightly Installer packages (R-4.2-branch.pkg) are created just like the release and signed, but not always Apple notarized, so to install hold the <Ctrl> key when opening and pick "Open" in the dialog box if prompted.
> 
> Package binaries for R 4.2.0 are also now available on CRAN, please report any issues to me. The Mac Builder has also been updated to use latest libraries and it now defaults to the R pre-release.
> 
> Thanks,
> Simon
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 
> 
> -- 
> Adrian Dusa
> University of Bucharest
> Romanian Social Data Archive
> Soseaua Panduri nr. 90-92
> 050663 Bucharest sector 5
> Romania
> https://adriandusa.eu


From du@@@@dr|@n @end|ng |rom un|buc@ro  Mon Apr 18 07:55:14 2022
From: du@@@@dr|@n @end|ng |rom un|buc@ro (=?UTF-8?B?QWRyaWFuIER1yJlh?=)
Date: Mon, 18 Apr 2022 08:55:14 +0300
Subject: [R-SIG-Mac] Please test R 4.2.0 pre-releases
In-Reply-To: <5D0FCD24-D919-42A3-BEA7-2AFDA4202BF5@R-project.org>
References: <C98614D4-FCD3-43A0-B346-A2A9E206915D@R-project.org>
 <CAJ=0CtAnMQFyndqZpOyd0UQJaxc_WFRNWaTH6VZ_kYKZ700ugw@mail.gmail.com>
 <5D0FCD24-D919-42A3-BEA7-2AFDA4202BF5@R-project.org>
Message-ID: <CAJ=0CtBw9BwwOahr7vMwN4+GxfGxyBwAaUi2vhdW5_CiUJ=xEA@mail.gmail.com>

Hello Simon,

On Mon, 18 Apr 2022 at 00:29, Simon Urbanek <simon.urbanek at r-project.org>
wrote:

> [...] I can modify the GUI to check and make sure the user library is
> added to the path after it has been created.
>

I think that would be great.
Indeed, the user library was added to .libPaths() at the next start of R,
but new users find it counter-intuitive to install a package and not be
able to load it immediately afterwards.


2) tab-complete: can you elaborate on that one? I cannot reporduce the
> error, so please send more details instructions how to reproduce.


That is something I only started to witness after upgrading to Monterey, I
believe. It happens when trying to autocomplete a path, for instance on
source() or read.csv() etc.
Attached is a screenshot with the result, but I would not know how to
replicate it. This only happens in the Rgui and nowhere else (I do not get
this in RStudio, if that information is useful).

Below is the result from the sessionInfo(), and I would be happy to provide
more details if needed:

R version 4.2.0 RC (2022-04-15 r82193)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Monterey 12.3.1

Matrix products: default
BLAS:
/Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib
LAPACK:
/Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_4.2.0

-- 
Adrian Dusa
University of Bucharest
Romanian Social Data Archive
Soseaua Panduri nr. 90-92
050663 Bucharest sector 5
Romania
https://adriandusa.eu

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20220418/1944842c/attachment-0001.html>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: Screenshot 2022-04-18 at 08.40.51.png
Type: image/png
Size: 38798 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20220418/1944842c/attachment-0001.png>

From D@n@Ke||ey @end|ng |rom D@|@C@  Mon Apr 18 10:44:41 2022
From: D@n@Ke||ey @end|ng |rom D@|@C@ (Daniel Kelley)
Date: Mon, 18 Apr 2022 08:44:41 +0000
Subject: [R-SIG-Mac] Please test R 4.2.0 pre-releases
In-Reply-To: <CAJ=0CtBw9BwwOahr7vMwN4+GxfGxyBwAaUi2vhdW5_CiUJ=xEA@mail.gmail.com>
References: <C98614D4-FCD3-43A0-B346-A2A9E206915D@R-project.org>
 <CAJ=0CtAnMQFyndqZpOyd0UQJaxc_WFRNWaTH6VZ_kYKZ700ugw@mail.gmail.com>
 <5D0FCD24-D919-42A3-BEA7-2AFDA4202BF5@R-project.org>
 <CAJ=0CtBw9BwwOahr7vMwN4+GxfGxyBwAaUi2vhdW5_CiUJ=xEA@mail.gmail.com>
Message-ID: <EC864F2B-38C6-4C8A-BC82-F84ABC276E8E@dal.ca>

Further to the "deadkey" conversation, I see the message when I type ctl-e to get to the end of a line.  For example, in the below, I had typed `volc` and then `TAB`.  It then completed the word to `volcano`.  Then I typed `control-E` to go to the end of the line, and the error message appeared above where I had been typing.  As I copy-paste it here, the message ends with a box embraced by single-quote marks, but in the app I don't see the box.  (I assume it's the control-E in that box).  I don't see any other effects -- I can continue working without difficulties -- but I think it might be worth addressing an issue that prints red text, possibly worrying users.  Thanks. Dan.


[R.app GUI 1.78 (8067) x86_64-apple-darwin17.0]

[History restored from /Users/kelley/.Rapp.history]

IsMenuKeyEvent: found no unichar data in event; retranslated without deadkeys to produce ''
> volcano


From jeroenoom@ @end|ng |rom gm@||@com  Tue Apr 19 18:32:38 2022
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Tue, 19 Apr 2022 18:32:38 +0200
Subject: [R-SIG-Mac] Please test R 4.2.0 pre-releases
In-Reply-To: <C98614D4-FCD3-43A0-B346-A2A9E206915D@R-project.org>
References: <C98614D4-FCD3-43A0-B346-A2A9E206915D@R-project.org>
Message-ID: <CABFfbXvosRthnfYGT-FtufUmMstrA3tY7EPkhAZ+TvRRw+NLBA@mail.gmail.com>

On Sun, Apr 17, 2022 at 4:38 AM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
>
> Dear Mac users,
>
> we are nearing the release of R 4.2.0 (on Friday) which introduces some significant changes not only in R itself, but also in some Mac-specific build settings. Please help us by testing R pre-releases *before* the release such that any obvious issues can be caught prior to the release. The nightly pre-releases both for Intel Macs (high-sierra build) as well as M1 Macs (big-sur build) are available at
>
> https://mac.r-project.org/
>
> The nightly Installer packages (R-4.2-branch.pkg) are created just like the release and signed, but not always Apple notarized, so to install hold the <Ctrl> key when opening and pick "Open" in the dialog box if prompted.
>
> Package binaries for R 4.2.0 are also now available on CRAN, please report any issues to me. The Mac Builder has also been updated to use latest libraries and it now defaults to the R pre-release.

Is the m1 macbuilder (https://mac.r-project.org/macbuilder/submit.html
) still supported? I tried uploading a package, but it still says
"Please check back later" after an hour, and I did not receive any
email, and the auto-refresh seems broken (the embedded jquery url is
404). Afaict, the package check logs for mac-4.2 are also still not
available on cran, so this makes it quite difficult for package
authors to help with timely reporting the Mac-specific build issues
that you mention.


From @|mon@urb@nek @end|ng |rom R-project@org  Wed Apr 20 04:29:15 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 20 Apr 2022 14:29:15 +1200
Subject: [R-SIG-Mac] Please test R 4.2.0 pre-releases
In-Reply-To: <CABFfbXvosRthnfYGT-FtufUmMstrA3tY7EPkhAZ+TvRRw+NLBA@mail.gmail.com>
References: <C98614D4-FCD3-43A0-B346-A2A9E206915D@R-project.org>
 <CABFfbXvosRthnfYGT-FtufUmMstrA3tY7EPkhAZ+TvRRw+NLBA@mail.gmail.com>
Message-ID: <7D4B6ED2-478D-4028-A34B-AE63BF88E396@R-project.org>

Jeroen,

as far as I can tell MacBuilder currently works - I see no problems. If you have a question about a specific submission, send me the ID and I can have a look.

As for CRAN checks - good point, there are available in the reports area, but it seems that the flavors are not registered on the CRAN website. CCing CRAN - can we, please, have the R-devel-macos checks listed?

Thanks,
Simon



> On Apr 20, 2022, at 4:32 AM, Jeroen Ooms <jeroenooms at gmail.com> wrote:
> 
> On Sun, Apr 17, 2022 at 4:38 AM Simon Urbanek
> <simon.urbanek at r-project.org> wrote:
>> 
>> Dear Mac users,
>> 
>> we are nearing the release of R 4.2.0 (on Friday) which introduces some significant changes not only in R itself, but also in some Mac-specific build settings. Please help us by testing R pre-releases *before* the release such that any obvious issues can be caught prior to the release. The nightly pre-releases both for Intel Macs (high-sierra build) as well as M1 Macs (big-sur build) are available at
>> 
>> https://mac.r-project.org/
>> 
>> The nightly Installer packages (R-4.2-branch.pkg) are created just like the release and signed, but not always Apple notarized, so to install hold the <Ctrl> key when opening and pick "Open" in the dialog box if prompted.
>> 
>> Package binaries for R 4.2.0 are also now available on CRAN, please report any issues to me. The Mac Builder has also been updated to use latest libraries and it now defaults to the R pre-release.
> 
> Is the m1 macbuilder (https://mac.r-project.org/macbuilder/submit.html
> ) still supported? I tried uploading a package, but it still says
> "Please check back later" after an hour, and I did not receive any
> email, and the auto-refresh seems broken (the embedded jquery url is
> 404). Afaict, the package check logs for mac-4.2 are also still not
> available on cran, so this makes it quite difficult for package
> authors to help with timely reporting the Mac-specific build issues
> that you mention.
> 


From @|mon@urb@nek @end|ng |rom R-project@org  Wed Apr 20 04:42:49 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 20 Apr 2022 14:42:49 +1200
Subject: [R-SIG-Mac] Please test R 4.2.0 pre-releases
In-Reply-To: <EC864F2B-38C6-4C8A-BC82-F84ABC276E8E@dal.ca>
References: <C98614D4-FCD3-43A0-B346-A2A9E206915D@R-project.org>
 <CAJ=0CtAnMQFyndqZpOyd0UQJaxc_WFRNWaTH6VZ_kYKZ700ugw@mail.gmail.com>
 <5D0FCD24-D919-42A3-BEA7-2AFDA4202BF5@R-project.org>
 <CAJ=0CtBw9BwwOahr7vMwN4+GxfGxyBwAaUi2vhdW5_CiUJ=xEA@mail.gmail.com>
 <EC864F2B-38C6-4C8A-BC82-F84ABC276E8E@dal.ca>
Message-ID: <B4C6241F-AE3C-43E3-8B67-DC44C2F9A8B0@R-project.org>

Daniel,

thanks! Unfortunately, I cannot replicate it on any of my machines - I don't get any errors. Can you give me more exact details on your macOS and Mac? Do you have any input modifier apps installed?

As for the output, it is simply stderr - so something the system is printing. The GUI is dutifully showing that information to you, but you can disable that if you don't want to see it (see instructions in FAQ 10.5 [1]). Still, if there is something we can do about it, I would prefer that.

Thanks,
Simon

[1] - https://cran.r-project.org/bin/macosx/RMacOSX-FAQ.html#I-see-spurious-error-messages-when-starting-R_0021


> On Apr 18, 2022, at 8:44 PM, Daniel Kelley <Dan.Kelley at Dal.Ca> wrote:
> 
> Further to the "deadkey" conversation, I see the message when I type ctl-e to get to the end of a line.  For example, in the below, I had typed `volc` and then `TAB`.  It then completed the word to `volcano`.  Then I typed `control-E` to go to the end of the line, and the error message appeared above where I had been typing.  As I copy-paste it here, the message ends with a box embraced by single-quote marks, but in the app I don't see the box.  (I assume it's the control-E in that box).  I don't see any other effects -- I can continue working without difficulties -- but I think it might be worth addressing an issue that prints red text, possibly worrying users.  Thanks. Dan.
> 
> 
> [R.app GUI 1.78 (8067) x86_64-apple-darwin17.0]
> 
> [History restored from /Users/kelley/.Rapp.history]
> 
> IsMenuKeyEvent: found no unichar data in event; retranslated without deadkeys to produce ''
>> volcano
> 
> 
> 


From @|mon@urb@nek @end|ng |rom R-project@org  Wed Apr 20 08:52:28 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 20 Apr 2022 18:52:28 +1200
Subject: [R-SIG-Mac] Please test R 4.2.0 pre-releases
In-Reply-To: <7D4B6ED2-478D-4028-A34B-AE63BF88E396@R-project.org>
References: <C98614D4-FCD3-43A0-B346-A2A9E206915D@R-project.org>
 <CABFfbXvosRthnfYGT-FtufUmMstrA3tY7EPkhAZ+TvRRw+NLBA@mail.gmail.com>
 <7D4B6ED2-478D-4028-A34B-AE63BF88E396@R-project.org>
Message-ID: <0ACB329A-0598-42EE-81B6-4E3C58BF4FD0@R-project.org>

Ok, apparently it may not be trivial to add the results and then move them again in two days because of the release changes on CRAN, so for those interested I have created a quick and dirty web front-end that allows you to dump all results for a given package from the macOS staging server. The URL is "https://stats2021.nz/macos-results?<package>" so, for example, if you want the result for the package "uuid" you would use https://stats2021.nz/macos-results?uuid - this will likely be only temporary until the release since it's truly just a file dump without the formatting that CRAN uses.

Cheers,
Simon



> On Apr 20, 2022, at 2:29 PM, Simon Urbanek <simon.urbanek at R-project.org> wrote:
> 
> Jeroen,
> 
> as far as I can tell MacBuilder currently works - I see no problems. If you have a question about a specific submission, send me the ID and I can have a look.
> 
> As for CRAN checks - good point, there are available in the reports area, but it seems that the flavors are not registered on the CRAN website. CCing CRAN - can we, please, have the R-devel-macos checks listed?
> 
> Thanks,
> Simon
> 
> 
> 
>> On Apr 20, 2022, at 4:32 AM, Jeroen Ooms <jeroenooms at gmail.com> wrote:
>> 
>> On Sun, Apr 17, 2022 at 4:38 AM Simon Urbanek
>> <simon.urbanek at r-project.org> wrote:
>>> 
>>> Dear Mac users,
>>> 
>>> we are nearing the release of R 4.2.0 (on Friday) which introduces some significant changes not only in R itself, but also in some Mac-specific build settings. Please help us by testing R pre-releases *before* the release such that any obvious issues can be caught prior to the release. The nightly pre-releases both for Intel Macs (high-sierra build) as well as M1 Macs (big-sur build) are available at
>>> 
>>> https://mac.r-project.org/
>>> 
>>> The nightly Installer packages (R-4.2-branch.pkg) are created just like the release and signed, but not always Apple notarized, so to install hold the <Ctrl> key when opening and pick "Open" in the dialog box if prompted.
>>> 
>>> Package binaries for R 4.2.0 are also now available on CRAN, please report any issues to me. The Mac Builder has also been updated to use latest libraries and it now defaults to the R pre-release.
>> 
>> Is the m1 macbuilder (https://mac.r-project.org/macbuilder/submit.html
>> ) still supported? I tried uploading a package, but it still says
>> "Please check back later" after an hour, and I did not receive any
>> email, and the auto-refresh seems broken (the embedded jquery url is
>> 404). Afaict, the package check logs for mac-4.2 are also still not
>> available on cran, so this makes it quite difficult for package
>> authors to help with timely reporting the Mac-specific build issues
>> that you mention.
>> 
> 


From du@@@@dr|@n @end|ng |rom un|buc@ro  Wed Apr 20 15:42:46 2022
From: du@@@@dr|@n @end|ng |rom un|buc@ro (=?UTF-8?B?QWRyaWFuIER1yJlh?=)
Date: Wed, 20 Apr 2022 16:42:46 +0300
Subject: [R-SIG-Mac] Please test R 4.2.0 pre-releases
In-Reply-To: <B4C6241F-AE3C-43E3-8B67-DC44C2F9A8B0@R-project.org>
References: <C98614D4-FCD3-43A0-B346-A2A9E206915D@R-project.org>
 <CAJ=0CtAnMQFyndqZpOyd0UQJaxc_WFRNWaTH6VZ_kYKZ700ugw@mail.gmail.com>
 <5D0FCD24-D919-42A3-BEA7-2AFDA4202BF5@R-project.org>
 <CAJ=0CtBw9BwwOahr7vMwN4+GxfGxyBwAaUi2vhdW5_CiUJ=xEA@mail.gmail.com>
 <EC864F2B-38C6-4C8A-BC82-F84ABC276E8E@dal.ca>
 <B4C6241F-AE3C-43E3-8B67-DC44C2F9A8B0@R-project.org>
Message-ID: <CAJ=0CtBmUamRitEbKsOqaxtC4eafDzvQX96t6i8gT97=_PndfA@mail.gmail.com>

Thank you Simon, this solves the problem alright.
Best,
Adrian

On Wed, 20 Apr 2022 at 05:43, Simon Urbanek <simon.urbanek at r-project.org>
wrote:

> Daniel,
>
> thanks! Unfortunately, I cannot replicate it on any of my machines - I
> don't get any errors. Can you give me more exact details on your macOS and
> Mac? Do you have any input modifier apps installed?
>
> As for the output, it is simply stderr - so something the system is
> printing. The GUI is dutifully showing that information to you, but you can
> disable that if you don't want to see it (see instructions in FAQ 10.5
> [1]). Still, if there is something we can do about it, I would prefer that.
>
> Thanks,
> Simon
>
> [1] -
> https://cran.r-project.org/bin/macosx/RMacOSX-FAQ.html#I-see-spurious-error-messages-when-starting-R_0021
>
>
> > On Apr 18, 2022, at 8:44 PM, Daniel Kelley <Dan.Kelley at Dal.Ca> wrote:
> >
> > Further to the "deadkey" conversation, I see the message when I type
> ctl-e to get to the end of a line.  For example, in the below, I had typed
> `volc` and then `TAB`.  It then completed the word to `volcano`.  Then I
> typed `control-E` to go to the end of the line, and the error message
> appeared above where I had been typing.  As I copy-paste it here, the
> message ends with a box embraced by single-quote marks, but in the app I
> don't see the box.  (I assume it's the control-E in that box).  I don't see
> any other effects -- I can continue working without difficulties -- but I
> think it might be worth addressing an issue that prints red text, possibly
> worrying users.  Thanks. Dan.
> >
> >
> > [R.app GUI 1.78 (8067) x86_64-apple-darwin17.0]
> >
> > [History restored from /Users/kelley/.Rapp.history]
> >
> > IsMenuKeyEvent: found no unichar data in event; retranslated without
> deadkeys to produce ' '
> >> volcano
> >
> >
> >
>
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>


-- 
Adrian Dusa
University of Bucharest
Romanian Social Data Archive
Soseaua Panduri nr. 90-92
050663 Bucharest sector 5
Romania
https://adriandusa.eu

	[[alternative HTML version deleted]]


From jeroenoom@ @end|ng |rom gm@||@com  Wed Apr 20 19:41:14 2022
From: jeroenoom@ @end|ng |rom gm@||@com (Jeroen Ooms)
Date: Wed, 20 Apr 2022 19:41:14 +0200
Subject: [R-SIG-Mac] Please test R 4.2.0 pre-releases
In-Reply-To: <0ACB329A-0598-42EE-81B6-4E3C58BF4FD0@R-project.org>
References: <C98614D4-FCD3-43A0-B346-A2A9E206915D@R-project.org>
 <CABFfbXvosRthnfYGT-FtufUmMstrA3tY7EPkhAZ+TvRRw+NLBA@mail.gmail.com>
 <7D4B6ED2-478D-4028-A34B-AE63BF88E396@R-project.org>
 <0ACB329A-0598-42EE-81B6-4E3C58BF4FD0@R-project.org>
Message-ID: <CABFfbXuy_oJkO5wOWoqqtLC5c72KRJSb5nGCf74bP_wJ0MBBLQ@mail.gmail.com>

On Wed, Apr 20, 2022 at 8:52 AM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
>
> Ok, apparently it may not be trivial to add the results and then move them again in two days because of the release changes on CRAN, so for those interested I have created a quick and dirty web front-end that allows you to dump all results for a given package from the macOS staging server. The URL is "https://stats2021.nz/macos-results?<package>" so, for example, if you want the result for the package "uuid" you would use https://stats2021.nz/macos-results?uuid - this will likely be only temporary until the release since it's truly just a file dump without the formatting that CRAN uses.

Thanks, this is very useful. I also see the r-devel-macos checks logs
have now landed on CRAN as well.


From @|mon@urb@nek @end|ng |rom R-project@org  Wed Apr 20 23:11:29 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Thu, 21 Apr 2022 09:11:29 +1200
Subject: [R-SIG-Mac] Please test R 4.2.0 pre-releases
In-Reply-To: <CABFfbXuy_oJkO5wOWoqqtLC5c72KRJSb5nGCf74bP_wJ0MBBLQ@mail.gmail.com>
References: <C98614D4-FCD3-43A0-B346-A2A9E206915D@R-project.org>
 <CABFfbXvosRthnfYGT-FtufUmMstrA3tY7EPkhAZ+TvRRw+NLBA@mail.gmail.com>
 <7D4B6ED2-478D-4028-A34B-AE63BF88E396@R-project.org>
 <0ACB329A-0598-42EE-81B6-4E3C58BF4FD0@R-project.org>
 <CABFfbXuy_oJkO5wOWoqqtLC5c72KRJSb5nGCf74bP_wJ0MBBLQ@mail.gmail.com>
Message-ID: <619CAAE7-33A1-4935-B3E3-B038BCDF6294@R-project.org>

Perfect, many thanks to Kurt!
Cheers,
Simon


> On Apr 21, 2022, at 5:41 AM, Jeroen Ooms <jeroenooms at gmail.com> wrote:
> 
> On Wed, Apr 20, 2022 at 8:52 AM Simon Urbanek
> <simon.urbanek at r-project.org> wrote:
>> 
>> Ok, apparently it may not be trivial to add the results and then move them again in two days because of the release changes on CRAN, so for those interested I have created a quick and dirty web front-end that allows you to dump all results for a given package from the macOS staging server. The URL is "https://stats2021.nz/macos-results?<package>" so, for example, if you want the result for the package "uuid" you would use https://stats2021.nz/macos-results?uuid - this will likely be only temporary until the release since it's truly just a file dump without the formatting that CRAN uses.
> 
> Thanks, this is very useful. I also see the r-devel-macos checks logs
> have now landed on CRAN as well.
> 


From gor@n@bro@trom @end|ng |rom umu@@e  Fri Apr 22 22:01:53 2022
From: gor@n@bro@trom @end|ng |rom umu@@e (=?UTF-8?Q?G=c3=b6ran_Brostr=c3=b6m?=)
Date: Fri, 22 Apr 2022 22:01:53 +0200
Subject: [R-SIG-Mac] Installing gfortran
Message-ID: <9bc73767-ab49-c828-4044-36fba7274f1f@umu.se>

Trying gfortran-f51f1da0-darwin20.0-arm64.tar.gz from
https://mac.r-project.org/libs-arm64/ (following instructions), download 
and unpack,

but no sight of gfortran in /opt/R/arm64/bin

so the building of my package fails.

clang -arch arm64 -I"/Library/Frameworks/R.framework/Resources/include" 
-DNDEBUG   -I/opt/R/arm64/include   -fPIC  -falign-functions=64 -Wall -g 
-O2  -c c2f.c -o c2f.o
/opt/R/arm64/bin/gfortran -mtune=native -fno-optimize-sibling-calls 
-fPIC  -Wall -g -O2  -c chek.f -o chek.o
make: /opt/R/arm64/bin/gfortran: No such file or directory
make: *** [chek.o] Error 1


Of course, there is a warning on that web page (so why the link to it?) 
saying that

IMPORTANT: All binaries are moving to a unified repository under 
/bin/darwin<ver>/<arch> with manifest file to simplify automated 
installataion. Go to /bin/darwin20/arm64 for latest Big Sur arm64 
binaries. The following is only kept for legacy access.

but there I cannot identify (by name) any file that could contain a 
fortran compiler.

To summarize: I need help.

Thanks, G?ran


From p@tr|ck@@chr@tz @end|ng |rom gm@||@com  Fri Apr 22 22:54:30 2022
From: p@tr|ck@@chr@tz @end|ng |rom gm@||@com (Patrick Schratz)
Date: Fri, 22 Apr 2022 22:54:30 +0200
Subject: [R-SIG-Mac] Installing gfortran
In-Reply-To: <9bc73767-ab49-c828-4044-36fba7274f1f@umu.se>
References: <9bc73767-ab49-c828-4044-36fba7274f1f@umu.se>
Message-ID: <CD2DBF0F-1D4B-4A1A-AF7E-CBA1FEC9459F@gmail.com>

Hi G?ran

```
curl -O https://mac.r-project.org/libs-arm64/gfortran-f51f1da0-darwin20.0-arm64.tar.gz
sudo tar fvxz gfortran-f51f1da0-darwin20.0-arm64.tar.gz -C /
```

should do it.

See also https://pat-s.me/transitioning-from-x86-to-arm64-on-macos-experiences-of-an-r-user/#gfortran or https://cynkra.com/blog/2021-03-16-gfortran-macos/ for more information.

Cheers
Patrick

On 22 Apr 2022, at 22:01, G?ran Brostr?m wrote:

> Trying gfortran-f51f1da0-darwin20.0-arm64.tar.gz from
> https://mac.r-project.org/libs-arm64/ (following instructions), download and unpack,
>
> but no sight of gfortran in /opt/R/arm64/bin
>
> so the building of my package fails.
>
> clang -arch arm64 -I"/Library/Frameworks/R.framework/Resources/include" -DNDEBUG   -I/opt/R/arm64/include   -fPIC  -falign-functions=64 -Wall -g -O2  -c c2f.c -o c2f.o
> /opt/R/arm64/bin/gfortran -mtune=native -fno-optimize-sibling-calls -fPIC  -Wall -g -O2  -c chek.f -o chek.o
> make: /opt/R/arm64/bin/gfortran: No such file or directory
> make: *** [chek.o] Error 1
>
>
> Of course, there is a warning on that web page (so why the link to it?) saying that
>
> IMPORTANT: All binaries are moving to a unified repository under /bin/darwin<ver>/<arch> with manifest file to simplify automated installataion. Go to /bin/darwin20/arm64 for latest Big Sur arm64 binaries. The following is only kept for legacy access.
>
> but there I cannot identify (by name) any file that could contain a fortran compiler.
>
> To summarize: I need help.
>
> Thanks, G?ran
>
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20220422/f5a0c66a/attachment.html>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 870 bytes
Desc: OpenPGP digital signature
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20220422/f5a0c66a/attachment.sig>

From gor@n@bro@trom @end|ng |rom umu@@e  Sat Apr 23 00:48:22 2022
From: gor@n@bro@trom @end|ng |rom umu@@e (=?UTF-8?Q?G=c3=b6ran_Brostr=c3=b6m?=)
Date: Sat, 23 Apr 2022 00:48:22 +0200
Subject: [R-SIG-Mac] Installing gfortran
In-Reply-To: <CD2DBF0F-1D4B-4A1A-AF7E-CBA1FEC9459F@gmail.com>
References: <9bc73767-ab49-c828-4044-36fba7274f1f@umu.se>
 <CD2DBF0F-1D4B-4A1A-AF7E-CBA1FEC9459F@gmail.com>
Message-ID: <c61bb1a4-66fd-a3a4-a8f7-9530ab68b7ac@umu.se>

Hi Patrick,

Den 2022-04-22 kl. 22:54, skrev Patrick Schratz:
> Hi G?ran
> 
> |curl -O 
> https://mac.r-project.org/libs-arm64/gfortran-f51f1da0-darwin20.0-arm64.tar.gz 
> sudo tar fvxz gfortran-f51f1da0-darwin20.0-arm64.tar.gz -C / |
> 
> should do it.

It did. Thanks!

G?ran

> 
> See also 
> https://pat-s.me/transitioning-from-x86-to-arm64-on-macos-experiences-of-an-r-user/#gfortran 
> <https://pat-s.me/transitioning-from-x86-to-arm64-on-macos-experiences-of-an-r-user/#gfortran> 
> or https://cynkra.com/blog/2021-03-16-gfortran-macos/ 
> <https://cynkra.com/blog/2021-03-16-gfortran-macos/> for more information.
> 
> Cheers
> Patrick
> 
> On 22 Apr 2022, at 22:01, G?ran Brostr?m wrote:
> 
>     Trying gfortran-f51f1da0-darwin20.0-arm64.tar.gz from
>     https://mac.r-project.org/libs-arm64/
>     <https://mac.r-project.org/libs-arm64/> (following instructions),
>     download and unpack,
> 
>     but no sight of gfortran in /opt/R/arm64/bin
> 
>     so the building of my package fails.
> 
>     clang -arch arm64
>     -I"/Library/Frameworks/R.framework/Resources/include" -DNDEBUG
>     -I/opt/R/arm64/include -fPIC -falign-functions=64 -Wall -g -O2 -c
>     c2f.c -o c2f.o
>     /opt/R/arm64/bin/gfortran -mtune=native -fno-optimize-sibling-calls
>     -fPIC -Wall -g -O2 -c chek.f -o chek.o
>     make: /opt/R/arm64/bin/gfortran: No such file or directory
>     make: *** [chek.o] Error 1
> 
>     Of course, there is a warning on that web page (so why the link to
>     it?) saying that
> 
>     IMPORTANT: All binaries are moving to a unified repository under
>     /bin/darwin<ver>/<arch> with manifest file to simplify automated
>     installataion. Go to /bin/darwin20/arm64 for latest Big Sur arm64
>     binaries. The following is only kept for legacy access.
> 
>     but there I cannot identify (by name) any file that could contain a
>     fortran compiler.
> 
>     To summarize: I need help.
> 
>     Thanks, G?ran
> 
>     _______________________________________________
>     R-SIG-Mac mailing list
>     R-SIG-Mac at r-project.org
> 
>     https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>     <https://stat.ethz.ch/mailman/listinfo/r-sig-mac>
>


From @|mon@urb@nek @end|ng |rom R-project@org  Sat Apr 23 02:13:16 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Sat, 23 Apr 2022 12:13:16 +1200
Subject: [R-SIG-Mac] Installing gfortran
In-Reply-To: <c61bb1a4-66fd-a3a4-a8f7-9530ab68b7ac@umu.se>
References: <9bc73767-ab49-c828-4044-36fba7274f1f@umu.se>
 <CD2DBF0F-1D4B-4A1A-AF7E-CBA1FEC9459F@gmail.com>
 <c61bb1a4-66fd-a3a4-a8f7-9530ab68b7ac@umu.se>
Message-ID: <0910300B-E8DE-4E66-98C6-D08A96C4022B@R-project.org>

For posterity - please always consult

https://mac.r-project.org/tools/ (linked from CRAN)

The old locations like libs* are no longer updated and have been deprecated in favor of /tools and /bin which are maintained for all builds. Similarly, I would strongly discourage following any advice from blogs as they tend to be outdated, wrong or both.

Cheers
Simon


> On Apr 23, 2022, at 10:48 AM, G?ran Brostr?m <goran.brostrom at umu.se> wrote:
> 
> Hi Patrick,
> 
> Den 2022-04-22 kl. 22:54, skrev Patrick Schratz:
>> Hi G?ran
>> |curl -O https://mac.r-project.org/libs-arm64/gfortran-f51f1da0-darwin20.0-arm64.tar.gz sudo tar fvxz gfortran-f51f1da0-darwin20.0-arm64.tar.gz -C / |
>> should do it.
> 
> It did. Thanks!
> 
> G?ran
> 
>> See also https://pat-s.me/transitioning-from-x86-to-arm64-on-macos-experiences-of-an-r-user/#gfortran <https://pat-s.me/transitioning-from-x86-to-arm64-on-macos-experiences-of-an-r-user/#gfortran> or https://cynkra.com/blog/2021-03-16-gfortran-macos/ <https://cynkra.com/blog/2021-03-16-gfortran-macos/> for more information.
>> Cheers
>> Patrick
>> On 22 Apr 2022, at 22:01, G?ran Brostr?m wrote:
>>    Trying gfortran-f51f1da0-darwin20.0-arm64.tar.gz from
>>    https://mac.r-project.org/libs-arm64/
>>    <https://mac.r-project.org/libs-arm64/> (following instructions),
>>    download and unpack,
>>    but no sight of gfortran in /opt/R/arm64/bin
>>    so the building of my package fails.
>>    clang -arch arm64
>>    -I"/Library/Frameworks/R.framework/Resources/include" -DNDEBUG
>>    -I/opt/R/arm64/include -fPIC -falign-functions=64 -Wall -g -O2 -c
>>    c2f.c -o c2f.o
>>    /opt/R/arm64/bin/gfortran -mtune=native -fno-optimize-sibling-calls
>>    -fPIC -Wall -g -O2 -c chek.f -o chek.o
>>    make: /opt/R/arm64/bin/gfortran: No such file or directory
>>    make: *** [chek.o] Error 1
>>    Of course, there is a warning on that web page (so why the link to
>>    it?) saying that
>>    IMPORTANT: All binaries are moving to a unified repository under
>>    /bin/darwin<ver>/<arch> with manifest file to simplify automated
>>    installataion. Go to /bin/darwin20/arm64 for latest Big Sur arm64
>>    binaries. The following is only kept for legacy access.
>>    but there I cannot identify (by name) any file that could contain a
>>    fortran compiler.
>>    To summarize: I need help.
>>    Thanks, G?ran
>>    _______________________________________________
>>    R-SIG-Mac mailing list
>>    R-SIG-Mac at r-project.org
>>    https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>    <https://stat.ethz.ch/mailman/listinfo/r-sig-mac>
>> 
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 


From p@tr|ck@@chr@tz @end|ng |rom gm@||@com  Sat Apr 23 09:44:18 2022
From: p@tr|ck@@chr@tz @end|ng |rom gm@||@com (Patrick Schratz)
Date: Sat, 23 Apr 2022 09:44:18 +0200
Subject: [R-SIG-Mac] Installing gfortran
In-Reply-To: <0910300B-E8DE-4E66-98C6-D08A96C4022B@R-project.org>
References: <9bc73767-ab49-c828-4044-36fba7274f1f@umu.se>
 <CD2DBF0F-1D4B-4A1A-AF7E-CBA1FEC9459F@gmail.com>
 <c61bb1a4-66fd-a3a4-a8f7-9530ab68b7ac@umu.se>
 <0910300B-E8DE-4E66-98C6-D08A96C4022B@R-project.org>
Message-ID: <B09F0497-BBE6-4549-999E-29A59DC975D3@gmail.com>

FWIW blog posts which explain such things usually have a (good) reason - they aim to help people getting started when the official documentation is either unclear, hard to find or incomplete.
It?s on the readers themselves to decide whether such blog posts are trustworthy or useful.

I have personally profited so often from blog posts of others already and therefore find the general advice to not consult such resources quite shortsighted.
Of course the official documentation should always be the first point to have a look at - and in this case the required information would have been there.

Apologies for going partly off-topic but I think this point is important.

Cheers
Patrick

On 23 Apr 2022, at 2:13, Simon Urbanek wrote:

> For posterity - please always consult
>
> https://mac.r-project.org/tools/ (linked from CRAN)
>
> The old locations like libs* are no longer updated and have been deprecated in favor of /tools and /bin which are maintained for all builds. Similarly, I would strongly discourage following any advice from blogs as they tend to be outdated, wrong or both.
>
> Cheers
> Simon
>
>
>> On Apr 23, 2022, at 10:48 AM, G?ran Brostr?m <goran.brostrom at umu.se> wrote:
>>
>> Hi Patrick,
>>
>> Den 2022-04-22 kl. 22:54, skrev Patrick Schratz:
>>> Hi G?ran
>>> |curl -O https://mac.r-project.org/libs-arm64/gfortran-f51f1da0-darwin20.0-arm64.tar.gz sudo tar fvxz gfortran-f51f1da0-darwin20.0-arm64.tar.gz -C / |
>>> should do it.
>>
>> It did. Thanks!
>>
>> G?ran
>>
>>> See also https://pat-s.me/transitioning-from-x86-to-arm64-on-macos-experiences-of-an-r-user/#gfortran <https://pat-s.me/transitioning-from-x86-to-arm64-on-macos-experiences-of-an-r-user/#gfortran> or https://cynkra.com/blog/2021-03-16-gfortran-macos/ <https://cynkra.com/blog/2021-03-16-gfortran-macos/> for more information.
>>> Cheers
>>> Patrick
>>> On 22 Apr 2022, at 22:01, G?ran Brostr?m wrote:
>>>    Trying gfortran-f51f1da0-darwin20.0-arm64.tar.gz from
>>> https://mac.r-project.org/libs-arm64/
>>>    <https://mac.r-project.org/libs-arm64/> (following instructions),
>>>    download and unpack,
>>>    but no sight of gfortran in /opt/R/arm64/bin
>>>    so the building of my package fails.
>>>    clang -arch arm64
>>>    -I"/Library/Frameworks/R.framework/Resources/include" -DNDEBUG
>>>    -I/opt/R/arm64/include -fPIC -falign-functions=64 -Wall -g -O2 -c
>>>    c2f.c -o c2f.o
>>>    /opt/R/arm64/bin/gfortran -mtune=native -fno-optimize-sibling-calls
>>>    -fPIC -Wall -g -O2 -c chek.f -o chek.o
>>>    make: /opt/R/arm64/bin/gfortran: No such file or directory
>>>    make: *** [chek.o] Error 1
>>>    Of course, there is a warning on that web page (so why the link to
>>>    it?) saying that
>>>    IMPORTANT: All binaries are moving to a unified repository under
>>>    /bin/darwin<ver>/<arch> with manifest file to simplify automated
>>>    installataion. Go to /bin/darwin20/arm64 for latest Big Sur arm64
>>>    binaries. The following is only kept for legacy access.
>>>    but there I cannot identify (by name) any file that could contain a
>>>    fortran compiler.
>>>    To summarize: I need help.
>>>    Thanks, G?ran
>>>    _______________________________________________
>>>    R-SIG-Mac mailing list
>>>    R-SIG-Mac at r-project.org
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>>    <https://stat.ethz.ch/mailman/listinfo/r-sig-mac>
>>>
>>
>> _______________________________________________
>> R-SIG-Mac mailing list
>> R-SIG-Mac at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 870 bytes
Desc: OpenPGP digital signature
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20220423/1eefa1ae/attachment.sig>

From gor@n@bro@trom @end|ng |rom umu@@e  Sat Apr 23 09:57:10 2022
From: gor@n@bro@trom @end|ng |rom umu@@e (=?UTF-8?Q?G=c3=b6ran_Brostr=c3=b6m?=)
Date: Sat, 23 Apr 2022 09:57:10 +0200
Subject: [R-SIG-Mac] Installing gfortran
In-Reply-To: <0910300B-E8DE-4E66-98C6-D08A96C4022B@R-project.org>
References: <9bc73767-ab49-c828-4044-36fba7274f1f@umu.se>
 <CD2DBF0F-1D4B-4A1A-AF7E-CBA1FEC9459F@gmail.com>
 <c61bb1a4-66fd-a3a4-a8f7-9530ab68b7ac@umu.se>
 <0910300B-E8DE-4E66-98C6-D08A96C4022B@R-project.org>
Message-ID: <4b856b32-ad09-3aa8-34f6-6bb29d5599e2@umu.se>



On 2022-04-23 02:13, Simon Urbanek wrote:
> For posterity - please always consult
> 
> https://mac.r-project.org/tools/ (linked from CRAN)

Today, that is. Yesterday the link was different, pointing the way I 
explained. The gfortran version I got that way is referred to "previous 
version (before R 4.2.0)" in today's link. So I need to uninstall it 
before I upgrade to 4.2.0.

Is it as simple as removing /opt/R/arm64/gfortran and 
/opt/R/arm64/bin/gfortran?

> 
> The old locations like libs* are no longer updated and have been
> deprecated in favor of /tools and /bin which are maintained for all
> builds. Similarly, I would strongly discourage following any advice
> from blogs as they tend to be outdated, wrong or both.

I wouldn't dream of consulting random blogs in so serious matters.

Thanks for your help!

  G?ran


> Cheers Simon
> 
> 
>> On Apr 23, 2022, at 10:48 AM, G?ran Brostr?m
>> <goran.brostrom at umu.se> wrote:
>> 
>> Hi Patrick,
>> 
>> Den 2022-04-22 kl. 22:54, skrev Patrick Schratz:
>>> Hi G?ran |curl -O
>>> https://mac.r-project.org/libs-arm64/gfortran-f51f1da0-darwin20.0-arm64.tar.gz
>>> sudo tar fvxz gfortran-f51f1da0-darwin20.0-arm64.tar.gz -C / | 
>>> should do it.
>> 
>> It did. Thanks!
>> 
>> G?ran
>> 
>>> See also
>>> https://pat-s.me/transitioning-from-x86-to-arm64-on-macos-experiences-of-an-r-user/#gfortran
>>> <https://pat-s.me/transitioning-from-x86-to-arm64-on-macos-experiences-of-an-r-user/#gfortran>
>>> or https://cynkra.com/blog/2021-03-16-gfortran-macos/
>>> <https://cynkra.com/blog/2021-03-16-gfortran-macos/> for more
>>> information. Cheers Patrick On 22 Apr 2022, at 22:01, G?ran
>>> Brostr?m wrote: Trying gfortran-f51f1da0-darwin20.0-arm64.tar.gz
>>> from https://mac.r-project.org/libs-arm64/ 
>>> <https://mac.r-project.org/libs-arm64/> (following
>>> instructions), download and unpack, but no sight of gfortran in
>>> /opt/R/arm64/bin so the building of my package fails. clang -arch
>>> arm64 -I"/Library/Frameworks/R.framework/Resources/include"
>>> -DNDEBUG -I/opt/R/arm64/include -fPIC -falign-functions=64 -Wall
>>> -g -O2 -c c2f.c -o c2f.o /opt/R/arm64/bin/gfortran -mtune=native
>>> -fno-optimize-sibling-calls -fPIC -Wall -g -O2 -c chek.f -o
>>> chek.o make: /opt/R/arm64/bin/gfortran: No such file or
>>> directory make: *** [chek.o] Error 1 Of course, there is a
>>> warning on that web page (so why the link to it?) saying that 
>>> IMPORTANT: All binaries are moving to a unified repository under 
>>> /bin/darwin<ver>/<arch> with manifest file to simplify automated 
>>> installataion. Go to /bin/darwin20/arm64 for latest Big Sur
>>> arm64 binaries. The following is only kept for legacy access. but
>>> there I cannot identify (by name) any file that could contain a 
>>> fortran compiler. To summarize: I need help. Thanks, G?ran 
>>> _______________________________________________ R-SIG-Mac mailing
>>> list R-SIG-Mac at r-project.org 
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac 
>>> <https://stat.ethz.ch/mailman/listinfo/r-sig-mac>
>>> 
>> 
>> _______________________________________________ R-SIG-Mac mailing
>> list R-SIG-Mac at r-project.org 
>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>> 
>


From |u|@@puerto@@r @end|ng |rom gm@||@com  Sat Apr 23 13:23:48 2022
From: |u|@@puerto@@r @end|ng |rom gm@||@com (Luis Puerto)
Date: Sat, 23 Apr 2022 13:23:48 +0200
Subject: [R-SIG-Mac] Installing gfortran
In-Reply-To: <B09F0497-BBE6-4549-999E-29A59DC975D3@gmail.com>
References: <9bc73767-ab49-c828-4044-36fba7274f1f@umu.se>
 <CD2DBF0F-1D4B-4A1A-AF7E-CBA1FEC9459F@gmail.com>
 <c61bb1a4-66fd-a3a4-a8f7-9530ab68b7ac@umu.se>
 <0910300B-E8DE-4E66-98C6-D08A96C4022B@R-project.org>
 <B09F0497-BBE6-4549-999E-29A59DC975D3@gmail.com>
Message-ID: <367B9A11-5138-4A70-9E89-7A3940CBF0C8@gmail.com>

Hey Patrick,

I think the blog post is top notch!!! Thanks a lot for sharing!!! I was looking for something like that for a while!

Cheers!
Luis

> On 23 Apr 2022, at 09:44, Patrick Schratz <patrick.schratz at gmail.com> wrote:
> 
> Signed PGP part
> FWIW blog posts which explain such things usually have a (good) reason - they aim to help people getting started when the official documentation is either unclear, hard to find or incomplete.
> It?s on the readers themselves to decide whether such blog posts are trustworthy or useful.
> 
> I have personally profited so often from blog posts of others already and therefore find the general advice to not consult such resources quite shortsighted.
> Of course the official documentation should always be the first point to have a look at - and in this case the required information would have been there.
> 
> Apologies for going partly off-topic but I think this point is important.
> 
> Cheers
> Patrick
> 
> On 23 Apr 2022, at 2:13, Simon Urbanek wrote:
> 
>> For posterity - please always consult
>> 
>> https://mac.r-project.org/tools/ (linked from CRAN)
>> 
>> The old locations like libs* are no longer updated and have been deprecated in favor of /tools and /bin which are maintained for all builds. Similarly, I would strongly discourage following any advice from blogs as they tend to be outdated, wrong or both.
>> 
>> Cheers
>> Simon
>> 
>> 
>>> On Apr 23, 2022, at 10:48 AM, G?ran Brostr?m <goran.brostrom at umu.se> wrote:
>>> 
>>> Hi Patrick,
>>> 
>>> Den 2022-04-22 kl. 22:54, skrev Patrick Schratz:
>>>> Hi G?ran
>>>> |curl -O https://mac.r-project.org/libs-arm64/gfortran-f51f1da0-darwin20.0-arm64.tar.gz sudo tar fvxz gfortran-f51f1da0-darwin20.0-arm64.tar.gz -C / |
>>>> should do it.
>>> 
>>> It did. Thanks!
>>> 
>>> G?ran
>>> 
>>>> See also https://pat-s.me/transitioning-from-x86-to-arm64-on-macos-experiences-of-an-r-user/#gfortran <https://pat-s.me/transitioning-from-x86-to-arm64-on-macos-experiences-of-an-r-user/#gfortran> or https://cynkra.com/blog/2021-03-16-gfortran-macos/ <https://cynkra.com/blog/2021-03-16-gfortran-macos/> for more information.
>>>> Cheers
>>>> Patrick
>>>> On 22 Apr 2022, at 22:01, G?ran Brostr?m wrote:
>>>>   Trying gfortran-f51f1da0-darwin20.0-arm64.tar.gz from
>>>> https://mac.r-project.org/libs-arm64/
>>>>   <https://mac.r-project.org/libs-arm64/> (following instructions),
>>>>   download and unpack,
>>>>   but no sight of gfortran in /opt/R/arm64/bin
>>>>   so the building of my package fails.
>>>>   clang -arch arm64
>>>>   -I"/Library/Frameworks/R.framework/Resources/include" -DNDEBUG
>>>>   -I/opt/R/arm64/include -fPIC -falign-functions=64 -Wall -g -O2 -c
>>>>   c2f.c -o c2f.o
>>>>   /opt/R/arm64/bin/gfortran -mtune=native -fno-optimize-sibling-calls
>>>>   -fPIC -Wall -g -O2 -c chek.f -o chek.o
>>>>   make: /opt/R/arm64/bin/gfortran: No such file or directory
>>>>   make: *** [chek.o] Error 1
>>>>   Of course, there is a warning on that web page (so why the link to
>>>>   it?) saying that
>>>>   IMPORTANT: All binaries are moving to a unified repository under
>>>>   /bin/darwin<ver>/<arch> with manifest file to simplify automated
>>>>   installataion. Go to /bin/darwin20/arm64 for latest Big Sur arm64
>>>>   binaries. The following is only kept for legacy access.
>>>>   but there I cannot identify (by name) any file that could contain a
>>>>   fortran compiler.
>>>>   To summarize: I need help.
>>>>   Thanks, G?ran
>>>>   _______________________________________________
>>>>   R-SIG-Mac mailing list
>>>>   R-SIG-Mac at r-project.org
>>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>>>   <https://stat.ethz.ch/mailman/listinfo/r-sig-mac>
>>>> 
>>> 
>>> _______________________________________________
>>> R-SIG-Mac mailing list
>>> R-SIG-Mac at r-project.org
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20220423/9094fa34/attachment.sig>

From @|mon@urb@nek @end|ng |rom R-project@org  Mon Apr 25 01:04:47 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Mon, 25 Apr 2022 11:04:47 +1200
Subject: [R-SIG-Mac] Contributing to documentation [Was: Installing gfortran]
In-Reply-To: <B09F0497-BBE6-4549-999E-29A59DC975D3@gmail.com>
References: <9bc73767-ab49-c828-4044-36fba7274f1f@umu.se>
 <CD2DBF0F-1D4B-4A1A-AF7E-CBA1FEC9459F@gmail.com>
 <c61bb1a4-66fd-a3a4-a8f7-9530ab68b7ac@umu.se>
 <0910300B-E8DE-4E66-98C6-D08A96C4022B@R-project.org>
 <B09F0497-BBE6-4549-999E-29A59DC975D3@gmail.com>
Message-ID: <916FAE6F-D1DF-409A-AFC4-8A2AA1998A37@R-project.org>



> On Apr 23, 2022, at 7:44 PM, Patrick Schratz <patrick.schratz at gmail.com> wrote:
> 
> FWIW blog posts which explain such things usually have a (good) reason - they aim to help people getting started when the official documentation is either unclear, hard to find or incomplete.


If that is the case, why not contribute to the documentation? That is the whole point of an open source project after all.

The problem with random blogs is that many of them are written by people trying to find an answer without much knowledge on the subject and often post very bad advice that does not necesarily address the actual issue. There are rare exceptions of knowledgeable people posting explanatory blogs, but if you search for an answer you have no way of knowing whether it is of the good kind. In addition, blogs tend to get out of date quickly, so what used to be a good advice may not be anymore (prime example was the R 4.0.0 release which made a lot of the "hacks" obsolete and the well-meant advice out there has only led to more problems).


> It?s on the readers themselves to decide whether such blog posts are trustworthy or useful.
> 

The problem is that generally they cannot. You are looking something up, because you don't know about it so you can't judge whether it is a good answer (SO is good example proving why crowd-souring the definition of truth doesn't generally work). At best you may know the person and thus judge by that, but even then you may not know if the information is still accurate.


> I have personally profited so often from blog posts of others already and therefore find the general advice to not consult such resources quite shortsighted.
> Of course the official documentation should always be the first point to have a look at - and in this case the required information would have been there.
> 
> Apologies for going partly off-topic but I think this point is important.
> 

I agree. That's why I think it would be great if those that have the knowledge would help the community to improve the documentation. Of all the contributions to R it is the easiest.

That said, I also agree that complementary information is very useful, in particular if it explains the "why" as well - which may be too far out of scope of the canonical documentation. In that case it is easier to spot mismatches, e.g., if it becomes out of date. It is not without precedent to reference such external documentation if it is maintained.

Anyway, I'd like to encourage everyone to contribute - it may be pointing out issues in the documentation or by sending PRs with proposed updates or posting here. Some did in the past (like you, Jan or Bob, thanks!), but the more contribute the better for the community. Often this may also uncover genuine issues that should be addressed rather than worked around (like the lack of the symlink in the gfortran-12 tar-ball discovered just this morning...).

Cheers,
Simon



> Cheers
> Patrick
> 
> On 23 Apr 2022, at 2:13, Simon Urbanek wrote:
> 
>> For posterity - please always consult
>> 
>> https://mac.r-project.org/tools/ (linked from CRAN)
>> 
>> The old locations like libs* are no longer updated and have been deprecated in favor of /tools and /bin which are maintained for all builds. Similarly, I would strongly discourage following any advice from blogs as they tend to be outdated, wrong or both.
>> 
>> Cheers
>> Simon
>> 


From @|mon@urb@nek @end|ng |rom R-project@org  Mon Apr 25 01:46:40 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Mon, 25 Apr 2022 11:46:40 +1200
Subject: [R-SIG-Mac] CRAN installer for macOS - directory permissions
In-Reply-To: <4F79D380-A4F5-4562-97C2-7B0C4693EEB7@gmail.com>
References: <36345395-F4E6-4069-9900-990E283FA7AC@gmail.com>
 <9200B51A-3A42-42B1-8E1F-4A31C61D5AFA@R-project.org>
 <4F79D380-A4F5-4562-97C2-7B0C4693EEB7@gmail.com>
Message-ID: <290E0344-9E1B-4979-B211-321B0633C606@R-project.org>

Patrick,

sorry fo the delayed reply - this was not a quick e-mail so I had to find time after the release :)


> On Apr 3, 2022, at 8:26 PM, Patrick Schratz <patrick.schratz at gmail.com> wrote:
> 
> Hi Simon,
> 
> thanks for your extensive reply.
> 
> The choice is deliberate: the admin group on macOS corresponds to users that are allowed to install system-wide software so it allows all admins on the machine to install packages which is the expected way on macOS.
> 
> I think this choice is unfortunate as it contrasts with existing behavior on other platforms where one needs to explicitly request admin privileges by either using sudo or starting R as an admin.
> On macOS, packages just go into the system lib ?silently? because of the write permissions granted via the admin group.
> See also my comments further down for more details on this.
> 

They don't go there "silently" as in unnoticed - they go there if you instruct R to do so. That's why there is an explicit choice in the Installer. Otherwise regular R rules apply.


> Also the versioning of the R framework as x.y is also deliberate - upgrading R to a new patch version does *not* require re-installation of packages, they work by design so in fact the system location is the safest way to do that. Also note that packages are never removed by the installer.
> 
> Thanks, I am aware that a patch update does not require a reinstallation as the packages are functional across minor versions.
> 
> I checked again and was indeed wrong, patch updates from the CRAN installer do not remove additional custom packages in the system lib.
> I was confused by some custom approaches of mine which cause this behavior - sorry for this!
> 
> So out of the items listed in "The problem" they are all not true with the exception of the comparison with the other platforms, but even that difference is very subtle as it only affects the default on the first installation and not regular use (and I'm, not even sure it that is true since admin users can still install in the system location on other platforms).
> 
> On Linux you would need to do explicitly invoke sudo R to allow writing into the system lib.
> The issue on macOS is that a regular start of R allows system lib write permissions.
> In my current view I think a similar behavior as on Linux would be great, i.e. to explicitly having to request admin privileges for this task.
> 

It only does so for admin users. Unlike "managed" unix systems, on macOS you have essentially two situations:

On a "personal" machine (like laptop) the user is the main user and admin. Therefore it makes a lot more sense for the user to use a single location for managing packages which is at the system level. This also allows easy R upgrades. In addition, locations in user home raise a lot of issues (see the various discussion where this bites people on Windows) due to interactions with software that does mirroring, backups etc.. Hence this approach "just works" as one would expect on a Mac. If the user wishes to use his/her private library, it is trivial - just click on "At User Level" and from then on all packages are managed user's local library just like on any other platform.

On a "managed" Mac the user is not an admin and therefore the behavior makes no difference. The status quo just makes it easier for admins to manage the shared library, but in reality this doesn't matter as one would assume the admins know what they are doing.


> I don?t understand the part ?as it only affects the default on the first installation and not regular use? of your reply - could you clarify this?
> Unless a user creates a user lib manually, packages will always go into the system lib - not only on first use - but I might be misunderstanding your comment here.
> 
> I would argue that the current setup tends to be a lot safer than the alternatives, because it allows commonly used packages to be installed at the system level and private packages to be installed at user level. This is also the design typically used on shared machines, where you separate local packages from user packages where local ones are installed by administrators - so exactly the same setup. Moreover R upgrades are a lot cleaner, since you can easily upgrade all system packages at once so you don't have to worry about individual users having stale packages - the biggest problem for admins.
> 
> Yes and no.
> Sometimes system admins want to install certain packages globally - however, I never do so for the following reason:
> Often this will lead to multiple package installations, i.e. one in the syslib and one in the user lib (if the user installs the package again for some reason which quite often happens).
> Often these duplicated packages will have different versions and users are confused which one is actually loaded (the user lib one is as it is first in the path).
> 
> Aside from this practical point, Macs are rarely used in a shared way.
> And even if, I?d highly favor having to request write permissions into the syslib rather it happening by default.
> 
> Imagine a scenario where the admin of a shared Mac constantly writes into the syslib (because this is the default). This syslib is then also used by other non-admin users on the system.
> I don?t think this is a desired scenario and might cause lot?s of confusion (not even mentioning the fact if all people in this scenario are aware what?s going on given that this is a niche topic).
> Here I think a one-time central installation of R and then only working with user libs (as on Linux) would be preferable.
> 

Well, having administered company-wide R installations in large companies for almost two decades I'd strongly disagree. As an admin you want as few user-installed packages as possible, because they are guaranteed to cause problems. You want to limit this for things like development of packages where you want the stable version globally and development version locally (and this is not just me - have a look how the top tech companies manage their software). You have a reliable, stable central location - if you don't do that then you'll have n libraries to manage for n users which is absolutely not sustainable as users will break their libraries and you cannot even upgrade R. Also having a central, shared library is crucial for collaboration. Unlike in Python in R it actually works since R and CRAN doesn't allow randomly breaking reverse-dependencies.


> From a technical perspective, I know that setting root:root on macOS is not possible. My proposed change to 755 (and leaving root:admin) would however exactly mimic this (and the one of Linux installs) behavior:
> 
> 	? admins would need to do sudo R to install into the system library
> 	? otherwise they are prompted to create a user library
> Which downsides would this approach have? Currently I don?t see any. It would even harmonize CRAN installer behavior across platforms.
> 
> I'd be happy to hear from more Mac user if there are reasons to change the default, but as I outlined the choices were deliberate after weighting the pros and cons. In my view the major issue with the proposal it that is would prevent sharing of packages, make R upgrades a lot harder and prevent admin users from using the current tools for package management - and that includes the ability to separate system and user packages on single-user machines.
> 
> I?ll try to vision the practical changes of this:
> 
> 	? Patch update experience would not change as custom packages will be in the user lib for the respective minor version (by default)
> 	? Admins are still able to install into the system lib when using sudo R
> 	? AFAICS admins will still be able to separate system and user packages as they can use sudo R for syslib installs. To me, the proposed change would even make the behaviour more clear than before (which requires to create a hidden folder (user lib) in the right place to actually use a user lib).
> Let me know if I overlook something - but currently I don?t see any downside but various positive impacts.
> 

As mentioned before and above I disagree. The proposal doesn't matter for managed Macs but would negatively affect users that are single-user admins and since that is typically the case for the majority of Mac R users (as they typically are on their personal machines) I don't see any upshot. All it would do is to prevent typical R users to install packages directly.


> Last, I wanted to ask if the source code for the CRAN installer is publicly available? I could not find it and would be interested to take a look into it. If this is not possible for some reason, I would also be interested in getting to know the reason for this decision.
> 


Everything is in the R SVN, the R build and release system is in
https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4
and Apple Installer packaging is in
https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging
and the relevant postflight script is in
https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging/scripts-R-fw/postflight


> On Apr 13, 2022, at 8:43 PM, Patrick Schratz <patrick.schratz at gmail.com> wrote:
> 
> Related to this Q: Are the macOS CRAN policies actively discussed by a team of people (who might eventually also be willing to share their thoughts or could be addressed with such questions) or are you solely responsible for it?
> 


CRAN is an entire team, so yes, but as for anything Mac-related it includes R-core and other stake holders that have expressed interest before (e.g. Bioconductor). Obviously, this (R-SIG-Mac) is also a good place as that includes anyone who cares about R on macOS.

Cheers,
Simon


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Apr 25 15:09:14 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 25 Apr 2022 09:09:14 -0400
Subject: [R-SIG-Mac] lldb not finding libRblas.dylib
Message-ID: <10d65738-bbb9-43f7-c1b9-81d1f58d30ad@stats.uwo.ca>

I wanted to debug an error in my attempt to fix PR#18328, but I can't 
seem to run R under lldb:


murdoch at djmair3 ~/R/R-devel
$ bin/R -d lldb
(lldb) target create "/Users/murdoch/R/R-devel/bin/exec/R"
Current executable set to '/Users/murdoch/R/R-devel/bin/exec/R' (x86_64).
(lldb) run
Process 98432 launched: '/Users/murdoch/R/R-devel/bin/exec/R' (x86_64)
dyld: Library not loaded: libRblas.dylib
 ? Referenced from: /Users/murdoch/R/R-devel/bin/exec/R
 ? Reason: image not found
Process 98432 stopped
* thread #1, stop reason = signal SIGABRT
 ??? frame #0: 0x00000001004fe05e dyld`__abort_with_payload + 10
dyld`__abort_with_payload:
->? 0x1004fe05e <+10>: jae??? 0x1004fe068?????????????? ; <+20>
 ??? 0x1004fe060 <+12>: movq?? %rax, %rdi
 ??? 0x1004fe063 <+15>: jmp??? 0x1004fc588?????????????? ; cerror_nocancel
 ??? 0x1004fe068 <+20>: retq
Target 0: (R) stopped.

This is on an Intel Mac running Catalina, 10.15.7.? I have the current 
svn source, r82250, with only src/main/gram.c and src/main/gram.y 
changed.? If I look in the R-devel directory after building, I do find 
the file:

$ find . -name libRblas.dylib
./lib/libRblas.dylib
./src/extra/blas/libRblas.dylib

Can anyone suggest what is going wrong?

Duncan Murdoch


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Mon Apr 25 15:26:39 2022
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Mon, 25 Apr 2022 14:26:39 +0100
Subject: [R-SIG-Mac] lldb not finding libRblas.dylib
In-Reply-To: <10d65738-bbb9-43f7-c1b9-81d1f58d30ad@stats.uwo.ca>
References: <10d65738-bbb9-43f7-c1b9-81d1f58d30ad@stats.uwo.ca>
Message-ID: <ce78e70c-acf6-2641-c26b-31634312712e@stats.ox.ac.uk>

On 25/04/2022 14:09, Duncan Murdoch wrote:
> I wanted to debug an error in my attempt to fix PR#18328, but I can't 
> seem to run R under lldb:
> 
> 
> murdoch at djmair3 ~/R/R-devel
> $ bin/R -d lldb
> (lldb) target create "/Users/murdoch/R/R-devel/bin/exec/R"
> Current executable set to '/Users/murdoch/R/R-devel/bin/exec/R' (x86_64).
> (lldb) run
> Process 98432 launched: '/Users/murdoch/R/R-devel/bin/exec/R' (x86_64)
> dyld: Library not loaded: libRblas.dylib
>  ? Referenced from: /Users/murdoch/R/R-devel/bin/exec/R
>  ? Reason: image not found
> Process 98432 stopped
> * thread #1, stop reason = signal SIGABRT
>  ??? frame #0: 0x00000001004fe05e dyld`__abort_with_payload + 10
> dyld`__abort_with_payload:
> ->? 0x1004fe05e <+10>: jae??? 0x1004fe068?????????????? ; <+20>
>  ??? 0x1004fe060 <+12>: movq?? %rax, %rdi
>  ??? 0x1004fe063 <+15>: jmp??? 0x1004fc588?????????????? ; cerror_nocancel
>  ??? 0x1004fe068 <+20>: retq
> Target 0: (R) stopped.
> 
> This is on an Intel Mac running Catalina, 10.15.7.? I have the current 
> svn source, r82250, with only src/main/gram.c and src/main/gram.y 
> changed.? If I look in the R-devel directory after building, I do find 
> the file:
> 
> $ find . -name libRblas.dylib
> ./lib/libRblas.dylib
> ./src/extra/blas/libRblas.dylib
> 
> Can anyone suggest what is going wrong?

Looks like ?4.4.3 of R-exts.  Have you tried the workarounds there?

I almost always attach a debugger on macOS, as suggested there.

I believe this is a self-build, but

https://cran.r-project.org/bin/macosx/RMacOSX-FAQ.html#I-cannot-attach-debugger-to-R

is worth knowing about if you ever want to debug a binary version of R.

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Apr 25 18:14:21 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 25 Apr 2022 12:14:21 -0400
Subject: [R-SIG-Mac] lldb not finding libRblas.dylib
In-Reply-To: <ce78e70c-acf6-2641-c26b-31634312712e@stats.ox.ac.uk>
References: <10d65738-bbb9-43f7-c1b9-81d1f58d30ad@stats.uwo.ca>
 <ce78e70c-acf6-2641-c26b-31634312712e@stats.ox.ac.uk>
Message-ID: <dcf11d0c-e8fc-6afc-ce90-874dbdd0901f@gmail.com>

Thanks, that worked.

BTW, I think there's a typo in the manual.  In the suggestion to connect 
to a running process it says

     pw -ef | grep exec/R
     # identify the pid pid for the next command

I think that should be "ps", not "pw".  And for rare ps users like me, 
it might be worth mentioning that the pid is the second value reported, 
since the grep removes the title line.

Duncan Murdoch


On 25/04/2022 9:26 a.m., Prof Brian Ripley wrote:
> On 25/04/2022 14:09, Duncan Murdoch wrote:
>> I wanted to debug an error in my attempt to fix PR#18328, but I can't
>> seem to run R under lldb:
>>
>>
>> murdoch at djmair3 ~/R/R-devel
>> $ bin/R -d lldb
>> (lldb) target create "/Users/murdoch/R/R-devel/bin/exec/R"
>> Current executable set to '/Users/murdoch/R/R-devel/bin/exec/R' (x86_64).
>> (lldb) run
>> Process 98432 launched: '/Users/murdoch/R/R-devel/bin/exec/R' (x86_64)
>> dyld: Library not loaded: libRblas.dylib
>>   ? Referenced from: /Users/murdoch/R/R-devel/bin/exec/R
>>   ? Reason: image not found
>> Process 98432 stopped
>> * thread #1, stop reason = signal SIGABRT
>>   ??? frame #0: 0x00000001004fe05e dyld`__abort_with_payload + 10
>> dyld`__abort_with_payload:
>> ->? 0x1004fe05e <+10>: jae??? 0x1004fe068?????????????? ; <+20>
>>   ??? 0x1004fe060 <+12>: movq?? %rax, %rdi
>>   ??? 0x1004fe063 <+15>: jmp??? 0x1004fc588?????????????? ; cerror_nocancel
>>   ??? 0x1004fe068 <+20>: retq
>> Target 0: (R) stopped.
>>
>> This is on an Intel Mac running Catalina, 10.15.7.? I have the current
>> svn source, r82250, with only src/main/gram.c and src/main/gram.y
>> changed.? If I look in the R-devel directory after building, I do find
>> the file:
>>
>> $ find . -name libRblas.dylib
>> ./lib/libRblas.dylib
>> ./src/extra/blas/libRblas.dylib
>>
>> Can anyone suggest what is going wrong?
> 
> Looks like ?4.4.3 of R-exts.  Have you tried the workarounds there?
> 
> I almost always attach a debugger on macOS, as suggested there.
> 
> I believe this is a self-build, but
> 
> https://cran.r-project.org/bin/macosx/RMacOSX-FAQ.html#I-cannot-attach-debugger-to-R
> 
> is worth knowing about if you ever want to debug a binary version of R.
>


From j|ox @end|ng |rom mcm@@ter@c@  Mon Apr 25 21:04:24 2022
From: j|ox @end|ng |rom mcm@@ter@c@ (John Fox)
Date: Mon, 25 Apr 2022 15:04:24 -0400
Subject: [R-SIG-Mac] R CMD check "HTML version of manual" NOTE/Warnings
Message-ID: <8c7b94c4-b0de-0e32-da29-0d6701e503e7@mcmaster.ca>

Dear R-sig-mac list members,

When checking packages --as-cran with R 4.2.0 (and R 4.2.0 patched), I'm 
seeing multiple warnings (and a NOTE) concerning the HTML version of the 
package help-page manuals. The warning appears for every .Rd file in all 
of the packages that I've checked. I didn't see this problem before R 
4.2.0.

I'm writing to the r-sig-mac list rather than r-package-devel because I 
don't encounter the same problem under Windows. Nor does it appear on 
the CRAN check pages for the packages.

I know that there's been discussion of adding an HTML manual, which 
seems a good idea, but I didn't realize that this has apparently already 
been implemented.

Has anyone else experienced this problem or does anyone understand its 
source? AFAIK, there's nothing unusual about the R installation on my 
Mac, but of course there may be some setting that inadvertently turned 
on checking the HTML manual.

Here's an example (with many lines elided, . . .):

------ snip ------

Johns-MacBook-Pro:car johnfox$ R CMD check --as-cran car_3.0-13.tar.gz
* using log directory 
'/Users/johnfox/Documents/R-package-sources/car/car.Rcheck'
* using R version 4.2.0 Patched (2022-04-24 r82246)
* using platform: aarch64-apple-darwin20 (64-bit)
* using session charset: UTF-8
* using option '--as-cran'
* checking for file 'car/DESCRIPTION' ... OK
* this is package 'car' version '3.0-13'
* checking CRAN incoming feasibility ... Note_to_CRAN_maintainers
Maintainer: 'John Fox <jfox at mcmaster.ca>'
* checking package namespace information ... OK

. . .

* checking PDF version of manual ... OK
* checking HTML version of manual ... NOTE
Found the following problems:
Anova.Rd:4:1: Warning: <link> inserting "type" attribute
Anova.Rd:12:1: Warning: <script> proprietary attribute "onload"
Anova.Rd:12:1: Warning: <script> inserting "type" attribute
Anova.Rd:17:1: Warning: <table> lacks "summary" attribute
Anova.Rd:135:1: Warning: <table> lacks "summary" attribute
Anova.Rd:285:1: Warning: <table> lacks "summary" attribute
Boot.Rd:4:1: Warning: <link> inserting "type" attribute
Boot.Rd:12:1: Warning: <script> proprietary attribute "onload"
Boot.Rd:12:1: Warning: <script> inserting "type" attribute
Boot.Rd:17:1: Warning: <table> lacks "summary" attribute
Boot.Rd:56:1: Warning: <table> lacks "summary" attribute

. . .

which.names.Rd:12:1: Warning: <script> proprietary attribute "onload"
which.names.Rd:12:1: Warning: <script> inserting "type" attribute
which.names.Rd:17:1: Warning: <table> lacks "summary" attribute
which.names.Rd:44:1: Warning: <table> lacks "summary" attribute
* checking for non-standard things in the check directory ... OK
* checking for detritus in the temp directory ... OK
* DONE

Status: 1 NOTE
See
   '/Users/johnfox/Documents/R-package-sources/car/car.Rcheck/00check.log'
for details.

------ snip ------

Any help would be appreciated.

Thanks,
  John
-- 
John Fox, Professor Emeritus
McMaster University
Hamilton, Ontario, Canada
web: https://socialsciences.mcmaster.ca/jfox/


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Mon Apr 25 22:51:56 2022
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Mon, 25 Apr 2022 21:51:56 +0100
Subject: [R-SIG-Mac] R CMD check "HTML version of manual" NOTE/Warnings
In-Reply-To: <8c7b94c4-b0de-0e32-da29-0d6701e503e7@mcmaster.ca>
References: <8c7b94c4-b0de-0e32-da29-0d6701e503e7@mcmaster.ca>
Message-ID: <e964b23d-0905-c7a4-4474-98032268d017@stats.ox.ac.uk>

On 25/04/2022 20:04, John Fox wrote:
> Dear R-sig-mac list members,
> 
> When checking packages --as-cran with R 4.2.0 (and R 4.2.0 patched), I'm 
> seeing multiple warnings (and a NOTE) concerning the HTML version of the 
> package help-page manuals. The warning appears for every .Rd file in all 
> of the packages that I've checked. I didn't see this problem before R 
> 4.2.0.
> 
> I'm writing to the r-sig-mac list rather than r-package-devel because I 

Unfortunately the authors of this are not on r-sig-mac.

> don't encounter the same problem under Windows. Nor does it appear on 
> the CRAN check pages for the packages.

This check is only done if you have 'tidy' on the path.  My Monterey M1 
MBP has

auk2% tidy --version
HTML Tidy for Mac OS X released on 31 October 2006 - Apple Inc. build 2649

I think that is far too old.  The short answer is to ignore these, or 
update tidy (from http://binaries.html-tidy.org/) which (5.8.0) finds 
different issues for car that I do not see on Fedora (with 5.7.16).

Probably your Windows machine does not have tidy installed.

> I know that there's been discussion of adding an HTML manual, which 
> seems a good idea, but I didn't realize that this has apparently already 
> been implemented.
> 
> Has anyone else experienced this problem or does anyone understand its 
> source? AFAIK, there's nothing unusual about the R installation on my 
> Mac, but of course there may be some setting that inadvertently turned 
> on checking the HTML manual.

--as-cran turned it on ((f tidy is available).


> 
> Here's an example (with many lines elided, . . .):
> 
> ------ snip ------
> 
> Johns-MacBook-Pro:car johnfox$ R CMD check --as-cran car_3.0-13.tar.gz
> * using log directory 
> '/Users/johnfox/Documents/R-package-sources/car/car.Rcheck'
> * using R version 4.2.0 Patched (2022-04-24 r82246)
> * using platform: aarch64-apple-darwin20 (64-bit)
> * using session charset: UTF-8
> * using option '--as-cran'
> * checking for file 'car/DESCRIPTION' ... OK
> * this is package 'car' version '3.0-13'
> * checking CRAN incoming feasibility ... Note_to_CRAN_maintainers
> Maintainer: 'John Fox <jfox at mcmaster.ca>'
> * checking package namespace information ... OK
> 
> . . .
> 
> * checking PDF version of manual ... OK
> * checking HTML version of manual ... NOTE
> Found the following problems:
> Anova.Rd:4:1: Warning: <link> inserting "type" attribute
> Anova.Rd:12:1: Warning: <script> proprietary attribute "onload"
> Anova.Rd:12:1: Warning: <script> inserting "type" attribute
> Anova.Rd:17:1: Warning: <table> lacks "summary" attribute
> Anova.Rd:135:1: Warning: <table> lacks "summary" attribute
> Anova.Rd:285:1: Warning: <table> lacks "summary" attribute
> Boot.Rd:4:1: Warning: <link> inserting "type" attribute
> Boot.Rd:12:1: Warning: <script> proprietary attribute "onload"
> Boot.Rd:12:1: Warning: <script> inserting "type" attribute
> Boot.Rd:17:1: Warning: <table> lacks "summary" attribute
> Boot.Rd:56:1: Warning: <table> lacks "summary" attribute
> 
> . . .
> 
> which.names.Rd:12:1: Warning: <script> proprietary attribute "onload"
> which.names.Rd:12:1: Warning: <script> inserting "type" attribute
> which.names.Rd:17:1: Warning: <table> lacks "summary" attribute
> which.names.Rd:44:1: Warning: <table> lacks "summary" attribute
> * checking for non-standard things in the check directory ... OK
> * checking for detritus in the temp directory ... OK
> * DONE
> 
> Status: 1 NOTE
> See
>  ? '/Users/johnfox/Documents/R-package-sources/car/car.Rcheck/00check.log'
> for details.
> 
> ------ snip ------
> 
> Any help would be appreciated.
> 
> Thanks,
>  ?John


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From j|ox @end|ng |rom mcm@@ter@c@  Tue Apr 26 16:25:00 2022
From: j|ox @end|ng |rom mcm@@ter@c@ (John Fox)
Date: Tue, 26 Apr 2022 10:25:00 -0400
Subject: [R-SIG-Mac] R CMD check "HTML version of manual" NOTE/Warnings
In-Reply-To: <e964b23d-0905-c7a4-4474-98032268d017@stats.ox.ac.uk>
References: <8c7b94c4-b0de-0e32-da29-0d6701e503e7@mcmaster.ca>
 <e964b23d-0905-c7a4-4474-98032268d017@stats.ox.ac.uk>
Message-ID: <e790b76b-e615-2fce-dcec-e09efabd59b5@mcmaster.ca>

Dear Brian,

Thank you very much for the explanation. Please see interline below:

On 2022-04-25 4:51 p.m., Prof Brian Ripley wrote:
> On 25/04/2022 20:04, John Fox wrote:
>> Dear R-sig-mac list members,
>>
>> When checking packages --as-cran with R 4.2.0 (and R 4.2.0 patched), 
>> I'm seeing multiple warnings (and a NOTE) concerning the HTML version 
>> of the package help-page manuals. The warning appears for every .Rd 
>> file in all of the packages that I've checked. I didn't see this 
>> problem before R 4.2.0.
>>
>> I'm writing to the r-sig-mac list rather than r-package-devel because I 
> 
> Unfortunately the authors of this are not on r-sig-mac.

Should I mention this as well on r-package-devel?

> 
>> don't encounter the same problem under Windows. Nor does it appear on 
>> the CRAN check pages for the packages.
> 
> This check is only done if you have 'tidy' on the path.? My Monterey M1 
> MBP has
> 
> auk2% tidy --version
> HTML Tidy for Mac OS X released on 31 October 2006 - Apple Inc. build 2649

That's exactly the version installed on my MacBook Pro. Is this standard 
for Monterey? If not, would it be best simply to remove tidy (and how 
did it get there?).

> 
> I think that is far too old.? The short answer is to ignore these, or 
> update tidy (from http://binaries.html-tidy.org/) which (5.8.0) finds 
> different issues for car that I do not see on Fedora (with 5.7.16).

I saw these warnings for every .Rd file in all of the packages I 
checked, not just for the car package. The HTML is presumably generated 
from the .Rd files by the R installation process. If tidy is general, or 
common, on Monterey Macs, I wonder why others aren't reporting similar 
warnings on R CMD check --as-cran.

> 
> Probably your Windows machine does not have tidy installed.
> 
>> I know that there's been discussion of adding an HTML manual, which 
>> seems a good idea, but I didn't realize that this has apparently 
>> already been implemented.
>>
>> Has anyone else experienced this problem or does anyone understand its 
>> source? AFAIK, there's nothing unusual about the R installation on my 
>> Mac, but of course there may be some setting that inadvertently turned 
>> on checking the HTML manual.
> 
> --as-cran turned it on ((f tidy is available).

Again, thank you for the explanation.

Best,
  John

> 
> 
>>
>> Here's an example (with many lines elided, . . .):
>>
>> ------ snip ------
>>
>> Johns-MacBook-Pro:car johnfox$ R CMD check --as-cran car_3.0-13.tar.gz
>> * using log directory 
>> '/Users/johnfox/Documents/R-package-sources/car/car.Rcheck'
>> * using R version 4.2.0 Patched (2022-04-24 r82246)
>> * using platform: aarch64-apple-darwin20 (64-bit)
>> * using session charset: UTF-8
>> * using option '--as-cran'
>> * checking for file 'car/DESCRIPTION' ... OK
>> * this is package 'car' version '3.0-13'
>> * checking CRAN incoming feasibility ... Note_to_CRAN_maintainers
>> Maintainer: 'John Fox <jfox at mcmaster.ca>'
>> * checking package namespace information ... OK
>>
>> . . .
>>
>> * checking PDF version of manual ... OK
>> * checking HTML version of manual ... NOTE
>> Found the following problems:
>> Anova.Rd:4:1: Warning: <link> inserting "type" attribute
>> Anova.Rd:12:1: Warning: <script> proprietary attribute "onload"
>> Anova.Rd:12:1: Warning: <script> inserting "type" attribute
>> Anova.Rd:17:1: Warning: <table> lacks "summary" attribute
>> Anova.Rd:135:1: Warning: <table> lacks "summary" attribute
>> Anova.Rd:285:1: Warning: <table> lacks "summary" attribute
>> Boot.Rd:4:1: Warning: <link> inserting "type" attribute
>> Boot.Rd:12:1: Warning: <script> proprietary attribute "onload"
>> Boot.Rd:12:1: Warning: <script> inserting "type" attribute
>> Boot.Rd:17:1: Warning: <table> lacks "summary" attribute
>> Boot.Rd:56:1: Warning: <table> lacks "summary" attribute
>>
>> . . .
>>
>> which.names.Rd:12:1: Warning: <script> proprietary attribute "onload"
>> which.names.Rd:12:1: Warning: <script> inserting "type" attribute
>> which.names.Rd:17:1: Warning: <table> lacks "summary" attribute
>> which.names.Rd:44:1: Warning: <table> lacks "summary" attribute
>> * checking for non-standard things in the check directory ... OK
>> * checking for detritus in the temp directory ... OK
>> * DONE
>>
>> Status: 1 NOTE
>> See
>>    
>> '/Users/johnfox/Documents/R-package-sources/car/car.Rcheck/00check.log'
>> for details.
>>
>> ------ snip ------
>>
>> Any help would be appreciated.
>>
>> Thanks,
>> ??John
> 
> 
-- 
John Fox, Professor Emeritus
McMaster University
Hamilton, Ontario, Canada
web: https://socialsciences.mcmaster.ca/jfox/


From pd@|gd @end|ng |rom gm@||@com  Tue Apr 26 16:43:25 2022
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Tue, 26 Apr 2022 16:43:25 +0200
Subject: [R-SIG-Mac] R CMD check "HTML version of manual" NOTE/Warnings
In-Reply-To: <e790b76b-e615-2fce-dcec-e09efabd59b5@mcmaster.ca>
References: <8c7b94c4-b0de-0e32-da29-0d6701e503e7@mcmaster.ca>
 <e964b23d-0905-c7a4-4474-98032268d017@stats.ox.ac.uk>
 <e790b76b-e615-2fce-dcec-e09efabd59b5@mcmaster.ca>
Message-ID: <F963B5EF-0F5F-4D18-87FF-1640E57D2E1A@gmail.com>

Yes, I think this should go to r-package-devel or maybe even file a bug report against "R CMD check". Looks like we "just" need to revise the logic at the start of check_Rd2HTML():

    check_Rd2HTML <- function(pkgdir) {
        if(!nzchar(Sys.which("tidy")) ||
           !startsWith(system2("tidy", "--version", stdout = TRUE),
                       "HTML Tidy"))
            return()

to either 

- look for a version number (which the Apple builds don't have) 
- explicitly reject the 2006 Apple builds
- somehow allow for an override using an environment variable

or thereabouts...

- pd

> On 26 Apr 2022, at 16:25 , John Fox <jfox at mcmaster.ca> wrote:
> 
> Dear Brian,
> 
> Thank you very much for the explanation. Please see interline below:
> 
> On 2022-04-25 4:51 p.m., Prof Brian Ripley wrote:
>> On 25/04/2022 20:04, John Fox wrote:
>>> Dear R-sig-mac list members,
>>> 
>>> When checking packages --as-cran with R 4.2.0 (and R 4.2.0 patched), I'm seeing multiple warnings (and a NOTE) concerning the HTML version of the package help-page manuals. The warning appears for every .Rd file in all of the packages that I've checked. I didn't see this problem before R 4.2.0.
>>> 
>>> I'm writing to the r-sig-mac list rather than r-package-devel because I 
>> Unfortunately the authors of this are not on r-sig-mac.
> 
> Should I mention this as well on r-package-devel?
> 
>>> don't encounter the same problem under Windows. Nor does it appear on the CRAN check pages for the packages.
>> This check is only done if you have 'tidy' on the path.  My Monterey M1 MBP has
>> auk2% tidy --version
>> HTML Tidy for Mac OS X released on 31 October 2006 - Apple Inc. build 2649
> 
> That's exactly the version installed on my MacBook Pro. Is this standard for Monterey? If not, would it be best simply to remove tidy (and how did it get there?).
> 
>> I think that is far too old.  The short answer is to ignore these, or update tidy (from http://binaries.html-tidy.org/) which (5.8.0) finds different issues for car that I do not see on Fedora (with 5.7.16).
> 
> I saw these warnings for every .Rd file in all of the packages I checked, not just for the car package. The HTML is presumably generated from the .Rd files by the R installation process. If tidy is general, or common, on Monterey Macs, I wonder why others aren't reporting similar warnings on R CMD check --as-cran.
> 
>> Probably your Windows machine does not have tidy installed.
>>> I know that there's been discussion of adding an HTML manual, which seems a good idea, but I didn't realize that this has apparently already been implemented.
>>> 
>>> Has anyone else experienced this problem or does anyone understand its source? AFAIK, there's nothing unusual about the R installation on my Mac, but of course there may be some setting that inadvertently turned on checking the HTML manual.
>> --as-cran turned it on ((f tidy is available).
> 
> Again, thank you for the explanation.
> 
> Best,
> John
> 
>>> 
>>> Here's an example (with many lines elided, . . .):
>>> 
>>> ------ snip ------
>>> 
>>> Johns-MacBook-Pro:car johnfox$ R CMD check --as-cran car_3.0-13.tar.gz
>>> * using log directory '/Users/johnfox/Documents/R-package-sources/car/car.Rcheck'
>>> * using R version 4.2.0 Patched (2022-04-24 r82246)
>>> * using platform: aarch64-apple-darwin20 (64-bit)
>>> * using session charset: UTF-8
>>> * using option '--as-cran'
>>> * checking for file 'car/DESCRIPTION' ... OK
>>> * this is package 'car' version '3.0-13'
>>> * checking CRAN incoming feasibility ... Note_to_CRAN_maintainers
>>> Maintainer: 'John Fox <jfox at mcmaster.ca>'
>>> * checking package namespace information ... OK
>>> 
>>> . . .
>>> 
>>> * checking PDF version of manual ... OK
>>> * checking HTML version of manual ... NOTE
>>> Found the following problems:
>>> Anova.Rd:4:1: Warning: <link> inserting "type" attribute
>>> Anova.Rd:12:1: Warning: <script> proprietary attribute "onload"
>>> Anova.Rd:12:1: Warning: <script> inserting "type" attribute
>>> Anova.Rd:17:1: Warning: <table> lacks "summary" attribute
>>> Anova.Rd:135:1: Warning: <table> lacks "summary" attribute
>>> Anova.Rd:285:1: Warning: <table> lacks "summary" attribute
>>> Boot.Rd:4:1: Warning: <link> inserting "type" attribute
>>> Boot.Rd:12:1: Warning: <script> proprietary attribute "onload"
>>> Boot.Rd:12:1: Warning: <script> inserting "type" attribute
>>> Boot.Rd:17:1: Warning: <table> lacks "summary" attribute
>>> Boot.Rd:56:1: Warning: <table> lacks "summary" attribute
>>> 
>>> . . .
>>> 
>>> which.names.Rd:12:1: Warning: <script> proprietary attribute "onload"
>>> which.names.Rd:12:1: Warning: <script> inserting "type" attribute
>>> which.names.Rd:17:1: Warning: <table> lacks "summary" attribute
>>> which.names.Rd:44:1: Warning: <table> lacks "summary" attribute
>>> * checking for non-standard things in the check directory ... OK
>>> * checking for detritus in the temp directory ... OK
>>> * DONE
>>> 
>>> Status: 1 NOTE
>>> See
>>>   '/Users/johnfox/Documents/R-package-sources/car/car.Rcheck/00check.log'
>>> for details.
>>> 
>>> ------ snip ------
>>> 
>>> Any help would be appreciated.
>>> 
>>> Thanks,
>>>   John
> -- 
> John Fox, Professor Emeritus
> McMaster University
> Hamilton, Ontario, Canada
> web: https://socialsciences.mcmaster.ca/jfox/
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Tue Apr 26 17:22:05 2022
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Tue, 26 Apr 2022 16:22:05 +0100
Subject: [R-SIG-Mac] R CMD check "HTML version of manual" NOTE/Warnings
In-Reply-To: <F963B5EF-0F5F-4D18-87FF-1640E57D2E1A@gmail.com>
References: <8c7b94c4-b0de-0e32-da29-0d6701e503e7@mcmaster.ca>
 <e964b23d-0905-c7a4-4474-98032268d017@stats.ox.ac.uk>
 <e790b76b-e615-2fce-dcec-e09efabd59b5@mcmaster.ca>
 <F963B5EF-0F5F-4D18-87FF-1640E57D2E1A@gmail.com>
Message-ID: <c5fc924b-8154-b541-41b1-0d10a3fe2475@stats.ox.ac.uk>

On 26/04/2022 15:43, peter dalgaard wrote:
> Yes, I think this should go to r-package-devel or maybe even file a bug report against "R CMD check". Looks like we "just" need to revise the logic at the start of check_Rd2HTML():
> 
>      check_Rd2HTML <- function(pkgdir) {
>          if(!nzchar(Sys.which("tidy")) ||
>             !startsWith(system2("tidy", "--version", stdout = TRUE),
>                         "HTML Tidy"))
>              return()
> 
> to either
> 
> - look for a version number (which the Apple builds don't have)
> - explicitly reject the 2006 Apple builds
> - somehow allow for an override using an environment variable

This is switched on by _R_CHECK_RD_VALIDATE_RD2HTML_=true or --as-cran. 
  I plan to at least let _R_CHECK_RD_VALIDATE_RD2HTML_=false override 
--as-cran.

There seems to have been a report on r-package-devel not mentioning macOS:

https://stat.ethz.ch/pipermail/r-package-devel/2022q1/007804.html
https://stat.ethz.ch/pipermail/r-package-devel/2022q2/007932.html

but I don't think anyone had a clue that the macOS 'tidy' might be 
insufficient.

> 
> or thereabouts...
> 
> - pd
> 
>> On 26 Apr 2022, at 16:25 , John Fox <jfox at mcmaster.ca> wrote:
>>
>> Dear Brian,
>>
>> Thank you very much for the explanation. Please see interline below:
>>
>> On 2022-04-25 4:51 p.m., Prof Brian Ripley wrote:
>>> On 25/04/2022 20:04, John Fox wrote:
>>>> Dear R-sig-mac list members,
>>>>
>>>> When checking packages --as-cran with R 4.2.0 (and R 4.2.0 patched), I'm seeing multiple warnings (and a NOTE) concerning the HTML version of the package help-page manuals. The warning appears for every .Rd file in all of the packages that I've checked. I didn't see this problem before R 4.2.0.
>>>>
>>>> I'm writing to the r-sig-mac list rather than r-package-devel because I
>>> Unfortunately the authors of this are not on r-sig-mac.
>>
>> Should I mention this as well on r-package-devel?
>>
>>>> don't encounter the same problem under Windows. Nor does it appear on the CRAN check pages for the packages.
>>> This check is only done if you have 'tidy' on the path.  My Monterey M1 MBP has
>>> auk2% tidy --version
>>> HTML Tidy for Mac OS X released on 31 October 2006 - Apple Inc. build 2649
>>
>> That's exactly the version installed on my MacBook Pro. Is this standard for Monterey? If not, would it be best simply to remove tidy (and how did it get there?).
>>
>>> I think that is far too old.  The short answer is to ignore these, or update tidy (from http://binaries.html-tidy.org/) which (5.8.0) finds different issues for car that I do not see on Fedora (with 5.7.16).
>>
>> I saw these warnings for every .Rd file in all of the packages I checked, not just for the car package. The HTML is presumably generated from the .Rd files by the R installation process. If tidy is general, or common, on Monterey Macs, I wonder why others aren't reporting similar warnings on R CMD check --as-cran.
>>
>>> Probably your Windows machine does not have tidy installed.
>>>> I know that there's been discussion of adding an HTML manual, which seems a good idea, but I didn't realize that this has apparently already been implemented.
>>>>
>>>> Has anyone else experienced this problem or does anyone understand its source? AFAIK, there's nothing unusual about the R installation on my Mac, but of course there may be some setting that inadvertently turned on checking the HTML manual.
>>> --as-cran turned it on ((f tidy is available).
>>
>> Again, thank you for the explanation.
>>
>> Best,
>> John
>>
>>>>
>>>> Here's an example (with many lines elided, . . .):
>>>>
>>>> ------ snip ------
>>>>
>>>> Johns-MacBook-Pro:car johnfox$ R CMD check --as-cran car_3.0-13.tar.gz
>>>> * using log directory '/Users/johnfox/Documents/R-package-sources/car/car.Rcheck'
>>>> * using R version 4.2.0 Patched (2022-04-24 r82246)
>>>> * using platform: aarch64-apple-darwin20 (64-bit)
>>>> * using session charset: UTF-8
>>>> * using option '--as-cran'
>>>> * checking for file 'car/DESCRIPTION' ... OK
>>>> * this is package 'car' version '3.0-13'
>>>> * checking CRAN incoming feasibility ... Note_to_CRAN_maintainers
>>>> Maintainer: 'John Fox <jfox at mcmaster.ca>'
>>>> * checking package namespace information ... OK
>>>>
>>>> . . .
>>>>
>>>> * checking PDF version of manual ... OK
>>>> * checking HTML version of manual ... NOTE
>>>> Found the following problems:
>>>> Anova.Rd:4:1: Warning: <link> inserting "type" attribute
>>>> Anova.Rd:12:1: Warning: <script> proprietary attribute "onload"
>>>> Anova.Rd:12:1: Warning: <script> inserting "type" attribute
>>>> Anova.Rd:17:1: Warning: <table> lacks "summary" attribute
>>>> Anova.Rd:135:1: Warning: <table> lacks "summary" attribute
>>>> Anova.Rd:285:1: Warning: <table> lacks "summary" attribute
>>>> Boot.Rd:4:1: Warning: <link> inserting "type" attribute
>>>> Boot.Rd:12:1: Warning: <script> proprietary attribute "onload"
>>>> Boot.Rd:12:1: Warning: <script> inserting "type" attribute
>>>> Boot.Rd:17:1: Warning: <table> lacks "summary" attribute
>>>> Boot.Rd:56:1: Warning: <table> lacks "summary" attribute
>>>>
>>>> . . .
>>>>
>>>> which.names.Rd:12:1: Warning: <script> proprietary attribute "onload"
>>>> which.names.Rd:12:1: Warning: <script> inserting "type" attribute
>>>> which.names.Rd:17:1: Warning: <table> lacks "summary" attribute
>>>> which.names.Rd:44:1: Warning: <table> lacks "summary" attribute
>>>> * checking for non-standard things in the check directory ... OK
>>>> * checking for detritus in the temp directory ... OK
>>>> * DONE
>>>>
>>>> Status: 1 NOTE
>>>> See
>>>>    '/Users/johnfox/Documents/R-package-sources/car/car.Rcheck/00check.log'
>>>> for details.
>>>>
>>>> ------ snip ------
>>>>
>>>> Any help would be appreciated.
>>>>
>>>> Thanks,
>>>>    John
>> -- 
>> John Fox, Professor Emeritus
>> McMaster University
>> Hamilton, Ontario, Canada
>> web: https://socialsciences.mcmaster.ca/jfox/
>>
>> _______________________________________________
>> R-SIG-Mac mailing list
>> R-SIG-Mac at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From j|ox @end|ng |rom mcm@@ter@c@  Tue Apr 26 18:01:52 2022
From: j|ox @end|ng |rom mcm@@ter@c@ (John Fox)
Date: Tue, 26 Apr 2022 12:01:52 -0400
Subject: [R-SIG-Mac] R CMD check "HTML version of manual" NOTE/Warnings
In-Reply-To: <c5fc924b-8154-b541-41b1-0d10a3fe2475@stats.ox.ac.uk>
References: <8c7b94c4-b0de-0e32-da29-0d6701e503e7@mcmaster.ca>
 <e964b23d-0905-c7a4-4474-98032268d017@stats.ox.ac.uk>
 <e790b76b-e615-2fce-dcec-e09efabd59b5@mcmaster.ca>
 <F963B5EF-0F5F-4D18-87FF-1640E57D2E1A@gmail.com>
 <c5fc924b-8154-b541-41b1-0d10a3fe2475@stats.ox.ac.uk>
Message-ID: <503de2b2-3641-698d-bacb-8756aa480a35@mcmaster.ca>

Dear Brian and Peter,

As Brian mentioned, I still get warnings (though different ones) from 
the updated tidy. For example, for the car package:

------ snip -------

* checking HTML version of manual ... NOTE
Found the following problems:
Anova.Rd:4:1: Warning: <link> inserting "type" attribute
Anova.Rd:12:1: Warning: <script> proprietary attribute "onload"
Anova.Rd:12:1: Warning: <script> inserting "type" attribute
Anova.Rd:17:1: Warning: <table> lacks "summary" attribute
Anova.Rd:135:1: Warning: <table> lacks "summary" attribute
Anova.Rd:285:1: Warning: <table> lacks "summary" attribute

------ snip -------

As before, these warnings are generated for all of the .Rd files in the 
package.

I'm cc'ing the r-package-devel list (with apologies for cross-posting) 
so that there will be a record there.

Best,
  John

On 2022-04-26 11:22 a.m., Prof Brian Ripley wrote:
> On 26/04/2022 15:43, peter dalgaard wrote:
>> Yes, I think this should go to r-package-devel or maybe even file a 
>> bug report against "R CMD check". Looks like we "just" need to revise 
>> the logic at the start of check_Rd2HTML():
>>
>> ???? check_Rd2HTML <- function(pkgdir) {
>> ???????? if(!nzchar(Sys.which("tidy")) ||
>> ??????????? !startsWith(system2("tidy", "--version", stdout = TRUE),
>> ??????????????????????? "HTML Tidy"))
>> ???????????? return()
>>
>> to either
>>
>> - look for a version number (which the Apple builds don't have)
>> - explicitly reject the 2006 Apple builds
>> - somehow allow for an override using an environment variable
> 
> This is switched on by _R_CHECK_RD_VALIDATE_RD2HTML_=true or --as-cran. 
>  ?I plan to at least let _R_CHECK_RD_VALIDATE_RD2HTML_=false override 
> --as-cran.
> 
> There seems to have been a report on r-package-devel not mentioning macOS:
> 
> https://stat.ethz.ch/pipermail/r-package-devel/2022q1/007804.html
> https://stat.ethz.ch/pipermail/r-package-devel/2022q2/007932.html
> 
> but I don't think anyone had a clue that the macOS 'tidy' might be 
> insufficient.
> 
>>
>> or thereabouts...
>>
>> - pd
>>
>>> On 26 Apr 2022, at 16:25 , John Fox <jfox at mcmaster.ca> wrote:
>>>
>>> Dear Brian,
>>>
>>> Thank you very much for the explanation. Please see interline below:
>>>
>>> On 2022-04-25 4:51 p.m., Prof Brian Ripley wrote:
>>>> On 25/04/2022 20:04, John Fox wrote:
>>>>> Dear R-sig-mac list members,
>>>>>
>>>>> When checking packages --as-cran with R 4.2.0 (and R 4.2.0 
>>>>> patched), I'm seeing multiple warnings (and a NOTE) concerning the 
>>>>> HTML version of the package help-page manuals. The warning appears 
>>>>> for every .Rd file in all of the packages that I've checked. I 
>>>>> didn't see this problem before R 4.2.0.
>>>>>
>>>>> I'm writing to the r-sig-mac list rather than r-package-devel 
>>>>> because I
>>>> Unfortunately the authors of this are not on r-sig-mac.
>>>
>>> Should I mention this as well on r-package-devel?
>>>
>>>>> don't encounter the same problem under Windows. Nor does it appear 
>>>>> on the CRAN check pages for the packages.
>>>> This check is only done if you have 'tidy' on the path.? My Monterey 
>>>> M1 MBP has
>>>> auk2% tidy --version
>>>> HTML Tidy for Mac OS X released on 31 October 2006 - Apple Inc. 
>>>> build 2649
>>>
>>> That's exactly the version installed on my MacBook Pro. Is this 
>>> standard for Monterey? If not, would it be best simply to remove tidy 
>>> (and how did it get there?).
>>>
>>>> I think that is far too old.? The short answer is to ignore these, 
>>>> or update tidy (from http://binaries.html-tidy.org/) which (5.8.0) 
>>>> finds different issues for car that I do not see on Fedora (with 
>>>> 5.7.16).
>>>
>>> I saw these warnings for every .Rd file in all of the packages I 
>>> checked, not just for the car package. The HTML is presumably 
>>> generated from the .Rd files by the R installation process. If tidy 
>>> is general, or common, on Monterey Macs, I wonder why others aren't 
>>> reporting similar warnings on R CMD check --as-cran.
>>>
>>>> Probably your Windows machine does not have tidy installed.
>>>>> I know that there's been discussion of adding an HTML manual, which 
>>>>> seems a good idea, but I didn't realize that this has apparently 
>>>>> already been implemented.
>>>>>
>>>>> Has anyone else experienced this problem or does anyone understand 
>>>>> its source? AFAIK, there's nothing unusual about the R installation 
>>>>> on my Mac, but of course there may be some setting that 
>>>>> inadvertently turned on checking the HTML manual.
>>>> --as-cran turned it on ((f tidy is available).
>>>
>>> Again, thank you for the explanation.
>>>
>>> Best,
>>> John
>>>
>>>>>
>>>>> Here's an example (with many lines elided, . . .):
>>>>>
>>>>> ------ snip ------
>>>>>
>>>>> Johns-MacBook-Pro:car johnfox$ R CMD check --as-cran car_3.0-13.tar.gz
>>>>> * using log directory 
>>>>> '/Users/johnfox/Documents/R-package-sources/car/car.Rcheck'
>>>>> * using R version 4.2.0 Patched (2022-04-24 r82246)
>>>>> * using platform: aarch64-apple-darwin20 (64-bit)
>>>>> * using session charset: UTF-8
>>>>> * using option '--as-cran'
>>>>> * checking for file 'car/DESCRIPTION' ... OK
>>>>> * this is package 'car' version '3.0-13'
>>>>> * checking CRAN incoming feasibility ... Note_to_CRAN_maintainers
>>>>> Maintainer: 'John Fox <jfox at mcmaster.ca>'
>>>>> * checking package namespace information ... OK
>>>>>
>>>>> . . .
>>>>>
>>>>> * checking PDF version of manual ... OK
>>>>> * checking HTML version of manual ... NOTE
>>>>> Found the following problems:
>>>>> Anova.Rd:4:1: Warning: <link> inserting "type" attribute
>>>>> Anova.Rd:12:1: Warning: <script> proprietary attribute "onload"
>>>>> Anova.Rd:12:1: Warning: <script> inserting "type" attribute
>>>>> Anova.Rd:17:1: Warning: <table> lacks "summary" attribute
>>>>> Anova.Rd:135:1: Warning: <table> lacks "summary" attribute
>>>>> Anova.Rd:285:1: Warning: <table> lacks "summary" attribute
>>>>> Boot.Rd:4:1: Warning: <link> inserting "type" attribute
>>>>> Boot.Rd:12:1: Warning: <script> proprietary attribute "onload"
>>>>> Boot.Rd:12:1: Warning: <script> inserting "type" attribute
>>>>> Boot.Rd:17:1: Warning: <table> lacks "summary" attribute
>>>>> Boot.Rd:56:1: Warning: <table> lacks "summary" attribute
>>>>>
>>>>> . . .
>>>>>
>>>>> which.names.Rd:12:1: Warning: <script> proprietary attribute "onload"
>>>>> which.names.Rd:12:1: Warning: <script> inserting "type" attribute
>>>>> which.names.Rd:17:1: Warning: <table> lacks "summary" attribute
>>>>> which.names.Rd:44:1: Warning: <table> lacks "summary" attribute
>>>>> * checking for non-standard things in the check directory ... OK
>>>>> * checking for detritus in the temp directory ... OK
>>>>> * DONE
>>>>>
>>>>> Status: 1 NOTE
>>>>> See
>>>>>    
>>>>> '/Users/johnfox/Documents/R-package-sources/car/car.Rcheck/00check.log' 
>>>>>
>>>>> for details.
>>>>>
>>>>> ------ snip ------
>>>>>
>>>>> Any help would be appreciated.
>>>>>
>>>>> Thanks,
>>>>> ?? John
>>> -- 
>>> John Fox, Professor Emeritus
>>> McMaster University
>>> Hamilton, Ontario, Canada
>>> web: https://socialsciences.mcmaster.ca/jfox/
>>>
>>> _______________________________________________
>>> R-SIG-Mac mailing list
>>> R-SIG-Mac at r-project.org
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>
> 
>


From ken@knob|@uch @end|ng |rom |n@erm@|r  Thu Apr 28 15:44:45 2022
From: ken@knob|@uch @end|ng |rom |n@erm@|r (Kenneth Knoblauch)
Date: Thu, 28 Apr 2022 15:44:45 +0200
Subject: [R-SIG-Mac] adjusting .libPaths
Message-ID: <27d0dace23eb5c7ae207d0c2ef5ecfd1@inserm.fr>

Hi,

In R 4.2, when I look at .libPaths() from within the standard R gui, I 
see:

.libPaths()
[1] "/Users/ken/Library/R/x86_64/4.2/library"
[2] "/Users/ken/Library/R/4.1/library"
[3] "/Library/Frameworks/R.framework/Versions/4.2/Resources/library"

 From a terminal, I get

> .libPaths()
[1] "/Users/ken/Library/R/4.1/library"
[2] "/Library/Frameworks/R.framework/Versions/4.2/Resources/library"

The old 4.1 directory, I suspect, should not be there.  From 
Sys.getenv(), I see

R_LIBS                       /Users/ken/Library/R/x86_64/4.2/library
R_LIBS_SITE                  
/Library/Frameworks/R.framework/Resources/site-library
R_LIBS_USER                  /Users/ken/Library/R/4.1/library

and the system Renviron file contains

uc7131:Resources ken$ grep R_LIBS etc/Renviron
R_LIBS_USER=${R_LIBS_USER:-'%U'}
R_LIBS_SITE=${R_LIBS_SITE:-'%S'}

but I wouldn't know what to adjust these to, to fix this (if I even 
should).

In Rstudio (which is not the problem of this list), I also get

> .libPaths()
[1] "/Users/ken/Library/R/4.1/library"
[2] "/Library/Frameworks/R.framework/Versions/4.2/Resources/library"

and I would guess the 4.1 entry is why Rstudio bombs when I try to 
execute any graphics.

I would be grateful for any suggestions as to how to fix this.

Thank you.

best,

Ken


-- 
Kenneth Knoblauch
Inserm U1208
Stem-cell and Brain Research Institute
18 avenue du Doyen L?pine
69500 Bron
France
tel: +33 (0)4 72 91 34 77
fax: +33 (0)4 72 91 34 61
portable: +33 (0)6 84 10 64 10
http://www.sbri.fr/user/1453


From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Apr 28 16:26:24 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 28 Apr 2022 10:26:24 -0400
Subject: [R-SIG-Mac] adjusting .libPaths
In-Reply-To: <27d0dace23eb5c7ae207d0c2ef5ecfd1@inserm.fr>
References: <27d0dace23eb5c7ae207d0c2ef5ecfd1@inserm.fr>
Message-ID: <58a85884-c494-7fc5-f95c-66473d4713ba@gmail.com>

On 28/04/2022 9:44 a.m., Kenneth Knoblauch wrote:
> Hi,
> 
> In R 4.2, when I look at .libPaths() from within the standard R gui, I
> see:
> 
> .libPaths()
> [1] "/Users/ken/Library/R/x86_64/4.2/library"
> [2] "/Users/ken/Library/R/4.1/library"
> [3] "/Library/Frameworks/R.framework/Versions/4.2/Resources/library"
> 
>   From a terminal, I get
> 
>> .libPaths()
> [1] "/Users/ken/Library/R/4.1/library"
> [2] "/Library/Frameworks/R.framework/Versions/4.2/Resources/library"
> 
> The old 4.1 directory, I suspect, should not be there.  From
> Sys.getenv(), I see
> 
> R_LIBS                       /Users/ken/Library/R/x86_64/4.2/library
> R_LIBS_SITE
> /Library/Frameworks/R.framework/Resources/site-library
> R_LIBS_USER                  /Users/ken/Library/R/4.1/library
> 
> and the system Renviron file contains
> 
> uc7131:Resources ken$ grep R_LIBS etc/Renviron
> R_LIBS_USER=${R_LIBS_USER:-'%U'}
> R_LIBS_SITE=${R_LIBS_SITE:-'%S'}
> 
> but I wouldn't know what to adjust these to, to fix this (if I even
> should).
> 
> In Rstudio (which is not the problem of this list), I also get
> 
>> .libPaths()
> [1] "/Users/ken/Library/R/4.1/library"
> [2] "/Library/Frameworks/R.framework/Versions/4.2/Resources/library"
> 
> and I would guess the 4.1 entry is why Rstudio bombs when I try to
> execute any graphics.
> 
> I would be grateful for any suggestions as to how to fix this.

I'd guess the 41 isn't coming from the system file, but from a user file 
on your account or in the directory where you start Rgui.  Running 
getwd() as the first command might find that dir, as long as some 
profile code hasn't changed it.

The filename might be ".Renviron" rather than "Renviron"

Duncan Murdoch


From ken@knob|@uch @end|ng |rom |n@erm@|r  Thu Apr 28 16:41:53 2022
From: ken@knob|@uch @end|ng |rom |n@erm@|r (Kenneth Knoblauch)
Date: Thu, 28 Apr 2022 16:41:53 +0200
Subject: [R-SIG-Mac] adjusting .libPaths
In-Reply-To: <58a85884-c494-7fc5-f95c-66473d4713ba@gmail.com>
References: <27d0dace23eb5c7ae207d0c2ef5ecfd1@inserm.fr>
 <58a85884-c494-7fc5-f95c-66473d4713ba@gmail.com>
Message-ID: <e5e7e5529b0c40eb473a8563de4736c0@inserm.fr>

That's it! There was a .Renviron file in my home directory with the one
line

R_LIBS_USER="/Users/ken/Library/R/4.1/library"

so I changed it to

R_LIBS_USER="/Users/ken/Library/R/x86_64/4.2/library"

and now I get in the Rgui, R terminal and Rstudio

libPaths()
[1] "/Users/ken/Library/R/x86_64/4.2/library"
[2] "/Library/Frameworks/R.framework/Versions/4.2/Resources/library"

which is what I expected to have in the first place.

Thank you, Duncan.

best,


-- 
Kenneth Knoblauch
Inserm U1208
Stem-cell and Brain Research Institute
18 avenue du Doyen L?pine
69500 Bron
France
tel: +33 (0)4 72 91 34 77
fax: +33 (0)4 72 91 34 61
portable: +33 (0)6 84 10 64 10
http://www.sbri.fr/user/1453

On 2022-04-28 16:26, Duncan Murdoch wrote:

> On 28/04/2022 9:44 a.m., Kenneth Knoblauch wrote:
>> Hi,
>> 
>> In R 4.2, when I look at .libPaths() from within the standard R gui, 
>> I
>> see:
>> 
>> .libPaths()
>> [1] "/Users/ken/Library/R/x86_64/4.2/library"
>> [2] "/Users/ken/Library/R/4.1/library"
>> [3] "/Library/Frameworks/R.framework/Versions/4.2/Resources/library"
>> 
>> From a terminal, I get
>> 
>>> .libPaths()
>> [1] "/Users/ken/Library/R/4.1/library"
>> [2] "/Library/Frameworks/R.framework/Versions/4.2/Resources/library"
>> 
>> The old 4.1 directory, I suspect, should not be there.  From
>> Sys.getenv(), I see
>> 
>> R_LIBS                       /Users/ken/Library/R/x86_64/4.2/library
>> R_LIBS_SITE
>> /Library/Frameworks/R.framework/Resources/site-library
>> R_LIBS_USER                  /Users/ken/Library/R/4.1/library
>> 
>> and the system Renviron file contains
>> 
>> uc7131:Resources ken$ grep R_LIBS etc/Renviron
>> R_LIBS_USER=${R_LIBS_USER:-'%U'}
>> R_LIBS_SITE=${R_LIBS_SITE:-'%S'}
>> 
>> but I wouldn't know what to adjust these to, to fix this (if I even
>> should).
>> 
>> In Rstudio (which is not the problem of this list), I also get
>> 
>>> .libPaths()
>> [1] "/Users/ken/Library/R/4.1/library"
>> [2] "/Library/Frameworks/R.framework/Versions/4.2/Resources/library"
>> 
>> and I would guess the 4.1 entry is why Rstudio bombs when I try to
>> execute any graphics.
>> 
>> I would be grateful for any suggestions as to how to fix this.
> 
> I'd guess the 41 isn't coming from the system file, but from a user 
> file
> on your account or in the directory where you start Rgui.  Running
> getwd() as the first command might find that dir, as long as some
> profile code hasn't changed it.
> 
> The filename might be ".Renviron" rather than "Renviron"
> 
> Duncan Murdoch


From kev|nu@hey @end|ng |rom gm@||@com  Thu Apr 28 19:55:50 2022
From: kev|nu@hey @end|ng |rom gm@||@com (Kevin Ushey)
Date: Thu, 28 Apr 2022 10:55:50 -0700
Subject: [R-SIG-Mac] adjusting .libPaths
In-Reply-To: <e5e7e5529b0c40eb473a8563de4736c0@inserm.fr>
References: <27d0dace23eb5c7ae207d0c2ef5ecfd1@inserm.fr>
 <58a85884-c494-7fc5-f95c-66473d4713ba@gmail.com>
 <e5e7e5529b0c40eb473a8563de4736c0@inserm.fr>
Message-ID: <CAJXgQP2yUxHKK5bQgEvszTOxMqWg6GSdwE=qe=cTydXKRFmjTw@mail.gmail.com>

FWIW, you shouldn't need to set R_LIBS_USER in this way -- R will
choose a sensible default value for you based on your platform + the
version of R being launched.

I suspect you would see the "right" behavior if you removed that entry
from your .Renviron altogether (and you wouldn't need to remember to
change it in the future)

See also ?.expand_R_libs_env_var for more information.

Best,
Kevin

On Thu, Apr 28, 2022 at 7:40 AM Kenneth Knoblauch
<ken.knoblauch at inserm.fr> wrote:
>
> That's it! There was a .Renviron file in my home directory with the one
> line
>
> R_LIBS_USER="/Users/ken/Library/R/4.1/library"
>
> so I changed it to
>
> R_LIBS_USER="/Users/ken/Library/R/x86_64/4.2/library"
>
> and now I get in the Rgui, R terminal and Rstudio
>
> libPaths()
> [1] "/Users/ken/Library/R/x86_64/4.2/library"
> [2] "/Library/Frameworks/R.framework/Versions/4.2/Resources/library"
>
> which is what I expected to have in the first place.
>
> Thank you, Duncan.
>
> best,
>
>
> --
> Kenneth Knoblauch
> Inserm U1208
> Stem-cell and Brain Research Institute
> 18 avenue du Doyen L?pine
> 69500 Bron
> France
> tel: +33 (0)4 72 91 34 77
> fax: +33 (0)4 72 91 34 61
> portable: +33 (0)6 84 10 64 10
> http://www.sbri.fr/user/1453
>
> On 2022-04-28 16:26, Duncan Murdoch wrote:
>
> > On 28/04/2022 9:44 a.m., Kenneth Knoblauch wrote:
> >> Hi,
> >>
> >> In R 4.2, when I look at .libPaths() from within the standard R gui,
> >> I
> >> see:
> >>
> >> .libPaths()
> >> [1] "/Users/ken/Library/R/x86_64/4.2/library"
> >> [2] "/Users/ken/Library/R/4.1/library"
> >> [3] "/Library/Frameworks/R.framework/Versions/4.2/Resources/library"
> >>
> >> From a terminal, I get
> >>
> >>> .libPaths()
> >> [1] "/Users/ken/Library/R/4.1/library"
> >> [2] "/Library/Frameworks/R.framework/Versions/4.2/Resources/library"
> >>
> >> The old 4.1 directory, I suspect, should not be there.  From
> >> Sys.getenv(), I see
> >>
> >> R_LIBS                       /Users/ken/Library/R/x86_64/4.2/library
> >> R_LIBS_SITE
> >> /Library/Frameworks/R.framework/Resources/site-library
> >> R_LIBS_USER                  /Users/ken/Library/R/4.1/library
> >>
> >> and the system Renviron file contains
> >>
> >> uc7131:Resources ken$ grep R_LIBS etc/Renviron
> >> R_LIBS_USER=${R_LIBS_USER:-'%U'}
> >> R_LIBS_SITE=${R_LIBS_SITE:-'%S'}
> >>
> >> but I wouldn't know what to adjust these to, to fix this (if I even
> >> should).
> >>
> >> In Rstudio (which is not the problem of this list), I also get
> >>
> >>> .libPaths()
> >> [1] "/Users/ken/Library/R/4.1/library"
> >> [2] "/Library/Frameworks/R.framework/Versions/4.2/Resources/library"
> >>
> >> and I would guess the 4.1 entry is why Rstudio bombs when I try to
> >> execute any graphics.
> >>
> >> I would be grateful for any suggestions as to how to fix this.
> >
> > I'd guess the 41 isn't coming from the system file, but from a user
> > file
> > on your account or in the directory where you start Rgui.  Running
> > getwd() as the first command might find that dir, as long as some
> > profile code hasn't changed it.
> >
> > The filename might be ".Renviron" rather than "Renviron"
> >
> > Duncan Murdoch
>
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac


From ken@knob|@uch @end|ng |rom |n@erm@|r  Thu Apr 28 20:14:30 2022
From: ken@knob|@uch @end|ng |rom |n@erm@|r (Kenneth Knoblauch)
Date: Thu, 28 Apr 2022 20:14:30 +0200
Subject: [R-SIG-Mac] adjusting .libPaths
In-Reply-To: <CAJXgQP2yUxHKK5bQgEvszTOxMqWg6GSdwE=qe=cTydXKRFmjTw@mail.gmail.com>
References: <CAJXgQP2yUxHKK5bQgEvszTOxMqWg6GSdwE=qe=cTydXKRFmjTw@mail.gmail.com>
Message-ID: <6AEE2FEF-3D5A-44AF-847A-963653AFBA85@inserm.fr>

Thanks Kevin,

I was thinking after I replied to Duncan that I could just delete the . Renviron file because it doesn?t have anything else in it. 

Ken

Sent from my iPhone

> On 28 Apr 2022, at 19:56, Kevin Ushey <kevinushey at gmail.com> wrote:
> 
> ?FWIW, you shouldn't need to set R_LIBS_USER in this way -- R will
> choose a sensible default value for you based on your platform + the
> version of R being launched.
> 
> I suspect you would see the "right" behavior if you removed that entry
> from your .Renviron altogether (and you wouldn't need to remember to
> change it in the future)
> 
> See also ?.expand_R_libs_env_var for more information.
> 
> Best,
> Kevin
> 
>> On Thu, Apr 28, 2022 at 7:40 AM Kenneth Knoblauch
>> <ken.knoblauch at inserm.fr> wrote:
>> 
>> That's it! There was a .Renviron file in my home directory with the one
>> line
>> 
>> R_LIBS_USER="/Users/ken/Library/R/4.1/library"
>> 
>> so I changed it to
>> 
>> R_LIBS_USER="/Users/ken/Library/R/x86_64/4.2/library"
>> 
>> and now I get in the Rgui, R terminal and Rstudio
>> 
>> libPaths()
>> [1] "/Users/ken/Library/R/x86_64/4.2/library"
>> [2] "/Library/Frameworks/R.framework/Versions/4.2/Resources/library"
>> 
>> which is what I expected to have in the first place.
>> 
>> Thank you, Duncan.
>> 
>> best,
>> 
>> 
>> --
>> Kenneth Knoblauch
>> Inserm U1208
>> Stem-cell and Brain Research Institute
>> 18 avenue du Doyen L?pine
>> 69500 Bron
>> France
>> tel: +33 (0)4 72 91 34 77
>> fax: +33 (0)4 72 91 34 61
>> portable: +33 (0)6 84 10 64 10
>> http://www.sbri.fr/user/1453
>> 
>>> On 2022-04-28 16:26, Duncan Murdoch wrote:
>>> 
>>> On 28/04/2022 9:44 a.m., Kenneth Knoblauch wrote:
>>>> Hi,
>>>> 
>>>> In R 4.2, when I look at .libPaths() from within the standard R gui,
>>>> I
>>>> see:
>>>> 
>>>> .libPaths()
>>>> [1] "/Users/ken/Library/R/x86_64/4.2/library"
>>>> [2] "/Users/ken/Library/R/4.1/library"
>>>> [3] "/Library/Frameworks/R.framework/Versions/4.2/Resources/library"
>>>> 
>>>> From a terminal, I get
>>>> 
>>>>> .libPaths()
>>>> [1] "/Users/ken/Library/R/4.1/library"
>>>> [2] "/Library/Frameworks/R.framework/Versions/4.2/Resources/library"
>>>> 
>>>> The old 4.1 directory, I suspect, should not be there.  From
>>>> Sys.getenv(), I see
>>>> 
>>>> R_LIBS                       /Users/ken/Library/R/x86_64/4.2/library
>>>> R_LIBS_SITE
>>>> /Library/Frameworks/R.framework/Resources/site-library
>>>> R_LIBS_USER                  /Users/ken/Library/R/4.1/library
>>>> 
>>>> and the system Renviron file contains
>>>> 
>>>> uc7131:Resources ken$ grep R_LIBS etc/Renviron
>>>> R_LIBS_USER=${R_LIBS_USER:-'%U'}
>>>> R_LIBS_SITE=${R_LIBS_SITE:-'%S'}
>>>> 
>>>> but I wouldn't know what to adjust these to, to fix this (if I even
>>>> should).
>>>> 
>>>> In Rstudio (which is not the problem of this list), I also get
>>>> 
>>>>> .libPaths()
>>>> [1] "/Users/ken/Library/R/4.1/library"
>>>> [2] "/Library/Frameworks/R.framework/Versions/4.2/Resources/library"
>>>> 
>>>> and I would guess the 4.1 entry is why Rstudio bombs when I try to
>>>> execute any graphics.
>>>> 
>>>> I would be grateful for any suggestions as to how to fix this.
>>> 
>>> I'd guess the 41 isn't coming from the system file, but from a user
>>> file
>>> on your account or in the directory where you start Rgui.  Running
>>> getwd() as the first command might find that dir, as long as some
>>> profile code hasn't changed it.
>>> 
>>> The filename might be ".Renviron" rather than "Renviron"
>>> 
>>> Duncan Murdoch
>> 
>> _______________________________________________
>> R-SIG-Mac mailing list
>> R-SIG-Mac at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac

From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Apr 28 21:45:13 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 28 Apr 2022 15:45:13 -0400
Subject: [R-SIG-Mac] adjusting .libPaths
In-Reply-To: <CAJXgQP2yUxHKK5bQgEvszTOxMqWg6GSdwE=qe=cTydXKRFmjTw@mail.gmail.com>
References: <27d0dace23eb5c7ae207d0c2ef5ecfd1@inserm.fr>
 <58a85884-c494-7fc5-f95c-66473d4713ba@gmail.com>
 <e5e7e5529b0c40eb473a8563de4736c0@inserm.fr>
 <CAJXgQP2yUxHKK5bQgEvszTOxMqWg6GSdwE=qe=cTydXKRFmjTw@mail.gmail.com>
Message-ID: <a38f7410-c5a4-0ab1-d1db-0d83ea5d8630@gmail.com>

On 28/04/2022 1:55 p.m., Kevin Ushey wrote:
> FWIW, you shouldn't need to set R_LIBS_USER in this way -- R will
> choose a sensible default value for you based on your platform + the
> version of R being launched.
> 
> I suspect you would see the "right" behavior if you removed that entry
> from your .Renviron altogether (and you wouldn't need to remember to
> change it in the future)
> 
> See also ?.expand_R_libs_env_var for more information.

Thanks for pointing that out.  In the past, I thought the following 
could happen:

  - a user with no home dir library tries to install a package.

  - R can't write to the system library, so creates a home dir library 
and writes there.  The package is successfully installed.

  - Next session, R is started without specifying a home dir library, 
and can't find the new package.

The help page you point to makes it look as though this won't happen. 
Maybe it never did:  maybe the problems only arose when people specified 
R_LIBS_USER incorrectly.

Duncan Murdoch


From p@tr|ck@@chr@tz @end|ng |rom gm@||@com  Sat Apr 30 15:53:20 2022
From: p@tr|ck@@chr@tz @end|ng |rom gm@||@com (Patrick Schratz)
Date: Sat, 30 Apr 2022 15:53:20 +0200
Subject: [R-SIG-Mac] Contributing to documentation [Was: Installing
 gfortran]
In-Reply-To: <916FAE6F-D1DF-409A-AFC4-8A2AA1998A37@R-project.org>
References: <9bc73767-ab49-c828-4044-36fba7274f1f@umu.se>
 <CD2DBF0F-1D4B-4A1A-AF7E-CBA1FEC9459F@gmail.com>
 <c61bb1a4-66fd-a3a4-a8f7-9530ab68b7ac@umu.se>
 <0910300B-E8DE-4E66-98C6-D08A96C4022B@R-project.org>
 <B09F0497-BBE6-4549-999E-29A59DC975D3@gmail.com>
 <916FAE6F-D1DF-409A-AFC4-8A2AA1998A37@R-project.org>
Message-ID: <EE77F266-8D1D-4043-8B0A-B6FBD2DC73C0@gmail.com>

> If that is the case, why not contribute to the documentation? That is the whole point of an open source project after all.

Because often it is not easily accessible, e.g. living in an ancient SVN repo or lacking (an easy) and clear contribution guide.
WRT to the Mac dev instructions, I can see that the source lives in https://github.com/R-macos/R-mac-dev which is definitely a good start.
Yet I think it needs way more cross-linking between the repos, more ?official? pointers and ?how-tos? to really also encourage people to contribute.
The README could give more detailed contribution instructions, such as whom to tag for a PR, what should go there and what not, possibly stating that it?s the official documentation and define it from other ?random? orgs on developer portals - all of these could e.g. go into a `CONTRIBUTING.md` which is a widely known source for such information.
Just some personal thoughts though which could potentially considered to improve things.

To be clear, I acknowledge your effort in opening things up to platforms like GH - which not all parts of R/CRAN are doing at the moment AFAIK.
And yes, when complaining about things not being optimal, one should also put in effort to make things better.
So I?ll see if I can put some time in to improve things and see how the experience is.

> The problem is that generally they cannot. You are looking something up, because you don't know about it so you can't judge whether it is a good answer (SO is good example proving why crowd-souring the definition of truth doesn't generally work). At best you may know the person and thus judge by that, but even then you may not know if the information is still accurate.

I see your point here and generally agree that it?s hard making such judgements in this position.
Yet I disagree on referring to Stackoverflow as a ?crowd-souring the definition of truth doesn't generally work?. Without SO, we would be nowhere where we are today and I?d argue it has done a lot more positive things than negative ones to every single person who ever accessed it.

Cheers
Patrick

On 25 Apr 2022, at 1:04, Simon Urbanek wrote:

>> On Apr 23, 2022, at 7:44 PM, Patrick Schratz <patrick.schratz at gmail.com> wrote:
>>
>> FWIW blog posts which explain such things usually have a (good) reason - they aim to help people getting started when the official documentation is either unclear, hard to find or incomplete.
>
>
> If that is the case, why not contribute to the documentation? That is the whole point of an open source project after all.
>
> The problem with random blogs is that many of them are written by people trying to find an answer without much knowledge on the subject and often post very bad advice that does not necesarily address the actual issue. There are rare exceptions of knowledgeable people posting explanatory blogs, but if you search for an answer you have no way of knowing whether it is of the good kind. In addition, blogs tend to get out of date quickly, so what used to be a good advice may not be anymore (prime example was the R 4.0.0 release which made a lot of the "hacks" obsolete and the well-meant advice out there has only led to more problems).
>
>
>> It?s on the readers themselves to decide whether such blog posts are trustworthy or useful.
>>
>
> The problem is that generally they cannot. You are looking something up, because you don't know about it so you can't judge whether it is a good answer (SO is good example proving why crowd-souring the definition of truth doesn't generally work). At best you may know the person and thus judge by that, but even then you may not know if the information is still accurate.
>
>
>> I have personally profited so often from blog posts of others already and therefore find the general advice to not consult such resources quite shortsighted.
>> Of course the official documentation should always be the first point to have a look at - and in this case the required information would have been there.
>>
>> Apologies for going partly off-topic but I think this point is important.
>>
>
> I agree. That's why I think it would be great if those that have the knowledge would help the community to improve the documentation. Of all the contributions to R it is the easiest.
>
> That said, I also agree that complementary information is very useful, in particular if it explains the "why" as well - which may be too far out of scope of the canonical documentation. In that case it is easier to spot mismatches, e.g., if it becomes out of date. It is not without precedent to reference such external documentation if it is maintained.
>
> Anyway, I'd like to encourage everyone to contribute - it may be pointing out issues in the documentation or by sending PRs with proposed updates or posting here. Some did in the past (like you, Jan or Bob, thanks!), but the more contribute the better for the community. Often this may also uncover genuine issues that should be addressed rather than worked around (like the lack of the symlink in the gfortran-12 tar-ball discovered just this morning...).
>
> Cheers,
> Simon
>
>
>
>> Cheers
>> Patrick
>>
>> On 23 Apr 2022, at 2:13, Simon Urbanek wrote:
>>
>>> For posterity - please always consult
>>>
>>> https://mac.r-project.org/tools/ (linked from CRAN)
>>>
>>> The old locations like libs* are no longer updated and have been deprecated in favor of /tools and /bin which are maintained for all builds. Similarly, I would strongly discourage following any advice from blogs as they tend to be outdated, wrong or both.
>>>
>>> Cheers
>>> Simon
>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20220430/18837464/attachment.html>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 870 bytes
Desc: OpenPGP digital signature
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20220430/18837464/attachment.sig>

From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Apr 30 16:45:40 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 30 Apr 2022 10:45:40 -0400
Subject: [R-SIG-Mac] Contributing to documentation [Was: Installing
 gfortran]
In-Reply-To: <EE77F266-8D1D-4043-8B0A-B6FBD2DC73C0@gmail.com>
References: <9bc73767-ab49-c828-4044-36fba7274f1f@umu.se>
 <CD2DBF0F-1D4B-4A1A-AF7E-CBA1FEC9459F@gmail.com>
 <c61bb1a4-66fd-a3a4-a8f7-9530ab68b7ac@umu.se>
 <0910300B-E8DE-4E66-98C6-D08A96C4022B@R-project.org>
 <B09F0497-BBE6-4549-999E-29A59DC975D3@gmail.com>
 <916FAE6F-D1DF-409A-AFC4-8A2AA1998A37@R-project.org>
 <EE77F266-8D1D-4043-8B0A-B6FBD2DC73C0@gmail.com>
Message-ID: <43c41357-75ac-e267-b42c-5d5cc8dabff7@gmail.com>

On 30/04/2022 9:53 a.m., Patrick Schratz wrote:
>     If that is the case, why not contribute to the documentation? That
>     is the whole point of an open source project after all.
> 
> Because often it is not easily accessible, e.g. living in an ancient SVN 
> repo or lacking (an easy) and clear contribution guide.

There's a mirror of that repo at https://github.com/wch/r-source .  It 
is of course unofficial and not maintained by R Core so I could 
understand you might worry about using it, but as far as I know it is 
well maintained.  The only difference that I ever heard about in the 
past was that the official svn repo had an empty directory somewhere or 
other, and git at the time didn't support empty directories.  I don't 
know if either of those is still true.


> WRT to the Mac dev instructions, I can see that the source lives in 
> https://github.com/R-macos/R-mac-dev 
> <https://github.com/R-macos/R-mac-dev> which is definitely a good start.
> Yet I think it needs way more cross-linking between the repos, more 
> ?official? pointers and ?how-tos? to really also encourage people to 
> contribute.
> The README could give more detailed contribution instructions, such as 
> whom to tag for a PR, what should go there and what not, possibly 
> stating that it?s the official documentation and define it from other 
> ?random? orgs on developer portals - all of these could e.g. go into a 
> |CONTRIBUTING.md| which is a widely known source for such information.
> Just some personal thoughts though which could potentially considered to 
> improve things.
> 
> To be clear, I acknowledge your effort in opening things up to platforms 
> like GH - which not all parts of R/CRAN are doing at the moment AFAIK.
> And yes, when complaining about things not being optimal, one should 
> also put in effort to make things better.
> So I?ll see if I can put some time in to improve things and see how the 
> experience is.

If you're happier working in git than in svn, what you could do is fork 
the mirror repo to your own git repo, and make your proposed changes 
there.  If they are good changes it won't be hard for someone (maybe 
even you) to convert into the appropriate format to merge into svn.

The way R development changes is when a change makes things easier for 
the devs.  I suspect whether it's easier for you is only important to 
them if you've got a history of making helpful contributions: they like 
help, they don't like arguments about how to do things.  (I'm saying 
this as a former member of R Core.)

Duncan Murdoch

> 
>     The problem is that generally they cannot. You are looking something
>     up, because you don't know about it so you can't judge whether it is
>     a good answer (SO is good example proving why crowd-souring the
>     definition of truth doesn't generally work). At best you may know
>     the person and thus judge by that, but even then you may not know if
>     the information is still accurate.
> 
> I see your point here and generally agree that it?s hard making such 
> judgements in this position.
> Yet I disagree on referring to Stackoverflow as a ?crowd-souring the 
> definition of truth doesn't generally work?. Without SO, we would be 
> nowhere where we are today and I?d argue it has done a lot more positive 
> things than negative ones to every single person who ever accessed it. >
> Cheers
> Patrick
> 
> On 25 Apr 2022, at 1:04, Simon Urbanek wrote:
> 
>         On Apr 23, 2022, at 7:44 PM, Patrick Schratz
>         <patrick.schratz at gmail.com> wrote:
> 
>         FWIW blog posts which explain such things usually have a (good)
>         reason - they aim to help people getting started when the
>         official documentation is either unclear, hard to find or
>         incomplete.
> 
>     If that is the case, why not contribute to the documentation? That
>     is the whole point of an open source project after all.
> 
>     The problem with random blogs is that many of them are written by
>     people trying to find an answer without much knowledge on the
>     subject and often post very bad advice that does not necesarily
>     address the actual issue. There are rare exceptions of knowledgeable
>     people posting explanatory blogs, but if you search for an answer
>     you have no way of knowing whether it is of the good kind. In
>     addition, blogs tend to get out of date quickly, so what used to be
>     a good advice may not be anymore (prime example was the R 4.0.0
>     release which made a lot of the "hacks" obsolete and the well-meant
>     advice out there has only led to more problems).
> 
>         It?s on the readers themselves to decide whether such blog posts
>         are trustworthy or useful.
> 
>     The problem is that generally they cannot. You are looking something
>     up, because you don't know about it so you can't judge whether it is
>     a good answer (SO is good example proving why crowd-souring the
>     definition of truth doesn't generally work). At best you may know
>     the person and thus judge by that, but even then you may not know if
>     the information is still accurate.
> 
>         I have personally profited so often from blog posts of others
>         already and therefore find the general advice to not consult
>         such resources quite shortsighted.
>         Of course the official documentation should always be the first
>         point to have a look at - and in this case the required
>         information would have been there.
> 
>         Apologies for going partly off-topic but I think this point is
>         important.
> 
>     I agree. That's why I think it would be great if those that have the
>     knowledge would help the community to improve the documentation. Of
>     all the contributions to R it is the easiest.
> 
>     That said, I also agree that complementary information is very
>     useful, in particular if it explains the "why" as well - which may
>     be too far out of scope of the canonical documentation. In that case
>     it is easier to spot mismatches, e.g., if it becomes out of date. It
>     is not without precedent to reference such external documentation if
>     it is maintained.
> 
>     Anyway, I'd like to encourage everyone to contribute - it may be
>     pointing out issues in the documentation or by sending PRs with
>     proposed updates or posting here. Some did in the past (like you,
>     Jan or Bob, thanks!), but the more contribute the better for the
>     community. Often this may also uncover genuine issues that should be
>     addressed rather than worked around (like the lack of the symlink in
>     the gfortran-12 tar-ball discovered just this morning...).
> 
>     Cheers,
>     Simon
> 
>         Cheers
>         Patrick
> 
>         On 23 Apr 2022, at 2:13, Simon Urbanek wrote:
> 
>             For posterity - please always consult
> 
>             https://mac.r-project.org/tools/
>             <https://mac.r-project.org/tools/> (linked from CRAN)
> 
>             The old locations like libs* are no longer updated and have
>             been deprecated in favor of /tools and /bin which are
>             maintained for all builds. Similarly, I would strongly
>             discourage following any advice from blogs as they tend to
>             be outdated, wrong or both.
> 
>             Cheers
>             Simon
> 
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Sat Apr 30 17:07:00 2022
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Sat, 30 Apr 2022 08:07:00 -0700
Subject: [R-SIG-Mac] Contributing to documentation [Was: Installing
 gfortran]
In-Reply-To: <43c41357-75ac-e267-b42c-5d5cc8dabff7@gmail.com>
References: <9bc73767-ab49-c828-4044-36fba7274f1f@umu.se>
 <CD2DBF0F-1D4B-4A1A-AF7E-CBA1FEC9459F@gmail.com>
 <c61bb1a4-66fd-a3a4-a8f7-9530ab68b7ac@umu.se>
 <0910300B-E8DE-4E66-98C6-D08A96C4022B@R-project.org>
 <B09F0497-BBE6-4549-999E-29A59DC975D3@gmail.com>
 <916FAE6F-D1DF-409A-AFC4-8A2AA1998A37@R-project.org>
 <EE77F266-8D1D-4043-8B0A-B6FBD2DC73C0@gmail.com>
 <43c41357-75ac-e267-b42c-5d5cc8dabff7@gmail.com>
Message-ID: <C35B0CCB-484F-42BE-8FEC-168ECED3F346@dcn.davis.ca.us>

Generating patch files is one of the most fundamental capabilities of git. Changes to the Linux kernel are (almost?) universally submitted via patch files generated from git.

Re git and empty directories... git is structurally incapable of recording them in the repo. A common workaround is to touch a .gitkeep file in the directory, but I suspect this will never become an automated feature of git because it cannot be hidden from the user without making the chosen filename off-limits to the user.

On April 30, 2022 7:45:40 AM PDT, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>On 30/04/2022 9:53 a.m., Patrick Schratz wrote:
>>     If that is the case, why not contribute to the documentation? That
>>     is the whole point of an open source project after all.
>> 
>> Because often it is not easily accessible, e.g. living in an ancient SVN repo or lacking (an easy) and clear contribution guide.
>
>There's a mirror of that repo at https://github.com/wch/r-source .  It is of course unofficial and not maintained by R Core so I could understand you might worry about using it, but as far as I know it is well maintained.  The only difference that I ever heard about in the past was that the official svn repo had an empty directory somewhere or other, and git at the time didn't support empty directories.  I don't know if either of those is still true.
>
>
>> WRT to the Mac dev instructions, I can see that the source lives in https://github.com/R-macos/R-mac-dev <https://github.com/R-macos/R-mac-dev> which is definitely a good start.
>> Yet I think it needs way more cross-linking between the repos, more ?official? pointers and ?how-tos? to really also encourage people to contribute.
>> The README could give more detailed contribution instructions, such as whom to tag for a PR, what should go there and what not, possibly stating that it?s the official documentation and define it from other ?random? orgs on developer portals - all of these could e.g. go into a |CONTRIBUTING.md| which is a widely known source for such information.
>> Just some personal thoughts though which could potentially considered to improve things.
>> 
>> To be clear, I acknowledge your effort in opening things up to platforms like GH - which not all parts of R/CRAN are doing at the moment AFAIK.
>> And yes, when complaining about things not being optimal, one should also put in effort to make things better.
>> So I?ll see if I can put some time in to improve things and see how the experience is.
>
>If you're happier working in git than in svn, what you could do is fork the mirror repo to your own git repo, and make your proposed changes there.  If they are good changes it won't be hard for someone (maybe even you) to convert into the appropriate format to merge into svn.
>
>The way R development changes is when a change makes things easier for the devs.  I suspect whether it's easier for you is only important to them if you've got a history of making helpful contributions: they like help, they don't like arguments about how to do things.  (I'm saying this as a former member of R Core.)
>
>Duncan Murdoch
>
>> 
>>     The problem is that generally they cannot. You are looking something
>>     up, because you don't know about it so you can't judge whether it is
>>     a good answer (SO is good example proving why crowd-souring the
>>     definition of truth doesn't generally work). At best you may know
>>     the person and thus judge by that, but even then you may not know if
>>     the information is still accurate.
>> 
>> I see your point here and generally agree that it?s hard making such judgements in this position.
>> Yet I disagree on referring to Stackoverflow as a ?crowd-souring the definition of truth doesn't generally work?. Without SO, we would be nowhere where we are today and I?d argue it has done a lot more positive things than negative ones to every single person who ever accessed it. >
>> Cheers
>> Patrick
>> 
>> On 25 Apr 2022, at 1:04, Simon Urbanek wrote:
>> 
>>         On Apr 23, 2022, at 7:44 PM, Patrick Schratz
>>         <patrick.schratz at gmail.com> wrote:
>> 
>>         FWIW blog posts which explain such things usually have a (good)
>>         reason - they aim to help people getting started when the
>>         official documentation is either unclear, hard to find or
>>         incomplete.
>> 
>>     If that is the case, why not contribute to the documentation? That
>>     is the whole point of an open source project after all.
>> 
>>     The problem with random blogs is that many of them are written by
>>     people trying to find an answer without much knowledge on the
>>     subject and often post very bad advice that does not necesarily
>>     address the actual issue. There are rare exceptions of knowledgeable
>>     people posting explanatory blogs, but if you search for an answer
>>     you have no way of knowing whether it is of the good kind. In
>>     addition, blogs tend to get out of date quickly, so what used to be
>>     a good advice may not be anymore (prime example was the R 4.0.0
>>     release which made a lot of the "hacks" obsolete and the well-meant
>>     advice out there has only led to more problems).
>> 
>>         It?s on the readers themselves to decide whether such blog posts
>>         are trustworthy or useful.
>> 
>>     The problem is that generally they cannot. You are looking something
>>     up, because you don't know about it so you can't judge whether it is
>>     a good answer (SO is good example proving why crowd-souring the
>>     definition of truth doesn't generally work). At best you may know
>>     the person and thus judge by that, but even then you may not know if
>>     the information is still accurate.
>> 
>>         I have personally profited so often from blog posts of others
>>         already and therefore find the general advice to not consult
>>         such resources quite shortsighted.
>>         Of course the official documentation should always be the first
>>         point to have a look at - and in this case the required
>>         information would have been there.
>> 
>>         Apologies for going partly off-topic but I think this point is
>>         important.
>> 
>>     I agree. That's why I think it would be great if those that have the
>>     knowledge would help the community to improve the documentation. Of
>>     all the contributions to R it is the easiest.
>> 
>>     That said, I also agree that complementary information is very
>>     useful, in particular if it explains the "why" as well - which may
>>     be too far out of scope of the canonical documentation. In that case
>>     it is easier to spot mismatches, e.g., if it becomes out of date. It
>>     is not without precedent to reference such external documentation if
>>     it is maintained.
>> 
>>     Anyway, I'd like to encourage everyone to contribute - it may be
>>     pointing out issues in the documentation or by sending PRs with
>>     proposed updates or posting here. Some did in the past (like you,
>>     Jan or Bob, thanks!), but the more contribute the better for the
>>     community. Often this may also uncover genuine issues that should be
>>     addressed rather than worked around (like the lack of the symlink in
>>     the gfortran-12 tar-ball discovered just this morning...).
>> 
>>     Cheers,
>>     Simon
>> 
>>         Cheers
>>         Patrick
>> 
>>         On 23 Apr 2022, at 2:13, Simon Urbanek wrote:
>> 
>>             For posterity - please always consult
>> 
>>             https://mac.r-project.org/tools/
>>             <https://mac.r-project.org/tools/> (linked from CRAN)
>> 
>>             The old locations like libs* are no longer updated and have
>>             been deprecated in favor of /tools and /bin which are
>>             maintained for all builds. Similarly, I would strongly
>>             discourage following any advice from blogs as they tend to
>>             be outdated, wrong or both.
>> 
>>             Cheers
>>             Simon
>> 
>> 
>> _______________________________________________
>> R-SIG-Mac mailing list
>> R-SIG-Mac at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>
>_______________________________________________
>R-SIG-Mac mailing list
>R-SIG-Mac at r-project.org
>https://stat.ethz.ch/mailman/listinfo/r-sig-mac

-- 
Sent from my phone. Please excuse my brevity.


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Apr 30 18:06:53 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 30 Apr 2022 12:06:53 -0400
Subject: [R-SIG-Mac] Contributing to documentation [Was: Installing
 gfortran]
In-Reply-To: <C35B0CCB-484F-42BE-8FEC-168ECED3F346@dcn.davis.ca.us>
References: <9bc73767-ab49-c828-4044-36fba7274f1f@umu.se>
 <CD2DBF0F-1D4B-4A1A-AF7E-CBA1FEC9459F@gmail.com>
 <c61bb1a4-66fd-a3a4-a8f7-9530ab68b7ac@umu.se>
 <0910300B-E8DE-4E66-98C6-D08A96C4022B@R-project.org>
 <B09F0497-BBE6-4549-999E-29A59DC975D3@gmail.com>
 <916FAE6F-D1DF-409A-AFC4-8A2AA1998A37@R-project.org>
 <EE77F266-8D1D-4043-8B0A-B6FBD2DC73C0@gmail.com>
 <43c41357-75ac-e267-b42c-5d5cc8dabff7@gmail.com>
 <C35B0CCB-484F-42BE-8FEC-168ECED3F346@dcn.davis.ca.us>
Message-ID: <135a8cf3-f105-7081-a0d9-d09bd55ebd6b@gmail.com>

On 30/04/2022 11:07 a.m., Jeff Newmiller wrote:
> Generating patch files is one of the most fundamental capabilities of git. Changes to the Linux kernel are (almost?) universally submitted via patch files generated from git.

svn uses nearly standard patch files, but they record svn revision 
numbers.  I'd guess directly applying a git patch file to an svn working 
copy would almost always work, but I'm not sure it would always be 
applied correctly in the case where the patch was created from rev X and 
applied to rev Y.

> Re git and empty directories... git is structurally incapable of recording them in the repo. A common workaround is to touch a .gitkeep file in the directory, but I suspect this will never become an automated feature of git because it cannot be hidden from the user without making the chosen filename off-limits to the user.

That seems like a design flaw, but a pretty easy one to work around.

Duncan Murdoch


> On April 30, 2022 7:45:40 AM PDT, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>> On 30/04/2022 9:53 a.m., Patrick Schratz wrote:
>>>      If that is the case, why not contribute to the documentation? That
>>>      is the whole point of an open source project after all.
>>>
>>> Because often it is not easily accessible, e.g. living in an ancient SVN repo or lacking (an easy) and clear contribution guide.
>>
>> There's a mirror of that repo at https://github.com/wch/r-source .  It is of course unofficial and not maintained by R Core so I could understand you might worry about using it, but as far as I know it is well maintained.  The only difference that I ever heard about in the past was that the official svn repo had an empty directory somewhere or other, and git at the time didn't support empty directories.  I don't know if either of those is still true.
>>
>>
>>> WRT to the Mac dev instructions, I can see that the source lives in https://github.com/R-macos/R-mac-dev <https://github.com/R-macos/R-mac-dev> which is definitely a good start.
>>> Yet I think it needs way more cross-linking between the repos, more ?official? pointers and ?how-tos? to really also encourage people to contribute.
>>> The README could give more detailed contribution instructions, such as whom to tag for a PR, what should go there and what not, possibly stating that it?s the official documentation and define it from other ?random? orgs on developer portals - all of these could e.g. go into a |CONTRIBUTING.md| which is a widely known source for such information.
>>> Just some personal thoughts though which could potentially considered to improve things.
>>>
>>> To be clear, I acknowledge your effort in opening things up to platforms like GH - which not all parts of R/CRAN are doing at the moment AFAIK.
>>> And yes, when complaining about things not being optimal, one should also put in effort to make things better.
>>> So I?ll see if I can put some time in to improve things and see how the experience is.
>>
>> If you're happier working in git than in svn, what you could do is fork the mirror repo to your own git repo, and make your proposed changes there.  If they are good changes it won't be hard for someone (maybe even you) to convert into the appropriate format to merge into svn.
>>
>> The way R development changes is when a change makes things easier for the devs.  I suspect whether it's easier for you is only important to them if you've got a history of making helpful contributions: they like help, they don't like arguments about how to do things.  (I'm saying this as a former member of R Core.)
>>
>> Duncan Murdoch
>>
>>>
>>>      The problem is that generally they cannot. You are looking something
>>>      up, because you don't know about it so you can't judge whether it is
>>>      a good answer (SO is good example proving why crowd-souring the
>>>      definition of truth doesn't generally work). At best you may know
>>>      the person and thus judge by that, but even then you may not know if
>>>      the information is still accurate.
>>>
>>> I see your point here and generally agree that it?s hard making such judgements in this position.
>>> Yet I disagree on referring to Stackoverflow as a ?crowd-souring the definition of truth doesn't generally work?. Without SO, we would be nowhere where we are today and I?d argue it has done a lot more positive things than negative ones to every single person who ever accessed it. >
>>> Cheers
>>> Patrick
>>>
>>> On 25 Apr 2022, at 1:04, Simon Urbanek wrote:
>>>
>>>          On Apr 23, 2022, at 7:44 PM, Patrick Schratz
>>>          <patrick.schratz at gmail.com> wrote:
>>>
>>>          FWIW blog posts which explain such things usually have a (good)
>>>          reason - they aim to help people getting started when the
>>>          official documentation is either unclear, hard to find or
>>>          incomplete.
>>>
>>>      If that is the case, why not contribute to the documentation? That
>>>      is the whole point of an open source project after all.
>>>
>>>      The problem with random blogs is that many of them are written by
>>>      people trying to find an answer without much knowledge on the
>>>      subject and often post very bad advice that does not necesarily
>>>      address the actual issue. There are rare exceptions of knowledgeable
>>>      people posting explanatory blogs, but if you search for an answer
>>>      you have no way of knowing whether it is of the good kind. In
>>>      addition, blogs tend to get out of date quickly, so what used to be
>>>      a good advice may not be anymore (prime example was the R 4.0.0
>>>      release which made a lot of the "hacks" obsolete and the well-meant
>>>      advice out there has only led to more problems).
>>>
>>>          It?s on the readers themselves to decide whether such blog posts
>>>          are trustworthy or useful.
>>>
>>>      The problem is that generally they cannot. You are looking something
>>>      up, because you don't know about it so you can't judge whether it is
>>>      a good answer (SO is good example proving why crowd-souring the
>>>      definition of truth doesn't generally work). At best you may know
>>>      the person and thus judge by that, but even then you may not know if
>>>      the information is still accurate.
>>>
>>>          I have personally profited so often from blog posts of others
>>>          already and therefore find the general advice to not consult
>>>          such resources quite shortsighted.
>>>          Of course the official documentation should always be the first
>>>          point to have a look at - and in this case the required
>>>          information would have been there.
>>>
>>>          Apologies for going partly off-topic but I think this point is
>>>          important.
>>>
>>>      I agree. That's why I think it would be great if those that have the
>>>      knowledge would help the community to improve the documentation. Of
>>>      all the contributions to R it is the easiest.
>>>
>>>      That said, I also agree that complementary information is very
>>>      useful, in particular if it explains the "why" as well - which may
>>>      be too far out of scope of the canonical documentation. In that case
>>>      it is easier to spot mismatches, e.g., if it becomes out of date. It
>>>      is not without precedent to reference such external documentation if
>>>      it is maintained.
>>>
>>>      Anyway, I'd like to encourage everyone to contribute - it may be
>>>      pointing out issues in the documentation or by sending PRs with
>>>      proposed updates or posting here. Some did in the past (like you,
>>>      Jan or Bob, thanks!), but the more contribute the better for the
>>>      community. Often this may also uncover genuine issues that should be
>>>      addressed rather than worked around (like the lack of the symlink in
>>>      the gfortran-12 tar-ball discovered just this morning...).
>>>
>>>      Cheers,
>>>      Simon
>>>
>>>          Cheers
>>>          Patrick
>>>
>>>          On 23 Apr 2022, at 2:13, Simon Urbanek wrote:
>>>
>>>              For posterity - please always consult
>>>
>>>              https://mac.r-project.org/tools/
>>>              <https://mac.r-project.org/tools/> (linked from CRAN)
>>>
>>>              The old locations like libs* are no longer updated and have
>>>              been deprecated in favor of /tools and /bin which are
>>>              maintained for all builds. Similarly, I would strongly
>>>              discourage following any advice from blogs as they tend to
>>>              be outdated, wrong or both.
>>>
>>>              Cheers
>>>              Simon
>>>
>>>
>>> _______________________________________________
>>> R-SIG-Mac mailing list
>>> R-SIG-Mac at r-project.org
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>
>> _______________________________________________
>> R-SIG-Mac mailing list
>> R-SIG-Mac at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>


From rkoenker @end|ng |rom ||||no|@@edu  Sat Apr 30 18:17:49 2022
From: rkoenker @end|ng |rom ||||no|@@edu (Koenker, Roger W)
Date: Sat, 30 Apr 2022 16:17:49 +0000
Subject: [R-SIG-Mac] Setting _R_CHECK_DEPENDS_ONLY_=true
In-Reply-To: <C35B0CCB-484F-42BE-8FEC-168ECED3F346@dcn.davis.ca.us>
References: <9bc73767-ab49-c828-4044-36fba7274f1f@umu.se>
 <CD2DBF0F-1D4B-4A1A-AF7E-CBA1FEC9459F@gmail.com>
 <c61bb1a4-66fd-a3a4-a8f7-9530ab68b7ac@umu.se>
 <0910300B-E8DE-4E66-98C6-D08A96C4022B@R-project.org>
 <B09F0497-BBE6-4549-999E-29A59DC975D3@gmail.com>
 <916FAE6F-D1DF-409A-AFC4-8A2AA1998A37@R-project.org>
 <EE77F266-8D1D-4043-8B0A-B6FBD2DC73C0@gmail.com>
 <43c41357-75ac-e267-b42c-5d5cc8dabff7@gmail.com>
 <C35B0CCB-484F-42BE-8FEC-168ECED3F346@dcn.davis.ca.us>
Message-ID: <8AC4E82C-6467-402A-B7BC-2A5BC01B6664@illinois.edu>


I?m trying to enable  _R_CHECK_DEPENDS_ONLY_=true  option for R CMD check ?as-cran  on a 

R version 4.1.3 (2022-03-10) -- "One Push-Up?  on an Intel mac mini.

> .libPaths()
[1] "/Library/Frameworks/R.framework/Versions/4.1/Resources/library?

I?ve tried putting  _R_CHECK_DEPENDS_ONLY_=true in ~/.R/check.Renviron

and also tried (in bash) export _R_CHECK_DEPENDS_ONLY_=true in bash prior to R CMD check, but I can?t replicate the errors found with CRAN checking, which is becoming embarrassing.

Kurt offered the following Zen koan:

> The mechanism only works when you only have the base/recommended
> packages in .Library, and the rest in a separate user library. Which
> needs a .libPaths() of lenght at least two ?

When I do:

> Sys.getenv("R_LIBS_USER")
[1] "~/Library/R/x86_64/4.1/library?

But as the R Installation and Administration manual says this is only used if it exists, which it doesn?t in my case.  I now interpret this to mean that I should install 4.2, create this directory and reinstall packages so that they appear there rather than under the RHOME directory.   If someone could confirm this or suggest an alternative strategy I?d be most grateful.

Roger

From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Sat Apr 30 19:10:07 2022
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Sat, 30 Apr 2022 10:10:07 -0700
Subject: [R-SIG-Mac] Contributing to documentation [Was: Installing
 gfortran]
In-Reply-To: <135a8cf3-f105-7081-a0d9-d09bd55ebd6b@gmail.com>
References: <9bc73767-ab49-c828-4044-36fba7274f1f@umu.se>
 <CD2DBF0F-1D4B-4A1A-AF7E-CBA1FEC9459F@gmail.com>
 <c61bb1a4-66fd-a3a4-a8f7-9530ab68b7ac@umu.se>
 <0910300B-E8DE-4E66-98C6-D08A96C4022B@R-project.org>
 <B09F0497-BBE6-4549-999E-29A59DC975D3@gmail.com>
 <916FAE6F-D1DF-409A-AFC4-8A2AA1998A37@R-project.org>
 <EE77F266-8D1D-4043-8B0A-B6FBD2DC73C0@gmail.com>
 <43c41357-75ac-e267-b42c-5d5cc8dabff7@gmail.com>
 <C35B0CCB-484F-42BE-8FEC-168ECED3F346@dcn.davis.ca.us>
 <135a8cf3-f105-7081-a0d9-d09bd55ebd6b@gmail.com>
Message-ID: <F01C459B-D751-4245-AAD1-17B36601A910@dcn.davis.ca.us>

Re revision numbers... yes, you might have to take care to handle aligning the baseline code against which the patch was generated manually. Given that outside contributions would tend to start from specific releases though this shouldn't be too onerous.

The bigger impedance is that people who are good with documentation but not with code have a significant impedance in learning how patches work. In these days where you can use the GitHub web interface to clone a repo, edit a file, and submit a pull request without ever leaving the web browser, tools like diff and patch seem excessive. Only fogeys/nerds like us view them as the fabric of computing.

>> Re git and empty directories... git is structurally incapable of recording them in the repo. A common workaround is to touch a .gitkeep file in the directory, but I suspect this will never become an automated feature of git because it cannot be hidden from the user without making the chosen filename off-limits to the user.
>
>That seems like a design flaw, but a pretty easy one to work around.

Git only cares about the data in files, not how those files are identified. Attempting to pretend that a directory is identifiable by its content breaks that principle. There is a significant benefit from the implementation and user mental model perspectives associated with this shift, but if you don't utilize those benefits then git is probably not for you. It has been a worthwhile shift for many, many others though... so calling it a design "flaw" might seem innocuous but misses the significant value associated with that design principle for others.

Yes, the workaround is easy. But it cannot be hidden unfortunately, so automating it within the git software itself has so far been rejected since the idea that empty directories exist in git is anathema and pretending otherwise breaks the canonical mental model.

On April 30, 2022 9:06:53 AM PDT, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>On 30/04/2022 11:07 a.m., Jeff Newmiller wrote:
>> Generating patch files is one of the most fundamental capabilities of git. Changes to the Linux kernel are (almost?) universally submitted via patch files generated from git.
>
>svn uses nearly standard patch files, but they record svn revision numbers.  I'd guess directly applying a git patch file to an svn working copy would almost always work, but I'm not sure it would always be applied correctly in the case where the patch was created from rev X and applied to rev Y.
>
>> Re git and empty directories... git is structurally incapable of recording them in the repo. A common workaround is to touch a .gitkeep file in the directory, but I suspect this will never become an automated feature of git because it cannot be hidden from the user without making the chosen filename off-limits to the user.
>
>That seems like a design flaw, but a pretty easy one to work around.
>
>Duncan Murdoch
>
>
>> On April 30, 2022 7:45:40 AM PDT, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>> On 30/04/2022 9:53 a.m., Patrick Schratz wrote:
>>>>      If that is the case, why not contribute to the documentation? That
>>>>      is the whole point of an open source project after all.
>>>> 
>>>> Because often it is not easily accessible, e.g. living in an ancient SVN repo or lacking (an easy) and clear contribution guide.
>>> 
>>> There's a mirror of that repo at https://github.com/wch/r-source .  It is of course unofficial and not maintained by R Core so I could understand you might worry about using it, but as far as I know it is well maintained.  The only difference that I ever heard about in the past was that the official svn repo had an empty directory somewhere or other, and git at the time didn't support empty directories.  I don't know if either of those is still true.
>>> 
>>> 
>>>> WRT to the Mac dev instructions, I can see that the source lives in https://github.com/R-macos/R-mac-dev <https://github.com/R-macos/R-mac-dev> which is definitely a good start.
>>>> Yet I think it needs way more cross-linking between the repos, more ?official? pointers and ?how-tos? to really also encourage people to contribute.
>>>> The README could give more detailed contribution instructions, such as whom to tag for a PR, what should go there and what not, possibly stating that it?s the official documentation and define it from other ?random? orgs on developer portals - all of these could e.g. go into a |CONTRIBUTING.md| which is a widely known source for such information.
>>>> Just some personal thoughts though which could potentially considered to improve things.
>>>> 
>>>> To be clear, I acknowledge your effort in opening things up to platforms like GH - which not all parts of R/CRAN are doing at the moment AFAIK.
>>>> And yes, when complaining about things not being optimal, one should also put in effort to make things better.
>>>> So I?ll see if I can put some time in to improve things and see how the experience is.
>>> 
>>> If you're happier working in git than in svn, what you could do is fork the mirror repo to your own git repo, and make your proposed changes there.  If they are good changes it won't be hard for someone (maybe even you) to convert into the appropriate format to merge into svn.
>>> 
>>> The way R development changes is when a change makes things easier for the devs.  I suspect whether it's easier for you is only important to them if you've got a history of making helpful contributions: they like help, they don't like arguments about how to do things.  (I'm saying this as a former member of R Core.)
>>> 
>>> Duncan Murdoch
>>> 
>>>> 
>>>>      The problem is that generally they cannot. You are looking something
>>>>      up, because you don't know about it so you can't judge whether it is
>>>>      a good answer (SO is good example proving why crowd-souring the
>>>>      definition of truth doesn't generally work). At best you may know
>>>>      the person and thus judge by that, but even then you may not know if
>>>>      the information is still accurate.
>>>> 
>>>> I see your point here and generally agree that it?s hard making such judgements in this position.
>>>> Yet I disagree on referring to Stackoverflow as a ?crowd-souring the definition of truth doesn't generally work?. Without SO, we would be nowhere where we are today and I?d argue it has done a lot more positive things than negative ones to every single person who ever accessed it. >
>>>> Cheers
>>>> Patrick
>>>> 
>>>> On 25 Apr 2022, at 1:04, Simon Urbanek wrote:
>>>> 
>>>>          On Apr 23, 2022, at 7:44 PM, Patrick Schratz
>>>>          <patrick.schratz at gmail.com> wrote:
>>>> 
>>>>          FWIW blog posts which explain such things usually have a (good)
>>>>          reason - they aim to help people getting started when the
>>>>          official documentation is either unclear, hard to find or
>>>>          incomplete.
>>>> 
>>>>      If that is the case, why not contribute to the documentation? That
>>>>      is the whole point of an open source project after all.
>>>> 
>>>>      The problem with random blogs is that many of them are written by
>>>>      people trying to find an answer without much knowledge on the
>>>>      subject and often post very bad advice that does not necesarily
>>>>      address the actual issue. There are rare exceptions of knowledgeable
>>>>      people posting explanatory blogs, but if you search for an answer
>>>>      you have no way of knowing whether it is of the good kind. In
>>>>      addition, blogs tend to get out of date quickly, so what used to be
>>>>      a good advice may not be anymore (prime example was the R 4.0.0
>>>>      release which made a lot of the "hacks" obsolete and the well-meant
>>>>      advice out there has only led to more problems).
>>>> 
>>>>          It?s on the readers themselves to decide whether such blog posts
>>>>          are trustworthy or useful.
>>>> 
>>>>      The problem is that generally they cannot. You are looking something
>>>>      up, because you don't know about it so you can't judge whether it is
>>>>      a good answer (SO is good example proving why crowd-souring the
>>>>      definition of truth doesn't generally work). At best you may know
>>>>      the person and thus judge by that, but even then you may not know if
>>>>      the information is still accurate.
>>>> 
>>>>          I have personally profited so often from blog posts of others
>>>>          already and therefore find the general advice to not consult
>>>>          such resources quite shortsighted.
>>>>          Of course the official documentation should always be the first
>>>>          point to have a look at - and in this case the required
>>>>          information would have been there.
>>>> 
>>>>          Apologies for going partly off-topic but I think this point is
>>>>          important.
>>>> 
>>>>      I agree. That's why I think it would be great if those that have the
>>>>      knowledge would help the community to improve the documentation. Of
>>>>      all the contributions to R it is the easiest.
>>>> 
>>>>      That said, I also agree that complementary information is very
>>>>      useful, in particular if it explains the "why" as well - which may
>>>>      be too far out of scope of the canonical documentation. In that case
>>>>      it is easier to spot mismatches, e.g., if it becomes out of date. It
>>>>      is not without precedent to reference such external documentation if
>>>>      it is maintained.
>>>> 
>>>>      Anyway, I'd like to encourage everyone to contribute - it may be
>>>>      pointing out issues in the documentation or by sending PRs with
>>>>      proposed updates or posting here. Some did in the past (like you,
>>>>      Jan or Bob, thanks!), but the more contribute the better for the
>>>>      community. Often this may also uncover genuine issues that should be
>>>>      addressed rather than worked around (like the lack of the symlink in
>>>>      the gfortran-12 tar-ball discovered just this morning...).
>>>> 
>>>>      Cheers,
>>>>      Simon
>>>> 
>>>>          Cheers
>>>>          Patrick
>>>> 
>>>>          On 23 Apr 2022, at 2:13, Simon Urbanek wrote:
>>>> 
>>>>              For posterity - please always consult
>>>> 
>>>>              https://mac.r-project.org/tools/
>>>>              <https://mac.r-project.org/tools/> (linked from CRAN)
>>>> 
>>>>              The old locations like libs* are no longer updated and have
>>>>              been deprecated in favor of /tools and /bin which are
>>>>              maintained for all builds. Similarly, I would strongly
>>>>              discourage following any advice from blogs as they tend to
>>>>              be outdated, wrong or both.
>>>> 
>>>>              Cheers
>>>>              Simon
>>>> 
>>>> 
>>>> _______________________________________________
>>>> R-SIG-Mac mailing list
>>>> R-SIG-Mac at r-project.org
>>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>> 
>>> _______________________________________________
>>> R-SIG-Mac mailing list
>>> R-SIG-Mac at r-project.org
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>> 
>

-- 
Sent from my phone. Please excuse my brevity.


From p@tr|ck@@chr@tz @end|ng |rom gm@||@com  Sat Apr 30 20:58:05 2022
From: p@tr|ck@@chr@tz @end|ng |rom gm@||@com (Patrick Schratz)
Date: Sat, 30 Apr 2022 20:58:05 +0200
Subject: [R-SIG-Mac] CRAN installer for macOS - directory permissions
In-Reply-To: <290E0344-9E1B-4979-B211-321B0633C606@R-project.org>
References: <36345395-F4E6-4069-9900-990E283FA7AC@gmail.com>
 <9200B51A-3A42-42B1-8E1F-4A31C61D5AFA@R-project.org>
 <4F79D380-A4F5-4562-97C2-7B0C4693EEB7@gmail.com>
 <290E0344-9E1B-4979-B211-321B0633C606@R-project.org>
Message-ID: <21CB0991-A1A8-4F36-B151-93AD204D7A09@gmail.com>

> They don't go there "silently" as in unnoticed - they go there if you instruct R to do so. That's why there is an explicit choice in the Installer. Otherwise regular R rules apply.

Where is this choice in the installer? I don?t see a menu/setting which users could change to install packages into a user lib instead of the system lib (if they are part of the `admin` group).
To me, they go there if the lib is writable - and ?the common? R user does not know that the system lib is writeable by default.

> It only does so for admin users. Unlike "managed" unix systems, on macOS you have essentially two situations:
>
> On a "personal" machine (like laptop) the user is the main user and admin. Therefore it makes a lot more sense for the user to use a single location for managing packages which is at the system level. This also allows easy R upgrades. In addition, locations in user home raise a lot of issues (see the various discussion where this bites people on Windows) due to interactions with software that does mirroring, backups etc.. Hence this approach "just works" as one would expect on a Mac.

To be clear: I don?t question the system-wide installation and I think this is good as is (this also happens on Linux).
I am questioning the group write permissions for the system lib.

> If the user wishes to use his/her private library, it is trivial - just click on "At User Level" and from then on all packages are managed user's local library just like on any other platform.

I might be missing something obvious but where is this option ?at the user level?? I assumed you?re talking about the official `.dmg` installer - which does not have such an option AFAICS?

> On a "managed" Mac the user is not an admin and therefore the behavior makes no difference. The status quo just makes it easier for admins to manage the shared library, but in reality this doesn't matter as one would assume the admins know what they are doing.

I disagree on this, especially the point ?makes it easier for admins to manage the shared library?.
Admins should (and will) always be able to manage the system lib *after* authenticating (as on Linux). The authentication step does not really make a difference in practice for admins and is required in almost all places where system-wide changes are desired.

This is also the *core* of the whole discussion: 775 vs 755 (WRT to directory permissions).
I don?t see any (strong) reason that would result in 775 > 755.
(If so, then the default should probably also be changed on Linux.)
In a previous message, Kevin Ushey also agreed on the point that explicit authorization should be required to write into the system lib.
I assume there might be many more people who would actually agree on this 755 being preferable in this situation.
How can a proposal be phrased to reconsider this setting that is evaluated by a representative group of people?
I am not claiming to be right but I?d be interested in a multi-person evaluation of this setting rather than keeping this at a person-to-person discussion level.

> Well, having administered company-wide R installations in large companies for almost two decades I'd strongly disagree. As an admin you want as few user-installed packages as possible, because they are guaranteed to cause problems. You want to limit this for things like development of packages where you want the stable version globally and development version locally (and this is not just me - have a look how the top tech companies manage their software). You have a reliable, stable central location - if you don't do that then you'll have n libraries to manage for n users which is absolutely not sustainable as users will break their libraries and you cannot even upgrade R. Also having a central, shared library is crucial for collaboration. Unlike in Python in R it actually works since R and CRAN doesn't allow randomly breaking reverse-dependencies.

As a system engineer and admin myself (for several ?large? companies/institutions), I kindly disagree on your view here.
User packages are not a problem but *a feature*, everyone can install the versions they need for their project.
They don?t interfere with packages from other users and are not forced go with the update interval of an admin.
With the additional use of renv (thanks Kevin!), redundancy is highly reduced as a shared cache can be used from with users can simply use symlinks rather than installing the x-th copy of the same R package version. But this is partly off-topic WRT to the actual discussion.

Overall this sub-discussion part might come down to the philosophy of having a ?centrally managed, unflexible admin installation? or a ?centrally managed, partly-flexible admin installation? where only the R versions and system libs are managed but users have the freedom to install any R packages they want.
Also in ?my? philosophy, it?s not about ?upgrading? R and removing the previous version but adding new versions as they come in and keeping previous ones - for the purpose of reproducibility.
I usually keep the latest patch version of a minor version and aim to provide a consistent R environment for various minor versions where users are guaranteed to be able to work with that minor version in a flexible way (i.e. by installing user packages as they want) for many years ahead.

> As mentioned before and above I disagree. The proposal doesn't matter for managed Macs but would negatively affect users that are single-user admins and since that is typically the case for the majority of Mac R users (as they typically are on their personal machines) I don't see any upshot. All it would do is to prevent typical R users to install packages directly.

How would it affect single-user admins in a negative way?
They can

- still install packages per R minor version into a dedicated user library
- install multiple R minor versions side by side
- actually enjoy the same behavior as on Linux

> All it would do is to prevent typical R users to install packages directly.

I don?t understand this point. It would behave similar as on Linux, where users are prompted to create a user library (on first use and if non exists yet).

As you can see, the overall discussion topic is quite important to me and I am still convinced that the current state on macOS is suboptimal.
Thanks for your time and sharing your thoughts.

Cheers
Patrick

On 25 Apr 2022, at 1:46, Simon Urbanek wrote:

> Patrick,
>
> sorry fo the delayed reply - this was not a quick e-mail so I had to find time after the release :)
>
>
>> On Apr 3, 2022, at 8:26 PM, Patrick Schratz <patrick.schratz at gmail.com> wrote:
>>
>> Hi Simon,
>>
>> thanks for your extensive reply.
>>
>> The choice is deliberate: the admin group on macOS corresponds to users that are allowed to install system-wide software so it allows all admins on the machine to install packages which is the expected way on macOS.
>>
>> I think this choice is unfortunate as it contrasts with existing behavior on other platforms where one needs to explicitly request admin privileges by either using sudo or starting R as an admin.
>> On macOS, packages just go into the system lib ?silently? because of the write permissions granted via the admin group.
>> See also my comments further down for more details on this.
>>
>
> They don't go there "silently" as in unnoticed - they go there if you instruct R to do so. That's why there is an explicit choice in the Installer. Otherwise regular R rules apply.
>
>
>> Also the versioning of the R framework as x.y is also deliberate - upgrading R to a new patch version does *not* require re-installation of packages, they work by design so in fact the system location is the safest way to do that. Also note that packages are never removed by the installer.
>>
>> Thanks, I am aware that a patch update does not require a reinstallation as the packages are functional across minor versions.
>>
>> I checked again and was indeed wrong, patch updates from the CRAN installer do not remove additional custom packages in the system lib.
>> I was confused by some custom approaches of mine which cause this behavior - sorry for this!
>>
>> So out of the items listed in "The problem" they are all not true with the exception of the comparison with the other platforms, but even that difference is very subtle as it only affects the default on the first installation and not regular use (and I'm, not even sure it that is true since admin users can still install in the system location on other platforms).
>>
>> On Linux you would need to do explicitly invoke sudo R to allow writing into the system lib.
>> The issue on macOS is that a regular start of R allows system lib write permissions.
>> In my current view I think a similar behavior as on Linux would be great, i.e. to explicitly having to request admin privileges for this task.
>>
>
> It only does so for admin users. Unlike "managed" unix systems, on macOS you have essentially two situations:
>
> On a "personal" machine (like laptop) the user is the main user and admin. Therefore it makes a lot more sense for the user to use a single location for managing packages which is at the system level. This also allows easy R upgrades. In addition, locations in user home raise a lot of issues (see the various discussion where this bites people on Windows) due to interactions with software that does mirroring, backups etc.. Hence this approach "just works" as one would expect on a Mac. If the user wishes to use his/her private library, it is trivial - just click on "At User Level" and from then on all packages are managed user's local library just like on any other platform.
>
> On a "managed" Mac the user is not an admin and therefore the behavior makes no difference. The status quo just makes it easier for admins to manage the shared library, but in reality this doesn't matter as one would assume the admins know what they are doing.
>
>
>> I don?t understand the part ?as it only affects the default on the first installation and not regular use? of your reply - could you clarify this?
>> Unless a user creates a user lib manually, packages will always go into the system lib - not only on first use - but I might be misunderstanding your comment here.
>>
>> I would argue that the current setup tends to be a lot safer than the alternatives, because it allows commonly used packages to be installed at the system level and private packages to be installed at user level. This is also the design typically used on shared machines, where you separate local packages from user packages where local ones are installed by administrators - so exactly the same setup. Moreover R upgrades are a lot cleaner, since you can easily upgrade all system packages at once so you don't have to worry about individual users having stale packages - the biggest problem for admins.
>>
>> Yes and no.
>> Sometimes system admins want to install certain packages globally - however, I never do so for the following reason:
>> Often this will lead to multiple package installations, i.e. one in the syslib and one in the user lib (if the user installs the package again for some reason which quite often happens).
>> Often these duplicated packages will have different versions and users are confused which one is actually loaded (the user lib one is as it is first in the path).
>>
>> Aside from this practical point, Macs are rarely used in a shared way.
>> And even if, I?d highly favor having to request write permissions into the syslib rather it happening by default.
>>
>> Imagine a scenario where the admin of a shared Mac constantly writes into the syslib (because this is the default). This syslib is then also used by other non-admin users on the system.
>> I don?t think this is a desired scenario and might cause lot?s of confusion (not even mentioning the fact if all people in this scenario are aware what?s going on given that this is a niche topic).
>> Here I think a one-time central installation of R and then only working with user libs (as on Linux) would be preferable.
>>
>
> Well, having administered company-wide R installations in large companies for almost two decades I'd strongly disagree. As an admin you want as few user-installed packages as possible, because they are guaranteed to cause problems. You want to limit this for things like development of packages where you want the stable version globally and development version locally (and this is not just me - have a look how the top tech companies manage their software). You have a reliable, stable central location - if you don't do that then you'll have n libraries to manage for n users which is absolutely not sustainable as users will break their libraries and you cannot even upgrade R. Also having a central, shared library is crucial for collaboration. Unlike in Python in R it actually works since R and CRAN doesn't allow randomly breaking reverse-dependencies.
>
>
>> From a technical perspective, I know that setting root:root on macOS is not possible. My proposed change to 755 (and leaving root:admin) would however exactly mimic this (and the one of Linux installs) behavior:
>>
>> 	? admins would need to do sudo R to install into the system library
>> 	? otherwise they are prompted to create a user library
>> Which downsides would this approach have? Currently I don?t see any. It would even harmonize CRAN installer behavior across platforms.
>>
>> I'd be happy to hear from more Mac user if there are reasons to change the default, but as I outlined the choices were deliberate after weighting the pros and cons. In my view the major issue with the proposal it that is would prevent sharing of packages, make R upgrades a lot harder and prevent admin users from using the current tools for package management - and that includes the ability to separate system and user packages on single-user machines.
>>
>> I?ll try to vision the practical changes of this:
>>
>> 	? Patch update experience would not change as custom packages will be in the user lib for the respective minor version (by default)
>> 	? Admins are still able to install into the system lib when using sudo R
>> 	? AFAICS admins will still be able to separate system and user packages as they can use sudo R for syslib installs. To me, the proposed change would even make the behaviour more clear than before (which requires to create a hidden folder (user lib) in the right place to actually use a user lib).
>> Let me know if I overlook something - but currently I don?t see any downside but various positive impacts.
>>
>
> As mentioned before and above I disagree. The proposal doesn't matter for managed Macs but would negatively affect users that are single-user admins and since that is typically the case for the majority of Mac R users (as they typically are on their personal machines) I don't see any upshot. All it would do is to prevent typical R users to install packages directly.
>
>
>> Last, I wanted to ask if the source code for the CRAN installer is publicly available? I could not find it and would be interested to take a look into it. If this is not possible for some reason, I would also be interested in getting to know the reason for this decision.
>>
>
>
> Everything is in the R SVN, the R build and release system is in
> https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4
> and Apple Installer packaging is in
> https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging
> and the relevant postflight script is in
> https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging/scripts-R-fw/postflight
>
>
>> On Apr 13, 2022, at 8:43 PM, Patrick Schratz <patrick.schratz at gmail.com> wrote:
>>
>> Related to this Q: Are the macOS CRAN policies actively discussed by a team of people (who might eventually also be willing to share their thoughts or could be addressed with such questions) or are you solely responsible for it?
>>
>
>
> CRAN is an entire team, so yes, but as for anything Mac-related it includes R-core and other stake holders that have expressed interest before (e.g. Bioconductor). Obviously, this (R-SIG-Mac) is also a good place as that includes anyone who cares about R on macOS.
>
> Cheers,
> Simon
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20220430/25e81cb4/attachment-0001.html>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 870 bytes
Desc: OpenPGP digital signature
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20220430/25e81cb4/attachment-0001.sig>

