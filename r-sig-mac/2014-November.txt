From sjkiss at gmail.com  Sun Nov  2 13:17:41 2014
From: sjkiss at gmail.com (Simon Kiss)
Date: Sun, 2 Nov 2014 07:17:41 -0500
Subject: [R-SIG-Mac] WebDav connection?
Message-ID: <41872F46-44E2-4810-91D8-EB0DBBED4577@gmail.com>

Hello: 
My work offers server space that we access via a Webdav connection.  I'm able to mount the volume in the finder from home, but I'm having trouble reading a data set into R.  I've tried playing with getURL using the userpwd option and creating a standard http:// url connection, but none of this works.  Has anyone ever used R to access data sets via a Webdav connection?
Thanks, Simon Kiss

*********************************
Simon J. Kiss, PhD
Assistant Professor, Wilfrid Laurier University
73 George Street
Brantford, Ontario, Canada
N3T 2C9
Cell: +1 905 746 7606


From ALPEROVYCH at em-lyon.com  Tue Nov  4 17:25:28 2014
From: ALPEROVYCH at em-lyon.com (ALPEROVYCH Yan)
Date: Tue, 4 Nov 2014 17:25:28 +0100
Subject: [R-SIG-Mac] R 3.1.2 & Yosemite GUI slowness
Message-ID: <4A4F529C-F2AE-476E-AD34-E3244FEB7BB9@em-lyon.com>

(Sorry if the posting is not in the right list)

I?ve just upgraded to R 3.1.2 (Yosemite machine, sessionInfo bellow) with and noticed strange behavior of the GUI. I work with scripts that produce a substantial amount of the printed output in the console. After about two full pages of console output the GUI starts to be very slow and laggy. This also causes the scrolling to lag and be choppy. The cure is to clear the console but this slowness reappears again soon enough with new printed output.

I tried to launch R from terminal, it there?s absolutely not issues alike in this case. I can easily print a data.frame with 26k rows and no lags whatsoever.

I don?t know what?s causing this but any help is greatly appreciated.

Cheers,
Yan

?????

> sessionInfo()
R version 3.1.2 (2014-10-31)
Platform: x86_64-apple-darwin13.4.0 (64-bit)

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

other attached packages:
[1] plyr_1.8.1

loaded via a namespace (and not attached):
[1] Rcpp_0.11.3 tools_3.1.2

?????

> Sys.getenv("PATH")
[1] "/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin"

?????

R version 3.1.2 (2014-10-31) -- "Pumpkin Helmet"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[R.app GUI 1.65 (6833) x86_64-apple-darwin13.4.0]

[Workspace restored from /Users/Yashper/Library/R/.RData]
[History restored from /Users/Yashper/Library/R/.Rapp.history]


----
Ce message electronique et tous les fichiers attaches qu'il contient sont confidentiels et destines exclusivement ? l'usage de la personne ? laquelle ils sont adresses. Si vous avez re?u ce message par erreur, merci de le retourner ? son metteur. Les idees et opinions presentees dans ce message sont celles de son auteur, et ne representent pas necessairement celles de l'institution ou entite affiliee dont l'auteur est l'employe. La publication, l'usage, la distribution, l'impression ou la copie non autorisee de ce message et des attachements qu'il contient sont strictement interdits.

This email and any files transmitted with it are confidential and intended solely for the use of the individual or entity to whom they are addressed. If you have received this email in error please return it to the sender. The ideas and views expressed in this email are solely those of its author, and do not necessarily represent the views of the institution or company of which the author is an employee. Unauthorized publication, use, distribution, printing or copying of this e-mail or any attached files is strictly forbidden. 

From mzp3769 at gmail.com  Wed Nov  5 04:14:24 2014
From: mzp3769 at gmail.com (M P)
Date: Tue, 4 Nov 2014 20:14:24 -0700
Subject: [R-SIG-Mac] poor quality png/tiff/pdf on mac
Message-ID: <CAARDZMXd8VSn3Dzk5iUvE8p_hYz0D0XP40rrtP-ZYHN=mpkJGw@mail.gmail.com>

Hello,
I cannot fix image quality e.g. generated with filled.contour(). Whether I
use tiff, png, jpeg, or pdf I always see vertical and horizontal lines at
every grid increment on the plots like the attached. There is no problem
when I plot in x11.
How to fix that?
Thanks,
Mark
[image: Inline image 1]
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20141104/dab59ef6/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: increment_aug_24.png
Type: image/png
Size: 165036 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20141104/dab59ef6/attachment-0001.png>

From colin at colinsmith.org  Wed Nov  5 09:24:44 2014
From: colin at colinsmith.org (Colin A. Smith)
Date: Wed, 5 Nov 2014 09:24:44 +0100
Subject: [R-SIG-Mac] poor quality png/tiff/pdf on mac
In-Reply-To: <CAARDZMXd8VSn3Dzk5iUvE8p_hYz0D0XP40rrtP-ZYHN=mpkJGw@mail.gmail.com>
References: <CAARDZMXd8VSn3Dzk5iUvE8p_hYz0D0XP40rrtP-ZYHN=mpkJGw@mail.gmail.com>
Message-ID: <12155296-8821-4C66-BC08-074445BDAB04@colinsmith.org>

Hi Mark,

I assume you?re using a Mac. This problem comes from the way Quartz renders immediately adjacent filled polygons. To get around it, you can add type=?cairo? or type=?Xlib? as an argument to the tiff, png, or jpeg call. If you really want to make a PDF, I can post those instructions to the list, but it is a bit more involved and uses some custom code I?ve written.

Cheers,

Colin

PS: I would avoid cross-posting to multiple lists in the future. That?s generally frowned upon.

> On Nov 5, 2014, at 4:14, M P <mzp3769 at gmail.com> wrote:
> 
> Hello,
> I cannot fix image quality e.g. generated with filled.contour(). Whether I use tiff, png, jpeg, or pdf I always see vertical and horizontal lines at every grid increment on the plots like the attached. There is no problem when I plot in x11.
> How to fix that?
> Thanks,
> Mark


From ALPEROVYCH at em-lyon.com  Wed Nov  5 09:41:32 2014
From: ALPEROVYCH at em-lyon.com (ALPEROVYCH Yan)
Date: Wed, 5 Nov 2014 09:41:32 +0100
Subject: [R-SIG-Mac] R 3.1.2 & Yosemite GUI slowness
Message-ID: <EDA4098F-20B8-4FCD-B3D9-A4B6B518D937@em-lyon.com>

Hi again,

I?ve just run two following tests.

1. Clean install of 3.1.2

Printing the following data.frame:
> dim(ciq)
[1] 41888    11

> system.time(print(ciq[, 1:4]))

      transaction_id         lat         long           accuracy
1      IQTR254385851  38.3486214  -81.6408805        APPROXIMATE
?
24999   IQTR32342347  29.7481268  -95.4801119        APPROXIMATE
 [ reached getOption("max.print") -- omitted 16889 rows ]
   user  system elapsed
  9.814   0.066   9.852

Obviously, once all this is on the console, it becomes very slow and unresponsive.

2. Downgrading to 3.1.1:

Same data.frame
> dim(ciq)
[1] 41888    11

> system.time(print(ciq[, 1:4]))
      transaction_id         lat         long           accuracy
1      IQTR254385851  38.3486214  -81.6408805        APPROXIMATE
?
24999   IQTR32342347  29.7481268  -95.4801119        APPROXIMATE
 [ reached getOption("max.print") -- omitted 16889 rows ]
   user  system elapsed
  2.243   0.035   2.351

No lags at all even with console full of output?

Hope this helps.

Cheers,
Yan

***************************************************
Yan ALPEROVYCH, Ph.D.
Associate Professor of Finance
EMLYON Business School
Tel.: +33 4 72 18 29 11
E-mail: alperovych at em-lyon.com<mailto:alperovych at em-lyon.com>

LinkedIN: fr.linkedin.com/in/yanalperovych/<http://fr.linkedin.com/in/yanalperovych/>


----
Ce message electronique et tous les fichiers attaches qu'il contient sont confidentiels et destines exclusivement ? l'usage de la personne ? laquelle ils sont adresses. Si vous avez re?u ce message par erreur, merci de le retourner ? son metteur. Les idees et opinions presentees dans ce message sont celles de son auteur, et ne representent pas necessairement celles de l'institution ou entite affiliee dont l'auteur est l'employe. La publication, l'usage, la distribution, l'impression ou la copie non autorisee de ce message et des attachements qu'il contient sont strictement interdits.

This email and any files transmitted with it are confidential and intended solely for the use of the individual or entity to whom they are addressed. If you have received this email in error please return it to the sender. The ideas and views expressed in this email are solely those of its author, and do not necessarily represent the views of the institution or company of which the author is an employee. Unauthorized publication, use, distribution, printing or copying of this e-mail or any attached files is strictly forbidden. 

From marc_schwartz at me.com  Wed Nov  5 14:13:18 2014
From: marc_schwartz at me.com (Marc Schwartz)
Date: Wed, 05 Nov 2014 07:13:18 -0600
Subject: [R-SIG-Mac] poor quality png/tiff/pdf on mac
In-Reply-To: <12155296-8821-4C66-BC08-074445BDAB04@colinsmith.org>
References: <CAARDZMXd8VSn3Dzk5iUvE8p_hYz0D0XP40rrtP-ZYHN=mpkJGw@mail.gmail.com>
	<12155296-8821-4C66-BC08-074445BDAB04@colinsmith.org>
Message-ID: <954A67EF-6D6D-4302-B320-CB5335ADFD6B@me.com>

Hi,

I am presuming that the PNG file that was attached to the original post by Mark is a screen cap and not the original file created by R.

If so, you might review the following R FAQ:

  http://cran.r-project.org/doc/FAQ/R-FAQ.html#Why-are-there-unwanted-borders

Regards,

Marc Schwartz


> On Nov 5, 2014, at 2:24 AM, Colin A. Smith <colin at colinsmith.org> wrote:
> 
> Hi Mark,
> 
> I assume you?re using a Mac. This problem comes from the way Quartz renders immediately adjacent filled polygons. To get around it, you can add type=?cairo? or type=?Xlib? as an argument to the tiff, png, or jpeg call. If you really want to make a PDF, I can post those instructions to the list, but it is a bit more involved and uses some custom code I?ve written.
> 
> Cheers,
> 
> Colin
> 
> PS: I would avoid cross-posting to multiple lists in the future. That?s generally frowned upon.
> 
>> On Nov 5, 2014, at 4:14, M P <mzp3769 at gmail.com> wrote:
>> 
>> Hello,
>> I cannot fix image quality e.g. generated with filled.contour(). Whether I use tiff, png, jpeg, or pdf I always see vertical and horizontal lines at every grid increment on the plots like the attached. There is no problem when I plot in x11.
>> How to fix that?
>> Thanks,
>> Mark


From mzp3769 at gmail.com  Wed Nov  5 15:45:51 2014
From: mzp3769 at gmail.com (M P)
Date: Wed, 5 Nov 2014 07:45:51 -0700
Subject: [R-SIG-Mac] poor quality png/tiff/pdf on mac
In-Reply-To: <954A67EF-6D6D-4302-B320-CB5335ADFD6B@me.com>
References: <CAARDZMXd8VSn3Dzk5iUvE8p_hYz0D0XP40rrtP-ZYHN=mpkJGw@mail.gmail.com>
	<12155296-8821-4C66-BC08-074445BDAB04@colinsmith.org>
	<954A67EF-6D6D-4302-B320-CB5335ADFD6B@me.com>
Message-ID: <CAARDZMWWc3OEvhC=vfFkza_EOhmowL10vX00S8LX99+xeriDkg@mail.gmail.com>

Thanks Colin,
It appears I have an older version of lipng which won't  allow
type="cairo"/"Xlib". Need to ugrade,
Mark

On Wed, Nov 5, 2014 at 6:13 AM, Marc Schwartz <marc_schwartz at me.com> wrote:

> Hi,
>
> I am presuming that the PNG file that was attached to the original post by
> Mark is a screen cap and not the original file created by R.
>
> If so, you might review the following R FAQ:
>
>
> http://cran.r-project.org/doc/FAQ/R-FAQ.html#Why-are-there-unwanted-borders
>
> Regards,
>
> Marc Schwartz
>
>
> > On Nov 5, 2014, at 2:24 AM, Colin A. Smith <colin at colinsmith.org> wrote:
> >
> > Hi Mark,
> >
> > I assume you?re using a Mac. This problem comes from the way Quartz
> renders immediately adjacent filled polygons. To get around it, you can add
> type=?cairo? or type=?Xlib? as an argument to the tiff, png, or jpeg call.
> If you really want to make a PDF, I can post those instructions to the
> list, but it is a bit more involved and uses some custom code I?ve written.
> >
> > Cheers,
> >
> > Colin
> >
> > PS: I would avoid cross-posting to multiple lists in the future. That?s
> generally frowned upon.
> >
> >> On Nov 5, 2014, at 4:14, M P <mzp3769 at gmail.com> wrote:
> >>
> >> Hello,
> >> I cannot fix image quality e.g. generated with filled.contour().
> Whether I use tiff, png, jpeg, or pdf I always see vertical and horizontal
> lines at every grid increment on the plots like the attached. There is no
> problem when I plot in x11.
> >> How to fix that?
> >> Thanks,
> >> Mark
>
>

	[[alternative HTML version deleted]]


From erich.neuwirth at univie.ac.at  Fri Nov  7 02:30:18 2014
From: erich.neuwirth at univie.ac.at (Erich Neuwirth)
Date: Fri, 7 Nov 2014 02:30:18 +0100
Subject: [R-SIG-Mac] typo in OS X FAQ
Message-ID: <2033F775-56D8-4122-B827-B7D9B829CB6D@univie.ac.at>

Installing R 3.1.2 (snowleopard version) on Yosemite
I received a warning.
WARNING: You're using a non-UTF8 locale, therefore only ASCII characters will work.
Please read R for Mac OS X FAQ (see Help) section 9 and adjust your system preferences accordingly.


There seems to be a typo here.
Section 7, not section 9 has the relevant information.


From gcr at wisdomandwonder.com  Wed Nov 12 15:35:45 2014
From: gcr at wisdomandwonder.com (Grant Rettke)
Date: Wed, 12 Nov 2014 08:35:45 -0600
Subject: [R-SIG-Mac] How to choose between the CRAN release of OSX R vs the
	Brew release?
Message-ID: <CAAjq1mfu8woBHO1Rm3iJ0oZ9SYavNyZck9CwTLaPQOMVoN7t-Q@mail.gmail.com>

Good morning,

How do you choose between the CRAN release of OSX R versus the Brew release?

I am asking your personal preference, and now how to install one
versus the other.

Because I already used Brew, I went with that and it has worked fine.

The only downside has been that R always crashes when I use ggplot2
with the quartz device, so now I only use the x11 device which, from
what I hear, is visually more crude.

Kind regards,

-- 
Grant Rettke
gcr at wisdomandwonder.com | http://www.wisdomandwonder.com/
?Wisdom begins in wonder.? --Socrates
((? (x) (x x)) (? (x) (x x)))
?Life has become immeasurably better since I have been forced to stop
taking it seriously.? --Thompson


From vincent.goulet at me.com  Wed Nov 12 17:44:37 2014
From: vincent.goulet at me.com (Vincent Goulet)
Date: Wed, 12 Nov 2014 11:44:37 -0500
Subject: [R-SIG-Mac] How to choose between the CRAN release of OSX R vs
 the Brew release?
In-Reply-To: <CAAjq1mfu8woBHO1Rm3iJ0oZ9SYavNyZck9CwTLaPQOMVoN7t-Q@mail.gmail.com>
References: <CAAjq1mfu8woBHO1Rm3iJ0oZ9SYavNyZck9CwTLaPQOMVoN7t-Q@mail.gmail.com>
Message-ID: <DD78382D-0512-4484-AE93-6EB08CC13884@me.com>

I'm pretty sure that the advice you will mostly find here is to use the CRAN release. This is certainly the version that is supported.

v.

> Le 2014-11-12 ? 09:35, Grant Rettke <gcr at wisdomandwonder.com> a ?crit :
> 
> Good morning,
> 
> How do you choose between the CRAN release of OSX R versus the Brew release?
> 
> I am asking your personal preference, and now how to install one
> versus the other.
> 
> Because I already used Brew, I went with that and it has worked fine.
> 
> The only downside has been that R always crashes when I use ggplot2
> with the quartz device, so now I only use the x11 device which, from
> what I hear, is visually more crude.
> 
> Kind regards,
> 
> -- 
> Grant Rettke
> gcr at wisdomandwonder.com | http://www.wisdomandwonder.com/
> ?Wisdom begins in wonder.? --Socrates
> ((? (x) (x x)) (? (x) (x x)))
> ?Life has become immeasurably better since I have been forced to stop
> taking it seriously.? --Thompson
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac


From murdoch.duncan at gmail.com  Wed Nov 12 18:11:23 2014
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Wed, 12 Nov 2014 12:11:23 -0500
Subject: [R-SIG-Mac] How to choose between the CRAN release of OSX R vs
 the Brew release?
In-Reply-To: <DD78382D-0512-4484-AE93-6EB08CC13884@me.com>
References: <CAAjq1mfu8woBHO1Rm3iJ0oZ9SYavNyZck9CwTLaPQOMVoN7t-Q@mail.gmail.com>
	<DD78382D-0512-4484-AE93-6EB08CC13884@me.com>
Message-ID: <546394BB.7000406@gmail.com>

On 12/11/2014 11:44 AM, Vincent Goulet wrote:
> I'm pretty sure that the advice you will mostly find here is to use the CRAN release. This is certainly the version that is supported.

Yes, most people like to use a version that doesn't crash.

Duncan Murdoch

>
> v.
>
> > Le 2014-11-12 ? 09:35, Grant Rettke <gcr at wisdomandwonder.com> a ?crit :
> >
> > Good morning,
> >
> > How do you choose between the CRAN release of OSX R versus the Brew release?
> >
> > I am asking your personal preference, and now how to install one
> > versus the other.
> >
> > Because I already used Brew, I went with that and it has worked fine.
> >
> > The only downside has been that R always crashes when I use ggplot2
> > with the quartz device, so now I only use the x11 device which, from
> > what I hear, is visually more crude.
> >
> > Kind regards,
> >
> > --
> > Grant Rettke
> > gcr at wisdomandwonder.com | http://www.wisdomandwonder.com/
> > ?Wisdom begins in wonder.? --Socrates
> > ((? (x) (x x)) (? (x) (x x)))
> > ?Life has become immeasurably better since I have been forced to stop
> > taking it seriously.? --Thompson
> >
> > _______________________________________________
> > R-SIG-Mac mailing list
> > R-SIG-Mac at r-project.org
> > https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac


From gcr at wisdomandwonder.com  Wed Nov 12 19:21:06 2014
From: gcr at wisdomandwonder.com (Grant Rettke)
Date: Wed, 12 Nov 2014 12:21:06 -0600
Subject: [R-SIG-Mac] How to choose between the CRAN release of OSX R vs
 the Brew release?
In-Reply-To: <546394BB.7000406@gmail.com>
References: <CAAjq1mfu8woBHO1Rm3iJ0oZ9SYavNyZck9CwTLaPQOMVoN7t-Q@mail.gmail.com>
	<DD78382D-0512-4484-AE93-6EB08CC13884@me.com>
	<546394BB.7000406@gmail.com>
Message-ID: <CAAjq1mf_ex2zGq2DzYWaYxn9DLi+-Nr5bZO=dXv6mLykXgNvrQ@mail.gmail.com>

On Wed, Nov 12, 2014 at 11:11 AM, Duncan Murdoch
<murdoch.duncan at gmail.com> wrote:
> On 12/11/2014 11:44 AM, Vincent Goulet wrote:
>>
>> I'm pretty sure that the advice you will mostly find here is to use the
>> CRAN release. This is certainly the version that is supported.
>
>
> Yes, most people like to use a version that doesn't crash.

Thanks everyone and Duncan when you put it that way... of course.


From carl at witthoft.com  Thu Nov 13 13:51:07 2014
From: carl at witthoft.com (Carl Witthoft)
Date: Thu, 13 Nov 2014 07:51:07 -0500
Subject: [R-SIG-Mac] R-SIG-Mac Digest, Vol 141, Issue 6
In-Reply-To: <mailman.19.1415876406.22045.r-sig-mac@r-project.org>
References: <mailman.19.1415876406.22045.r-sig-mac@r-project.org>
Message-ID: <5464A93B.5030701@witthoft.com>



On 11/13/14, 6:00 AM, r-sig-mac-request at r-project.org wrote:

 >Duncan Murdoch wrote:

 >"Yes, most people like to use a version that doesn't crash."

Well,  it looks like  we have another entry for the R-fortunes file!

:-)



-- 

Sent from a parallel universe almost, but not entirely,
nothing at all like this one.


From pdalgd at gmail.com  Thu Nov 13 14:05:25 2014
From: pdalgd at gmail.com (peter dalgaard)
Date: Thu, 13 Nov 2014 14:05:25 +0100
Subject: [R-SIG-Mac] R-SIG-Mac Digest, Vol 141, Issue 6
In-Reply-To: <5464A93B.5030701@witthoft.com>
References: <mailman.19.1415876406.22045.r-sig-mac@r-project.org>
	<5464A93B.5030701@witthoft.com>
Message-ID: <37BDA9A0-1344-4DF6-8024-2E69916CA925@gmail.com>


On 13 Nov 2014, at 13:51 , Carl Witthoft <carl at witthoft.com> wrote:

> 
> 
> On 11/13/14, 6:00 AM, r-sig-mac-request at r-project.org wrote:
> 
> >Duncan Murdoch wrote:
> 
> >"Yes, most people like to use a version that doesn't crash."
> 
> Well,  it looks like  we have another entry for the R-fortunes file!
> 
> :-)
> 

It is the sort of thing that carries a certain risk of backfiring, though.

("It just works". Cue Yosemite and "Peter's MacBook Air (27)"...)

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From jon.clayden at gmail.com  Thu Nov 13 15:03:04 2014
From: jon.clayden at gmail.com (Jon Clayden)
Date: Thu, 13 Nov 2014 14:03:04 +0000
Subject: [R-SIG-Mac] RcppArmadillo compilation failure (OS X 10.10)
Message-ID: <CAM9CR=32xpebn7aZGeD1tNDmo-MSdKR-B17uZ8G7-BFiZuayHQ@mail.gmail.com>

Dear all,

After recently updating to OS X 10.10, "Yosemite", and recompiling R
3.1.2, I'm reinstalling various packages, but running into trouble
with RcppArmadillo.

I configured R with

./configure --with-blas="-framework Accelerate" --with-lapack
--enable-memory-profiling --with-system-zlib --without-internal-tzcode
CC=clang CXX=clang++ OBJC=clang F77=gfortran-4.9 FC=gfortran-4.9
CFLAGS="-mtune=native -g -O2" CXXFLAGS="-mtune=native -g -O2"
FFLAGS="-mtune=native -g -O2" FCFLAGS="-mtune=native -g -O2"

The output from trying to install Rcpp and RcppArmadillo is at the
bottom of this email.

My only thought is that it might be an issue with Accelerate on
Yosemite, but I'm not sure where the "_wrapper_ddot_" symbol is
expected to be found. Ideas welcome.

(I first posted this question to Rcpp-devel, but am now trying here as
suggested by Dirk. Apparently the issue has not been reported before.)

Thanks,
Jon

--

> install.packages(c("Rcpp","RcppArmadillo"))

Installing packages into
?/Library/Frameworks/R.framework/Versions/3.1/Resources/library?

(as ?lib? is unspecified)

trying URL 'http://cran.rstudio.com/src/contrib/Rcpp_0.11.3.tar.gz'

Content type 'application/x-gzip' length 2169583 bytes (2.1 Mb)

opened URL

==================================================

downloaded 2.1 Mb


trying URL 'http://cran.rstudio.com/src/contrib/RcppArmadillo_0.4.500.0.tar.gz'

Content type 'application/x-gzip' length 934902 bytes (912 Kb)

opened URL

==================================================

downloaded 912 Kb


* installing *source* package ?Rcpp? ...

** package ?Rcpp? successfully unpacked and MD5 sums checked

** libs

clang++ -I/Library/Frameworks/R.framework/Resources/include -DNDEBUG
-I../inst/include/ -I/usr/local/include    -fPIC  -mtune=native -g -O2
 -c Date.cpp -o Date.o

clang++ -I/Library/Frameworks/R.framework/Resources/include -DNDEBUG
-I../inst/include/ -I/usr/local/include    -fPIC  -mtune=native -g -O2
 -c Module.cpp -o Module.o

clang++ -I/Library/Frameworks/R.framework/Resources/include -DNDEBUG
-I../inst/include/ -I/usr/local/include    -fPIC  -mtune=native -g -O2
 -c Rcpp_init.cpp -o Rcpp_init.o

clang++ -I/Library/Frameworks/R.framework/Resources/include -DNDEBUG
-I../inst/include/ -I/usr/local/include    -fPIC  -mtune=native -g -O2
 -c api.cpp -o api.o

clang++ -I/Library/Frameworks/R.framework/Resources/include -DNDEBUG
-I../inst/include/ -I/usr/local/include    -fPIC  -mtune=native -g -O2
 -c attributes.cpp -o attributes.o

clang++ -I/Library/Frameworks/R.framework/Resources/include -DNDEBUG
-I../inst/include/ -I/usr/local/include    -fPIC  -mtune=native -g -O2
 -c barrier.cpp -o barrier.o

clang++ -dynamiclib -Wl,-headerpad_max_install_names -undefined
dynamic_lookup -single_module -multiply_defined suppress
-L/Library/Frameworks/R.framework/Resources/lib -L/usr/local/lib -o
Rcpp.so Date.o Module.o Rcpp_init.o api.o attributes.o barrier.o
-F/Library/Frameworks/R.framework/.. -framework R -Wl,-framework
-Wl,CoreFoundation

installing to /Library/Frameworks/R.framework/Versions/3.1/Resources/library/Rcpp/libs

** R

** inst

** preparing package for lazy loading

** help

*** installing help indices

** building package indices

** installing vignettes

** testing if installed package can be loaded

* DONE (Rcpp)

* installing *source* package ?RcppArmadillo? ...

** package ?RcppArmadillo? successfully unpacked and MD5 sums checked

* checking LAPACK_LIBS: divide-and-conquer complex SVD available via
system LAPACK

** libs

clang++ -I/Library/Frameworks/R.framework/Resources/include -DNDEBUG
-I/usr/local/include
-I"/Library/Frameworks/R.framework/Versions/3.1/Resources/library/Rcpp/include"
 -I../inst/include -fPIC  -mtune=native -g -O2  -c RcppArmadillo.cpp
-o RcppArmadillo.o

clang++ -I/Library/Frameworks/R.framework/Resources/include -DNDEBUG
-I/usr/local/include
-I"/Library/Frameworks/R.framework/Versions/3.1/Resources/library/Rcpp/include"
 -I../inst/include -fPIC  -mtune=native -g -O2  -c RcppExports.cpp -o
RcppExports.o

clang++ -I/Library/Frameworks/R.framework/Resources/include -DNDEBUG
-I/usr/local/include
-I"/Library/Frameworks/R.framework/Versions/3.1/Resources/library/Rcpp/include"
 -I../inst/include -fPIC  -mtune=native -g -O2  -c fastLm.cpp -o
fastLm.o

clang++ -dynamiclib -Wl,-headerpad_max_install_names -undefined
dynamic_lookup -single_module -multiply_defined suppress
-L/Library/Frameworks/R.framework/Resources/lib -L/usr/local/lib -o
RcppArmadillo.so RcppArmadillo.o RcppExports.o fastLm.o -framework
Accelerate -L/usr/local/Cellar/gcc/4.9.2/lib/gcc/x86_64-apple-darwin14.0.0/4.9.2
-L/usr/local/Cellar/gcc/4.9.2/lib
-L/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/usr/lib
-lgfortran -lquadmath -lm -F/Library/Frameworks/R.framework/..
-framework R -Wl,-framework -Wl,CoreFoundation

installing to /Library/Frameworks/R.framework/Versions/3.1/Resources/library/RcppArmadillo/libs

** R

** inst

** preparing package for lazy loading

** help

*** installing help indices

** building package indices

** installing vignettes

** testing if installed package can be loaded

Error in dyn.load(file, DLLpath = DLLpath, ...) :

  unable to load shared object
'/Library/Frameworks/R.framework/Versions/3.1/Resources/library/RcppArmadillo/libs/RcppArmadillo.so':

  dlopen(/Library/Frameworks/R.framework/Versions/3.1/Resources/library/RcppArmadillo/libs/RcppArmadillo.so,
6): Symbol not found: _wrapper_ddot_

  Referenced from:
/Library/Frameworks/R.framework/Versions/3.1/Resources/library/RcppArmadillo/libs/RcppArmadillo.so

  Expected in: flat namespace

 in /Library/Frameworks/R.framework/Versions/3.1/Resources/library/RcppArmadillo/libs/RcppArmadillo.so

Error: loading failed

Execution halted

ERROR: loading failed

* removing ?/Library/Frameworks/R.framework/Versions/3.1/Resources/library/RcppArmadillo?

* restoring previous
?/Library/Frameworks/R.framework/Versions/3.1/Resources/library/RcppArmadillo?


The downloaded source packages are in

?/private/var/folders/1n/6tq3nkqs6rb5t1zfts5wr5c80000gp/T/Rtmp29p0uh/downloaded_packages?

Warning message:

In install.packages(c("Rcpp", "RcppArmadillo")) :

  installation of package ?RcppArmadillo? had non-zero exit status


From zy70 at georgetown.edu  Mon Nov 10 17:51:53 2014
From: zy70 at georgetown.edu (Zhe Yuan)
Date: Mon, 10 Nov 2014 11:51:53 -0500
Subject: [R-SIG-Mac] Runing script in R 3.1.2 and Yosemite
Message-ID: <CAPRUupz6MR8+3xK906M4DhavrB+xf0bEUTmm8kq28ux+xPSGXg@mail.gmail.com>

Dear list members,

Has anyone had issues running R scripts in R 3.1.2 on Yosemite?  I have 3
questions on my fall 2014 macbook pro w/ retina display.

1.A warning below would pop out when I open an existing R script:

2014-11-10 11:08:13.392 R[881:12608] *** WARNING: Method
convertPointFromBase: in class NSView is deprecated on 10.7 and later. It
should not be used in new applications.

2. And when I adjust the font size in script, another warning would pop out:

2014-11-10 11:08:21.282 R[881:12608] -deltaZ is deprecated for
NSEventTypeMagnify.  Please use -magnification.

3. read.table() almost always causes R into non-responding state.

I tried to google the above warnings and error, but it seems no one has had
such issues relating to R.  I also tried to install the experimental R
3.1.2 and experimental R 3.2 to check, and those problems persist.  I do
not know if the above questions are interrelated.

Thank you for your time.

Regards,
Eugene

	[[alternative HTML version deleted]]


From louis.springer at viawest.com  Thu Nov  6 16:50:30 2014
From: louis.springer at viawest.com (Louis Springer)
Date: Thu, 6 Nov 2014 15:50:30 +0000
Subject: [R-SIG-Mac] R Mac Error on edit() Window Close
Message-ID: <F788779F-9399-4A1A-A947-7E1B41BEAAA1@viawest.com>

Hi,

* R version 3.1.2 (2014-10-31)
* XQuartz 2.7.7 (xorg-server 1.15.2)

Closing the edit.data.frame() window with the ?close? button rather than ?File Close? or ?Stop? hangs the R Console.  I?ve tried reinstalling R and I?ve tried 3.1.1 with no difference in behavior. 

Picture of close button do clarify:  https://www.evernote.com/shard/s55/sh/8210351d-f3e9-4cd8-b47e-4fe0b3486e8e/874e08293a1425bb4b169efabbb00901

Is this known behavior? I couldn?t find a report on this and suspect it may be something wrong with my install. Any ideas on what might be amiss?

Thanks,
Lou

Louis Springer
Sr. Director of Service Architecture
ViaWest



From deepansh1989 at gmail.com  Thu Nov  6 20:11:19 2014
From: deepansh1989 at gmail.com (Deepansh Dalela)
Date: Thu, 6 Nov 2014 14:11:19 -0500
Subject: [R-SIG-Mac] installing R 2.14.2 on MAC
Message-ID: <9BD44E19-6FBD-406A-9AD8-9C0DAE3EA619@gmail.com>

Hi Simon,

> I noticed your email on the R support page. I am currently using SPSS 21 for mac, and need to install a macro plug-in which requires me o install R 2.14 (I already have R 3.0). When i download the R 2.14 package from the CRAN website, and try to install it on my Macintosh HD, it gives me an error message : ? R 2.14.2 for Mac OS X 10.5 or higher (Leopard build) can?t be installed on this disk. Leopard build of R requires Mac OS X 10.5 or higher. Use Tiger build (available from CRAN) for older systems.? 
> 
> I dont understand this, since I have OS X Yosemite on my mac. I tried installing 2.14.0, but got the exact same error message.
> 
> Would appreciate your help greatly.
> 
> Deepansh


From pdalgd at gmail.com  Fri Nov 14 09:06:21 2014
From: pdalgd at gmail.com (peter dalgaard)
Date: Fri, 14 Nov 2014 09:06:21 +0100
Subject: [R-SIG-Mac] R Mac Error on edit() Window Close
In-Reply-To: <F788779F-9399-4A1A-A947-7E1B41BEAAA1@viawest.com>
References: <F788779F-9399-4A1A-A947-7E1B41BEAAA1@viawest.com>
Message-ID: <2981D2C0-1552-4286-9BFC-07BDDA306BFD@gmail.com>


> On 06 Nov 2014, at 16:50 , Louis Springer <louis.springer at viawest.com> wrote:

Nov.6!! Looks like this got stalled in Zurich somehow...

> Is this known behavior? I couldn?t find a report on this and suspect it may be something wrong with my install. Any ideas on what might be amiss?

In a word: Yosemite. 

Or so I think. I can't reproduce this with 3.0.2 Snow Leopard build (and I'm not upgrading before I'm done with teaching for this semester!)

If it is a Yosemite issue, it is probably best to wait for Apple to release 10.10.1. Meanwhile, 
(a) Could you provide more precise reproduction instructions ("edit(airquality)" didn't do it for me)
(b) Are you seeing this both with Snow Leopard and Mavericks builds?

-pd
-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From louis.springer at viawest.com  Fri Nov 14 13:07:36 2014
From: louis.springer at viawest.com (Louis Springer)
Date: Fri, 14 Nov 2014 12:07:36 +0000
Subject: [R-SIG-Mac] R Mac Error on edit() Window Close
In-Reply-To: <2981D2C0-1552-4286-9BFC-07BDDA306BFD@gmail.com>
References: <F788779F-9399-4A1A-A947-7E1B41BEAAA1@viawest.com>
	<2981D2C0-1552-4286-9BFC-07BDDA306BFD@gmail.com>
Message-ID: <73B87C65-57DD-43A8-BF22-C908BC2B82E9@viawest.com>



> On Nov 14, 2014, at 1:06 AM, peter dalgaard <pdalgd at gmail.com> wrote:
> 
> 
>> On 06 Nov 2014, at 16:50 , Louis Springer <louis.springer at viawest.com> wrote:
> 
> Nov.6!! Looks like this got stalled in Zurich somehow?

I sent email to the list before I registered. It was just approved I guess. 

> 
>> Is this known behavior? I couldn?t find a report on this and suspect it may be something wrong with my install. Any ideas on what might be amiss?
> 
> In a word: Yosemite. 
> 
> Or so I think. I can't reproduce this with 3.0.2 Snow Leopard build (and I'm not upgrading before I'm done with teaching for this semester!)

Probably a good plan. I guess it surprised me no one else reported yet. 

> 
> If it is a Yosemite issue, it is probably best to wait for Apple to release 10.10.1. Meanwhile, 
> (a) Could you provide more precise reproduction instructions ("edit(airquality)" didn't do it for me)

1) edit(airquality)
2) press the red window ?close? button
3) R console hangs, note I can still close R entirely with ?File?? ?Close?, but the console won?t accept input. 

Note I hear a Mac ?bonk? sound when closing the window.  

> (b) Are you seeing this both with Snow Leopard and Mavericks builds?

Good catch. 

No  on 10.10 with 3.1.2-snowleapard.pkg R.app GUI 1.65 (6834) x86_64-apple-darwin10.8.0. 
No on 10.10 with 3.0.2.pkg R.app GUI 1.62 (6558) x86_64-apple-darwin10.8.0
Yes on 10.10 with 3.1.2-mavericks.pkg R.app GUI 1.65 (6833) x86_64-apple-darwin13.4.0

Looks like it?s something with the Mavericks build. I?ll stick with 3.1.2-snowleapard.pkg for now. 

> 
> -pd
> -- 
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> 

Thanks much,
- Lou

Louis Springer
Sr. Director of Service Architecture
303-407-4782


From timothy.c.bates at gmail.com  Fri Nov 14 13:41:25 2014
From: timothy.c.bates at gmail.com (Tim Bates)
Date: Fri, 14 Nov 2014 12:41:25 +0000
Subject: [R-SIG-Mac] R Mac Error on edit() Window Close
In-Reply-To: <73B87C65-57DD-43A8-BF22-C908BC2B82E9@viawest.com>
References: <F788779F-9399-4A1A-A947-7E1B41BEAAA1@viawest.com>
	<2981D2C0-1552-4286-9BFC-07BDDA306BFD@gmail.com>
	<73B87C65-57DD-43A8-BF22-C908BC2B82E9@viawest.com>
Message-ID: <25BB0DA3-E94A-44C7-AFDE-77B9258930E6@gmail.com>

>> (b) Are you seeing this both with Snow Leopard and Mavericks builds?
> [Just] on 10.10 with 3.1.2-mavericks.pkg R.app GUI 1.65 (6833) x86_64-apple-darwin13.4.0
> Looks like it?s something with the Mavericks build. I?ll stick with 3.1.2-snowleapard.pkg for now.

Does anyone see a benefit (speed up) running the Mavericks build? I get the idea of moving to new APIs,
but not seeing a speed or functionality improvement. A the same time, some packages (ones that need compiling) lag a bit for
releasing Mavericks versions?

Just curious for an insight into why Mavericks will be better in the long term: Compatibility with deprecated OSX function calls, or a faster run time ?

Best, tim

From jon.clayden at gmail.com  Fri Nov 14 13:59:00 2014
From: jon.clayden at gmail.com (Jon Clayden)
Date: Fri, 14 Nov 2014 12:59:00 +0000
Subject: [R-SIG-Mac] RcppArmadillo compilation failure (OS X 10.10)
In-Reply-To: <CAM9CR=32xpebn7aZGeD1tNDmo-MSdKR-B17uZ8G7-BFiZuayHQ@mail.gmail.com>
References: <CAM9CR=32xpebn7aZGeD1tNDmo-MSdKR-B17uZ8G7-BFiZuayHQ@mail.gmail.com>
Message-ID: <CAM9CR=3Mcob73y0=0b-AsJ2sk8z6nu0kBFeHqNPYTFFwQFRGZA@mail.gmail.com>

Apologies - this seems to have been down to an issue with the
developer tools on my install. I've managed to fix it now.

All the best,
Jon

On 13 November 2014 14:03, Jon Clayden <jon.clayden at gmail.com> wrote:
> Dear all,
>
> After recently updating to OS X 10.10, "Yosemite", and recompiling R
> 3.1.2, I'm reinstalling various packages, but running into trouble
> with RcppArmadillo.
>
> I configured R with
>
> ./configure --with-blas="-framework Accelerate" --with-lapack
> --enable-memory-profiling --with-system-zlib --without-internal-tzcode
> CC=clang CXX=clang++ OBJC=clang F77=gfortran-4.9 FC=gfortran-4.9
> CFLAGS="-mtune=native -g -O2" CXXFLAGS="-mtune=native -g -O2"
> FFLAGS="-mtune=native -g -O2" FCFLAGS="-mtune=native -g -O2"
>
> The output from trying to install Rcpp and RcppArmadillo is at the
> bottom of this email.
>
> My only thought is that it might be an issue with Accelerate on
> Yosemite, but I'm not sure where the "_wrapper_ddot_" symbol is
> expected to be found. Ideas welcome.
>
> (I first posted this question to Rcpp-devel, but am now trying here as
> suggested by Dirk. Apparently the issue has not been reported before.)
>
> Thanks,
> Jon
>
> --
>
>> install.packages(c("Rcpp","RcppArmadillo"))
>
> Installing packages into
> ?/Library/Frameworks/R.framework/Versions/3.1/Resources/library?
>
> (as ?lib? is unspecified)
>
> trying URL 'http://cran.rstudio.com/src/contrib/Rcpp_0.11.3.tar.gz'
>
> Content type 'application/x-gzip' length 2169583 bytes (2.1 Mb)
>
> opened URL
>
> ==================================================
>
> downloaded 2.1 Mb
>
>
> trying URL 'http://cran.rstudio.com/src/contrib/RcppArmadillo_0.4.500.0.tar.gz'
>
> Content type 'application/x-gzip' length 934902 bytes (912 Kb)
>
> opened URL
>
> ==================================================
>
> downloaded 912 Kb
>
>
> * installing *source* package ?Rcpp? ...
>
> ** package ?Rcpp? successfully unpacked and MD5 sums checked
>
> ** libs
>
> clang++ -I/Library/Frameworks/R.framework/Resources/include -DNDEBUG
> -I../inst/include/ -I/usr/local/include    -fPIC  -mtune=native -g -O2
>  -c Date.cpp -o Date.o
>
> clang++ -I/Library/Frameworks/R.framework/Resources/include -DNDEBUG
> -I../inst/include/ -I/usr/local/include    -fPIC  -mtune=native -g -O2
>  -c Module.cpp -o Module.o
>
> clang++ -I/Library/Frameworks/R.framework/Resources/include -DNDEBUG
> -I../inst/include/ -I/usr/local/include    -fPIC  -mtune=native -g -O2
>  -c Rcpp_init.cpp -o Rcpp_init.o
>
> clang++ -I/Library/Frameworks/R.framework/Resources/include -DNDEBUG
> -I../inst/include/ -I/usr/local/include    -fPIC  -mtune=native -g -O2
>  -c api.cpp -o api.o
>
> clang++ -I/Library/Frameworks/R.framework/Resources/include -DNDEBUG
> -I../inst/include/ -I/usr/local/include    -fPIC  -mtune=native -g -O2
>  -c attributes.cpp -o attributes.o
>
> clang++ -I/Library/Frameworks/R.framework/Resources/include -DNDEBUG
> -I../inst/include/ -I/usr/local/include    -fPIC  -mtune=native -g -O2
>  -c barrier.cpp -o barrier.o
>
> clang++ -dynamiclib -Wl,-headerpad_max_install_names -undefined
> dynamic_lookup -single_module -multiply_defined suppress
> -L/Library/Frameworks/R.framework/Resources/lib -L/usr/local/lib -o
> Rcpp.so Date.o Module.o Rcpp_init.o api.o attributes.o barrier.o
> -F/Library/Frameworks/R.framework/.. -framework R -Wl,-framework
> -Wl,CoreFoundation
>
> installing to /Library/Frameworks/R.framework/Versions/3.1/Resources/library/Rcpp/libs
>
> ** R
>
> ** inst
>
> ** preparing package for lazy loading
>
> ** help
>
> *** installing help indices
>
> ** building package indices
>
> ** installing vignettes
>
> ** testing if installed package can be loaded
>
> * DONE (Rcpp)
>
> * installing *source* package ?RcppArmadillo? ...
>
> ** package ?RcppArmadillo? successfully unpacked and MD5 sums checked
>
> * checking LAPACK_LIBS: divide-and-conquer complex SVD available via
> system LAPACK
>
> ** libs
>
> clang++ -I/Library/Frameworks/R.framework/Resources/include -DNDEBUG
> -I/usr/local/include
> -I"/Library/Frameworks/R.framework/Versions/3.1/Resources/library/Rcpp/include"
>  -I../inst/include -fPIC  -mtune=native -g -O2  -c RcppArmadillo.cpp
> -o RcppArmadillo.o
>
> clang++ -I/Library/Frameworks/R.framework/Resources/include -DNDEBUG
> -I/usr/local/include
> -I"/Library/Frameworks/R.framework/Versions/3.1/Resources/library/Rcpp/include"
>  -I../inst/include -fPIC  -mtune=native -g -O2  -c RcppExports.cpp -o
> RcppExports.o
>
> clang++ -I/Library/Frameworks/R.framework/Resources/include -DNDEBUG
> -I/usr/local/include
> -I"/Library/Frameworks/R.framework/Versions/3.1/Resources/library/Rcpp/include"
>  -I../inst/include -fPIC  -mtune=native -g -O2  -c fastLm.cpp -o
> fastLm.o
>
> clang++ -dynamiclib -Wl,-headerpad_max_install_names -undefined
> dynamic_lookup -single_module -multiply_defined suppress
> -L/Library/Frameworks/R.framework/Resources/lib -L/usr/local/lib -o
> RcppArmadillo.so RcppArmadillo.o RcppExports.o fastLm.o -framework
> Accelerate -L/usr/local/Cellar/gcc/4.9.2/lib/gcc/x86_64-apple-darwin14.0.0/4.9.2
> -L/usr/local/Cellar/gcc/4.9.2/lib
> -L/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/usr/lib
> -lgfortran -lquadmath -lm -F/Library/Frameworks/R.framework/..
> -framework R -Wl,-framework -Wl,CoreFoundation
>
> installing to /Library/Frameworks/R.framework/Versions/3.1/Resources/library/RcppArmadillo/libs
>
> ** R
>
> ** inst
>
> ** preparing package for lazy loading
>
> ** help
>
> *** installing help indices
>
> ** building package indices
>
> ** installing vignettes
>
> ** testing if installed package can be loaded
>
> Error in dyn.load(file, DLLpath = DLLpath, ...) :
>
>   unable to load shared object
> '/Library/Frameworks/R.framework/Versions/3.1/Resources/library/RcppArmadillo/libs/RcppArmadillo.so':
>
>   dlopen(/Library/Frameworks/R.framework/Versions/3.1/Resources/library/RcppArmadillo/libs/RcppArmadillo.so,
> 6): Symbol not found: _wrapper_ddot_
>
>   Referenced from:
> /Library/Frameworks/R.framework/Versions/3.1/Resources/library/RcppArmadillo/libs/RcppArmadillo.so
>
>   Expected in: flat namespace
>
>  in /Library/Frameworks/R.framework/Versions/3.1/Resources/library/RcppArmadillo/libs/RcppArmadillo.so
>
> Error: loading failed
>
> Execution halted
>
> ERROR: loading failed
>
> * removing ?/Library/Frameworks/R.framework/Versions/3.1/Resources/library/RcppArmadillo?
>
> * restoring previous
> ?/Library/Frameworks/R.framework/Versions/3.1/Resources/library/RcppArmadillo?
>
>
> The downloaded source packages are in
>
> ?/private/var/folders/1n/6tq3nkqs6rb5t1zfts5wr5c80000gp/T/Rtmp29p0uh/downloaded_packages?
>
> Warning message:
>
> In install.packages(c("Rcpp", "RcppArmadillo")) :
>
>   installation of package ?RcppArmadillo? had non-zero exit status


From ripley at stats.ox.ac.uk  Fri Nov 14 15:31:54 2014
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Fri, 14 Nov 2014 14:31:54 +0000
Subject: [R-SIG-Mac] R Mac Error on edit() Window Close
In-Reply-To: <25BB0DA3-E94A-44C7-AFDE-77B9258930E6@gmail.com>
References: <F788779F-9399-4A1A-A947-7E1B41BEAAA1@viawest.com>	<2981D2C0-1552-4286-9BFC-07BDDA306BFD@gmail.com>	<73B87C65-57DD-43A8-BF22-C908BC2B82E9@viawest.com>
	<25BB0DA3-E94A-44C7-AFDE-77B9258930E6@gmail.com>
Message-ID: <5466125A.1060409@stats.ox.ac.uk>

On 14/11/2014 12:41, Tim Bates wrote:
>>> (b) Are you seeing this both with Snow Leopard and Mavericks builds?
>> [Just] on 10.10 with 3.1.2-mavericks.pkg R.app GUI 1.65 (6833) x86_64-apple-darwin13.4.0
>> Looks like it?s something with the Mavericks build. I?ll stick with 3.1.2-snowleapard.pkg for now.
>
> Does anyone see a benefit (speed up) running the Mavericks build? I get the idea of moving to new APIs,
> but not seeing a speed or functionality improvement. A the same time, some packages (ones that need compiling) lag a bit for
> releasing Mavericks versions?
>
> Just curious for an insight into why Mavericks will be better in the long term: Compatibility with deprecated OSX function calls, or a faster run time ?

See the R manuals: these have ever since R 3.1.0 explained this. 
Currently at 
http://cran.r-project.org/doc/manuals/r-release/R-admin.html#Installing-R-under-OS-X 
: the main advantage is more modern compilers (those used for Snow 
Leopard date from 2007) with support for current language standards 
needed by some packages.  (R itself uses very little of the OS X APIs: 
R.app uses more but the same code is used for both builds.)

'In the long term' none of these versions of OS X will be supported (by 
Apple or R): expect binary package support only for >= Mavericks in R 
3.2.0 next Spring.

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford
1 South Parks Road, Oxford OX1 3TG, UK


From simon.urbanek at r-project.org  Fri Nov 14 15:32:44 2014
From: simon.urbanek at r-project.org (Simon Urbanek)
Date: Fri, 14 Nov 2014 09:32:44 -0500
Subject: [R-SIG-Mac] R Mac Error on edit() Window Close
In-Reply-To: <25BB0DA3-E94A-44C7-AFDE-77B9258930E6@gmail.com>
References: <F788779F-9399-4A1A-A947-7E1B41BEAAA1@viawest.com>
	<2981D2C0-1552-4286-9BFC-07BDDA306BFD@gmail.com>
	<73B87C65-57DD-43A8-BF22-C908BC2B82E9@viawest.com>
	<25BB0DA3-E94A-44C7-AFDE-77B9258930E6@gmail.com>
Message-ID: <45035DAB-6CF1-4761-970B-549E640E7FEA@r-project.org>

Tim,

On Nov 14, 2014, at 7:41 AM, Tim Bates <timothy.c.bates at gmail.com> wrote:
> 
>>> (b) Are you seeing this both with Snow Leopard and Mavericks builds?
>> [Just] on 10.10 with 3.1.2-mavericks.pkg R.app GUI 1.65 (6833) x86_64-apple-darwin13.4.0
>> Looks like it?s something with the Mavericks build. I?ll stick with 3.1.2-snowleapard.pkg for now.
> 
> Does anyone see a benefit (speed up) running the Mavericks build? I get the idea of moving to new APIs,
> but not seeing a speed or functionality improvement. A the same time, some packages (ones that need compiling) lag a bit for
> releasing Mavericks versions?
> 
> Just curious for an insight into why Mavericks will be better in the long term: Compatibility with deprecated OSX function calls, or a faster run time ?
> 

Mostly C++11 support.

The main reason is that Apple has removed all gcc tools from recent Xcode, so although the SL build itself is fine and stable, you can't easily build new packages from sources on Mavericks+ using the SL build. There are also a few work-arounds for issues with Mavericks+ (AppNap, ...) that cannot be used in the SL build since the API didn't exist there. 

Cheers,
Simon


From braunm at mail.smu.edu  Thu Nov 20 17:17:03 2014
From: braunm at mail.smu.edu (Braun, Michael)
Date: Thu, 20 Nov 2014 16:17:03 +0000
Subject: [R-SIG-Mac] Compiler options for R binary
Message-ID: <7427874E-1861-4BD2-B170-D4C68484DBD6@smu.edu>

I run R on a recent Mac Pro (Ivy Bridge architecture), and before that, on a 2010-version (Nehalem architecture).  For the last few years I have been installing R by compiling from source.  The reason is that I noticed in the etc/Makeconf file that the precompiled binary is compiled with the -mtune=core2 option.  I had thought that since my system uses a processor with a more recent architecture and instruction set, that I would be leaving performance on the table by using the binary.

My self-compiled R has worked well for me, for the most part. But sometimes little things pop-up, like difficulty using R Studio, an occasional permissions problem related to the Intel BLAS, etc.  And there is a time investment in installing R this way.  So even though I want to exploit as much of the computing power on my desktop that I can, now I am questioning whether self-compiling R is worth the effort.

My questions are these:

1.  Am I correct that the R binary for Mac is tuned to Core2 architecture?  
2.  In theory, should tuning the compiler for Sandy Bridge (SSE4.2, AVX instructions, etc) generate a faster R?
3.  Has anyone tested the theory in Item 2?
4.  Is the reason for setting -mtune=core2 to support older machines?  If so, are enough people still using pre-Nehalem 64-bit Macs to justify this?
5.  What would trigger a decision to start tuning the R binary for a more advanced processor?
6.  What are some other implications of either self-compiling or using the precompiled binary that I might need to consider?  

tl;dr:  My Mac Pro has a Ivy Bridge processor.  Is it worthwhile to compile R myself, instead of using the binary?

Thanks,

Michael


--------------------------
Michael Braun
Associate Professor of Marketing
Cox School of Business
Southern Methodist University
Dallas, TX 75275
braunm at smu.edu


From amos.elberg at gmail.com  Thu Nov 20 17:42:33 2014
From: amos.elberg at gmail.com (Amos B. Elberg)
Date: Thu, 20 Nov 2014 11:42:33 -0500
Subject: [R-SIG-Mac] Compiler options for R binary
In-Reply-To: <7427874E-1861-4BD2-B170-D4C68484DBD6@smu.edu>
References: <7427874E-1861-4BD2-B170-D4C68484DBD6@smu.edu>
Message-ID: <A9D1C1F6-CB2A-42C9-8344-A9E8A2088256@gmail.com>

I got a speed bump from recompiling on Mac. The Cran version is built with an llvm that doesn't support openmp.  Apart from benefits from choice of BLAS, the benefit from just recompiling is real but not huge; like on the order of 10-15%. I set tune and all of that to "auto." 

Optimization can also be pushed beyond the Cran settings without breaking make check, and the are compiler optimizations that provide a larger boost, break odd parts of make check, but I'm not sure actually break any functional part of R.

Overall, apart from the BLAS, the speed change is modest enough that I really wonder if the book is worth the candle.


> On Nov 20, 2014, at 11:17 AM, Braun, Michael <braunm at mail.smu.edu> wrote:
> 
> I run R on a recent Mac Pro (Ivy Bridge architecture), and before that, on a 2010-version (Nehalem architecture).  For the last few years I have been installing R by compiling from source.  The reason is that I noticed in the etc/Makeconf file that the precompiled binary is compiled with the -mtune=core2 option.  I had thought that since my system uses a processor with a more recent architecture and instruction set, that I would be leaving performance on the table by using the binary.
> 
> My self-compiled R has worked well for me, for the most part. But sometimes little things pop-up, like difficulty using R Studio, an occasional permissions problem related to the Intel BLAS, etc.  And there is a time investment in installing R this way.  So even though I want to exploit as much of the computing power on my desktop that I can, now I am questioning whether self-compiling R is worth the effort.
> 
> My questions are these:
> 
> 1.  Am I correct that the R binary for Mac is tuned to Core2 architecture?  
> 2.  In theory, should tuning the compiler for Sandy Bridge (SSE4.2, AVX instructions, etc) generate a faster R?
> 3.  Has anyone tested the theory in Item 2?
> 4.  Is the reason for setting -mtune=core2 to support older machines?  If so, are enough people still using pre-Nehalem 64-bit Macs to justify this?
> 5.  What would trigger a decision to start tuning the R binary for a more advanced processor?
> 6.  What are some other implications of either self-compiling or using the precompiled binary that I might need to consider?  
> 
> tl;dr:  My Mac Pro has a Ivy Bridge processor.  Is it worthwhile to compile R myself, instead of using the binary?
> 
> Thanks,
> 
> Michael
> 
> 
> --------------------------
> Michael Braun
> Associate Professor of Marketing
> Cox School of Business
> Southern Methodist University
> Dallas, TX 75275
> braunm at smu.edu
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac


From dwinsemius at comcast.net  Thu Nov 20 22:19:45 2014
From: dwinsemius at comcast.net (David Winsemius)
Date: Thu, 20 Nov 2014 13:19:45 -0800
Subject: [R-SIG-Mac] Compiler options for R binary
In-Reply-To: <7427874E-1861-4BD2-B170-D4C68484DBD6@smu.edu>
References: <7427874E-1861-4BD2-B170-D4C68484DBD6@smu.edu>
Message-ID: <535600DE-B9EF-444D-987D-59A3B94D96E8@comcast.net>


On Nov 20, 2014, at 8:17 AM, Braun, Michael wrote:

> I run R on a recent Mac Pro (Ivy Bridge architecture), and before that, on a 2010-version (Nehalem architecture).  For the last few years I have been installing R by compiling from source.  The reason is that I noticed in the etc/Makeconf file that the precompiled binary is compiled with the -mtune=core2 option.  I had thought that since my system uses a processor with a more recent architecture and instruction set, that I would be leaving performance on the table by using the binary.
> 
> My self-compiled R has worked well for me, for the most part. But sometimes little things pop-up, like difficulty using R Studio, an occasional permissions problem related to the Intel BLAS, etc.  And there is a time investment in installing R this way.  So even though I want to exploit as much of the computing power on my desktop that I can, now I am questioning whether self-compiling R is worth the effort.
> 
> My questions are these:
> 
> 1.  Am I correct that the R binary for Mac is tuned to Core2 architecture?  
> 2.  In theory, should tuning the compiler for Sandy Bridge (SSE4.2, AVX instructions, etc) generate a faster R?
> 3.  Has anyone tested the theory in Item 2?
> 4.  Is the reason for setting -mtune=core2 to support older machines?  If so, are enough people still using pre-Nehalem 64-bit Macs to justify this?

I use an early 2008 MacPro (Lion, so to go to Yosemite, currently with R's SL branch) and a 2009 MacbookPro (Yosemite). (After consulting Wikipedia's pages on Mac processors I'm not sure that pre- and post-Nehalem is sufficiently clear for all platforms that your question can be answered with clarity. It also appears to me that all Macbooks were core2 even now, and if so I think you would get a lot of complaints by making them incompatible with the base version of R. If I'm reading those pages correctly my 15 inch MBP from 2009 is Lynnfield.)

> 5.  What would trigger a decision to start tuning the R binary for a more advanced processor?
> 6.  What are some other implications of either self-compiling or using the precompiled binary that I might need to consider?  
> 
> tl;dr:  My Mac Pro has a Ivy Bridge processor.  Is it worthwhile to compile R myself, instead of using the binary?
> 
> Thanks,
> 
> Michael
> 
> 
> --------------------------
> Michael Braun
> Associate Professor of Marketing
> Cox School of Business
> Southern Methodist University
> Dallas, TX 75275
> braunm at smu.edu
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac

David Winsemius
Alameda, CA, USA


From simon.urbanek at r-project.org  Fri Nov 21 02:59:21 2014
From: simon.urbanek at r-project.org (Simon Urbanek)
Date: Thu, 20 Nov 2014 20:59:21 -0500
Subject: [R-SIG-Mac] Compiler options for R binary
In-Reply-To: <7427874E-1861-4BD2-B170-D4C68484DBD6@smu.edu>
References: <7427874E-1861-4BD2-B170-D4C68484DBD6@smu.edu>
Message-ID: <5547010F-ABA4-4C7E-A427-F82C57DAFB24@r-project.org>

On Nov 20, 2014, at 11:17 AM, Braun, Michael <braunm at mail.smu.edu> wrote:

> I run R on a recent Mac Pro (Ivy Bridge architecture), and before that, on a 2010-version (Nehalem architecture).  For the last few years I have been installing R by compiling from source.  The reason is that I noticed in the etc/Makeconf file that the precompiled binary is compiled with the -mtune=core2 option.  I had thought that since my system uses a processor with a more recent architecture and instruction set, that I would be leaving performance on the table by using the binary.
> 
> My self-compiled R has worked well for me, for the most part. But sometimes little things pop-up, like difficulty using R Studio, an occasional permissions problem related to the Intel BLAS, etc.  And there is a time investment in installing R this way.  So even though I want to exploit as much of the computing power on my desktop that I can, now I am questioning whether self-compiling R is worth the effort.
> 
> My questions are these:
> 
> 1.  Am I correct that the R binary for Mac is tuned to Core2 architecture?  
> 2.  In theory, should tuning the compiler for Sandy Bridge (SSE4.2, AVX instructions, etc) generate a faster R?

In theory, yes, but often the inverse is true (in particular for AVX).


> 3.  Has anyone tested the theory in Item 2?
> 4.  Is the reason for setting -mtune=core2 to support older machines?  If so, are enough people still using pre-Nehalem 64-bit Macs to justify this?

Only partially. In fact, the flags are there explicitly to increase the tuning level - the default is even lower. Last time I checked there were no significant benefits in compiling with more aggressive flags anyway. (If you want to go there, Jan De Leeuw used to publish most aggressive flags possible). You cannot relax the math ops compatibility which is the only piece that typically yields gain, because you start getting wrong math op results. You have to be very careful with benchmarking, because from experience optimizations often yield speed ups in some areas, but also introduce slowdown in other areas - it's not always a gain (one example on the extreme end is AVX: when enabled some ops can even take twice as long, believe it or not...) and even the gains are typically in single digit percent range.


> 5.  What would trigger a decision to start tuning the R binary for a more advanced processor?
> 6.  What are some other implications of either self-compiling or using the precompiled binary that I might need to consider?  
> 

When you compile from sources, you're entirely on your own and you have to take care of all dependencies (libraries) and compilation yourself. Most Mac users don't want to go there since they typically prefer to spend their time elsewhere ;).

BTW: if you really care about speed, the real gains are with using parallel BLAS, Intel OpenMP runtime and enabling built-in threading support in R.

Cheers,
Simon


> tl;dr:  My Mac Pro has a Ivy Bridge processor.  Is it worthwhile to compile R myself, instead of using the binary?
> 
> Thanks,
> 
> Michael
> 
> 
> --------------------------
> Michael Braun
> Associate Professor of Marketing
> Cox School of Business
> Southern Methodist University
> Dallas, TX 75275
> braunm at smu.edu
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 


From brandon.hurr at gmail.com  Fri Nov 21 03:30:26 2014
From: brandon.hurr at gmail.com (Brandon Hurr)
Date: Thu, 20 Nov 2014 18:30:26 -0800
Subject: [R-SIG-Mac] Compiler options for R binary
In-Reply-To: <5547010F-ABA4-4C7E-A427-F82C57DAFB24@r-project.org>
References: <7427874E-1861-4BD2-B170-D4C68484DBD6@smu.edu>
	<5547010F-ABA4-4C7E-A427-F82C57DAFB24@r-project.org>
Message-ID: <CAG2OMvv9YCThy427TguNk7PtnV4JyRRU4uef-wqfYBfuaEHk+Q@mail.gmail.com>

Simon.

  It's been a while since I've looked but are there precise instructions on
how to implement your BTW?

Brandon.

On Thursday, November 20, 2014, Simon Urbanek <simon.urbanek at r-project.org>
wrote:

> On Nov 20, 2014, at 11:17 AM, Braun, Michael <braunm at mail.smu.edu
> <javascript:;>> wrote:
>
> > I run R on a recent Mac Pro (Ivy Bridge architecture), and before that,
> on a 2010-version (Nehalem architecture).  For the last few years I have
> been installing R by compiling from source.  The reason is that I noticed
> in the etc/Makeconf file that the precompiled binary is compiled with the
> -mtune=core2 option.  I had thought that since my system uses a processor
> with a more recent architecture and instruction set, that I would be
> leaving performance on the table by using the binary.
> >
> > My self-compiled R has worked well for me, for the most part. But
> sometimes little things pop-up, like difficulty using R Studio, an
> occasional permissions problem related to the Intel BLAS, etc.  And there
> is a time investment in installing R this way.  So even though I want to
> exploit as much of the computing power on my desktop that I can, now I am
> questioning whether self-compiling R is worth the effort.
> >
> > My questions are these:
> >
> > 1.  Am I correct that the R binary for Mac is tuned to Core2
> architecture?
> > 2.  In theory, should tuning the compiler for Sandy Bridge (SSE4.2, AVX
> instructions, etc) generate a faster R?
>
> In theory, yes, but often the inverse is true (in particular for AVX).
>
>
> > 3.  Has anyone tested the theory in Item 2?
> > 4.  Is the reason for setting -mtune=core2 to support older machines?
> If so, are enough people still using pre-Nehalem 64-bit Macs to justify
> this?
>
> Only partially. In fact, the flags are there explicitly to increase the
> tuning level - the default is even lower. Last time I checked there were no
> significant benefits in compiling with more aggressive flags anyway. (If
> you want to go there, Jan De Leeuw used to publish most aggressive flags
> possible). You cannot relax the math ops compatibility which is the only
> piece that typically yields gain, because you start getting wrong math op
> results. You have to be very careful with benchmarking, because from
> experience optimizations often yield speed ups in some areas, but also
> introduce slowdown in other areas - it's not always a gain (one example on
> the extreme end is AVX: when enabled some ops can even take twice as long,
> believe it or not...) and even the gains are typically in single digit
> percent range.
>
>
> > 5.  What would trigger a decision to start tuning the R binary for a
> more advanced processor?
> > 6.  What are some other implications of either self-compiling or using
> the precompiled binary that I might need to consider?
> >
>
> When you compile from sources, you're entirely on your own and you have to
> take care of all dependencies (libraries) and compilation yourself. Most
> Mac users don't want to go there since they typically prefer to spend their
> time elsewhere ;).
>
> BTW: if you really care about speed, the real gains are with using
> parallel BLAS, Intel OpenMP runtime and enabling built-in threading support
> in R.
>
> Cheers,
> Simon
>
>
> > tl;dr:  My Mac Pro has a Ivy Bridge processor.  Is it worthwhile to
> compile R myself, instead of using the binary?
> >
> > Thanks,
> >
> > Michael
> >
> >
> > --------------------------
> > Michael Braun
> > Associate Professor of Marketing
> > Cox School of Business
> > Southern Methodist University
> > Dallas, TX 75275
> > braunm at smu.edu <javascript:;>
> >
> > _______________________________________________
> > R-SIG-Mac mailing list
> > R-SIG-Mac at r-project.org <javascript:;>
> > https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> >
>
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org <javascript:;>
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>

	[[alternative HTML version deleted]]


From Rainer at krugs.de  Fri Nov 21 09:47:44 2014
From: Rainer at krugs.de (Rainer M Krug)
Date: Fri, 21 Nov 2014 09:47:44 +0100
Subject: [R-SIG-Mac] Compiler options for R binary
In-Reply-To: <5547010F-ABA4-4C7E-A427-F82C57DAFB24@r-project.org> (Simon
	Urbanek's message of "Thu, 20 Nov 2014 20:59:21 -0500")
References: <7427874E-1861-4BD2-B170-D4C68484DBD6@smu.edu>
	<5547010F-ABA4-4C7E-A427-F82C57DAFB24@r-project.org>
Message-ID: <m2tx1tgcsv.fsf@krugs.de>

Simon Urbanek <simon.urbanek at r-project.org> writes:

> On Nov 20, 2014, at 11:17 AM, Braun, Michael <braunm at mail.smu.edu> wrote:
>
>> I run R on a recent Mac Pro (Ivy Bridge architecture), and before
>> that, on a 2010-version (Nehalem architecture).  For the last few
>> years I have been installing R by compiling from source.  The reason
>> is that I noticed in the etc/Makeconf file that the precompiled
>> binary is compiled with the -mtune=core2 option.  I had thought that
>> since my system uses a processor with a more recent architecture and
>> instruction set, that I would be leaving performance on the table by
>> using the binary.
>> 
>> My self-compiled R has worked well for me, for the most part. But
>> sometimes little things pop-up, like difficulty using R Studio, an
>> occasional permissions problem related to the Intel BLAS, etc.  And
>> there is a time investment in installing R this way.  So even though
>> I want to exploit as much of the computing power on my desktop that
>> I can, now I am questioning whether self-compiling R is worth the
>> effort.
>> 
>> My questions are these:
>> 
>> 1.  Am I correct that the R binary for Mac is tuned to Core2 architecture?  
>> 2.  In theory, should tuning the compiler for Sandy Bridge (SSE4.2, AVX instructions, etc) generate a faster R?
>
> In theory, yes, but often the inverse is true (in particular for AVX).
>
>
>> 3.  Has anyone tested the theory in Item 2?
>> 4.  Is the reason for setting -mtune=core2 to support older
>> machines?  If so, are enough people still using pre-Nehalem 64-bit
>> Macs to justify this?
>
> Only partially. In fact, the flags are there explicitly to increase
> the tuning level - the default is even lower. Last time I checked
> there were no significant benefits in compiling with more aggressive
> flags anyway. (If you want to go there, Jan De Leeuw used to publish
> most aggressive flags possible). You cannot relax the math ops
> compatibility which is the only piece that typically yields gain,
> because you start getting wrong math op results. You have to be very
> careful with benchmarking, because from experience optimizations often
> yield speed ups in some areas, but also introduce slowdown in other
> areas - it's not always a gain (one example on the extreme end is AVX:
> when enabled some ops can even take twice as long, believe it or
> not...) and even the gains are typically in single digi
>  t percent range.
>
>
>> 5.  What would trigger a decision to start tuning the R binary for a more advanced processor?
>> 6.  What are some other implications of either self-compiling or
>> using the precompiled binary that I might need to consider?
>> 
>
> When you compile from sources, you're entirely on your own and you
> have to take care of all dependencies (libraries) and compilation
> yourself. Most Mac users don't want to go there since they typically
> prefer to spend their time elsewhere ;).

I have to mention homebrew [1]here - by tuning the recipe used to install R,
one could (I guess) tune compiler options and recompile without any
fuss. The R installation with homebrew worked for me out-of-the-box and
the re-compilation and installation is one command.

The recipes are simple ruby scripts and can easily be changed.

OK - I come from a Linux background, but I like the homebrew approach
and it works flawless for me.

Cheers,

Rainer

>
> BTW: if you really care about speed, the real gains are with using
> parallel BLAS, Intel OpenMP runtime and enabling built-in threading
> support in R.
>
> Cheers,
> Simon
>
>
>> tl;dr:  My Mac Pro has a Ivy Bridge processor.  Is it worthwhile to compile R myself, instead of using the binary?
>> 
>> Thanks,
>> 
>> Michael
>> 
>> 
>> --------------------------
>> Michael Braun
>> Associate Professor of Marketing
>> Cox School of Business
>> Southern Methodist University
>> Dallas, TX 75275
>> braunm at smu.edu
>> 
>> _______________________________________________
>> R-SIG-Mac mailing list
>> R-SIG-Mac at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>> 


Footnotes: 
[1]  http://brew.sh

-- 
Rainer M. Krug
email: Rainer<at>krugs<dot>de
PGP: 0x0F52F982
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 494 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20141121/429bced0/attachment-0001.bin>

From simon.urbanek at r-project.org  Fri Nov 21 17:11:27 2014
From: simon.urbanek at r-project.org (Simon Urbanek)
Date: Fri, 21 Nov 2014 11:11:27 -0500
Subject: [R-SIG-Mac] Compiler options for R binary
In-Reply-To: <CAG2OMvv9YCThy427TguNk7PtnV4JyRRU4uef-wqfYBfuaEHk+Q@mail.gmail.com>
References: <7427874E-1861-4BD2-B170-D4C68484DBD6@smu.edu>
	<5547010F-ABA4-4C7E-A427-F82C57DAFB24@r-project.org>
	<CAG2OMvv9YCThy427TguNk7PtnV4JyRRU4uef-wqfYBfuaEHk+Q@mail.gmail.com>
Message-ID: <F9E9886A-2F4E-4B1C-A7E0-A21D86DB09F4@r-project.org>


> On Nov 20, 2014, at 9:30 PM, Brandon Hurr <brandon.hurr at gmail.com> wrote:
> 
> Simon.
> 
>   It's been a while since I've looked but are there precise instructions on how to implement your BTW?
> 

There is FAQ "10.5 Which BLAS is used and how can it be changed?" for the first part.
iomp is a bit involved, since you have to build it in the first place, but I'm working on making it part of the CRAN binaries in the near future.

Cheers,
Simon


> Brandon. 
> 
> On Thursday, November 20, 2014, Simon Urbanek <simon.urbanek at r-project.org> wrote:
> On Nov 20, 2014, at 11:17 AM, Braun, Michael <braunm at mail.smu.edu> wrote:
> 
> > I run R on a recent Mac Pro (Ivy Bridge architecture), and before that, on a 2010-version (Nehalem architecture).  For the last few years I have been installing R by compiling from source.  The reason is that I noticed in the etc/Makeconf file that the precompiled binary is compiled with the -mtune=core2 option.  I had thought that since my system uses a processor with a more recent architecture and instruction set, that I would be leaving performance on the table by using the binary.
> >
> > My self-compiled R has worked well for me, for the most part. But sometimes little things pop-up, like difficulty using R Studio, an occasional permissions problem related to the Intel BLAS, etc.  And there is a time investment in installing R this way.  So even though I want to exploit as much of the computing power on my desktop that I can, now I am questioning whether self-compiling R is worth the effort.
> >
> > My questions are these:
> >
> > 1.  Am I correct that the R binary for Mac is tuned to Core2 architecture?
> > 2.  In theory, should tuning the compiler for Sandy Bridge (SSE4.2, AVX instructions, etc) generate a faster R?
> 
> In theory, yes, but often the inverse is true (in particular for AVX).
> 
> 
> > 3.  Has anyone tested the theory in Item 2?
> > 4.  Is the reason for setting -mtune=core2 to support older machines?  If so, are enough people still using pre-Nehalem 64-bit Macs to justify this?
> 
> Only partially. In fact, the flags are there explicitly to increase the tuning level - the default is even lower. Last time I checked there were no significant benefits in compiling with more aggressive flags anyway. (If you want to go there, Jan De Leeuw used to publish most aggressive flags possible). You cannot relax the math ops compatibility which is the only piece that typically yields gain, because you start getting wrong math op results. You have to be very careful with benchmarking, because from experience optimizations often yield speed ups in some areas, but also introduce slowdown in other areas - it's not always a gain (one example on the extreme end is AVX: when enabled some ops can even take twice as long, believe it or not...) and even the gains are typically in single digit percent range.
> 
> 
> > 5.  What would trigger a decision to start tuning the R binary for a more advanced processor?
> > 6.  What are some other implications of either self-compiling or using the precompiled binary that I might need to consider?
> >
> 
> When you compile from sources, you're entirely on your own and you have to take care of all dependencies (libraries) and compilation yourself. Most Mac users don't want to go there since they typically prefer to spend their time elsewhere ;).
> 
> BTW: if you really care about speed, the real gains are with using parallel BLAS, Intel OpenMP runtime and enabling built-in threading support in R.
> 
> Cheers,
> Simon
> 
> 
> > tl;dr:  My Mac Pro has a Ivy Bridge processor.  Is it worthwhile to compile R myself, instead of using the binary?
> >
> > Thanks,
> >
> > Michael
> >
> >
> > --------------------------
> > Michael Braun
> > Associate Professor of Marketing
> > Cox School of Business
> > Southern Methodist University
> > Dallas, TX 75275
> > braunm at smu.edu
> >
> > _______________________________________________
> > R-SIG-Mac mailing list
> > R-SIG-Mac at r-project.org
> > https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> >
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac


From simon.urbanek at r-project.org  Fri Nov 21 17:15:57 2014
From: simon.urbanek at r-project.org (Simon Urbanek)
Date: Fri, 21 Nov 2014 11:15:57 -0500
Subject: [R-SIG-Mac] Compiler options for R binary
In-Reply-To: <m2tx1tgcsv.fsf@krugs.de>
References: <7427874E-1861-4BD2-B170-D4C68484DBD6@smu.edu>
	<5547010F-ABA4-4C7E-A427-F82C57DAFB24@r-project.org>
	<m2tx1tgcsv.fsf@krugs.de>
Message-ID: <AC6F55AA-A3D8-4864-A663-0E64DA696D00@r-project.org>

On Nov 21, 2014, at 3:47 AM, Rainer M Krug <Rainer at krugs.de> wrote:
> 
> Simon Urbanek <simon.urbanek at r-project.org> writes:
> 
>> On Nov 20, 2014, at 11:17 AM, Braun, Michael <braunm at mail.smu.edu> wrote:
>> 
>>> I run R on a recent Mac Pro (Ivy Bridge architecture), and before
>>> that, on a 2010-version (Nehalem architecture).  For the last few
>>> years I have been installing R by compiling from source.  The reason
>>> is that I noticed in the etc/Makeconf file that the precompiled
>>> binary is compiled with the -mtune=core2 option.  I had thought that
>>> since my system uses a processor with a more recent architecture and
>>> instruction set, that I would be leaving performance on the table by
>>> using the binary.
>>> 
>>> My self-compiled R has worked well for me, for the most part. But
>>> sometimes little things pop-up, like difficulty using R Studio, an
>>> occasional permissions problem related to the Intel BLAS, etc.  And
>>> there is a time investment in installing R this way.  So even though
>>> I want to exploit as much of the computing power on my desktop that
>>> I can, now I am questioning whether self-compiling R is worth the
>>> effort.
>>> 
>>> My questions are these:
>>> 
>>> 1.  Am I correct that the R binary for Mac is tuned to Core2 architecture?  
>>> 2.  In theory, should tuning the compiler for Sandy Bridge (SSE4.2, AVX instructions, etc) generate a faster R?
>> 
>> In theory, yes, but often the inverse is true (in particular for AVX).
>> 
>> 
>>> 3.  Has anyone tested the theory in Item 2?
>>> 4.  Is the reason for setting -mtune=core2 to support older
>>> machines?  If so, are enough people still using pre-Nehalem 64-bit
>>> Macs to justify this?
>> 
>> Only partially. In fact, the flags are there explicitly to increase
>> the tuning level - the default is even lower. Last time I checked
>> there were no significant benefits in compiling with more aggressive
>> flags anyway. (If you want to go there, Jan De Leeuw used to publish
>> most aggressive flags possible). You cannot relax the math ops
>> compatibility which is the only piece that typically yields gain,
>> because you start getting wrong math op results. You have to be very
>> careful with benchmarking, because from experience optimizations often
>> yield speed ups in some areas, but also introduce slowdown in other
>> areas - it's not always a gain (one example on the extreme end is AVX:
>> when enabled some ops can even take twice as long, believe it or
>> not...) and even the gains are typically in single digi
>> t percent range.
>> 
>> 
>>> 5.  What would trigger a decision to start tuning the R binary for a more advanced processor?
>>> 6.  What are some other implications of either self-compiling or
>>> using the precompiled binary that I might need to consider?
>>> 
>> 
>> When you compile from sources, you're entirely on your own and you
>> have to take care of all dependencies (libraries) and compilation
>> yourself. Most Mac users don't want to go there since they typically
>> prefer to spend their time elsewhere ;).
> 
> I have to mention homebrew [1]here - by tuning the recipe used to install R,
> one could (I guess) tune compiler options and recompile without any
> fuss. The R installation with homebrew worked for me out-of-the-box and
> the re-compilation and installation is one command.
> 
> The recipes are simple ruby scripts and can easily be changed.
> 
> OK - I come from a Linux background, but I like the homebrew approach
> and it works flawless for me.
> 

As others have said - if you don't mind the crashes, then it's ok. I actually like homebrew, it's good for small tools when you're in the pinch, but it doesn't tend to work well for complex things like R (or package that has many options). Also like I said, you'll have to take care of packages and dependencies yourself - not impossible, but certainly extra work. However, if you don't mind to get your hands dirty, then I would recommend Homebrew over the alternatives.

Cheers,
Simon


 

> Cheers,
> 
> Rainer
> 
>> 
>> BTW: if you really care about speed, the real gains are with using
>> parallel BLAS, Intel OpenMP runtime and enabling built-in threading
>> support in R.
>> 
>> Cheers,
>> Simon
>> 
>> 
>>> tl;dr:  My Mac Pro has a Ivy Bridge processor.  Is it worthwhile to compile R myself, instead of using the binary?
>>> 
>>> Thanks,
>>> 
>>> Michael
>>> 
>>> 
>>> --------------------------
>>> Michael Braun
>>> Associate Professor of Marketing
>>> Cox School of Business
>>> Southern Methodist University
>>> Dallas, TX 75275
>>> braunm at smu.edu
>>> 
>>> _______________________________________________
>>> R-SIG-Mac mailing list
>>> R-SIG-Mac at r-project.org
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>> 
> 
> 
> Footnotes: 
> [1]  http://brew.sh
> 
> -- 
> Rainer M. Krug
> email: Rainer<at>krugs<dot>de
> PGP: 0x0F52F982


From Rainer at krugs.de  Sat Nov 22 16:57:57 2014
From: Rainer at krugs.de (Rainer M Krug)
Date: Sat, 22 Nov 2014 16:57:57 +0100
Subject: [R-SIG-Mac] Compiler options for R binary
In-Reply-To: <AC6F55AA-A3D8-4864-A663-0E64DA696D00@r-project.org> (Simon
	Urbanek's message of "Fri, 21 Nov 2014 11:15:57 -0500")
References: <7427874E-1861-4BD2-B170-D4C68484DBD6@smu.edu>
	<5547010F-ABA4-4C7E-A427-F82C57DAFB24@r-project.org>
	<m2tx1tgcsv.fsf@krugs.de>
	<AC6F55AA-A3D8-4864-A663-0E64DA696D00@r-project.org>
Message-ID: <m2lhn3jkhm.fsf@krugs.de>

Simon Urbanek <simon.urbanek at r-project.org> writes:

> On Nov 21, 2014, at 3:47 AM, Rainer M Krug <Rainer at krugs.de> wrote:
>> 
>> Simon Urbanek <simon.urbanek at r-project.org> writes:
>> 
>>> On Nov 20, 2014, at 11:17 AM, Braun, Michael <braunm at mail.smu.edu> wrote:
>>> 
>>>> I run R on a recent Mac Pro (Ivy Bridge architecture), and before
>>>> that, on a 2010-version (Nehalem architecture).  For the last few
>>>> years I have been installing R by compiling from source.  The reason
>>>> is that I noticed in the etc/Makeconf file that the precompiled
>>>> binary is compiled with the -mtune=core2 option.  I had thought that
>>>> since my system uses a processor with a more recent architecture and
>>>> instruction set, that I would be leaving performance on the table by
>>>> using the binary.
>>>> 
>>>> My self-compiled R has worked well for me, for the most part. But
>>>> sometimes little things pop-up, like difficulty using R Studio, an
>>>> occasional permissions problem related to the Intel BLAS, etc.  And
>>>> there is a time investment in installing R this way.  So even though
>>>> I want to exploit as much of the computing power on my desktop that
>>>> I can, now I am questioning whether self-compiling R is worth the
>>>> effort.
>>>> 
>>>> My questions are these:
>>>> 
>>>> 1.  Am I correct that the R binary for Mac is tuned to Core2 architecture?  
>>>> 2.  In theory, should tuning the compiler for Sandy Bridge (SSE4.2, AVX instructions, etc) generate a faster R?
>>> 
>>> In theory, yes, but often the inverse is true (in particular for AVX).
>>> 
>>> 
>>>> 3.  Has anyone tested the theory in Item 2?
>>>> 4.  Is the reason for setting -mtune=core2 to support older
>>>> machines?  If so, are enough people still using pre-Nehalem 64-bit
>>>> Macs to justify this?
>>> 
>>> Only partially. In fact, the flags are there explicitly to increase
>>> the tuning level - the default is even lower. Last time I checked
>>> there were no significant benefits in compiling with more aggressive
>>> flags anyway. (If you want to go there, Jan De Leeuw used to publish
>>> most aggressive flags possible). You cannot relax the math ops
>>> compatibility which is the only piece that typically yields gain,
>>> because you start getting wrong math op results. You have to be very
>>> careful with benchmarking, because from experience optimizations often
>>> yield speed ups in some areas, but also introduce slowdown in other
>>> areas - it's not always a gain (one example on the extreme end is AVX:
>>> when enabled some ops can even take twice as long, believe it or
>>> not...) and even the gains are typically in single digi
>>> t percent range.
>>> 
>>> 
>>>> 5.  What would trigger a decision to start tuning the R binary for a more advanced processor?
>>>> 6.  What are some other implications of either self-compiling or
>>>> using the precompiled binary that I might need to consider?
>>>> 
>>> 
>>> When you compile from sources, you're entirely on your own and you
>>> have to take care of all dependencies (libraries) and compilation
>>> yourself. Most Mac users don't want to go there since they typically
>>> prefer to spend their time elsewhere ;).
>> 
>> I have to mention homebrew [1]here - by tuning the recipe used to install R,
>> one could (I guess) tune compiler options and recompile without any
>> fuss. The R installation with homebrew worked for me out-of-the-box and
>> the re-compilation and installation is one command.
>> 
>> The recipes are simple ruby scripts and can easily be changed.
>> 
>> OK - I come from a Linux background, but I like the homebrew approach
>> and it works flawless for me.
>> 
>
> As others have said - if you don't mind the crashes, then it's ok.

Well - I am using R via ESS and nearly never the GUI, so I can't say
anything from that side, but I never had crashes of R after switching to
homebrew - but I might be lucky.

> I actually like homebrew, it's good for small tools when you're in the
> pinch, but it doesn't tend to work well for complex things like R (or
> package that has many options). Also like I said, you'll have to take
> care of packages and dependencies yourself - not impossible, but
> certainly extra work.



> However, if you don't mind to get your hands dirty, then I would
> recommend Homebrew over the alternatives.

As I said - I am coming from the Linux side of things (but always used
the binaries there...) so I don't mind compiling and prefer the better
control / understanding homebrew gives me. And my hands never got as
dirty as trying to compile under Linux :-)

Cheers,

Rainer


>
> Cheers,
> Simon
>
>
>  
>
>> Cheers,
>> 
>> Rainer
>> 
>>> 
>>> BTW: if you really care about speed, the real gains are with using
>>> parallel BLAS, Intel OpenMP runtime and enabling built-in threading
>>> support in R.
>>> 
>>> Cheers,
>>> Simon
>>> 
>>> 
>>>> tl;dr:  My Mac Pro has a Ivy Bridge processor.  Is it worthwhile to compile R myself, instead of using the binary?
>>>> 
>>>> Thanks,
>>>> 
>>>> Michael
>>>> 
>>>> 
>>>> --------------------------
>>>> Michael Braun
>>>> Associate Professor of Marketing
>>>> Cox School of Business
>>>> Southern Methodist University
>>>> Dallas, TX 75275
>>>> braunm at smu.edu
>>>> 
>>>> _______________________________________________
>>>> R-SIG-Mac mailing list
>>>> R-SIG-Mac at r-project.org
>>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>>> 
>> 
>> 
>> Footnotes: 
>> [1]  http://brew.sh
>> 
>> -- 
>> Rainer M. Krug
>> email: Rainer<at>krugs<dot>de
>> PGP: 0x0F52F982

-- 
Rainer M. Krug
email: Rainer<at>krugs<dot>de
PGP: 0x0F52F982
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 494 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20141122/613550e0/attachment.bin>

From braunm at mail.smu.edu  Sat Nov 22 19:27:41 2014
From: braunm at mail.smu.edu (Braun, Michael)
Date: Sat, 22 Nov 2014 18:27:41 +0000
Subject: [R-SIG-Mac] Compiler options for R binary
In-Reply-To: <m2lhn3jkhm.fsf@krugs.de>
References: <7427874E-1861-4BD2-B170-D4C68484DBD6@smu.edu>
	<5547010F-ABA4-4C7E-A427-F82C57DAFB24@r-project.org>
	<m2tx1tgcsv.fsf@krugs.de>
	<AC6F55AA-A3D8-4864-A663-0E64DA696D00@r-project.org>
	<m2lhn3jkhm.fsf@krugs.de>
Message-ID: <A824A1EA-2E48-49B8-AEC8-B1E65AF16ECB@smu.edu>

Thank you for all of the helpful replies.  I think I?ll go back to using the CRAN binary, and still link to an external BLAS.

I do have some follow-up questions:

1.  Section 10.5 of the R for Mac FAQ suggests that there is a libRblas.veclib.dylib in the Resources/lib directory.  I do not see that after installing the binary for R 3.1.2.  I can still link to the Apple vecLib (/System/Library/Accelerate ?./libBLAS.dylib --  it?s a very long path), but there appears to be an inconsistency between the CRAN build and the FAQ.

2.  Simon mentioned Intel OpenMP runtime, and enabling R threading support.  Is this something that can be done at the user level (like pointing to a different BLAS), or is it something that needs to be built in to the binary?

3.  Just out of curiosity, what are the operations that slow down with AVX?  Someday, when I have some free time, I may want to check that out, mainly as a learning experience.


On Nov 22, 2014, at 9:57 AM, Rainer M Krug <Rainer at krugs.de<mailto:Rainer at krugs.de>> wrote:

Simon Urbanek <simon.urbanek at r-project.org<mailto:simon.urbanek at r-project.org>> writes:

On Nov 21, 2014, at 3:47 AM, Rainer M Krug <Rainer at krugs.de<mailto:Rainer at krugs.de>> wrote:

Simon Urbanek <simon.urbanek at r-project.org<mailto:simon.urbanek at r-project.org>> writes:

On Nov 20, 2014, at 11:17 AM, Braun, Michael <braunm at mail.smu.edu<mailto:braunm at mail.smu.edu>> wrote:

I run R on a recent Mac Pro (Ivy Bridge architecture), and before
that, on a 2010-version (Nehalem architecture).  For the last few
years I have been installing R by compiling from source.  The reason
is that I noticed in the etc/Makeconf file that the precompiled
binary is compiled with the -mtune=core2 option.  I had thought that
since my system uses a processor with a more recent architecture and
instruction set, that I would be leaving performance on the table by
using the binary.

My self-compiled R has worked well for me, for the most part. But
sometimes little things pop-up, like difficulty using R Studio, an
occasional permissions problem related to the Intel BLAS, etc.  And
there is a time investment in installing R this way.  So even though
I want to exploit as much of the computing power on my desktop that
I can, now I am questioning whether self-compiling R is worth the
effort.

My questions are these:

1.  Am I correct that the R binary for Mac is tuned to Core2 architecture?
2.  In theory, should tuning the compiler for Sandy Bridge (SSE4.2, AVX instructions, etc) generate a faster R?

In theory, yes, but often the inverse is true (in particular for AVX).


3.  Has anyone tested the theory in Item 2?
4.  Is the reason for setting -mtune=core2 to support older
machines?  If so, are enough people still using pre-Nehalem 64-bit
Macs to justify this?

Only partially. In fact, the flags are there explicitly to increase
the tuning level - the default is even lower. Last time I checked
there were no significant benefits in compiling with more aggressive
flags anyway. (If you want to go there, Jan De Leeuw used to publish
most aggressive flags possible). You cannot relax the math ops
compatibility which is the only piece that typically yields gain,
because you start getting wrong math op results. You have to be very
careful with benchmarking, because from experience optimizations often
yield speed ups in some areas, but also introduce slowdown in other
areas - it's not always a gain (one example on the extreme end is AVX:
when enabled some ops can even take twice as long, believe it or
not...) and even the gains are typically in single digi
t percent range.


5.  What would trigger a decision to start tuning the R binary for a more advanced processor?
6.  What are some other implications of either self-compiling or
using the precompiled binary that I might need to consider?


When you compile from sources, you're entirely on your own and you
have to take care of all dependencies (libraries) and compilation
yourself. Most Mac users don't want to go there since they typically
prefer to spend their time elsewhere ;).

I have to mention homebrew [1]here - by tuning the recipe used to install R,
one could (I guess) tune compiler options and recompile without any
fuss. The R installation with homebrew worked for me out-of-the-box and
the re-compilation and installation is one command.

The recipes are simple ruby scripts and can easily be changed.

OK - I come from a Linux background, but I like the homebrew approach
and it works flawless for me.


As others have said - if you don't mind the crashes, then it's ok.

Well - I am using R via ESS and nearly never the GUI, so I can't say
anything from that side, but I never had crashes of R after switching to
homebrew - but I might be lucky.

I actually like homebrew, it's good for small tools when you're in the
pinch, but it doesn't tend to work well for complex things like R (or
package that has many options). Also like I said, you'll have to take
care of packages and dependencies yourself - not impossible, but
certainly extra work.



However, if you don't mind to get your hands dirty, then I would
recommend Homebrew over the alternatives.

As I said - I am coming from the Linux side of things (but always used
the binaries there...) so I don't mind compiling and prefer the better
control / understanding homebrew gives me. And my hands never got as
dirty as trying to compile under Linux :-)

Cheers,

Rainer



Cheers,
Simon




Cheers,

Rainer


BTW: if you really care about speed, the real gains are with using
parallel BLAS, Intel OpenMP runtime and enabling built-in threading
support in R.

Cheers,
Simon


tl;dr:  My Mac Pro has a Ivy Bridge processor.  Is it worthwhile to compile R myself, instead of using the binary?

Thanks,

Michael


--------------------------
Michael Braun
Associate Professor of Marketing
Cox School of Business
Southern Methodist University
Dallas, TX 75275
braunm at smu.edu<mailto:braunm at smu.edu>

_______________________________________________
R-SIG-Mac mailing list
R-SIG-Mac at r-project.org
https://stat.ethz.ch/mailman/listinfo/r-sig-mac



Footnotes:
[1]  http://brew.sh

--
Rainer M. Krug
email: Rainer<at>krugs<dot>de
PGP: 0x0F52F982

--
Rainer M. Krug
email: Rainer<at>krugs<dot>de
PGP: 0x0F52F982

--------------------------------------------
Michael Braun, Ph.D.
Associate Professor of Marketing
Cox School of Business
Southern Methodist University
braunm at smu.edu<mailto:braunm at smu.edu>



	[[alternative HTML version deleted]]


From joe at BIO.UMASS.EDU  Sun Nov 23 01:02:31 2014
From: joe at BIO.UMASS.EDU (Joseph Kunkel)
Date: Sat, 22 Nov 2014 19:02:31 -0500
Subject: [R-SIG-Mac] R FAQ 10.5 fails for R ver 3.3.3 on Yosemite
In-Reply-To: <mailman.11.1416654006.11329.r-sig-mac@r-project.org>
References: <mailman.11.1416654006.11329.r-sig-mac@r-project.org>
Message-ID: <71ABCADF-4372-46B6-93DA-4B24A7045F34@bio.umass.edu>


> On Nov 22, 2014, at 6:00 AM, r-sig-mac-request at r-project.org wrote:
> 
> There is FAQ "10.5 Which BLAS is used and how can it be changed?" for the first part.
> iomp is a bit involved, since you have to build it in the first place, but I'm working on making it part of the CRAN binaries in the near future.
> 
> Cheers,
> Simon
> 
FAQ ?10.5 recommends using a dylib file that was not included in my binary installation.

I have installed R version 3.1.1 (2014-07-10) -- "Sock it to Me?

I followed the FAQ 10.5 instruction:
cd /Library/Frameworks/R.framework/Resources/lib
ln -sf libRblas.vecLib.dylib libRblas.dylib
R
  dyld: Library not loaded: /Library/Frameworks/R.framework/Versions/3.1/Resources/lib/libRblas.dylib
  Referenced from: /Library/Frameworks/R.framework/Resources/bin/exec/R
 Reason: image not found
 Trace/BPT trap: 5

When I replace the R BLAS  R promptly works.

locate libRblas.vecLib.dylib   finds nothing.

Does this aspect of the FAQ apply to R ver 3.1.1 on Yosemite?

Joe

-?.  .? ?.  .><((((?>?.  .? ?.  .><((((?>?.  .? ?.  .><((((?> .??.? >=-       =?}}}}}><
Joseph G. Kunkel, Emeritus Professor
Biology Department
UMass Amherst 
Amherst MA 01003
joe at bio.umass.edu




	[[alternative HTML version deleted]]


From simon.urbanek at r-project.org  Sun Nov 23 02:43:49 2014
From: simon.urbanek at r-project.org (Simon Urbanek)
Date: Sat, 22 Nov 2014 20:43:49 -0500
Subject: [R-SIG-Mac] Compiler options for R binary
In-Reply-To: <A824A1EA-2E48-49B8-AEC8-B1E65AF16ECB@smu.edu>
References: <7427874E-1861-4BD2-B170-D4C68484DBD6@smu.edu>
	<5547010F-ABA4-4C7E-A427-F82C57DAFB24@r-project.org>
	<m2tx1tgcsv.fsf@krugs.de>
	<AC6F55AA-A3D8-4864-A663-0E64DA696D00@r-project.org>
	<m2lhn3jkhm.fsf@krugs.de>
	<A824A1EA-2E48-49B8-AEC8-B1E65AF16ECB@smu.edu>
Message-ID: <B3CAB227-1BF0-48AD-9905-7DD631A76AA1@r-project.org>


On Nov 22, 2014, at 1:27 PM, Braun, Michael <braunm at mail.smu.edu> wrote:

> Thank you for all of the helpful replies.  I think I?ll go back to using the CRAN binary, and still link to an external BLAS.
> 
> I do have some follow-up questions:
> 
> 1.  Section 10.5 of the R for Mac FAQ suggests that there is a libRblas.veclib.dylib in the Resources/lib directory.  I do not see that after installing the binary for R 3.1.2.  I can still link to the Apple vecLib (/System/Library/Accelerate ?./libBLAS.dylib --  it?s a very long path), but there appears to be an inconsistency between the CRAN build and the FAQ.
> 

Thanks, I'll look into it, it should be there at least for the SL build.


> 2.  Simon mentioned Intel OpenMP runtime, and enabling R threading support.  Is this something that can be done at the user level (like pointing to a different BLAS), or is it something that needs to be built in to the binary?
> 

Unfortunately not, because GOMP has both performance and stability issues on OS X, so the CRAN binaries are explicitly build with disabled OpenMP support to work around that. However, as I said, we hope to have iomp binaries soon (perhaps even as soon as next week).


> 3.  Just out of curiosity, what are the operations that slow down with AVX?  Someday, when I have some free time, I may want to check that out, mainly as a learning experience.
> 

I would have to dig out the benchmarks, but if I recall correctly there was a set of BLAS kernels that doubled the runtime with AVX enabled. There were other instances, too, but I can't recall the details. In a spare minute I can try to replicate the experiment.

Cheers,
Simon


> 
> On Nov 22, 2014, at 9:57 AM, Rainer M Krug <Rainer at krugs.de<mailto:Rainer at krugs.de>> wrote:
> 
> Simon Urbanek <simon.urbanek at r-project.org<mailto:simon.urbanek at r-project.org>> writes:
> 
> On Nov 21, 2014, at 3:47 AM, Rainer M Krug <Rainer at krugs.de<mailto:Rainer at krugs.de>> wrote:
> 
> Simon Urbanek <simon.urbanek at r-project.org<mailto:simon.urbanek at r-project.org>> writes:
> 
> On Nov 20, 2014, at 11:17 AM, Braun, Michael <braunm at mail.smu.edu<mailto:braunm at mail.smu.edu>> wrote:
> 
> I run R on a recent Mac Pro (Ivy Bridge architecture), and before
> that, on a 2010-version (Nehalem architecture).  For the last few
> years I have been installing R by compiling from source.  The reason
> is that I noticed in the etc/Makeconf file that the precompiled
> binary is compiled with the -mtune=core2 option.  I had thought that
> since my system uses a processor with a more recent architecture and
> instruction set, that I would be leaving performance on the table by
> using the binary.
> 
> My self-compiled R has worked well for me, for the most part. But
> sometimes little things pop-up, like difficulty using R Studio, an
> occasional permissions problem related to the Intel BLAS, etc.  And
> there is a time investment in installing R this way.  So even though
> I want to exploit as much of the computing power on my desktop that
> I can, now I am questioning whether self-compiling R is worth the
> effort.
> 
> My questions are these:
> 
> 1.  Am I correct that the R binary for Mac is tuned to Core2 architecture?
> 2.  In theory, should tuning the compiler for Sandy Bridge (SSE4.2, AVX instructions, etc) generate a faster R?
> 
> In theory, yes, but often the inverse is true (in particular for AVX).
> 
> 
> 3.  Has anyone tested the theory in Item 2?
> 4.  Is the reason for setting -mtune=core2 to support older
> machines?  If so, are enough people still using pre-Nehalem 64-bit
> Macs to justify this?
> 
> Only partially. In fact, the flags are there explicitly to increase
> the tuning level - the default is even lower. Last time I checked
> there were no significant benefits in compiling with more aggressive
> flags anyway. (If you want to go there, Jan De Leeuw used to publish
> most aggressive flags possible). You cannot relax the math ops
> compatibility which is the only piece that typically yields gain,
> because you start getting wrong math op results. You have to be very
> careful with benchmarking, because from experience optimizations often
> yield speed ups in some areas, but also introduce slowdown in other
> areas - it's not always a gain (one example on the extreme end is AVX:
> when enabled some ops can even take twice as long, believe it or
> not...) and even the gains are typically in single digi
> t percent range.
> 
> 
> 5.  What would trigger a decision to start tuning the R binary for a more advanced processor?
> 6.  What are some other implications of either self-compiling or
> using the precompiled binary that I might need to consider?
> 
> 
> When you compile from sources, you're entirely on your own and you
> have to take care of all dependencies (libraries) and compilation
> yourself. Most Mac users don't want to go there since they typically
> prefer to spend their time elsewhere ;).
> 
> I have to mention homebrew [1]here - by tuning the recipe used to install R,
> one could (I guess) tune compiler options and recompile without any
> fuss. The R installation with homebrew worked for me out-of-the-box and
> the re-compilation and installation is one command.
> 
> The recipes are simple ruby scripts and can easily be changed.
> 
> OK - I come from a Linux background, but I like the homebrew approach
> and it works flawless for me.
> 
> 
> As others have said - if you don't mind the crashes, then it's ok.
> 
> Well - I am using R via ESS and nearly never the GUI, so I can't say
> anything from that side, but I never had crashes of R after switching to
> homebrew - but I might be lucky.
> 
> I actually like homebrew, it's good for small tools when you're in the
> pinch, but it doesn't tend to work well for complex things like R (or
> package that has many options). Also like I said, you'll have to take
> care of packages and dependencies yourself - not impossible, but
> certainly extra work.
> 
> 
> 
> However, if you don't mind to get your hands dirty, then I would
> recommend Homebrew over the alternatives.
> 
> As I said - I am coming from the Linux side of things (but always used
> the binaries there...) so I don't mind compiling and prefer the better
> control / understanding homebrew gives me. And my hands never got as
> dirty as trying to compile under Linux :-)
> 
> Cheers,
> 
> Rainer
> 
> 
> 
> Cheers,
> Simon
> 
> 
> 
> 
> Cheers,
> 
> Rainer
> 
> 
> BTW: if you really care about speed, the real gains are with using
> parallel BLAS, Intel OpenMP runtime and enabling built-in threading
> support in R.
> 
> Cheers,
> Simon
> 
> 
> tl;dr:  My Mac Pro has a Ivy Bridge processor.  Is it worthwhile to compile R myself, instead of using the binary?
> 
> Thanks,
> 
> Michael
> 
> 
> --------------------------
> Michael Braun
> Associate Professor of Marketing
> Cox School of Business
> Southern Methodist University
> Dallas, TX 75275
> braunm at smu.edu<mailto:braunm at smu.edu>
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 
> 
> 
> Footnotes:
> [1]  http://brew.sh
> 
> --
> Rainer M. Krug
> email: Rainer<at>krugs<dot>de
> PGP: 0x0F52F982
> 
> --
> Rainer M. Krug
> email: Rainer<at>krugs<dot>de
> PGP: 0x0F52F982
> 
> --------------------------------------------
> Michael Braun, Ph.D.
> Associate Professor of Marketing
> Cox School of Business
> Southern Methodist University
> braunm at smu.edu<mailto:braunm at smu.edu>
> 
> 
> 
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac


From dwinsemius at comcast.net  Mon Nov 24 06:41:30 2014
From: dwinsemius at comcast.net (David Winsemius)
Date: Sun, 23 Nov 2014 21:41:30 -0800
Subject: [R-SIG-Mac] [R] R 3.1.2 GUI 1.65 Mavericks build (6833) freezes
	in Yosemite
In-Reply-To: <05CD682B-AFE8-4406-8814-160BE8A4927F@ucmail.uc.edu>
References: <05CD682B-AFE8-4406-8814-160BE8A4927F@ucmail.uc.edu>
Message-ID: <811A7ACB-02FF-4201-AB13-0513518E3EDE@comcast.net>

I can reproduce the problem but only once so far. (I never use that GUI menu option.) R hangs with a spinning disc when you choose that option from the GUI menu. It?s a MacGUI specific issue so this is the wrong mailing list. Forwarding to R-Mac-SIG.

(Doesn?t seem to be an XCode issue.)
 Model Identifier:	MacBookPro5,3
  Processor Name:	Intel Core 2 Duo
  Processor Speed:	2.8 GHz
  Memory:	8 GB

> sessionInfo()
R version 3.1.1 (2014-07-10)
Platform: x86_64-apple-darwin13.1.0 (64-bit)

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     


? 
David
> On Nov 23, 2014, at 7:35 PM, Shahrooz, Bahram (shahrobm) <SHAHROBM at ucmail.uc.edu> wrote:
> 
> Hi,
> 
> I?ve the latest version of R, which I know is for Mavericks.  I?ve upgraded to Yosemite, and R is acting strangely.
> 
> R becomes unresponsive when I try to use ?R File to Source/Load?.  Since this morning, this problem was happening every time that I had a script open, but now the problem has become intermittent.  When this problem came up, I had to kill R and start again.
> 
> Now, I?ve started getting the following ?mysterious? messages, which again is intermittent.
> 
> 2014-11-23 22:14:09.339 R[24870:4519960] plugin com.getdropbox.dropbox.garcon interrupted
> 2014-11-23 22:14:09.339 R[24870:4522129] Unable to setup extension context - error: Couldn?t communicate with a helper application.
> 
> I?ve Xcode version 6.1 (6A1052d).
> 
> I was wondering whether any of you have had similar issues, and if you?ve any solutions.  These problems seem to be random.
> 
> Thanks in advance for your time,
> Bahram
> 
> 
> ____________________________________________
> Bahram M. Shahrooz, Ph.D., P.E., FACI, FASCE, FSEI
> Professor of Structural Engineering
> University of Cincinnati
> College of Engineering and Applied Science
> Department of CAECM
> 765 Baldwin Hall
> 2850 Campus Way
> Cincinnati, OH  45221-0071
> Phone: (513) 556-3677
> Fax:   (513) 556-2599
> 
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.

David Winsemius, MD
Alameda, CA, USA


From pmilin at gmail.com  Wed Nov 26 12:39:46 2014
From: pmilin at gmail.com (Petar Milin)
Date: Wed, 26 Nov 2014 12:39:46 +0100
Subject: [R-SIG-Mac] R is crushing quite regularly
Message-ID: <C35E1DB2-5D32-49F6-BA1C-B3A7CF22E878@gmail.com>

Hello all!
Does anyone experiences quite frequent R-crushes under Mac Yosemite? Here is the ID:

R version 3.1.1 (2014-07-10) -- "Sock it to Me"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.1.0 (64-bit)


Many thanks! PM

From ripley at stats.ox.ac.uk  Wed Nov 26 16:03:45 2014
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Wed, 26 Nov 2014 15:03:45 +0000
Subject: [R-SIG-Mac] R is crushing quite regularly
In-Reply-To: <C35E1DB2-5D32-49F6-BA1C-B3A7CF22E878@gmail.com>
References: <C35E1DB2-5D32-49F6-BA1C-B3A7CF22E878@gmail.com>
Message-ID: <5475EBD1.9020800@stats.ox.ac.uk>

On 26/11/2014 11:39, Petar Milin wrote:
> Hello all!
> Does anyone experiences quite frequent R-crushes under Mac Yosemite? Here is the ID:
>
> R version 3.1.1 (2014-07-10) -- "Sock it to Me"
> Copyright (C) 2014 The R Foundation for Statistical Computing
> Platform: x86_64-apple-darwin13.1.0 (64-bit)

0) The posting guide asked you to update before posting: R 3.1.2 is current.

1) The posting guide asked you not to use the word 'crash', but 
'crushing' is even less informative.

2) Is this commmand-line R or R.app?  If you mean the GUI console R.app, 
say so.

See http://www.r-project.org/posting-guide.html

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford
1 South Parks Road, Oxford OX1 3TG, UK


From qiong.cai at gmail.com  Thu Nov 27 22:23:03 2014
From: qiong.cai at gmail.com (Qiong Cai)
Date: Thu, 27 Nov 2014 22:23:03 +0100
Subject: [R-SIG-Mac] dyld: Symbol not found: _R_tzname
Message-ID: <CAOrq85EzTw8aWLeN_ttkqpTZdYhqUes+6EDpkc1-VSB2CQXK7w@mail.gmail.com>

Hi,

I am using clang+gfortran to build R-3.1.2 on Yosemite (10.10.1).  Here's
the versions of the compilers:

1) clang: Apple LLVM version 6.0 (clang-600.0.54) (based on LLVM
3.5svn); Target:
x86_64-apple-darwin14.0.0; Thread model: posix

2) gfortran: 4.9.2 Configured with: ../src/configure
--prefix=/Users/qiongcai/shared/gcc-4.9.2/
--enable-languages=c,c++,fortran,go
--with-gmp=/Users/qiongcai/shared/gcc-infra/
--with-mpfr=/Users/qiongcai/shared/gcc-infra/
--with-mpc=/Users/qiongcai/shared/gcc-infra/
--with-isl=/Users/qiongcai/shared/gcc-infra/
--with-cloog=/Users/qiongcai/shared/gcc-infra/ --enable-checking=release
--enable-shared --enable-lto

Here's the output of "configure":

  R is now configured for x86_64-apple-darwin14.0.0

  Source directory:          .

  Installation directory:    /Library/Frameworks

  C compiler:                clang  -m64 -march=native -mtune=native -O3

  Fortran 77 compiler:       /Users/qiongcai/shared/gcc-4.9.2/bin/gfortran
-m64 -march=native -mtune=native -O3

  C++ compiler:              clang++ -stdlib=libc++  -m64 -march=native
-mtune=native -O3

  C++ 11 compiler:           clang++ -stdlib=libc++  -std=c++11 -m64
-march=native -mtune=native -O3

  Fortran 90/95 compiler:    /Users/qiongcai/shared/gcc-4.9.2/bin/gfortran
-m64 -march=native -mtune=native -O3

  Obj-C compiler:     clang -ObjC -m64 -march=native -mtune=native -O3
-fobjc-exceptions

  Interfaces supported:      X11, aqua, tcltk

  External libraries:        readline

  Additional capabilities:   NLS, ICU

  Options enabled:           framework, shared BLAS, R profiling

  Capabilities skipped:      PNG, JPEG, TIFF, cairo

  Options not enabled:       memory profiling

  Recommended packages:      yes

The compilation seems ok, but there is a dynamic load problem as follows:

  dyld: Symbol not found: _R_tzname

  Referenced from: /Users/qiongcai/Codes/r-projects/R-3.1.2/lib/libR.dylib

  Expected in: flat namespace

 in /Users/qiongcai/Codes/r-projects/R-3.1.2/lib/libR.dylib

  /bin/sh: line 1: 30319 Done                    echo
"tools:::.install_package_description('.', '"../../../library/tools"')"

     30320 Trace/BPT trap: 5       | R_DEFAULT_PACKAGES=NULL ../../../bin/R
--vanilla --slave > /dev/null

Has anyone seen such a problem before? Any clue to fix the problem?


Thanks

Qiong

	[[alternative HTML version deleted]]


From ripley at stats.ox.ac.uk  Thu Nov 27 22:51:44 2014
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Thu, 27 Nov 2014 21:51:44 +0000
Subject: [R-SIG-Mac] dyld: Symbol not found: _R_tzname
In-Reply-To: <CAOrq85EzTw8aWLeN_ttkqpTZdYhqUes+6EDpkc1-VSB2CQXK7w@mail.gmail.com>
References: <CAOrq85EzTw8aWLeN_ttkqpTZdYhqUes+6EDpkc1-VSB2CQXK7w@mail.gmail.com>
Message-ID: <54779CF0.4030807@stats.ox.ac.uk>

I use a very similar setup (Yosemite, compilers from CLT for Xcode 
6.1.1, self-built gfortran 4.9.2), and it works for me. You should see 
things like

% nm -g lib/libR.dylib | grep tzname
000000000029f0c0 D _R_tzname

% nm -g src/extra/tzone/libtz.a | grep tzname
000000000000ada0 D _R_tzname
                  U _R_tzname
% nm -g src/extra/tzone/localtime.o | grep tzname
000000000000ada0 D _R_tzname

Maybe that will help you track down why the symbol is missing.


On 27/11/2014 21:23, Qiong Cai wrote:
> Hi,
>
> I am using clang+gfortran to build R-3.1.2 on Yosemite (10.10.1).  Here's
> the versions of the compilers:
>
> 1) clang: Apple LLVM version 6.0 (clang-600.0.54) (based on LLVM
> 3.5svn); Target:
> x86_64-apple-darwin14.0.0; Thread model: posix
>
> 2) gfortran: 4.9.2 Configured with: ../src/configure
> --prefix=/Users/qiongcai/shared/gcc-4.9.2/
> --enable-languages=c,c++,fortran,go
> --with-gmp=/Users/qiongcai/shared/gcc-infra/
> --with-mpfr=/Users/qiongcai/shared/gcc-infra/
> --with-mpc=/Users/qiongcai/shared/gcc-infra/
> --with-isl=/Users/qiongcai/shared/gcc-infra/
> --with-cloog=/Users/qiongcai/shared/gcc-infra/ --enable-checking=release
> --enable-shared --enable-lto
>
> Here's the output of "configure":
>
>    R is now configured for x86_64-apple-darwin14.0.0
>
>    Source directory:          .
>
>    Installation directory:    /Library/Frameworks
>
>    C compiler:                clang  -m64 -march=native -mtune=native -O3
>
>    Fortran 77 compiler:       /Users/qiongcai/shared/gcc-4.9.2/bin/gfortran
> -m64 -march=native -mtune=native -O3
>
>    C++ compiler:              clang++ -stdlib=libc++  -m64 -march=native
> -mtune=native -O3
>
>    C++ 11 compiler:           clang++ -stdlib=libc++  -std=c++11 -m64
> -march=native -mtune=native -O3
>
>    Fortran 90/95 compiler:    /Users/qiongcai/shared/gcc-4.9.2/bin/gfortran
> -m64 -march=native -mtune=native -O3
>
>    Obj-C compiler:     clang -ObjC -m64 -march=native -mtune=native -O3
> -fobjc-exceptions
>
>    Interfaces supported:      X11, aqua, tcltk
>
>    External libraries:        readline
>
>    Additional capabilities:   NLS, ICU
>
>    Options enabled:           framework, shared BLAS, R profiling
>
>    Capabilities skipped:      PNG, JPEG, TIFF, cairo
>
>    Options not enabled:       memory profiling
>
>    Recommended packages:      yes
>
> The compilation seems ok, but there is a dynamic load problem as follows:
>
>    dyld: Symbol not found: _R_tzname
>
>    Referenced from: /Users/qiongcai/Codes/r-projects/R-3.1.2/lib/libR.dylib
>
>    Expected in: flat namespace
>
>   in /Users/qiongcai/Codes/r-projects/R-3.1.2/lib/libR.dylib
>
>    /bin/sh: line 1: 30319 Done                    echo
> "tools:::.install_package_description('.', '"../../../library/tools"')"
>
>       30320 Trace/BPT trap: 5       | R_DEFAULT_PACKAGES=NULL ../../../bin/R
> --vanilla --slave > /dev/null
>
> Has anyone seen such a problem before? Any clue to fix the problem?
>
>
> Thanks
>
> Qiong
>
> 	[[alternative HTML version deleted]]
>
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford
1 South Parks Road, Oxford OX1 3TG, UK


From qiong.cai at gmail.com  Thu Nov 27 23:30:07 2014
From: qiong.cai at gmail.com (Qiong Cai)
Date: Thu, 27 Nov 2014 23:30:07 +0100
Subject: [R-SIG-Mac] dyld: Symbol not found: _R_tzname
In-Reply-To: <54779CF0.4030807@stats.ox.ac.uk>
References: <CAOrq85EzTw8aWLeN_ttkqpTZdYhqUes+6EDpkc1-VSB2CQXK7w@mail.gmail.com>
	<54779CF0.4030807@stats.ox.ac.uk>
Message-ID: <CAOrq85G7xM96xLWa20Tprpr8sA1mbDarcJdtBOF0q1ETfHi5yg@mail.gmail.com>

The address values for tzname from my compilation are shown below.  The
library libR.dylib does not contain any value for tzname.

If possible, could you please pass the complete command line to build your
libR.dylib to me?  I am afraid that something is wrong with the linking
stage.

thanks
Qiong

nm -g lib/libR.dylib | grep tzname

            U _R_tzname

nm -g src/extra/tzone/libtz.a | grep tzname

0000000000003760 D _R_tzname

                 U _R_tzname

nm -g src/extra/tzone/localtime.o | grep tzname

0000000000003760 D _R_tzname



On Thu, Nov 27, 2014 at 10:51 PM, Prof Brian Ripley <ripley at stats.ox.ac.uk>
wrote:

> I use a very similar setup (Yosemite, compilers from CLT for Xcode 6.1.1,
> self-built gfortran 4.9.2), and it works for me. You should see things like
>
> % nm -g lib/libR.dylib | grep tzname
> 000000000029f0c0 D _R_tzname
>
> % nm -g src/extra/tzone/libtz.a | grep tzname
> 000000000000ada0 D _R_tzname
>                  U _R_tzname
> % nm -g src/extra/tzone/localtime.o | grep tzname
> 000000000000ada0 D _R_tzname
>
> Maybe that will help you track down why the symbol is missing.
>
>
>
> On 27/11/2014 21:23, Qiong Cai wrote:
>
>> Hi,
>>
>> I am using clang+gfortran to build R-3.1.2 on Yosemite (10.10.1).  Here's
>> the versions of the compilers:
>>
>> 1) clang: Apple LLVM version 6.0 (clang-600.0.54) (based on LLVM
>> 3.5svn); Target:
>> x86_64-apple-darwin14.0.0; Thread model: posix
>>
>> 2) gfortran: 4.9.2 Configured with: ../src/configure
>> --prefix=/Users/qiongcai/shared/gcc-4.9.2/
>> --enable-languages=c,c++,fortran,go
>> --with-gmp=/Users/qiongcai/shared/gcc-infra/
>> --with-mpfr=/Users/qiongcai/shared/gcc-infra/
>> --with-mpc=/Users/qiongcai/shared/gcc-infra/
>> --with-isl=/Users/qiongcai/shared/gcc-infra/
>> --with-cloog=/Users/qiongcai/shared/gcc-infra/ --enable-checking=release
>> --enable-shared --enable-lto
>>
>> Here's the output of "configure":
>>
>>    R is now configured for x86_64-apple-darwin14.0.0
>>
>>    Source directory:          .
>>
>>    Installation directory:    /Library/Frameworks
>>
>>    C compiler:                clang  -m64 -march=native -mtune=native -O3
>>
>>    Fortran 77 compiler:       /Users/qiongcai/shared/gcc-4.
>> 9.2/bin/gfortran
>> -m64 -march=native -mtune=native -O3
>>
>>    C++ compiler:              clang++ -stdlib=libc++  -m64 -march=native
>> -mtune=native -O3
>>
>>    C++ 11 compiler:           clang++ -stdlib=libc++  -std=c++11 -m64
>> -march=native -mtune=native -O3
>>
>>    Fortran 90/95 compiler:    /Users/qiongcai/shared/gcc-4.
>> 9.2/bin/gfortran
>> -m64 -march=native -mtune=native -O3
>>
>>    Obj-C compiler:     clang -ObjC -m64 -march=native -mtune=native -O3
>> -fobjc-exceptions
>>
>>    Interfaces supported:      X11, aqua, tcltk
>>
>>    External libraries:        readline
>>
>>    Additional capabilities:   NLS, ICU
>>
>>    Options enabled:           framework, shared BLAS, R profiling
>>
>>    Capabilities skipped:      PNG, JPEG, TIFF, cairo
>>
>>    Options not enabled:       memory profiling
>>
>>    Recommended packages:      yes
>>
>> The compilation seems ok, but there is a dynamic load problem as follows:
>>
>>    dyld: Symbol not found: _R_tzname
>>
>>    Referenced from: /Users/qiongcai/Codes/r-projects/R-3.1.2/lib/libR.
>> dylib
>>
>>    Expected in: flat namespace
>>
>>   in /Users/qiongcai/Codes/r-projects/R-3.1.2/lib/libR.dylib
>>
>>    /bin/sh: line 1: 30319 Done                    echo
>> "tools:::.install_package_description('.', '"../../../library/tools"')"
>>
>>       30320 Trace/BPT trap: 5       | R_DEFAULT_PACKAGES=NULL
>> ../../../bin/R
>> --vanilla --slave > /dev/null
>>
>> Has anyone seen such a problem before? Any clue to fix the problem?
>>
>>
>> Thanks
>>
>> Qiong
>>
>>         [[alternative HTML version deleted]]
>>
>> _______________________________________________
>> R-SIG-Mac mailing list
>> R-SIG-Mac at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>
>>
>
> --
> Brian D. Ripley,                  ripley at stats.ox.ac.uk
> Emeritus Professor of Applied Statistics, University of Oxford
> 1 South Parks Road, Oxford OX1 3TG, UK
>
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>

	[[alternative HTML version deleted]]


From qiong.cai at gmail.com  Fri Nov 28 00:30:05 2014
From: qiong.cai at gmail.com (Qiong Cai)
Date: Fri, 28 Nov 2014 00:30:05 +0100
Subject: [R-SIG-Mac] dyld: Symbol not found: _R_tzname
In-Reply-To: <CAOrq85G7xM96xLWa20Tprpr8sA1mbDarcJdtBOF0q1ETfHi5yg@mail.gmail.com>
References: <CAOrq85EzTw8aWLeN_ttkqpTZdYhqUes+6EDpkc1-VSB2CQXK7w@mail.gmail.com>
	<54779CF0.4030807@stats.ox.ac.uk>
	<CAOrq85G7xM96xLWa20Tprpr8sA1mbDarcJdtBOF0q1ETfHi5yg@mail.gmail.com>
Message-ID: <CAOrq85H51JK7i4NTjpQLRD5BZVbzLt56k6k-OWTcQA198P9-VA@mail.gmail.com>

It's working now.  I made a mistake by using ar from GNU binutils.

On Thu, Nov 27, 2014 at 11:30 PM, Qiong Cai <qiong.cai at gmail.com> wrote:

> The address values for tzname from my compilation are shown below.  The
> library libR.dylib does not contain any value for tzname.
>
> If possible, could you please pass the complete command line to build your
> libR.dylib to me?  I am afraid that something is wrong with the linking
> stage.
>
> thanks
> Qiong
>
> nm -g lib/libR.dylib | grep tzname
>
>             U _R_tzname
>
> nm -g src/extra/tzone/libtz.a | grep tzname
>
> 0000000000003760 D _R_tzname
>
>                  U _R_tzname
>
> nm -g src/extra/tzone/localtime.o | grep tzname
>
> 0000000000003760 D _R_tzname
>
>
>
> On Thu, Nov 27, 2014 at 10:51 PM, Prof Brian Ripley <ripley at stats.ox.ac.uk
> > wrote:
>
>> I use a very similar setup (Yosemite, compilers from CLT for Xcode 6.1.1,
>> self-built gfortran 4.9.2), and it works for me. You should see things like
>>
>> % nm -g lib/libR.dylib | grep tzname
>> 000000000029f0c0 D _R_tzname
>>
>> % nm -g src/extra/tzone/libtz.a | grep tzname
>> 000000000000ada0 D _R_tzname
>>                  U _R_tzname
>> % nm -g src/extra/tzone/localtime.o | grep tzname
>> 000000000000ada0 D _R_tzname
>>
>> Maybe that will help you track down why the symbol is missing.
>>
>>
>>
>> On 27/11/2014 21:23, Qiong Cai wrote:
>>
>>> Hi,
>>>
>>> I am using clang+gfortran to build R-3.1.2 on Yosemite (10.10.1).  Here's
>>> the versions of the compilers:
>>>
>>> 1) clang: Apple LLVM version 6.0 (clang-600.0.54) (based on LLVM
>>> 3.5svn); Target:
>>> x86_64-apple-darwin14.0.0; Thread model: posix
>>>
>>> 2) gfortran: 4.9.2 Configured with: ../src/configure
>>> --prefix=/Users/qiongcai/shared/gcc-4.9.2/
>>> --enable-languages=c,c++,fortran,go
>>> --with-gmp=/Users/qiongcai/shared/gcc-infra/
>>> --with-mpfr=/Users/qiongcai/shared/gcc-infra/
>>> --with-mpc=/Users/qiongcai/shared/gcc-infra/
>>> --with-isl=/Users/qiongcai/shared/gcc-infra/
>>> --with-cloog=/Users/qiongcai/shared/gcc-infra/ --enable-checking=release
>>> --enable-shared --enable-lto
>>>
>>> Here's the output of "configure":
>>>
>>>    R is now configured for x86_64-apple-darwin14.0.0
>>>
>>>    Source directory:          .
>>>
>>>    Installation directory:    /Library/Frameworks
>>>
>>>    C compiler:                clang  -m64 -march=native -mtune=native -O3
>>>
>>>    Fortran 77 compiler:       /Users/qiongcai/shared/gcc-4.
>>> 9.2/bin/gfortran
>>> -m64 -march=native -mtune=native -O3
>>>
>>>    C++ compiler:              clang++ -stdlib=libc++  -m64 -march=native
>>> -mtune=native -O3
>>>
>>>    C++ 11 compiler:           clang++ -stdlib=libc++  -std=c++11 -m64
>>> -march=native -mtune=native -O3
>>>
>>>    Fortran 90/95 compiler:    /Users/qiongcai/shared/gcc-4.
>>> 9.2/bin/gfortran
>>> -m64 -march=native -mtune=native -O3
>>>
>>>    Obj-C compiler:     clang -ObjC -m64 -march=native -mtune=native -O3
>>> -fobjc-exceptions
>>>
>>>    Interfaces supported:      X11, aqua, tcltk
>>>
>>>    External libraries:        readline
>>>
>>>    Additional capabilities:   NLS, ICU
>>>
>>>    Options enabled:           framework, shared BLAS, R profiling
>>>
>>>    Capabilities skipped:      PNG, JPEG, TIFF, cairo
>>>
>>>    Options not enabled:       memory profiling
>>>
>>>    Recommended packages:      yes
>>>
>>> The compilation seems ok, but there is a dynamic load problem as follows:
>>>
>>>    dyld: Symbol not found: _R_tzname
>>>
>>>    Referenced from: /Users/qiongcai/Codes/r-projects/R-3.1.2/lib/libR.
>>> dylib
>>>
>>>    Expected in: flat namespace
>>>
>>>   in /Users/qiongcai/Codes/r-projects/R-3.1.2/lib/libR.dylib
>>>
>>>    /bin/sh: line 1: 30319 Done                    echo
>>> "tools:::.install_package_description('.', '"../../../library/tools"')"
>>>
>>>       30320 Trace/BPT trap: 5       | R_DEFAULT_PACKAGES=NULL
>>> ../../../bin/R
>>> --vanilla --slave > /dev/null
>>>
>>> Has anyone seen such a problem before? Any clue to fix the problem?
>>>
>>>
>>> Thanks
>>>
>>> Qiong
>>>
>>>         [[alternative HTML version deleted]]
>>>
>>> _______________________________________________
>>> R-SIG-Mac mailing list
>>> R-SIG-Mac at r-project.org
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>>
>>>
>>
>> --
>> Brian D. Ripley,                  ripley at stats.ox.ac.uk
>> Emeritus Professor of Applied Statistics, University of Oxford
>> 1 South Parks Road, Oxford OX1 3TG, UK
>>
>> _______________________________________________
>> R-SIG-Mac mailing list
>> R-SIG-Mac at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>
>
>

	[[alternative HTML version deleted]]


From SHAHROBM at ucmail.uc.edu  Mon Nov 24 14:25:25 2014
From: SHAHROBM at ucmail.uc.edu (Shahrooz, Bahram (shahrobm))
Date: Mon, 24 Nov 2014 13:25:25 -0000
Subject: [R-SIG-Mac] [R] R 3.1.2 GUI 1.65 Mavericks build (6833) freezes
	in Yosemite
In-Reply-To: <811A7ACB-02FF-4201-AB13-0513518E3EDE@comcast.net>
References: <05CD682B-AFE8-4406-8814-160BE8A4927F@ucmail.uc.edu>
	<811A7ACB-02FF-4201-AB13-0513518E3EDE@comcast.net>
Message-ID: <1493093D-8D18-4D79-8B10-94109786435E@ucmail.uc.edu>

David:

Thanks for your response and forwarding my question to R-Mac-SIG.

What do you use instead of the GUI menu option that I?v been using?

Thanks,
Bahram

____________________________________________
Bahram M. Shahrooz, Ph.D., P.E., FACI, FASCE, FSEI
Professor of Structural Engineering
University of Cincinnati
College of Engineering and Applied Science
Department of CAECM
765 Baldwin Hall
2850 Campus Way
Cincinnati, OH  45221-0071
Phone: (513) 556-3677
Fax:   (513) 556-2599


On Nov 24, 2014, at 12:41 AM, David Winsemius <dwinsemius at comcast.net<mailto:dwinsemius at comcast.net>> wrote:

I can reproduce the problem but only once so far. (I never use that GUI menu option.) R hangs with a spinning disc when you choose that option from the GUI menu. It?s a MacGUI specific issue so this is the wrong mailing list. Forwarding to R-Mac-SIG.

(Doesn?t seem to be an XCode issue.)
Model Identifier: MacBookPro5,3
 Processor Name: Intel Core 2 Duo
 Processor Speed: 2.8 GHz
 Memory: 8 GB

sessionInfo()
R version 3.1.1 (2014-07-10)
Platform: x86_64-apple-darwin13.1.0 (64-bit)

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base


?
David
On Nov 23, 2014, at 7:35 PM, Shahrooz, Bahram (shahrobm) <SHAHROBM at ucmail.uc.edu<mailto:SHAHROBM at ucmail.uc.edu>> wrote:

Hi,

I?ve the latest version of R, which I know is for Mavericks.  I?ve upgraded to Yosemite, and R is acting strangely.

R becomes unresponsive when I try to use ?R File to Source/Load?.  Since this morning, this problem was happening every time that I had a script open, but now the problem has become intermittent.  When this problem came up, I had to kill R and start again.

Now, I?ve started getting the following ?mysterious? messages, which again is intermittent.

2014-11-23 22:14:09.339 R[24870:4519960] plugin com.getdropbox.dropbox.garcon interrupted
2014-11-23 22:14:09.339 R[24870:4522129] Unable to setup extension context - error: Couldn?t communicate with a helper application.

I?ve Xcode version 6.1 (6A1052d).

I was wondering whether any of you have had similar issues, and if you?ve any solutions.  These problems seem to be random.

Thanks in advance for your time,
Bahram


____________________________________________
Bahram M. Shahrooz, Ph.D., P.E., FACI, FASCE, FSEI
Professor of Structural Engineering
University of Cincinnati
College of Engineering and Applied Science
Department of CAECM
765 Baldwin Hall
2850 Campus Way
Cincinnati, OH  45221-0071
Phone: (513) 556-3677
Fax:   (513) 556-2599



[[alternative HTML version deleted]]

______________________________________________
R-help at r-project.org<mailto:R-help at r-project.org> mailing list
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.

David Winsemius, MD
Alameda, CA, USA



	[[alternative HTML version deleted]]


