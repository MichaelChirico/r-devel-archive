From jimplante at me.com  Thu Sep 14 18:13:39 2017
From: jimplante at me.com (James Plante)
Date: Thu, 14 Sep 2017 11:13:39 -0500
Subject: [R-SIG-Mac] segfault on R v. 3.4.1
Message-ID: <369D3233-F096-4CE1-8177-958D63C8D8E0@me.com>

If I knew what a segfault was, I might be able to be more helpful. 
Do any of you folks know what might?ve happened? I?ve d/l?d and installed the 3.4.1. Mac binary from CRAN three times, and each time I get the text below.
Any help will be appreciated; let me know if I can include anything else. A sysinfo() is out of the question, since my owly option is how I want to quit R. The only guess I have is that I don?t have enough memory installed. 
Main system info: 
MacOS Sierra v. 10.12.8; 27? iMac, late 2013; 3.4GHz Core i%; 8GB 1600MHz DDR3
Thanks in advance,
Jim
R version 3.4.1 (2017-06-30) -- "Single Candle"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)
R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.
  Natural language support but running in an English locale
R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.
Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.
 *** caught segfault ***
address 0x1310, cause 'memory not mapped'
Traceback:
 1: dyn.load(file, DLLpath = DLLpath, ...)
 2: library.dynam(lib, package, package.lib)
 3: loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 4: asNamespace(ns)
 5: namespaceImportFrom(ns, loadNamespace(j <- i[[1L]], c(lib.loc,     .libPaths()), versionCheck = vI[[j]]),
i[[2L]], from = package)
 6: loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 7: asNamespace(ns)
 8: namespaceImportFrom(ns, loadNamespace(j <- i[[1L]], c(lib.loc,
i[[2L]], from = package)
.libPaths()), versionCheck = vI[[j]]),
 9: loadNamespace(package, lib.loc)
10: doTryCatch(return(expr), name, parentenv, handler)
11: tryCatchOne(expr, names, parentenv, handlers[[1L]])
12: tryCatchList(expr, classes, parentenv, handlers)
13: tryCatch({    attr(package, "LibPath") <- which.lib.loc
<- attachNamespace(ns, pos = pos, deps)}, error = function(e) {
paste(" in", deparse(cc)[1L])    else ""    msg <- gettextf("package or namespace load failed for %s%s:\n
%s",         sQuote(package), P, conditionMessage(e))    if (logical.return)
msg), domain = NA)    else stop(msg, call. = FALSE, domain = NA)})
14: library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,
warn.conflicts, quietly = quietly)
15: doTryCatch(return(expr), name, parentenv, handler)
16: tryCatchOne(expr, names, parentenv, handlers[[1L]])
17: tryCatchList(expr, classes, parentenv, handlers)
18: tryCatch(library(package, lib.loc = lib.loc, character.only = TRUE,     logical.return = TRUE,
warn.conflicts = warn.conflicts, quietly = quietly),     error = function(e) e)
19: require(pkg, quietly = TRUE, warn.conflicts = FALSE, character.only = TRUE)
20: .First.sys()
Possible actions:
1: abort (with core dump, if enabled)
2: normal R exit
3: exit R without saving workspace
4: exit R saving workspace
2017-09-14 08:14:57.208 R[11081:2277811] IMKClient Stall detected, *please Report* your user scenario
attaching a spindump (or sysdiagnose) that captures the problem - (imkxpc_attributesForCharacterIndex:reply:)
block performed very slowly (1.16 secs).
Selection:
	[[alternative HTML version deleted]]


From murdoch.duncan at gmail.com  Thu Sep 14 18:29:26 2017
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Thu, 14 Sep 2017 12:29:26 -0400
Subject: [R-SIG-Mac] segfault on R v. 3.4.1
In-Reply-To: <369D3233-F096-4CE1-8177-958D63C8D8E0@me.com>
References: <369D3233-F096-4CE1-8177-958D63C8D8E0@me.com>
Message-ID: <f058611f-50c7-b210-dca4-d67b79958c2e@gmail.com>

On 14/09/2017 12:13 PM, James Plante wrote:
> If I knew what a segfault was, I might be able to be more helpful.

In your case, it means that some part of the code is trying to refer to 
a nonexistent memory address.  This is certainly a bug somewhere or other.

 From the traceback you posted, this appears to happen when R is trying 
to load the compiled library of some package.  I don't see information 
on what package that is.

If it is a contributed package, the bug likely lies there.  You might be 
able to see this by going into the console and running

R --vanilla

which will load R with reduced startup code -- an old workspace won't be 
loaded, etc.  If that works, then you can gradually add back the things 
you usually use (see ?Startup for the startup process) until you find 
what triggers the problem.

If that fails, then the problem is likely with R, or some basic part of 
your system.  Four years old doesn't seem old, but it's long enough for 
hardware problems to develop.

Duncan Murdoch

> Do any of you folks know what might?ve happened? I?ve d/l?d and installed the 3.4.1. Mac binary from CRAN three times, and each time I get the text below.
> Any help will be appreciated; let me know if I can include anything else. A sysinfo() is out of the question, since my owly option is how I want to quit R. The only guess I have is that I don?t have enough memory installed.
> Main system info:
> MacOS Sierra v. 10.12.8; 27? iMac, late 2013; 3.4GHz Core i%; 8GB 1600MHz DDR3
> Thanks in advance,
> Jim
> R version 3.4.1 (2017-06-30) -- "Single Candle"
> Copyright (C) 2017 The R Foundation for Statistical Computing
> Platform: x86_64-apple-darwin15.6.0 (64-bit)
> R is free software and comes with ABSOLUTELY NO WARRANTY.
> You are welcome to redistribute it under certain conditions.
> Type 'license()' or 'licence()' for distribution details.
>    Natural language support but running in an English locale
> R is a collaborative project with many contributors.
> Type 'contributors()' for more information and
> 'citation()' on how to cite R or R packages in publications.
> Type 'demo()' for some demos, 'help()' for on-line help, or
> 'help.start()' for an HTML browser interface to help.
> Type 'q()' to quit R.
>   *** caught segfault ***
> address 0x1310, cause 'memory not mapped'
> Traceback:
>   1: dyn.load(file, DLLpath = DLLpath, ...)
>   2: library.dynam(lib, package, package.lib)
>   3: loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
>   4: asNamespace(ns)
>   5: namespaceImportFrom(ns, loadNamespace(j <- i[[1L]], c(lib.loc,     .libPaths()), versionCheck = vI[[j]]),
> i[[2L]], from = package)
>   6: loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
>   7: asNamespace(ns)
>   8: namespaceImportFrom(ns, loadNamespace(j <- i[[1L]], c(lib.loc,
> i[[2L]], from = package)
> .libPaths()), versionCheck = vI[[j]]),
>   9: loadNamespace(package, lib.loc)
> 10: doTryCatch(return(expr), name, parentenv, handler)
> 11: tryCatchOne(expr, names, parentenv, handlers[[1L]])
> 12: tryCatchList(expr, classes, parentenv, handlers)
> 13: tryCatch({    attr(package, "LibPath") <- which.lib.loc
> <- attachNamespace(ns, pos = pos, deps)}, error = function(e) {
> paste(" in", deparse(cc)[1L])    else ""    msg <- gettextf("package or namespace load failed for %s%s:\n
> %s",         sQuote(package), P, conditionMessage(e))    if (logical.return)
> msg), domain = NA)    else stop(msg, call. = FALSE, domain = NA)})
> 14: library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,
> warn.conflicts, quietly = quietly)
> 15: doTryCatch(return(expr), name, parentenv, handler)
> 16: tryCatchOne(expr, names, parentenv, handlers[[1L]])
> 17: tryCatchList(expr, classes, parentenv, handlers)
> 18: tryCatch(library(package, lib.loc = lib.loc, character.only = TRUE,     logical.return = TRUE,
> warn.conflicts = warn.conflicts, quietly = quietly),     error = function(e) e)
> 19: require(pkg, quietly = TRUE, warn.conflicts = FALSE, character.only = TRUE)
> 20: .First.sys()
> Possible actions:
> 1: abort (with core dump, if enabled)
> 2: normal R exit
> 3: exit R without saving workspace
> 4: exit R saving workspace
> 2017-09-14 08:14:57.208 R[11081:2277811] IMKClient Stall detected, *please Report* your user scenario
> attaching a spindump (or sysdiagnose) that captures the problem - (imkxpc_attributesForCharacterIndex:reply:)
> block performed very slowly (1.16 secs).
> Selection:
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>


From dwinsemius at comcast.net  Fri Sep 15 02:21:38 2017
From: dwinsemius at comcast.net (David Winsemius)
Date: Thu, 14 Sep 2017 17:21:38 -0700
Subject: [R-SIG-Mac] segfault on R v. 3.4.1
In-Reply-To: <369D3233-F096-4CE1-8177-958D63C8D8E0@me.com>
References: <369D3233-F096-4CE1-8177-958D63C8D8E0@me.com>
Message-ID: <3DFC8E7A-6881-47B3-A39B-2DE47195C8BD@comcast.net>


> On Sep 14, 2017, at 9:13 AM, James Plante <jimplante at me.com> wrote:
> 
> If I knew what a segfault was, I might be able to be more helpful. 
> Do any of you folks know what might?ve happened? I?ve d/l?d and installed the 3.4.1. Mac binary from CRAN three times, and each time I get the text below.

But ... did you also update your library packages?


> Any help will be appreciated; let me know if I can include anything else. A sysinfo() is out of the question, since my owly option is how I want to quit R. The only guess I have is that I don?t have enough memory installed. 

That's pretty unlikely.


> Main system info: 
> MacOS Sierra v. 10.12.8; 27? iMac, late 2013; 3.4GHz Core i%; 8GB 1600MHz DDR3
> Thanks in advance,
> Jim
> R version 3.4.1 (2017-06-30) -- "Single Candle"
> Copyright (C) 2017 The R Foundation for Statistical Computing
> Platform: x86_64-apple-darwin15.6.0 (64-bit)
> R is free software and comes with ABSOLUTELY NO WARRANTY.
> You are welcome to redistribute it under certain conditions.
> Type 'license()' or 'licence()' for distribution details.
>  Natural language support but running in an English locale
> R is a collaborative project with many contributors.
> Type 'contributors()' for more information and
> 'citation()' on how to cite R or R packages in publications.
> Type 'demo()' for some demos, 'help()' for on-line help, or
> 'help.start()' for an HTML browser interface to help.
> Type 'q()' to quit R.
> *** caught segfault ***
> address 0x1310, cause 'memory not mapped'
> Traceback:
> 1: dyn.load(file, DLLpath = DLLpath, ...)
> 2: library.dynam(lib, package, package.lib)
> 3: loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
> 4: asNamespace(ns)
> 5: namespaceImportFrom(ns, loadNamespace(j <- i[[1L]], c(lib.loc,     .libPaths()), versionCheck = vI[[j]]),
> i[[2L]], from = package)
> 6: loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
> 7: asNamespace(ns)
> 8: namespaceImportFrom(ns, loadNamespace(j <- i[[1L]], c(lib.loc,
> i[[2L]], from = package)
> .libPaths()), versionCheck = vI[[j]]),
> 9: loadNamespace(package, lib.loc)
> 10: doTryCatch(return(expr), name, parentenv, handler)
> 11: tryCatchOne(expr, names, parentenv, handlers[[1L]])
> 12: tryCatchList(expr, classes, parentenv, handlers)
> 13: tryCatch({    attr(package, "LibPath") <- which.lib.loc
> <- attachNamespace(ns, pos = pos, deps)}, error = function(e) {
> paste(" in", deparse(cc)[1L])    else ""    msg <- gettextf("package or namespace load failed for %s%s:\n
> %s",         sQuote(package), P, conditionMessage(e))    if (logical.return)
> msg), domain = NA)    else stop(msg, call. = FALSE, domain = NA)})
> 14: library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,
> warn.conflicts, quietly = quietly)
> 15: doTryCatch(return(expr), name, parentenv, handler)
> 16: tryCatchOne(expr, names, parentenv, handlers[[1L]])
> 17: tryCatchList(expr, classes, parentenv, handlers)
> 18: tryCatch(library(package, lib.loc = lib.loc, character.only = TRUE,     logical.return = TRUE,
> warn.conflicts = warn.conflicts, quietly = quietly),     error = function(e) e)
> 19: require(pkg, quietly = TRUE, warn.conflicts = FALSE, character.only = TRUE)
> 20: .First.sys()

The problem apparently starts with .First.sys(). The .First.sys() function is called after the function .First which may reside in one of the startup files. See:  ?Startup  ... in particular:

"Next, if a function .First is found on the search path, it is executed as .First(). Finally, function .First.sys() in the base package is run. This calls require to attach the default packages specified by options("defaultPackages"). If the methods package is included, this will have been attached earlier (by function .OptRequireMethods()) so that namespace initializations such as those from the user workspace will proceed correctly."

So you would need to examine your Renviron.site file and maybe .Rprofile files and see if one of them is attempting to load a package that has not been updated properly.

-- 
David.



> Possible actions:
> 1: abort (with core dump, if enabled)
> 2: normal R exit
> 3: exit R without saving workspace
> 4: exit R saving workspace
> 2017-09-14 08:14:57.208 R[11081:2277811] IMKClient Stall detected, *please Report* your user scenario
> attaching a spindump (or sysdiagnose) that captures the problem - (imkxpc_attributesForCharacterIndex:reply:)
> block performed very slowly (1.16 secs).
> Selection:
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac

David Winsemius
Alameda, CA, USA

'Any technology distinguishable from magic is insufficiently advanced.'   -Gehm's Corollary to Clarke's Third Law


From marius.hofert at uwaterloo.ca  Sun Sep 17 06:11:35 2017
From: marius.hofert at uwaterloo.ca (Marius Hofert)
Date: Sun, 17 Sep 2017 06:11:35 +0200
Subject: [R-SIG-Mac] mpi.close.Rslaves() 'hangs'
Message-ID: <CAM3-KjYH+PfSrCMbzP58Jeryt+rsszWGrQLma71cER3Gexpwjg@mail.gmail.com>

Hi,

The example on ?mpi.close.Rslaves seems to 'hang' for me:

library(Rmpi)
mpi.spawn.Rslaves(nslaves=2)
tailslave.log()
mpi.remote.exec(rnorm(10))
mpi.close.Rslaves() # => hangs

... with output (hanging at the last line, not returning to the prompt):

> library(Rmpi)
> mpi.spawn.Rslaves(nslaves=2)
tailslave.log()
2 slaves are spawned successfully. 0 failed.
master (rank 0, comm 1) of size 3 is running on: sklar
slave1 (rank 1, comm 1) of size 3 is running on: sklar
slave2 (rank 2, comm 1) of size 3 is running on: sklar
>
==> sklar.51249+1.51251.log <==
Host: sklar Rank(ID): 1 of Size: 3 on comm 1

==> sklar.51249+1.51252.log <==
Host: sklar Rank(ID): 2 of Size: 3 on comm 1
> mpi.remote.exec(rnorm(10))
           X1         X2
1   0.7266248 -1.3922235
2   0.7212728  1.6761796
3   0.4735390 -1.8894523
4   1.3799295 -1.0452228
5  -2.1399312 -0.3452672
6   0.0909944  0.3565657
7  -0.6401649  0.8735195
8  -0.4515465 -0.8951751
9  -0.2142557  0.1436790
10 -1.3349072 -0.7224436
> mpi.close.Rslaves()

Below is my sessionInfo(). OpenMPI was installed correctly:

mhofert at sklar:~$ mpirun --version
mpirun (Open MPI) 2.1.1

Report bugs to http://www.open-mpi.org/community/help/
mhofert at sklar:~$

More information:
1) The above behavior is also mentioned in the last comment on
https://github.com/Burke-Lauenroth-Lab/rSFSW2/issues/43
2) We use(d) similar code in 'simsalapar' some time/years ago and it
never failed. I haven't used the package myself in a while, so I just
noticed (while trying to check the package, it 'hung'/never
terminated). mpi.close.Rslaves() didn't seem to change in that time
either. The only thing that changed is my hardware (no MacBook Pro
"13, 2017; from MacBook Pro "15, 2015). I suspect it's related to that
(?) but not sure.
3) Since mpi.close.Rslaves() 'hangs', I see all workers still active
(htop output).

Thanks & cheers,
Marius


> sessionInfo()
R version 3.4.1 (2017-06-30)
Platform: x86_64-apple-darwin16.7.0 (64-bit)
Running under: macOS Sierra 10.12.6

Matrix products: default
BLAS: /usr/local/R/R-3.4.1_build/lib/libRblas.dylib
LAPACK: /usr/local/R/R-3.4.1_build/lib/libRlapack.dylib

locale:
[1] en_CA.UTF-8/en_CA.UTF-8/en_CA.UTF-8/C/en_CA.UTF-8/en_CA.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

other attached packages:
[1] Rmpi_0.6-6

loaded via a namespace (and not attached):
[1] compiler_3.4.1 parallel_3.4.1


From btupper at bigelow.org  Tue Sep 19 19:23:10 2017
From: btupper at bigelow.org (Ben Tupper)
Date: Tue, 19 Sep 2017 13:23:10 -0400
Subject: [R-SIG-Mac] R.app help viewer blank
Message-ID: <EDB2994B-737A-46CE-9A28-F55A3B8A5336@bigelow.org>

Hello,

I just updated to R 3.4.1 [R.app GUI 1.70 (7375) x86_64-apple-darwin15.6.0] from http://mirror.its.dal.ca/cran/ but have encountered a puzzler.  When I lunch the help viewer like this...

?data.frame 

the viewer launches but the page content is blank.  I have also tried he search box in the help viewer as well as the menu selection 'Help > R Help' with the same result.  I have restarted both R.app and the computer without joy. The startup message and output of sessionInfo() are pasted in below.

I can get help successfully from a R session in Terminal.app.  I poked around in the list archives but don't see anything recent on this issue.  

What should I do to enable the help viewer?

Thanks!
Ben


R version 3.4.1 (2017-06-30) -- "Single Candle"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[R.app GUI 1.70 (7375) x86_64-apple-darwin15.6.0]

> ?data.frame
starting httpd help server ... done

> sessionInfo()
R version 3.4.1 (2017-06-30)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: OS X El Capitan 10.11.6

Matrix products: default
BLAS: /Library/Frameworks/R.framework/Versions/3.4/Resources/lib/libRblas.0.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.4/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
[1] compiler_3.4.1 tools_3.4.1 





Ben Tupper
Bigelow Laboratory for Ocean Sciences
60 Bigelow Drive, P.O. Box 380
East Boothbay, Maine 04544
http://www.bigelow.org

Ecocast Reports: http://seascapemodeling.org/ecocast.html
Tick Reports: https://report.bigelow.org/tick/
Jellyfish Reports: https://jellyfish.bigelow.org/jellyfish/


From dwinsemius at comcast.net  Tue Sep 19 22:42:05 2017
From: dwinsemius at comcast.net (David Winsemius)
Date: Tue, 19 Sep 2017 13:42:05 -0700
Subject: [R-SIG-Mac] R.app help viewer blank
In-Reply-To: <EDB2994B-737A-46CE-9A28-F55A3B8A5336@bigelow.org>
References: <EDB2994B-737A-46CE-9A28-F55A3B8A5336@bigelow.org>
Message-ID: <405F0C5F-8033-40CF-8191-1D159B4F3D42@comcast.net>


> On Sep 19, 2017, at 10:23 AM, Ben Tupper <btupper at bigelow.org> wrote:
> 
> Hello,
> 
> I just updated to R 3.4.1 [R.app GUI 1.70 (7375) x86_64-apple-darwin15.6.0] from http://mirror.its.dal.ca/cran/ but have encountered a puzzler.  When I lunch the help viewer like this...
> 
> ?data.frame 
> 
> the viewer launches but the page content is blank.  I have also tried he search box in the help viewer as well as the menu selection 'Help > R Help' with the same result.  I have restarted both R.app and the computer without joy. The startup message and output of sessionInfo() are pasted in below.
> 
> I can get help successfully from a R session in Terminal.app.  I poked around in the list archives but don't see anything recent on this issue.  
> 
> What should I do to enable the help viewer?


What's in your startup files?

Have you deleted or moved aside any .Rprofile and .Rdata files?

I think you would also look at:

getOption("help_type")

Looking at other options settings I see a reference to startDynamicHelp so perhaps try:

tools:::startDynamicHelp(start = TRUE)

-- 
David.

> 
> Thanks!
> Ben
> 
> 
> R version 3.4.1 (2017-06-30) -- "Single Candle"
> Copyright (C) 2017 The R Foundation for Statistical Computing
> Platform: x86_64-apple-darwin15.6.0 (64-bit)
> 
> R is free software and comes with ABSOLUTELY NO WARRANTY.
> You are welcome to redistribute it under certain conditions.
> Type 'license()' or 'licence()' for distribution details.
> 
>  Natural language support but running in an English locale
> 
> R is a collaborative project with many contributors.
> Type 'contributors()' for more information and
> 'citation()' on how to cite R or R packages in publications.
> 
> Type 'demo()' for some demos, 'help()' for on-line help, or
> 'help.start()' for an HTML browser interface to help.
> Type 'q()' to quit R.
> 
> [R.app GUI 1.70 (7375) x86_64-apple-darwin15.6.0]
> 
>> ?data.frame
> starting httpd help server ... done
> 
>> sessionInfo()
> R version 3.4.1 (2017-06-30)
> Platform: x86_64-apple-darwin15.6.0 (64-bit)
> Running under: OS X El Capitan 10.11.6
> 
> Matrix products: default
> BLAS: /Library/Frameworks/R.framework/Versions/3.4/Resources/lib/libRblas.0.dylib
> LAPACK: /Library/Frameworks/R.framework/Versions/3.4/Resources/lib/libRlapack.dylib
> 
> locale:
> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
> 
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base     
> 
> loaded via a namespace (and not attached):
> [1] compiler_3.4.1 tools_3.4.1 
> 
> 
> 
> 
> 
> Ben Tupper
> Bigelow Laboratory for Ocean Sciences
> 60 Bigelow Drive, P.O. Box 380
> East Boothbay, Maine 04544
> http://www.bigelow.org
> 
> Ecocast Reports: http://seascapemodeling.org/ecocast.html
> Tick Reports: https://report.bigelow.org/tick/
> Jellyfish Reports: https://jellyfish.bigelow.org/jellyfish/
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac

David Winsemius
Alameda, CA, USA

'Any technology distinguishable from magic is insufficiently advanced.'   -Gehm's Corollary to Clarke's Third Law


From btupper at bigelow.org  Tue Sep 19 23:06:00 2017
From: btupper at bigelow.org (Ben Tupper)
Date: Tue, 19 Sep 2017 17:06:00 -0400
Subject: [R-SIG-Mac] R.app help viewer blank
In-Reply-To: <405F0C5F-8033-40CF-8191-1D159B4F3D42@comcast.net>
References: <EDB2994B-737A-46CE-9A28-F55A3B8A5336@bigelow.org>
 <405F0C5F-8033-40CF-8191-1D159B4F3D42@comcast.net>
Message-ID: <7733AA59-B2CD-4D1D-89A4-CD405E8A544F@bigelow.org>

Hi David,

Thank you for the ideas.

> ?data.frame
starting httpd help server ... done
> getOption("help_type")
[1] "html"
> tools:::startDynamicHelp(start = TRUE)
Error in tools:::startDynamicHelp(start = TRUE) : server already running

So I tried to shut it down and then restarted it.

> tools:::startDynamicHelp(start = FALSE)
> tools:::startDynamicHelp(start = TRUE)
starting httpd help server ... done
> ?data.frame

The help viewer content is still blank.

I have no startup file and no .Rhistory or Rdata files in my home directory which is assigned as R.app's inital working directory (Preferences > Startup > Directory ["Always apply" = yes])  I created an empty directory '~/foo' and assigned that as the initial working directory.  The behavior is the same as for my home directory.

Ben

> On Sep 19, 2017, at 4:42 PM, David Winsemius <dwinsemius at comcast.net> wrote:
> 
>> 
>> On Sep 19, 2017, at 10:23 AM, Ben Tupper <btupper at bigelow.org> wrote:
>> 
>> Hello,
>> 
>> I just updated to R 3.4.1 [R.app GUI 1.70 (7375) x86_64-apple-darwin15.6.0] from http://mirror.its.dal.ca/cran/ but have encountered a puzzler.  When I lunch the help viewer like this...
>> 
>> ?data.frame 
>> 
>> the viewer launches but the page content is blank.  I have also tried he search box in the help viewer as well as the menu selection 'Help > R Help' with the same result.  I have restarted both R.app and the computer without joy. The startup message and output of sessionInfo() are pasted in below.
>> 
>> I can get help successfully from a R session in Terminal.app.  I poked around in the list archives but don't see anything recent on this issue.  
>> 
>> What should I do to enable the help viewer?
> 
> 
> What's in your startup files?
> 
> Have you deleted or moved aside any .Rprofile and .Rdata files?
> 
> I think you would also look at:
> 
> getOption("help_type")
> 
> Looking at other options settings I see a reference to startDynamicHelp so perhaps try:
> 
> tools:::startDynamicHelp(start = TRUE)
> 
> -- 
> David.
> 
>> 
>> Thanks!
>> Ben
>> 
>> 
>> R version 3.4.1 (2017-06-30) -- "Single Candle"
>> Copyright (C) 2017 The R Foundation for Statistical Computing
>> Platform: x86_64-apple-darwin15.6.0 (64-bit)
>> 
>> R is free software and comes with ABSOLUTELY NO WARRANTY.
>> You are welcome to redistribute it under certain conditions.
>> Type 'license()' or 'licence()' for distribution details.
>> 
>> Natural language support but running in an English locale
>> 
>> R is a collaborative project with many contributors.
>> Type 'contributors()' for more information and
>> 'citation()' on how to cite R or R packages in publications.
>> 
>> Type 'demo()' for some demos, 'help()' for on-line help, or
>> 'help.start()' for an HTML browser interface to help.
>> Type 'q()' to quit R.
>> 
>> [R.app GUI 1.70 (7375) x86_64-apple-darwin15.6.0]
>> 
>>> ?data.frame
>> starting httpd help server ... done
>> 
>>> sessionInfo()
>> R version 3.4.1 (2017-06-30)
>> Platform: x86_64-apple-darwin15.6.0 (64-bit)
>> Running under: OS X El Capitan 10.11.6
>> 
>> Matrix products: default
>> BLAS: /Library/Frameworks/R.framework/Versions/3.4/Resources/lib/libRblas.0.dylib
>> LAPACK: /Library/Frameworks/R.framework/Versions/3.4/Resources/lib/libRlapack.dylib
>> 
>> locale:
>> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>> 
>> attached base packages:
>> [1] stats     graphics  grDevices utils     datasets  methods   base     
>> 
>> loaded via a namespace (and not attached):
>> [1] compiler_3.4.1 tools_3.4.1 
>> 
>> 
>> 
>> 
>> 
>> Ben Tupper
>> Bigelow Laboratory for Ocean Sciences
>> 60 Bigelow Drive, P.O. Box 380
>> East Boothbay, Maine 04544
>> http://www.bigelow.org
>> 
>> Ecocast Reports: http://seascapemodeling.org/ecocast.html
>> Tick Reports: https://report.bigelow.org/tick/
>> Jellyfish Reports: https://jellyfish.bigelow.org/jellyfish/
>> 
>> _______________________________________________
>> R-SIG-Mac mailing list
>> R-SIG-Mac at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 
> David Winsemius
> Alameda, CA, USA
> 
> 'Any technology distinguishable from magic is insufficiently advanced.'   -Gehm's Corollary to Clarke's Third Law

Ben Tupper
Bigelow Laboratory for Ocean Sciences
60 Bigelow Drive, P.O. Box 380
East Boothbay, Maine 04544
http://www.bigelow.org

Ecocast Reports: http://seascapemodeling.org/ecocast.html
Tick Reports: https://report.bigelow.org/tick/
Jellyfish Reports: https://jellyfish.bigelow.org/jellyfish/


From jsg2201 at columbia.edu  Wed Sep 20 20:00:12 2017
From: jsg2201 at columbia.edu (Jonah S Gabry)
Date: Wed, 20 Sep 2017 14:00:12 -0400
Subject: [R-SIG-Mac] Some exceptions not thrown properly with clang4
Message-ID: <CABrShH602NtFaJQTcAT1bEbHgm6r--EmFkmbmi9tZ49RbRBaNw@mail.gmail.com>

With clang4 installed and Makevars updated as described at
https://cran.r-project.org/bin/macosx/ we are finding unexpected behavior
related to exceptions. The issue was brought to our attention at

http://discourse.mc-stan.org/t/error-in-rstan-2-16-2-after-upgrading-to-r-3-4-1-with-clang-4-0-0/1893

but here is a minimal example:

Put the following in "test.cpp":

#include <Rcpp.h> using namespace Rcpp; // [[Rcpp::export]] int
throw_exception() { std::stringstream errmsg; errmsg << "this is an
exception"; throw std::domain_error(errmsg.str()); return 0; }

Then compile and test it with:

Rcpp::sourceCpp("test.cpp")
throw_exception()

The output is:

Error in throw_exception() : c++ exception (unknown reason)

But the expected output (and the output I get when using e.g. the clang
installation from Xcode) is:

Error in throw_exception() : this is an exception

Is this a known issue?

Thanks,

Jonah

-----

I'm running the following:

R version 3.4.1 (2017-06-30)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS Sierra 10.12.6

	[[alternative HTML version deleted]]


From jsg2201 at columbia.edu  Thu Sep 21 00:53:47 2017
From: jsg2201 at columbia.edu (Jonah S Gabry)
Date: Wed, 20 Sep 2017 18:53:47 -0400
Subject: [R-SIG-Mac] Some exceptions not thrown properly with clang4
In-Reply-To: <CABrShH602NtFaJQTcAT1bEbHgm6r--EmFkmbmi9tZ49RbRBaNw@mail.gmail.com>
References: <CABrShH602NtFaJQTcAT1bEbHgm6r--EmFkmbmi9tZ49RbRBaNw@mail.gmail.com>
Message-ID: <CABrShH5-h8v74h3NExr4s05a_vYpzXCtC2DRu7t1RqDGmdsNqg@mail.gmail.com>

Sorry if line breaks are missing from the test.cpp example file in my
original post.

On Wed, Sep 20, 2017 at 2:00 PM, Jonah S Gabry <jsg2201 at columbia.edu> wrote:

> With clang4 installed and Makevars updated as described at
> https://cran.r-project.org/bin/macosx/ we are finding unexpected behavior
> related to exceptions. The issue was brought to our attention at
>
> http://discourse.mc-stan.org/t/error-in-rstan-2-16-2-after-
> upgrading-to-r-3-4-1-with-clang-4-0-0/1893
>
> but here is a minimal example:
>
> Put the following in "test.cpp":
>
> #include <Rcpp.h> using namespace Rcpp; // [[Rcpp::export]] int
> throw_exception() { std::stringstream errmsg; errmsg << "this is an
> exception"; throw std::domain_error(errmsg.str()); return 0; }
>
> Then compile and test it with:
>
> Rcpp::sourceCpp("test.cpp")
> throw_exception()
>
> The output is:
>
> Error in throw_exception() : c++ exception (unknown reason)
>
> But the expected output (and the output I get when using e.g. the clang
> installation from Xcode) is:
>
> Error in throw_exception() : this is an exception
>
> Is this a known issue?
>
> Thanks,
>
> Jonah
>
> -----
>
> I'm running the following:
>
> R version 3.4.1 (2017-06-30)
> Platform: x86_64-apple-darwin15.6.0 (64-bit)
> Running under: macOS Sierra 10.12.6
>

	[[alternative HTML version deleted]]


From ripley at stats.ox.ac.uk  Thu Sep 21 09:02:25 2017
From: ripley at stats.ox.ac.uk (Brian Ripley)
Date: Thu, 21 Sep 2017 08:02:25 +0100
Subject: [R-SIG-Mac] Some exceptions not thrown properly with clang4
In-Reply-To: <CABrShH5-h8v74h3NExr4s05a_vYpzXCtC2DRu7t1RqDGmdsNqg@mail.gmail.com>
References: <CABrShH602NtFaJQTcAT1bEbHgm6r--EmFkmbmi9tZ49RbRBaNw@mail.gmail.com>
 <CABrShH5-h8v74h3NExr4s05a_vYpzXCtC2DRu7t1RqDGmdsNqg@mail.gmail.com>
Message-ID: <D6583531-559A-4F41-AB43-93638BAB4CEA@stats.ox.ac.uk>

The issue is not clang 4 per se.  It can be seen in the CRAN logs for quite a few packages built with the clang 4 build from r.research.att.com, all of which worked correctly with the LLVM distribution of clang 4.0.0 (and 4.0.1): the latter required macOS Sierra (without saying so).  And, as you say, with at least one version of the Command Line Tools (via Xcode or directly), that for 10.12 (but that lacks OpenMP support).


> On 20 Sep 2017, at 23:53, Jonah S Gabry <jsg2201 at columbia.edu> wrote:
> 
> Sorry if line breaks are missing from the test.cpp example file in my
> original post.
> 
>> On Wed, Sep 20, 2017 at 2:00 PM, Jonah S Gabry <jsg2201 at columbia.edu> wrote:
>> 
>> With clang4 installed and Makevars updated as described at
>> https://cran.r-project.org/bin/macosx/ we are finding unexpected behavior
>> related to exceptions. The issue was brought to our attention at
>> 
>> http://discourse.mc-stan.org/t/error-in-rstan-2-16-2-after-
>> upgrading-to-r-3-4-1-with-clang-4-0-0/1893
>> 
>> but here is a minimal example:
>> 
>> Put the following in "test.cpp":
>> 
>> #include <Rcpp.h> using namespace Rcpp; // [[Rcpp::export]] int
>> throw_exception() { std::stringstream errmsg; errmsg << "this is an
>> exception"; throw std::domain_error(errmsg.str()); return 0; }
>> 
>> Then compile and test it with:
>> 
>> Rcpp::sourceCpp("test.cpp")
>> throw_exception()
>> 
>> The output is:
>> 
>> Error in throw_exception() : c++ exception (unknown reason)
>> 
>> But the expected output (and the output I get when using e.g. the clang
>> installation from Xcode) is:
>> 
>> Error in throw_exception() : this is an exception
>> 
>> Is this a known issue?
>> 
>> Thanks,
>> 
>> Jonah
>> 
>> -----
>> 
>> I'm running the following:
>> 
>> R version 3.4.1 (2017-06-30)
>> Platform: x86_64-apple-darwin15.6.0 (64-bit)
>> Running under: macOS Sierra 10.12.6
>> 
> 
>    [[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac


From kevinushey at gmail.com  Thu Sep 21 18:46:18 2017
From: kevinushey at gmail.com (Kevin Ushey)
Date: Thu, 21 Sep 2017 09:46:18 -0700
Subject: [R-SIG-Mac] Some exceptions not thrown properly with clang4
In-Reply-To: <D6583531-559A-4F41-AB43-93638BAB4CEA@stats.ox.ac.uk>
References: <CABrShH602NtFaJQTcAT1bEbHgm6r--EmFkmbmi9tZ49RbRBaNw@mail.gmail.com>
 <CABrShH5-h8v74h3NExr4s05a_vYpzXCtC2DRu7t1RqDGmdsNqg@mail.gmail.com>
 <D6583531-559A-4F41-AB43-93638BAB4CEA@stats.ox.ac.uk>
Message-ID: <CAJXgQP3KvDrKKrMmfGpKJ44U-BVXwMvLTNOokATOyWT7v9T7og@mail.gmail.com>

>From what I understand, the issue ultimately stems from the mixing of
different C++ standard library implementations: the system-provided
libc++, and the LLVM libc++ bundled with R.

A similar issue is described and investigated with the V8 package:

    https://github.com/jeroen/V8/issues/37

This becomes even more complicated with R packages that themselves
attempt to link to external libraries, which themselves are typically
compiled to use the system's libc++ rather than the R-provided LLVM
libc++.

To investigate, try launching R with DYLD_SHARED_REGION=avoid to see
what system libraries are getting loaded (otherwise, macOS loads them
all together as part of a single 'cache' library), e.g.

    R_HOME=/Library/Frameworks/R.framework/Resources \
        DYLD_SHARED_REGION=avoid \
        /Library/Frameworks/R.framework/Resources/bin/exec/R --vanilla

(note that we run the executable directly to ensure the environment
variables are inherited by the process)

Then, load Rcpp and compile your example, and look at the libraries
loaded by that R process. For example, I see:

    $ lsof -p 40556 | grep libc++
    R       40556 kevin  txt    REG    1,4   436256 119314065
/usr/lib/libc++abi.dylib
    R       40556 kevin  txt    REG    1,4  1436752 108804146
/usr/lib/libc++.1.dylib
    R       40556 kevin  txt    REG    1,4  1205156 118545962
/Library/Frameworks/R.framework/Versions/3.4/Resources/lib/libc++.1.dylib
    R       40556 kevin  txt    REG    1,4   358888 118545963
/Library/Frameworks/R.framework/Versions/3.4/Resources/lib/libc++abi.1.dylib
    R       40556 kevin  txt    REG    1,4   862316 124608853
/usr/local/clang4/lib/libc++.1.0.dylib
    R       40556 kevin  txt    REG    1,4   297040 124608857
/usr/local/clang4/lib/libc++abi.1.0.dylib

Note that the system libc++ gets loaded when R itself is launched; I
suspect that R depends on some system libraries that themselves depend
on the system libc++ implementation. My guess is that the mixture of
multiple copies of libc++ leads to the issue you're seeing here.

I'm not sure if there's a clean way to resolve this, but please
correct me if I'm wrong or I've misunderstood / misrepresented
anything.

Best,
Kevin

On Thu, Sep 21, 2017 at 12:02 AM, Brian Ripley <ripley at stats.ox.ac.uk> wrote:
>
> The issue is not clang 4 per se.  It can be seen in the CRAN logs for quite a few packages built with the clang 4 build from r.research.att.com, all of which worked correctly with the LLVM distribution of clang 4.0.0 (and 4.0.1): the latter required macOS Sierra (without saying so).  And, as you say, with at least one version of the Command Line Tools (via Xcode or directly), that for 10.12 (but that lacks OpenMP support).
>
>
> > On 20 Sep 2017, at 23:53, Jonah S Gabry <jsg2201 at columbia.edu> wrote:
> >
> > Sorry if line breaks are missing from the test.cpp example file in my
> > original post.
> >
> >> On Wed, Sep 20, 2017 at 2:00 PM, Jonah S Gabry <jsg2201 at columbia.edu> wrote:
> >>
> >> With clang4 installed and Makevars updated as described at
> >> https://cran.r-project.org/bin/macosx/ we are finding unexpected behavior
> >> related to exceptions. The issue was brought to our attention at
> >>
> >> http://discourse.mc-stan.org/t/error-in-rstan-2-16-2-after-
> >> upgrading-to-r-3-4-1-with-clang-4-0-0/1893
> >>
> >> but here is a minimal example:
> >>
> >> Put the following in "test.cpp":
> >>
> >> #include <Rcpp.h> using namespace Rcpp; // [[Rcpp::export]] int
> >> throw_exception() { std::stringstream errmsg; errmsg << "this is an
> >> exception"; throw std::domain_error(errmsg.str()); return 0; }
> >>
> >> Then compile and test it with:
> >>
> >> Rcpp::sourceCpp("test.cpp")
> >> throw_exception()
> >>
> >> The output is:
> >>
> >> Error in throw_exception() : c++ exception (unknown reason)
> >>
> >> But the expected output (and the output I get when using e.g. the clang
> >> installation from Xcode) is:
> >>
> >> Error in throw_exception() : this is an exception
> >>
> >> Is this a known issue?
> >>
> >> Thanks,
> >>
> >> Jonah
> >>
> >> -----
> >>
> >> I'm running the following:
> >>
> >> R version 3.4.1 (2017-06-30)
> >> Platform: x86_64-apple-darwin15.6.0 (64-bit)
> >> Running under: macOS Sierra 10.12.6
> >>
> >
> >    [[alternative HTML version deleted]]
> >
> > _______________________________________________
> > R-SIG-Mac mailing list
> > R-SIG-Mac at r-project.org
> > https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac


From pdalgd at gmail.com  Fri Sep 22 10:47:05 2017
From: pdalgd at gmail.com (peter dalgaard)
Date: Fri, 22 Sep 2017 10:47:05 +0200
Subject: [R-SIG-Mac] Xcode 9
Message-ID: <DF58A8CB-B9A5-45B4-BCD9-42D42B0E62C6@gmail.com>

Just a quick note: Xcode 9 will not presently create a working R on Sierra or earlier.

This is because it ships with an SDK for 10.13 (unreleased) and defines an entry for utimensat(), which is not actually in the system library for earlier versions. 

There is no way we can fix this reliably for the upcoming 3.4.2 release, so if you intend to build R from sources, either 

- just do not upgrade, stay on Xcode 8.3.3 

or 

- manually remove the line from config.h saying

#define HAVE_UTIMENSAT 1


----

The slightly longer story is that Apple decided to have their include files generate a _warning_ that utimensat() is only available in 10.13, like this: 

gcc -I../../../R/src/extra  -I. -I../../src/include -I../../../R/src/include  -I/usr/local/include -I../../../R/src/nmath -DHAVE_CONFIG_H     -g -O2  -c ../../../R/src/main/platform.c -o platform.o
../../../R/src/main/platform.c:2474:5: warning: 'utimensat' is only available on
      macOS 10.13 or newer [-Wunguarded-availability-new]
    utimensat(AT_FDCWD, to, times, 0);
    ^~~~~~~~~
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/usr/include/sys/stat.h:374:5: note: 
      'utimensat' has been explicitly marked partial here
int     utimensat(int __fd, const char *__path, const struct timespec __...
        ^
../../../R/src/main/platform.c:2474:5: note: enclose 'utimensat' in a
      __builtin_available check to silence this warning
    utimensat(AT_FDCWD, to, times, 0);
    ^~~~~~~~~
../../../R/src/main/platform.c:2890:11: warning: 'utimensat' is only available
      on macOS 10.13 or newer [-Wunguarded-availability-new]
    res = utimensat(AT_FDCWD, fn, times, 0) == 0;
          ^~~~~~~~~
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/usr/include/sys/stat.h:374:5: note: 
      'utimensat' has been explicitly marked partial here
int     utimensat(int __fd, const char *__path, const struct timespec __...
        ^
../../../R/src/main/platform.c:2890:11: note: enclose 'utimensat' in a
      __builtin_available check to silence this warning
    res = utimensat(AT_FDCWD, fn, times, 0) == 0;
          ^~~~~~~~~
2 warnings generated.

Because of dynamic linking, we do not see the effect of this until we actually try running the binary:

begin installing recommended package MASS
dyld: lazy symbol binding failed: Symbol not found: _utimensat
  Referenced from: /Users/pd/r-release-branch/BUILD-dist/bin/exec/x86_64/R
  Expected in: /usr/lib/libSystem.B.dylib

dyld: Symbol not found: _utimensat
  Referenced from: /Users/pd/r-release-branch/BUILD-dist/bin/exec/x86_64/R
  Expected in: /usr/lib/libSystem.B.dylib

/Users/pd/r-release-branch/BUILD-dist/bin/INSTALL: line 34: 59149 Done                    echo 'tools:::.install_packages()'
     59150 Abort trap: 6           | R_DEFAULT_PACKAGES= LC_COLLATE=C "${R_HOME}/bin/R" $myArgs --slave --args ${args}


Same warning also happens during the configure checks, but as it is not an error the test program compiles and links OK (but is never run), and we get

checking whether utimensat exists and is declared... yes

Ugh!...


- Peter D.


-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From jsg2201 at columbia.edu  Fri Sep 22 21:22:44 2017
From: jsg2201 at columbia.edu (Jonah S Gabry)
Date: Fri, 22 Sep 2017 19:22:44 +0000
Subject: [R-SIG-Mac] Some exceptions not thrown properly with clang4
In-Reply-To: <CAJXgQP3KvDrKKrMmfGpKJ44U-BVXwMvLTNOokATOyWT7v9T7og@mail.gmail.com>
References: <CABrShH602NtFaJQTcAT1bEbHgm6r--EmFkmbmi9tZ49RbRBaNw@mail.gmail.com>
 <CABrShH5-h8v74h3NExr4s05a_vYpzXCtC2DRu7t1RqDGmdsNqg@mail.gmail.com>
 <D6583531-559A-4F41-AB43-93638BAB4CEA@stats.ox.ac.uk>
 <CAJXgQP3KvDrKKrMmfGpKJ44U-BVXwMvLTNOokATOyWT7v9T7og@mail.gmail.com>
Message-ID: <CABrShH5T1aiaUb_zu5mgKUSkOtH-nHkYFa0TwOVn+qNEXX-9kg@mail.gmail.com>

Thanks for the responses. Kevin, your suggestion that issue relates to
mixing multiple copies of libc++ makes sense to me (I think you can even
end up with more than two in some cases) but I'm not enough of an expert in
this area to know for sure. But I did share your response with some of my
colleagues who may have better insights into this than I do.

On Thu, Sep 21, 2017 at 12:46 PM Kevin Ushey <kevinushey at gmail.com> wrote:

> From what I understand, the issue ultimately stems from the mixing of
> different C++ standard library implementations: the system-provided
> libc++, and the LLVM libc++ bundled with R.
>
> A similar issue is described and investigated with the V8 package:
>
>     https://github.com/jeroen/V8/issues/37
>
> This becomes even more complicated with R packages that themselves
> attempt to link to external libraries, which themselves are typically
> compiled to use the system's libc++ rather than the R-provided LLVM
> libc++.
>
> To investigate, try launching R with DYLD_SHARED_REGION=avoid to see
> what system libraries are getting loaded (otherwise, macOS loads them
> all together as part of a single 'cache' library), e.g.
>
>     R_HOME=/Library/Frameworks/R.framework/Resources \
>         DYLD_SHARED_REGION=avoid \
>         /Library/Frameworks/R.framework/Resources/bin/exec/R --vanilla
>
> (note that we run the executable directly to ensure the environment
> variables are inherited by the process)
>
> Then, load Rcpp and compile your example, and look at the libraries
> loaded by that R process. For example, I see:
>
>     $ lsof -p 40556 | grep libc++
>     R       40556 kevin  txt    REG    1,4   436256 119314065
> /usr/lib/libc++abi.dylib
>     R       40556 kevin  txt    REG    1,4  1436752 108804146
> /usr/lib/libc++.1.dylib
>     R       40556 kevin  txt    REG    1,4  1205156 118545962
> /Library/Frameworks/R.framework/Versions/3.4/Resources/lib/libc++.1.dylib
>     R       40556 kevin  txt    REG    1,4   358888 118545963
>
> /Library/Frameworks/R.framework/Versions/3.4/Resources/lib/libc++abi.1.dylib
>     R       40556 kevin  txt    REG    1,4   862316 124608853
> /usr/local/clang4/lib/libc++.1.0.dylib
>     R       40556 kevin  txt    REG    1,4   297040 124608857
> /usr/local/clang4/lib/libc++abi.1.0.dylib
>
> Note that the system libc++ gets loaded when R itself is launched; I
> suspect that R depends on some system libraries that themselves depend
> on the system libc++ implementation. My guess is that the mixture of
> multiple copies of libc++ leads to the issue you're seeing here.
>
> I'm not sure if there's a clean way to resolve this, but please
> correct me if I'm wrong or I've misunderstood / misrepresented
> anything.
>
> Best,
> Kevin
>
> On Thu, Sep 21, 2017 at 12:02 AM, Brian Ripley <ripley at stats.ox.ac.uk>
> wrote:
> >
> > The issue is not clang 4 per se.  It can be seen in the CRAN logs for
> quite a few packages built with the clang 4 build from r.research.att.com,
> all of which worked correctly with the LLVM distribution of clang 4.0.0
> (and 4.0.1): the latter required macOS Sierra (without saying so).  And, as
> you say, with at least one version of the Command Line Tools (via Xcode or
> directly), that for 10.12 (but that lacks OpenMP support).
> >
> >
> > > On 20 Sep 2017, at 23:53, Jonah S Gabry <jsg2201 at columbia.edu> wrote:
> > >
> > > Sorry if line breaks are missing from the test.cpp example file in my
> > > original post.
> > >
> > >> On Wed, Sep 20, 2017 at 2:00 PM, Jonah S Gabry <jsg2201 at columbia.edu>
> wrote:
> > >>
> > >> With clang4 installed and Makevars updated as described at
> > >> https://cran.r-project.org/bin/macosx/ we are finding unexpected
> behavior
> > >> related to exceptions. The issue was brought to our attention at
> > >>
> > >> http://discourse.mc-stan.org/t/error-in-rstan-2-16-2-after-
> > >> upgrading-to-r-3-4-1-with-clang-4-0-0/1893
> > >>
> > >> but here is a minimal example:
> > >>
> > >> Put the following in "test.cpp":
> > >>
> > >> #include <Rcpp.h> using namespace Rcpp; // [[Rcpp::export]] int
> > >> throw_exception() { std::stringstream errmsg; errmsg << "this is an
> > >> exception"; throw std::domain_error(errmsg.str()); return 0; }
> > >>
> > >> Then compile and test it with:
> > >>
> > >> Rcpp::sourceCpp("test.cpp")
> > >> throw_exception()
> > >>
> > >> The output is:
> > >>
> > >> Error in throw_exception() : c++ exception (unknown reason)
> > >>
> > >> But the expected output (and the output I get when using e.g. the
> clang
> > >> installation from Xcode) is:
> > >>
> > >> Error in throw_exception() : this is an exception
> > >>
> > >> Is this a known issue?
> > >>
> > >> Thanks,
> > >>
> > >> Jonah
> > >>
> > >> -----
> > >>
> > >> I'm running the following:
> > >>
> > >> R version 3.4.1 (2017-06-30)
> > >> Platform: x86_64-apple-darwin15.6.0 (64-bit)
> > >> Running under: macOS Sierra 10.12.6
> > >>
> > >
> > >    [[alternative HTML version deleted]]
> > >
> > > _______________________________________________
> > > R-SIG-Mac mailing list
> > > R-SIG-Mac at r-project.org
> > > https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> >
> > _______________________________________________
> > R-SIG-Mac mailing list
> > R-SIG-Mac at r-project.org
> > https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>

	[[alternative HTML version deleted]]


From kasperdanielhansen at gmail.com  Wed Sep 27 04:28:49 2017
From: kasperdanielhansen at gmail.com (Kasper Daniel Hansen)
Date: Tue, 26 Sep 2017 22:28:49 -0400
Subject: [R-SIG-Mac] Xcode 9
In-Reply-To: <DF58A8CB-B9A5-45B4-BCD9-42D42B0E62C6@gmail.com>
References: <DF58A8CB-B9A5-45B4-BCD9-42D42B0E62C6@gmail.com>
Message-ID: <CAC2h7uu=K2LZqicw7=ttBsjgL34SxKajzMA-WPEPb+f1REeVrA@mail.gmail.com>

I don't see this with
  Xcode 9
  OS X Sierra (10.12.6)

and either

R Under development (unstable) (2017-09-26 r73351) -- "Unsuffered
Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin16.7.0 (64-bit)

or

R version 3.4.2 RC (2017-09-26 r73351) -- "Short Summer"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin16.7.0 (64-bit)

Specifically I can compile R and it passes make check.  Perhaps it got
fixed since the post.

On Fri, Sep 22, 2017 at 4:47 AM, peter dalgaard <pdalgd at gmail.com> wrote:

> Just a quick note: Xcode 9 will not presently create a working R on Sierra
> or earlier.
>
> This is because it ships with an SDK for 10.13 (unreleased) and defines an
> entry for utimensat(), which is not actually in the system library for
> earlier versions.
>
> There is no way we can fix this reliably for the upcoming 3.4.2 release,
> so if you intend to build R from sources, either
>
> - just do not upgrade, stay on Xcode 8.3.3
>
> or
>
> - manually remove the line from config.h saying
>
> #define HAVE_UTIMENSAT 1
>
>
> ----
>
> The slightly longer story is that Apple decided to have their include
> files generate a _warning_ that utimensat() is only available in 10.13,
> like this:
>
> gcc -I../../../R/src/extra  -I. -I../../src/include
> -I../../../R/src/include  -I/usr/local/include -I../../../R/src/nmath
> -DHAVE_CONFIG_H     -g -O2  -c ../../../R/src/main/platform.c -o platform.o
> ../../../R/src/main/platform.c:2474:5: warning: 'utimensat' is only
> available on
>       macOS 10.13 or newer [-Wunguarded-availability-new]
>     utimensat(AT_FDCWD, to, times, 0);
>     ^~~~~~~~~
> /Applications/Xcode.app/Contents/Developer/Platforms/
> MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/usr/include/sys/stat.h:374:5:
> note:
>       'utimensat' has been explicitly marked partial here
> int     utimensat(int __fd, const char *__path, const struct timespec __...
>         ^
> ../../../R/src/main/platform.c:2474:5: note: enclose 'utimensat' in a
>       __builtin_available check to silence this warning
>     utimensat(AT_FDCWD, to, times, 0);
>     ^~~~~~~~~
> ../../../R/src/main/platform.c:2890:11: warning: 'utimensat' is only
> available
>       on macOS 10.13 or newer [-Wunguarded-availability-new]
>     res = utimensat(AT_FDCWD, fn, times, 0) == 0;
>           ^~~~~~~~~
> /Applications/Xcode.app/Contents/Developer/Platforms/
> MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/usr/include/sys/stat.h:374:5:
> note:
>       'utimensat' has been explicitly marked partial here
> int     utimensat(int __fd, const char *__path, const struct timespec __...
>         ^
> ../../../R/src/main/platform.c:2890:11: note: enclose 'utimensat' in a
>       __builtin_available check to silence this warning
>     res = utimensat(AT_FDCWD, fn, times, 0) == 0;
>           ^~~~~~~~~
> 2 warnings generated.
>
> Because of dynamic linking, we do not see the effect of this until we
> actually try running the binary:
>
> begin installing recommended package MASS
> dyld: lazy symbol binding failed: Symbol not found: _utimensat
>   Referenced from: /Users/pd/r-release-branch/BUILD-dist/bin/exec/x86_64/R
>   Expected in: /usr/lib/libSystem.B.dylib
>
> dyld: Symbol not found: _utimensat
>   Referenced from: /Users/pd/r-release-branch/BUILD-dist/bin/exec/x86_64/R
>   Expected in: /usr/lib/libSystem.B.dylib
>
> /Users/pd/r-release-branch/BUILD-dist/bin/INSTALL: line 34: 59149 Done
>                 echo 'tools:::.install_packages()'
>      59150 Abort trap: 6           | R_DEFAULT_PACKAGES= LC_COLLATE=C
> "${R_HOME}/bin/R" $myArgs --slave --args ${args}
>
>
> Same warning also happens during the configure checks, but as it is not an
> error the test program compiles and links OK (but is never run), and we get
>
> checking whether utimensat exists and is declared... yes
>
> Ugh!...
>
>
> - Peter D.
>
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>

	[[alternative HTML version deleted]]


From ripley at stats.ox.ac.uk  Wed Sep 27 08:43:29 2017
From: ripley at stats.ox.ac.uk (Prof Brian Ripley)
Date: Wed, 27 Sep 2017 07:43:29 +0100
Subject: [R-SIG-Mac] Xcode 9
In-Reply-To: <CAC2h7uu=K2LZqicw7=ttBsjgL34SxKajzMA-WPEPb+f1REeVrA@mail.gmail.com>
References: <DF58A8CB-B9A5-45B4-BCD9-42D42B0E62C6@gmail.com>
 <CAC2h7uu=K2LZqicw7=ttBsjgL34SxKajzMA-WPEPb+f1REeVrA@mail.gmail.com>
Message-ID: <2f422aac-8a83-abf7-ae73-763e99d5a71e@stats.ox.ac.uk>

On 27/09/2017 03:28, Kasper Daniel Hansen wrote:
> I don't see this with
>    Xcode 9
>    OS X Sierra (10.12.6)
> 
> and either
> 
> R Under development (unstable) (2017-09-26 r73351) -- "Unsuffered
> Consequences"
> Copyright (C) 2017 The R Foundation for Statistical Computing
> Platform: x86_64-apple-darwin16.7.0 (64-bit)
> 
> or
> 
> R version 3.4.2 RC (2017-09-26 r73351) -- "Short Summer"
> Copyright (C) 2017 The R Foundation for Statistical Computing
> Platform: x86_64-apple-darwin16.7.0 (64-bit)
> 
> Specifically I can compile R and it passes make check.  Perhaps it got
> fixed since the post.

It did (look at the logs for r73347 and r73351), but also we have 
discovered that not all upgrades to Xcode 9 had the problem.

While we are at it, there is a problem with finding the default time 
zone on High Sierra.  This is worked around already in R-devel and will 
be in 3.4.2 patched: until then setting TZ is a good workaround (and 
that is in the R-admin manual for 3.4.2 RC).

> 
> On Fri, Sep 22, 2017 at 4:47 AM, peter dalgaard <pdalgd at gmail.com> wrote:
> 
>> Just a quick note: Xcode 9 will not presently create a working R on Sierra
>> or earlier.

(I don't believe Xcode 9 is available for 'earlier'.)

>>
>> This is because it ships with an SDK for 10.13 (unreleased) and defines an
>> entry for utimensat(), which is not actually in the system library for
>> earlier versions.
>>
>> There is no way we can fix this reliably for the upcoming 3.4.2 release,
>> so if you intend to build R from sources, either
>>
>> - just do not upgrade, stay on Xcode 8.3.3
>>
>> or
>>
>> - manually remove the line from config.h saying
>>
>> #define HAVE_UTIMENSAT 1
>>
>>
>> ----
>>
>> The slightly longer story is that Apple decided to have their include
>> files generate a _warning_ that utimensat() is only available in 10.13,
>> like this:
>>
>> gcc -I../../../R/src/extra  -I. -I../../src/include
>> -I../../../R/src/include  -I/usr/local/include -I../../../R/src/nmath
>> -DHAVE_CONFIG_H     -g -O2  -c ../../../R/src/main/platform.c -o platform.o
>> ../../../R/src/main/platform.c:2474:5: warning: 'utimensat' is only
>> available on
>>        macOS 10.13 or newer [-Wunguarded-availability-new]
>>      utimensat(AT_FDCWD, to, times, 0);
>>      ^~~~~~~~~
>> /Applications/Xcode.app/Contents/Developer/Platforms/
>> MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/usr/include/sys/stat.h:374:5:
>> note:
>>        'utimensat' has been explicitly marked partial here
>> int     utimensat(int __fd, const char *__path, const struct timespec __...
>>          ^
>> ../../../R/src/main/platform.c:2474:5: note: enclose 'utimensat' in a
>>        __builtin_available check to silence this warning
>>      utimensat(AT_FDCWD, to, times, 0);
>>      ^~~~~~~~~
>> ../../../R/src/main/platform.c:2890:11: warning: 'utimensat' is only
>> available
>>        on macOS 10.13 or newer [-Wunguarded-availability-new]
>>      res = utimensat(AT_FDCWD, fn, times, 0) == 0;
>>            ^~~~~~~~~
>> /Applications/Xcode.app/Contents/Developer/Platforms/
>> MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/usr/include/sys/stat.h:374:5:
>> note:
>>        'utimensat' has been explicitly marked partial here
>> int     utimensat(int __fd, const char *__path, const struct timespec __...
>>          ^
>> ../../../R/src/main/platform.c:2890:11: note: enclose 'utimensat' in a
>>        __builtin_available check to silence this warning
>>      res = utimensat(AT_FDCWD, fn, times, 0) == 0;
>>            ^~~~~~~~~
>> 2 warnings generated.
>>
>> Because of dynamic linking, we do not see the effect of this until we
>> actually try running the binary:
>>
>> begin installing recommended package MASS
>> dyld: lazy symbol binding failed: Symbol not found: _utimensat
>>    Referenced from: /Users/pd/r-release-branch/BUILD-dist/bin/exec/x86_64/R
>>    Expected in: /usr/lib/libSystem.B.dylib
>>
>> dyld: Symbol not found: _utimensat
>>    Referenced from: /Users/pd/r-release-branch/BUILD-dist/bin/exec/x86_64/R
>>    Expected in: /usr/lib/libSystem.B.dylib
>>
>> /Users/pd/r-release-branch/BUILD-dist/bin/INSTALL: line 34: 59149 Done
>>                  echo 'tools:::.install_packages()'
>>       59150 Abort trap: 6           | R_DEFAULT_PACKAGES= LC_COLLATE=C
>> "${R_HOME}/bin/R" $myArgs --slave --args ${args}
>>
>>
>> Same warning also happens during the configure checks, but as it is not an
>> error the test program compiles and links OK (but is never run), and we get
>>
>> checking whether utimensat exists and is declared... yes
>>
>> Ugh!...
>>
>>
>> - Peter D.
>>
>>
>> --
>> Peter Dalgaard, Professor,
>> Center for Statistics, Copenhagen Business School
>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>> Phone: (+45)38153501
>> Office: A 4.23
>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>
>> _______________________________________________
>> R-SIG-Mac mailing list
>> R-SIG-Mac at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>
> 
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From pdalgd at gmail.com  Wed Sep 27 10:32:17 2017
From: pdalgd at gmail.com (peter dalgaard)
Date: Wed, 27 Sep 2017 10:32:17 +0200
Subject: [R-SIG-Mac] Xcode 9
In-Reply-To: <2f422aac-8a83-abf7-ae73-763e99d5a71e@stats.ox.ac.uk>
References: <DF58A8CB-B9A5-45B4-BCD9-42D42B0E62C6@gmail.com>
 <CAC2h7uu=K2LZqicw7=ttBsjgL34SxKajzMA-WPEPb+f1REeVrA@mail.gmail.com>
 <2f422aac-8a83-abf7-ae73-763e99d5a71e@stats.ox.ac.uk>
Message-ID: <E8D11976-B19F-43F0-B07F-D849ED3660AE@gmail.com>


> On 27 Sep 2017, at 08:43 , Prof Brian Ripley <ripley at stats.ox.ac.uk> wrote:
> 
> On 27/09/2017 03:28, Kasper Daniel Hansen wrote:
>> I don't see this with
>>   Xcode 9
>>   OS X Sierra (10.12.6)
>> and either
>> R Under development (unstable) (2017-09-26 r73351) -- "Unsuffered
>> Consequences"
>> Copyright (C) 2017 The R Foundation for Statistical Computing
>> Platform: x86_64-apple-darwin16.7.0 (64-bit)
>> or
>> R version 3.4.2 RC (2017-09-26 r73351) -- "Short Summer"
>> Copyright (C) 2017 The R Foundation for Statistical Computing
>> Platform: x86_64-apple-darwin16.7.0 (64-bit)
>> Specifically I can compile R and it passes make check.  Perhaps it got
>> fixed since the post.
> 
> It did (look at the logs for r73347 and r73351), but also we have discovered that not all upgrades to Xcode 9 had the problem.
> 

Yes. My home desktop machine updated command line tools only and didn't see the problem. The laptop wants to upgrade the full Xcode (no idea how that came to be...) but claims to need another 1.66GB of disk to upgrade, so it is probably not in the cards to check a build there just now. The work machine had the problem until I downgraded to Xcode 8.3.3, but as this is the machine building the actual release, I'm not touching it until some weeks after the 3.4.2 release.

Right now, we just override the configure detected utimensat() declaration on all Macs, which should be harmless (also on High Sierra, although we wouldn't claim to support an OS which was unreleased at the code freeze). We'll think of a better fix --- it looks like the Curl developers have fixed a similar issue, so we can copy their approach.

> While we are at it, there is a problem with finding the default time zone on High Sierra.  This is worked around already in R-devel and will be in 3.4.2 patched: until then setting TZ is a good workaround (and that is in the R-admin manual for 3.4.2 RC).
> 
>> On Fri, Sep 22, 2017 at 4:47 AM, peter dalgaard <pdalgd at gmail.com> wrote:
>>> Just a quick note: Xcode 9 will not presently create a working R on Sierra
>>> or earlier.
> 
> (I don't believe Xcode 9 is available for 'earlier'.)

You're probably right. I wasn't sure when I wrote that (& also not sure whether one could cross-compile.)

-pd

> 
>>> 
>>> This is because it ships with an SDK for 10.13 (unreleased) and defines an
>>> entry for utimensat(), which is not actually in the system library for
>>> earlier versions.
>>> 
>>> There is no way we can fix this reliably for the upcoming 3.4.2 release,
>>> so if you intend to build R from sources, either
>>> 
>>> - just do not upgrade, stay on Xcode 8.3.3
>>> 
>>> or
>>> 
>>> - manually remove the line from config.h saying
>>> 
>>> #define HAVE_UTIMENSAT 1
>>> 
>>> 
>>> ----
>>> 
>>> The slightly longer story is that Apple decided to have their include
>>> files generate a _warning_ that utimensat() is only available in 10.13,
>>> like this:
>>> 
>>> gcc -I../../../R/src/extra  -I. -I../../src/include
>>> -I../../../R/src/include  -I/usr/local/include -I../../../R/src/nmath
>>> -DHAVE_CONFIG_H     -g -O2  -c ../../../R/src/main/platform.c -o platform.o
>>> ../../../R/src/main/platform.c:2474:5: warning: 'utimensat' is only
>>> available on
>>>       macOS 10.13 or newer [-Wunguarded-availability-new]
>>>     utimensat(AT_FDCWD, to, times, 0);
>>>     ^~~~~~~~~
>>> /Applications/Xcode.app/Contents/Developer/Platforms/
>>> MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/usr/include/sys/stat.h:374:5:
>>> note:
>>>       'utimensat' has been explicitly marked partial here
>>> int     utimensat(int __fd, const char *__path, const struct timespec __...
>>>         ^
>>> ../../../R/src/main/platform.c:2474:5: note: enclose 'utimensat' in a
>>>       __builtin_available check to silence this warning
>>>     utimensat(AT_FDCWD, to, times, 0);
>>>     ^~~~~~~~~
>>> ../../../R/src/main/platform.c:2890:11: warning: 'utimensat' is only
>>> available
>>>       on macOS 10.13 or newer [-Wunguarded-availability-new]
>>>     res = utimensat(AT_FDCWD, fn, times, 0) == 0;
>>>           ^~~~~~~~~
>>> /Applications/Xcode.app/Contents/Developer/Platforms/
>>> MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/usr/include/sys/stat.h:374:5:
>>> note:
>>>       'utimensat' has been explicitly marked partial here
>>> int     utimensat(int __fd, const char *__path, const struct timespec __...
>>>         ^
>>> ../../../R/src/main/platform.c:2890:11: note: enclose 'utimensat' in a
>>>       __builtin_available check to silence this warning
>>>     res = utimensat(AT_FDCWD, fn, times, 0) == 0;
>>>           ^~~~~~~~~
>>> 2 warnings generated.
>>> 
>>> Because of dynamic linking, we do not see the effect of this until we
>>> actually try running the binary:
>>> 
>>> begin installing recommended package MASS
>>> dyld: lazy symbol binding failed: Symbol not found: _utimensat
>>>   Referenced from: /Users/pd/r-release-branch/BUILD-dist/bin/exec/x86_64/R
>>>   Expected in: /usr/lib/libSystem.B.dylib
>>> 
>>> dyld: Symbol not found: _utimensat
>>>   Referenced from: /Users/pd/r-release-branch/BUILD-dist/bin/exec/x86_64/R
>>>   Expected in: /usr/lib/libSystem.B.dylib
>>> 
>>> /Users/pd/r-release-branch/BUILD-dist/bin/INSTALL: line 34: 59149 Done
>>>                 echo 'tools:::.install_packages()'
>>>      59150 Abort trap: 6           | R_DEFAULT_PACKAGES= LC_COLLATE=C
>>> "${R_HOME}/bin/R" $myArgs --slave --args ${args}
>>> 
>>> 
>>> Same warning also happens during the configure checks, but as it is not an
>>> error the test program compiles and links OK (but is never run), and we get
>>> 
>>> checking whether utimensat exists and is declared... yes
>>> 
>>> Ugh!...
>>> 
>>> 
>>> - Peter D.
>>> 
>>> 
>>> --
>>> Peter Dalgaard, Professor,
>>> Center for Statistics, Copenhagen Business School
>>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>>> Phone: (+45)38153501
>>> Office: A 4.23
>>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>> 
>>> _______________________________________________
>>> R-SIG-Mac mailing list
>>> R-SIG-Mac at r-project.org
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>> 
>> 	[[alternative HTML version deleted]]
>> _______________________________________________
>> R-SIG-Mac mailing list
>> R-SIG-Mac at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 
> 
> -- 
> Brian D. Ripley,                  ripley at stats.ox.ac.uk
> Emeritus Professor of Applied Statistics, University of Oxford
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From kasperdanielhansen at gmail.com  Wed Sep 27 20:01:57 2017
From: kasperdanielhansen at gmail.com (Kasper Daniel Hansen)
Date: Wed, 27 Sep 2017 14:01:57 -0400
Subject: [R-SIG-Mac] Xcode 9
In-Reply-To: <E8D11976-B19F-43F0-B07F-D849ED3660AE@gmail.com>
References: <DF58A8CB-B9A5-45B4-BCD9-42D42B0E62C6@gmail.com>
 <CAC2h7uu=K2LZqicw7=ttBsjgL34SxKajzMA-WPEPb+f1REeVrA@mail.gmail.com>
 <2f422aac-8a83-abf7-ae73-763e99d5a71e@stats.ox.ac.uk>
 <E8D11976-B19F-43F0-B07F-D849ED3660AE@gmail.com>
Message-ID: <CAC2h7utw6F66doGf+O7SKgQ7HPrFLo-vCNjcrBYMj554Fguh+g@mail.gmail.com>

Thanks. Nice to know it got fixed despite the somewhat pessimistic original
post.

Best,
Kasper

On Wed, Sep 27, 2017 at 4:32 AM, peter dalgaard <pdalgd at gmail.com> wrote:

>
> > On 27 Sep 2017, at 08:43 , Prof Brian Ripley <ripley at stats.ox.ac.uk>
> wrote:
> >
> > On 27/09/2017 03:28, Kasper Daniel Hansen wrote:
> >> I don't see this with
> >>   Xcode 9
> >>   OS X Sierra (10.12.6)
> >> and either
> >> R Under development (unstable) (2017-09-26 r73351) -- "Unsuffered
> >> Consequences"
> >> Copyright (C) 2017 The R Foundation for Statistical Computing
> >> Platform: x86_64-apple-darwin16.7.0 (64-bit)
> >> or
> >> R version 3.4.2 RC (2017-09-26 r73351) -- "Short Summer"
> >> Copyright (C) 2017 The R Foundation for Statistical Computing
> >> Platform: x86_64-apple-darwin16.7.0 (64-bit)
> >> Specifically I can compile R and it passes make check.  Perhaps it got
> >> fixed since the post.
> >
> > It did (look at the logs for r73347 and r73351), but also we have
> discovered that not all upgrades to Xcode 9 had the problem.
> >
>
> Yes. My home desktop machine updated command line tools only and didn't
> see the problem. The laptop wants to upgrade the full Xcode (no idea how
> that came to be...) but claims to need another 1.66GB of disk to upgrade,
> so it is probably not in the cards to check a build there just now. The
> work machine had the problem until I downgraded to Xcode 8.3.3, but as this
> is the machine building the actual release, I'm not touching it until some
> weeks after the 3.4.2 release.
>
> Right now, we just override the configure detected utimensat() declaration
> on all Macs, which should be harmless (also on High Sierra, although we
> wouldn't claim to support an OS which was unreleased at the code freeze).
> We'll think of a better fix --- it looks like the Curl developers have
> fixed a similar issue, so we can copy their approach.
>
> > While we are at it, there is a problem with finding the default time
> zone on High Sierra.  This is worked around already in R-devel and will be
> in 3.4.2 patched: until then setting TZ is a good workaround (and that is
> in the R-admin manual for 3.4.2 RC).
> >
> >> On Fri, Sep 22, 2017 at 4:47 AM, peter dalgaard <pdalgd at gmail.com>
> wrote:
> >>> Just a quick note: Xcode 9 will not presently create a working R on
> Sierra
> >>> or earlier.
> >
> > (I don't believe Xcode 9 is available for 'earlier'.)
>
> You're probably right. I wasn't sure when I wrote that (& also not sure
> whether one could cross-compile.)
>
> -pd
>
> >
> >>>
> >>> This is because it ships with an SDK for 10.13 (unreleased) and
> defines an
> >>> entry for utimensat(), which is not actually in the system library for
> >>> earlier versions.
> >>>
> >>> There is no way we can fix this reliably for the upcoming 3.4.2
> release,
> >>> so if you intend to build R from sources, either
> >>>
> >>> - just do not upgrade, stay on Xcode 8.3.3
> >>>
> >>> or
> >>>
> >>> - manually remove the line from config.h saying
> >>>
> >>> #define HAVE_UTIMENSAT 1
> >>>
> >>>
> >>> ----
> >>>
> >>> The slightly longer story is that Apple decided to have their include
> >>> files generate a _warning_ that utimensat() is only available in 10.13,
> >>> like this:
> >>>
> >>> gcc -I../../../R/src/extra  -I. -I../../src/include
> >>> -I../../../R/src/include  -I/usr/local/include -I../../../R/src/nmath
> >>> -DHAVE_CONFIG_H     -g -O2  -c ../../../R/src/main/platform.c -o
> platform.o
> >>> ../../../R/src/main/platform.c:2474:5: warning: 'utimensat' is only
> >>> available on
> >>>       macOS 10.13 or newer [-Wunguarded-availability-new]
> >>>     utimensat(AT_FDCWD, to, times, 0);
> >>>     ^~~~~~~~~
> >>> /Applications/Xcode.app/Contents/Developer/Platforms/
> >>> MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/usr/
> include/sys/stat.h:374:5:
> >>> note:
> >>>       'utimensat' has been explicitly marked partial here
> >>> int     utimensat(int __fd, const char *__path, const struct timespec
> __...
> >>>         ^
> >>> ../../../R/src/main/platform.c:2474:5: note: enclose 'utimensat' in a
> >>>       __builtin_available check to silence this warning
> >>>     utimensat(AT_FDCWD, to, times, 0);
> >>>     ^~~~~~~~~
> >>> ../../../R/src/main/platform.c:2890:11: warning: 'utimensat' is only
> >>> available
> >>>       on macOS 10.13 or newer [-Wunguarded-availability-new]
> >>>     res = utimensat(AT_FDCWD, fn, times, 0) == 0;
> >>>           ^~~~~~~~~
> >>> /Applications/Xcode.app/Contents/Developer/Platforms/
> >>> MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/usr/
> include/sys/stat.h:374:5:
> >>> note:
> >>>       'utimensat' has been explicitly marked partial here
> >>> int     utimensat(int __fd, const char *__path, const struct timespec
> __...
> >>>         ^
> >>> ../../../R/src/main/platform.c:2890:11: note: enclose 'utimensat' in a
> >>>       __builtin_available check to silence this warning
> >>>     res = utimensat(AT_FDCWD, fn, times, 0) == 0;
> >>>           ^~~~~~~~~
> >>> 2 warnings generated.
> >>>
> >>> Because of dynamic linking, we do not see the effect of this until we
> >>> actually try running the binary:
> >>>
> >>> begin installing recommended package MASS
> >>> dyld: lazy symbol binding failed: Symbol not found: _utimensat
> >>>   Referenced from: /Users/pd/r-release-branch/
> BUILD-dist/bin/exec/x86_64/R
> >>>   Expected in: /usr/lib/libSystem.B.dylib
> >>>
> >>> dyld: Symbol not found: _utimensat
> >>>   Referenced from: /Users/pd/r-release-branch/
> BUILD-dist/bin/exec/x86_64/R
> >>>   Expected in: /usr/lib/libSystem.B.dylib
> >>>
> >>> /Users/pd/r-release-branch/BUILD-dist/bin/INSTALL: line 34: 59149 Done
> >>>                 echo 'tools:::.install_packages()'
> >>>      59150 Abort trap: 6           | R_DEFAULT_PACKAGES= LC_COLLATE=C
> >>> "${R_HOME}/bin/R" $myArgs --slave --args ${args}
> >>>
> >>>
> >>> Same warning also happens during the configure checks, but as it is
> not an
> >>> error the test program compiles and links OK (but is never run), and
> we get
> >>>
> >>> checking whether utimensat exists and is declared... yes
> >>>
> >>> Ugh!...
> >>>
> >>>
> >>> - Peter D.
> >>>
> >>>
> >>> --
> >>> Peter Dalgaard, Professor,
> >>> Center for Statistics, Copenhagen Business School
> >>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> >>> Phone: (+45)38153501
> >>> Office: A 4.23
> >>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> >>>
> >>> _______________________________________________
> >>> R-SIG-Mac mailing list
> >>> R-SIG-Mac at r-project.org
> >>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> >>>
> >>      [[alternative HTML version deleted]]
> >> _______________________________________________
> >> R-SIG-Mac mailing list
> >> R-SIG-Mac at r-project.org
> >> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> >
> >
> > --
> > Brian D. Ripley,                  ripley at stats.ox.ac.uk
> > Emeritus Professor of Applied Statistics, University of Oxford
> >
> > _______________________________________________
> > R-SIG-Mac mailing list
> > R-SIG-Mac at r-project.org
> > https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
>
>
>
>
>
>
>
>
>

	[[alternative HTML version deleted]]


From tim.bates at ed.ac.uk  Thu Sep  7 18:07:36 2017
From: tim.bates at ed.ac.uk (BATES Timothy)
Date: Thu, 07 Sep 2017 16:07:36 -0000
Subject: [R-SIG-Mac] Quartz output font is disabled in R version 3.4.1
	(2017-06-30)?
Message-ID: <023F94AB-42DE-48E3-9DE8-61AA25BED9CF@ed.ac.uk>

Seems like in R.app that accompanies  R version 3.4.1 (2017-06-30), the preference to set an output -font  for graphics is disabled?
[cid:5302DF1F-ADD4-4806-8624-0F8FD9899C49 at ed.ac.uk]
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20170907/db9a5ffb/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Screenshot 2017-09-07 17.04.02.png
Type: image/png
Size: 345449 bytes
Desc: Screenshot 2017-09-07 17.04.02.png
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20170907/db9a5ffb/attachment-0001.png>
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20170907/db9a5ffb/attachment-0001.ksh>

From mmoores at gmail.com  Wed Sep 20 10:34:11 2017
From: mmoores at gmail.com (Matt)
Date: Wed, 20 Sep 2017 09:34:11 +0100
Subject: [R-SIG-Mac] Issue with exception handling in unofficial Clang 4.0.0
	for R 3.4.1
Message-ID: <CAEYDd_+Rfxz_zW=pRZH9K7yXFrfi9hWHexb3xOXfbcdw=d5K8Q@mail.gmail.com>

The attached code throws an exception with a specific error message.
However, this is what it looks like when I compile it on Sierra using the
unofficial Clang 4.0.0 build from http://r.research.att.com/libs/

```{r}
Rcpp::sourceCpp('Dropbox/blog/RcppException.cpp')
throw_exception()
```
Error in throw_exception() : c++ exception (unknown reason)

This is my ~/.R/Makevars

CC  = /usr/local/clang4/bin/clang

CXX = /usr/local/clang4/bin/clang++ -arch x86_64 -ftemplate-depth-256

LDFLAGS=-L/usr/local/clang4/lib -fopenmp

CXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable
-Wno-unused-function -fopenmp

Note that this works as expected if I instead use the official Clang 4.0.0
binary from http://releases.llvm.org/download.html#4.0.0

R version 3.4.1 (2017-06-30)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS Sierra 10.12.6

Matrix products: default
BLAS:
/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
LAPACK:
/Library/Frameworks/R.framework/Versions/3.4/Resources/lib/libRlapack.dylib

locale:
[1] en_GB.UTF-8/en_GB.UTF-8/en_GB.UTF-8/C/en_GB.UTF-8/en_GB.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] compiler_3.4.1 tools_3.4.1    Rcpp_0.12.12
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20170920/08b0eeca/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: RcppException.cpp
Type: text/x-c++src
Size: 204 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20170920/08b0eeca/attachment.bin>

From rbaer at atsu.edu  Sat Sep 23 16:24:41 2017
From: rbaer at atsu.edu (Robert Baer)
Date: Sat, 23 Sep 2017 09:24:41 -0500
Subject: [R-SIG-Mac] Rcmdr start-up issue
Message-ID: <09980FC0-F3A9-44E1-B76F-319379B0EF67@atsu.edu>

I seem to be having a problem starting Rcmdr:

> library(Rcmdr)
Loading required package: splines
Loading required package: RcmdrMisc
Loading required package: car
Loading required package: sandwich
Loading required package: effects
Loading required package: carData

Attaching package: ?carData?

The following objects are masked from ?package:car?:

    Guyer, UN, Vocab

lattice theme set by effectsTheme()
See ?effectsTheme for details.
Error: package or namespace load failed for ?Rcmdr?:
 package ?tcltk? does not have a namespace
> 

I tried first from within RStudio, then from R itself. Same outcome. Reinstalling Rcmdr, tcltk or tcltk2 package did not seem to help. 

I?m brand new to mac, so I may be missing something basic.  On the other hand I should confess to just having just ?updated? Xcode.  

> R.Version()
$platform
[1] "x86_64-apple-darwin15.6.0"

$arch
[1] "x86_64"

$os
[1] "darwin15.6.0"

$system
[1] "x86_64, darwin15.6.0"

$status
[1] ""

$major
[1] "3"

$minor
[1] "4.1"

$year
[1] "2017"

$month
[1] "06"

$day
[1] "30"

$`svn rev`
[1] "72865"

$language
[1] "R"

$version.string
[1] "R version 3.4.1 (2017-06-30)"

$nickname
[1] "Single Candle"


	[[alternative HTML version deleted]]


