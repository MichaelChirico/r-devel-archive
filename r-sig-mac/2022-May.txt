From murdoch@dunc@n @end|ng |rom gm@||@com  Sun May  1 02:12:47 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 30 Apr 2022 20:12:47 -0400
Subject: [R-SIG-Mac] Contributing to documentation [Was: Installing
 gfortran]
In-Reply-To: <F01C459B-D751-4245-AAD1-17B36601A910@dcn.davis.ca.us>
References: <9bc73767-ab49-c828-4044-36fba7274f1f@umu.se>
 <CD2DBF0F-1D4B-4A1A-AF7E-CBA1FEC9459F@gmail.com>
 <c61bb1a4-66fd-a3a4-a8f7-9530ab68b7ac@umu.se>
 <0910300B-E8DE-4E66-98C6-D08A96C4022B@R-project.org>
 <B09F0497-BBE6-4549-999E-29A59DC975D3@gmail.com>
 <916FAE6F-D1DF-409A-AFC4-8A2AA1998A37@R-project.org>
 <EE77F266-8D1D-4043-8B0A-B6FBD2DC73C0@gmail.com>
 <43c41357-75ac-e267-b42c-5d5cc8dabff7@gmail.com>
 <C35B0CCB-484F-42BE-8FEC-168ECED3F346@dcn.davis.ca.us>
 <135a8cf3-f105-7081-a0d9-d09bd55ebd6b@gmail.com>
 <F01C459B-D751-4245-AAD1-17B36601A910@dcn.davis.ca.us>
Message-ID: <cbd42899-7814-0f98-8272-7ca3db64e9c9@gmail.com>

On 30/04/2022 1:10 p.m., Jeff Newmiller wrote:
> Re revision numbers... yes, you might have to take care to handle aligning the baseline code against which the patch was generated manually. Given that outside contributions would tend to start from specific releases though this shouldn't be too onerous.

I hope contributions wouldn't start from releases.  Hopefully they'd 
start from the head of R-devel on svn or its Github mirror.

R-devel is where almost all changes go first, but releases may have 
split from it a long time ago.  For example, right now R 4.2.0 is very 
recent, but there have been 309 revisions in svn since 4.2.0 was split 
off from R-devel back in March, many of which affected the documentation.

The previous release (4.1.3 in March) split from R-devel more than a 
year ago.

It's true that people recognize problems in the docs in releases, but 
that's not what they should be editing.  Often problems there were dealt 
with months ago, and just weren't seen as important enough to backport 
to the R-patched branch so they never made it into a release.

Duncan Murdoch

> 
> The bigger impedance is that people who are good with documentation but not with code have a significant impedance in learning how patches work. In these days where you can use the GitHub web interface to clone a repo, edit a file, and submit a pull request without ever leaving the web browser, tools like diff and patch seem excessive. Only fogeys/nerds like us view them as the fabric of computing.
> 
>>> Re git and empty directories... git is structurally incapable of recording them in the repo. A common workaround is to touch a .gitkeep file in the directory, but I suspect this will never become an automated feature of git because it cannot be hidden from the user without making the chosen filename off-limits to the user.
>>
>> That seems like a design flaw, but a pretty easy one to work around.
> 
> Git only cares about the data in files, not how those files are identified. Attempting to pretend that a directory is identifiable by its content breaks that principle. There is a significant benefit from the implementation and user mental model perspectives associated with this shift, but if you don't utilize those benefits then git is probably not for you. It has been a worthwhile shift for many, many others though... so calling it a design "flaw" might seem innocuous but misses the significant value associated with that design principle for others.
> 
> Yes, the workaround is easy. But it cannot be hidden unfortunately, so automating it within the git software itself has so far been rejected since the idea that empty directories exist in git is anathema and pretending otherwise breaks the canonical mental model.
> 
> On April 30, 2022 9:06:53 AM PDT, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>> On 30/04/2022 11:07 a.m., Jeff Newmiller wrote:
>>> Generating patch files is one of the most fundamental capabilities of git. Changes to the Linux kernel are (almost?) universally submitted via patch files generated from git.
>>
>> svn uses nearly standard patch files, but they record svn revision numbers.  I'd guess directly applying a git patch file to an svn working copy would almost always work, but I'm not sure it would always be applied correctly in the case where the patch was created from rev X and applied to rev Y.
>>
>>> Re git and empty directories... git is structurally incapable of recording them in the repo. A common workaround is to touch a .gitkeep file in the directory, but I suspect this will never become an automated feature of git because it cannot be hidden from the user without making the chosen filename off-limits to the user.
>>
>> That seems like a design flaw, but a pretty easy one to work around.
>>
>> Duncan Murdoch
>>
>>
>>> On April 30, 2022 7:45:40 AM PDT, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>>> On 30/04/2022 9:53 a.m., Patrick Schratz wrote:
>>>>>       If that is the case, why not contribute to the documentation? That
>>>>>       is the whole point of an open source project after all.
>>>>>
>>>>> Because often it is not easily accessible, e.g. living in an ancient SVN repo or lacking (an easy) and clear contribution guide.
>>>>
>>>> There's a mirror of that repo at https://github.com/wch/r-source .  It is of course unofficial and not maintained by R Core so I could understand you might worry about using it, but as far as I know it is well maintained.  The only difference that I ever heard about in the past was that the official svn repo had an empty directory somewhere or other, and git at the time didn't support empty directories.  I don't know if either of those is still true.
>>>>
>>>>
>>>>> WRT to the Mac dev instructions, I can see that the source lives in https://github.com/R-macos/R-mac-dev <https://github.com/R-macos/R-mac-dev> which is definitely a good start.
>>>>> Yet I think it needs way more cross-linking between the repos, more ?official? pointers and ?how-tos? to really also encourage people to contribute.
>>>>> The README could give more detailed contribution instructions, such as whom to tag for a PR, what should go there and what not, possibly stating that it?s the official documentation and define it from other ?random? orgs on developer portals - all of these could e.g. go into a |CONTRIBUTING.md| which is a widely known source for such information.
>>>>> Just some personal thoughts though which could potentially considered to improve things.
>>>>>
>>>>> To be clear, I acknowledge your effort in opening things up to platforms like GH - which not all parts of R/CRAN are doing at the moment AFAIK.
>>>>> And yes, when complaining about things not being optimal, one should also put in effort to make things better.
>>>>> So I?ll see if I can put some time in to improve things and see how the experience is.
>>>>
>>>> If you're happier working in git than in svn, what you could do is fork the mirror repo to your own git repo, and make your proposed changes there.  If they are good changes it won't be hard for someone (maybe even you) to convert into the appropriate format to merge into svn.
>>>>
>>>> The way R development changes is when a change makes things easier for the devs.  I suspect whether it's easier for you is only important to them if you've got a history of making helpful contributions: they like help, they don't like arguments about how to do things.  (I'm saying this as a former member of R Core.)
>>>>
>>>> Duncan Murdoch
>>>>
>>>>>
>>>>>       The problem is that generally they cannot. You are looking something
>>>>>       up, because you don't know about it so you can't judge whether it is
>>>>>       a good answer (SO is good example proving why crowd-souring the
>>>>>       definition of truth doesn't generally work). At best you may know
>>>>>       the person and thus judge by that, but even then you may not know if
>>>>>       the information is still accurate.
>>>>>
>>>>> I see your point here and generally agree that it?s hard making such judgements in this position.
>>>>> Yet I disagree on referring to Stackoverflow as a ?crowd-souring the definition of truth doesn't generally work?. Without SO, we would be nowhere where we are today and I?d argue it has done a lot more positive things than negative ones to every single person who ever accessed it. >
>>>>> Cheers
>>>>> Patrick
>>>>>
>>>>> On 25 Apr 2022, at 1:04, Simon Urbanek wrote:
>>>>>
>>>>>           On Apr 23, 2022, at 7:44 PM, Patrick Schratz
>>>>>           <patrick.schratz at gmail.com> wrote:
>>>>>
>>>>>           FWIW blog posts which explain such things usually have a (good)
>>>>>           reason - they aim to help people getting started when the
>>>>>           official documentation is either unclear, hard to find or
>>>>>           incomplete.
>>>>>
>>>>>       If that is the case, why not contribute to the documentation? That
>>>>>       is the whole point of an open source project after all.
>>>>>
>>>>>       The problem with random blogs is that many of them are written by
>>>>>       people trying to find an answer without much knowledge on the
>>>>>       subject and often post very bad advice that does not necesarily
>>>>>       address the actual issue. There are rare exceptions of knowledgeable
>>>>>       people posting explanatory blogs, but if you search for an answer
>>>>>       you have no way of knowing whether it is of the good kind. In
>>>>>       addition, blogs tend to get out of date quickly, so what used to be
>>>>>       a good advice may not be anymore (prime example was the R 4.0.0
>>>>>       release which made a lot of the "hacks" obsolete and the well-meant
>>>>>       advice out there has only led to more problems).
>>>>>
>>>>>           It?s on the readers themselves to decide whether such blog posts
>>>>>           are trustworthy or useful.
>>>>>
>>>>>       The problem is that generally they cannot. You are looking something
>>>>>       up, because you don't know about it so you can't judge whether it is
>>>>>       a good answer (SO is good example proving why crowd-souring the
>>>>>       definition of truth doesn't generally work). At best you may know
>>>>>       the person and thus judge by that, but even then you may not know if
>>>>>       the information is still accurate.
>>>>>
>>>>>           I have personally profited so often from blog posts of others
>>>>>           already and therefore find the general advice to not consult
>>>>>           such resources quite shortsighted.
>>>>>           Of course the official documentation should always be the first
>>>>>           point to have a look at - and in this case the required
>>>>>           information would have been there.
>>>>>
>>>>>           Apologies for going partly off-topic but I think this point is
>>>>>           important.
>>>>>
>>>>>       I agree. That's why I think it would be great if those that have the
>>>>>       knowledge would help the community to improve the documentation. Of
>>>>>       all the contributions to R it is the easiest.
>>>>>
>>>>>       That said, I also agree that complementary information is very
>>>>>       useful, in particular if it explains the "why" as well - which may
>>>>>       be too far out of scope of the canonical documentation. In that case
>>>>>       it is easier to spot mismatches, e.g., if it becomes out of date. It
>>>>>       is not without precedent to reference such external documentation if
>>>>>       it is maintained.
>>>>>
>>>>>       Anyway, I'd like to encourage everyone to contribute - it may be
>>>>>       pointing out issues in the documentation or by sending PRs with
>>>>>       proposed updates or posting here. Some did in the past (like you,
>>>>>       Jan or Bob, thanks!), but the more contribute the better for the
>>>>>       community. Often this may also uncover genuine issues that should be
>>>>>       addressed rather than worked around (like the lack of the symlink in
>>>>>       the gfortran-12 tar-ball discovered just this morning...).
>>>>>
>>>>>       Cheers,
>>>>>       Simon
>>>>>
>>>>>           Cheers
>>>>>           Patrick
>>>>>
>>>>>           On 23 Apr 2022, at 2:13, Simon Urbanek wrote:
>>>>>
>>>>>               For posterity - please always consult
>>>>>
>>>>>               https://mac.r-project.org/tools/
>>>>>               <https://mac.r-project.org/tools/> (linked from CRAN)
>>>>>
>>>>>               The old locations like libs* are no longer updated and have
>>>>>               been deprecated in favor of /tools and /bin which are
>>>>>               maintained for all builds. Similarly, I would strongly
>>>>>               discourage following any advice from blogs as they tend to
>>>>>               be outdated, wrong or both.
>>>>>
>>>>>               Cheers
>>>>>               Simon
>>>>>
>>>>>
>>>>> _______________________________________________
>>>>> R-SIG-Mac mailing list
>>>>> R-SIG-Mac at r-project.org
>>>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>>>
>>>> _______________________________________________
>>>> R-SIG-Mac mailing list
>>>> R-SIG-Mac at r-project.org
>>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>>
>>
>


From rkoenker @end|ng |rom ||||no|@@edu  Sun May  1 14:38:54 2022
From: rkoenker @end|ng |rom ||||no|@@edu (Koenker, Roger W)
Date: Sun, 1 May 2022 12:38:54 +0000
Subject: [R-SIG-Mac] Setting _R_CHECK_DEPENDS_ONLY_=true
In-Reply-To: <8AC4E82C-6467-402A-B7BC-2A5BC01B6664@illinois.edu>
References: <9bc73767-ab49-c828-4044-36fba7274f1f@umu.se>
 <CD2DBF0F-1D4B-4A1A-AF7E-CBA1FEC9459F@gmail.com>
 <c61bb1a4-66fd-a3a4-a8f7-9530ab68b7ac@umu.se>
 <0910300B-E8DE-4E66-98C6-D08A96C4022B@R-project.org>
 <B09F0497-BBE6-4549-999E-29A59DC975D3@gmail.com>
 <916FAE6F-D1DF-409A-AFC4-8A2AA1998A37@R-project.org>
 <EE77F266-8D1D-4043-8B0A-B6FBD2DC73C0@gmail.com>
 <43c41357-75ac-e267-b42c-5d5cc8dabff7@gmail.com>
 <C35B0CCB-484F-42BE-8FEC-168ECED3F346@dcn.davis.ca.us>
 <8AC4E82C-6467-402A-B7BC-2A5BC01B6664@illinois.edu>
Message-ID: <764A74DF-312E-4C75-8F8E-E84027A47382@illinois.edu>

Ok,  this worked as I expected so _R_CHECK_DEPENDS_ONLY_=true  now reveals the same problem that CRAN detected, which was easily fixed.  But I?m left with a NOTE with a large number of HTML warnings that begin with:

* checking HTML version of manual ... NOTE
Found the following problems:
Bosco.Rd:4:1: Warning: <link> inserting "type" attribute
Bosco.Rd:12:1: Warning: <script> proprietary attribute "onload"
Bosco.Rd:12:1: Warning: <script> inserting "type? reattribute


Are these deadly from a CRAN perspective?  And if so, any hints about how to fix them?  Googling only produced the following thread:   https://github.com/htacg/tidy-html5/issues/377

> On Apr 30, 2022, at 5:17 PM, Koenker, Roger W <rkoenker at illinois.edu> wrote:
> 
> 
> I?m trying to enable  _R_CHECK_DEPENDS_ONLY_=true  option for R CMD check ?as-cran  on a 
> 
> R version 4.1.3 (2022-03-10) -- "One Push-Up?  on an Intel mac mini.
> 
>> .libPaths()
> [1] "/Library/Frameworks/R.framework/Versions/4.1/Resources/library?
> 
> I?ve tried putting  _R_CHECK_DEPENDS_ONLY_=true in ~/.R/check.Renviron
> 
> and also tried (in bash) export _R_CHECK_DEPENDS_ONLY_=true in bash prior to R CMD check, but I can?t replicate the errors found with CRAN checking, which is becoming embarrassing.
> 
> Kurt offered the following Zen koan:
> 
>> The mechanism only works when you only have the base/recommended
>> packages in .Library, and the rest in a separate user library. Which
>> needs a .libPaths() of lenght at least two ?
> 
> When I do:
> 
>> Sys.getenv("R_LIBS_USER")
> [1] "~/Library/R/x86_64/4.1/library?
> 
> But as the R Installation and Administration manual says this is only used if it exists, which it doesn?t in my case.  I now interpret this to mean that I should install 4.2, create this directory and reinstall packages so that they appear there rather than under the RHOME directory.   If someone could confirm this or suggest an alternative strategy I?d be most grateful.
> 
> Roger
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-sig-mac__;!!DZ3fjg!79fWEQZV39wadd_f0tOjMxJ6Vu-Np3mrdCl2PraiyD_VFph_KJidVXoQDauIM5QKsRPMeEALDlugu2U-_MgXdNu3$ 


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun May  1 15:11:38 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 1 May 2022 09:11:38 -0400
Subject: [R-SIG-Mac] CRAN installer for macOS - directory permissions
In-Reply-To: <21CB0991-A1A8-4F36-B151-93AD204D7A09@gmail.com>
References: <36345395-F4E6-4069-9900-990E283FA7AC@gmail.com>
 <9200B51A-3A42-42B1-8E1F-4A31C61D5AFA@R-project.org>
 <4F79D380-A4F5-4562-97C2-7B0C4693EEB7@gmail.com>
 <290E0344-9E1B-4979-B211-321B0633C606@R-project.org>
 <21CB0991-A1A8-4F36-B151-93AD204D7A09@gmail.com>
Message-ID: <1de0018b-addd-2aed-4f00-dd4a86b08574@gmail.com>

On 30/04/2022 2:58 p.m., Patrick Schratz wrote:
>     They don't go there "silently" as in unnoticed - they go there if
>     you instruct R to do so. That's why there is an explicit choice in
>     the Installer. Otherwise regular R rules apply.
> 
> Where is this choice in the installer? I don?t see a menu/setting which 
> users could change to install packages into a user lib instead of the 
> system lib (if they are part of the |admin| group).
> To me, they go there if the lib is writable - and ?the common? R user 
> does not know that the system lib is writeable by default.

I think Simon is talking about the package installer in R.app and you 
are talking about the installer for R itself.  The package installer 
dialog in R.app has a pretty clear section called Install Location.

Duncan Murdoch

> 
>     It only does so for admin users. Unlike "managed" unix systems, on
>     macOS you have essentially two situations:
> 
>     On a "personal" machine (like laptop) the user is the main user and
>     admin. Therefore it makes a lot more sense for the user to use a
>     single location for managing packages which is at the system level.
>     This also allows easy R upgrades. In addition, locations in user
>     home raise a lot of issues (see the various discussion where this
>     bites people on Windows) due to interactions with software that does
>     mirroring, backups etc.. Hence this approach "just works" as one
>     would expect on a Mac.
> 
> To be clear: I don?t question the system-wide installation and I think 
> this is good as is (this also happens on Linux).
> I am questioning the group write permissions for the system lib.
> 
>     If the user wishes to use his/her private library, it is trivial -
>     just click on "At User Level" and from then on all packages are
>     managed user's local library just like on any other platform.
> 
> I might be missing something obvious but where is this option ?at the 
> user level?? I assumed you?re talking about the official |.dmg| 
> installer - which does not have such an option AFAICS?
> 
>     On a "managed" Mac the user is not an admin and therefore the
>     behavior makes no difference. The status quo just makes it easier
>     for admins to manage the shared library, but in reality this doesn't
>     matter as one would assume the admins know what they are doing.
> 
> I disagree on this, especially the point ?makes it easier for admins to 
> manage the shared library?.
> Admins should (and will) always be able to manage the system lib /after/ 
> authenticating (as on Linux). The authentication step does not really 
> make a difference in practice for admins and is required in almost all 
> places where system-wide changes are desired.
> 
> This is also the /core/ of the whole discussion: 775 vs 755 (WRT to 
> directory permissions).
> I don?t see any (strong) reason that would result in 775 > 755.
> (If so, then the default should probably also be changed on Linux.)
> In a previous message, Kevin Ushey also agreed on the point that 
> explicit authorization should be required to write into the system lib.
> I assume there might be many more people who would actually agree on 
> this 755 being preferable in this situation.
> How can a proposal be phrased to reconsider this setting that is 
> evaluated by a representative group of people?
> I am not claiming to be right but I?d be interested in a multi-person 
> evaluation of this setting rather than keeping this at a 
> person-to-person discussion level.
> 
>     Well, having administered company-wide R installations in large
>     companies for almost two decades I'd strongly disagree. As an admin
>     you want as few user-installed packages as possible, because they
>     are guaranteed to cause problems. You want to limit this for things
>     like development of packages where you want the stable version
>     globally and development version locally (and this is not just me -
>     have a look how the top tech companies manage their software). You
>     have a reliable, stable central location - if you don't do that then
>     you'll have n libraries to manage for n users which is absolutely
>     not sustainable as users will break their libraries and you cannot
>     even upgrade R. Also having a central, shared library is crucial for
>     collaboration. Unlike in Python in R it actually works since R and
>     CRAN doesn't allow randomly breaking reverse-dependencies.
> 
> As a system engineer and admin myself (for several ?large? 
> companies/institutions), I kindly disagree on your view here.
> User packages are not a problem but /a feature/, everyone can install 
> the versions they need for their project.
> They don?t interfere with packages from other users and are not forced 
> go with the update interval of an admin.
> With the additional use of renv (thanks Kevin!), redundancy is highly 
> reduced as a shared cache can be used from with users can simply use 
> symlinks rather than installing the x-th copy of the same R package 
> version. But this is partly off-topic WRT to the actual discussion.
> 
> Overall this sub-discussion part might come down to the philosophy of 
> having a ?centrally managed, unflexible admin installation? or a 
> ?centrally managed, partly-flexible admin installation? where only the R 
> versions and system libs are managed but users have the freedom to 
> install any R packages they want.
> Also in ?my? philosophy, it?s not about ?upgrading? R and removing the 
> previous version but adding new versions as they come in and keeping 
> previous ones - for the purpose of reproducibility.
> I usually keep the latest patch version of a minor version and aim to 
> provide a consistent R environment for various minor versions where 
> users are guaranteed to be able to work with that minor version in a 
> flexible way (i.e. by installing user packages as they want) for many 
> years ahead.
> 
>     As mentioned before and above I disagree. The proposal doesn't
>     matter for managed Macs but would negatively affect users that are
>     single-user admins and since that is typically the case for the
>     majority of Mac R users (as they typically are on their personal
>     machines) I don't see any upshot. All it would do is to prevent
>     typical R users to install packages directly.
> 
> How would it affect single-user admins in a negative way?
> They can
> 
>   * still install packages per R minor version into a dedicated user library
>   * install multiple R minor versions side by side
>   * actually enjoy the same behavior as on Linux
> 
>     All it would do is to prevent typical R users to install packages
>     directly.
> 
> I don?t understand this point. It would behave similar as on Linux, 
> where users are prompted to create a user library (on first use and if 
> non exists yet).
> 
> As you can see, the overall discussion topic is quite important to me 
> and I am still convinced that the current state on macOS is suboptimal.
> Thanks for your time and sharing your thoughts.
> 
> Cheers
> Patrick
> 
> On 25 Apr 2022, at 1:46, Simon Urbanek wrote:
> 
>     Patrick,
> 
>     sorry fo the delayed reply - this was not a quick e-mail so I had to
>     find time after the release :)
> 
>         On Apr 3, 2022, at 8:26 PM, Patrick Schratz
>         <patrick.schratz at gmail.com> wrote:
> 
>         Hi Simon,
> 
>         thanks for your extensive reply.
> 
>         The choice is deliberate: the admin group on macOS corresponds
>         to users that are allowed to install system-wide software so it
>         allows all admins on the machine to install packages which is
>         the expected way on macOS.
> 
>         I think this choice is unfortunate as it contrasts with existing
>         behavior on other platforms where one needs to explicitly
>         request admin privileges by either using sudo or starting R as
>         an admin.
>         On macOS, packages just go into the system lib ?silently?
>         because of the write permissions granted via the admin group.
>         See also my comments further down for more details on this.
> 
>     They don't go there "silently" as in unnoticed - they go there if
>     you instruct R to do so. That's why there is an explicit choice in
>     the Installer. Otherwise regular R rules apply.
> 
>         Also the versioning of the R framework as x.y is also deliberate
>         - upgrading R to a new patch version does *not* require
>         re-installation of packages, they work by design so in fact the
>         system location is the safest way to do that. Also note that
>         packages are never removed by the installer.
> 
>         Thanks, I am aware that a patch update does not require a
>         reinstallation as the packages are functional across minor versions.
> 
>         I checked again and was indeed wrong, patch updates from the
>         CRAN installer do not remove additional custom packages in the
>         system lib.
>         I was confused by some custom approaches of mine which cause
>         this behavior - sorry for this!
> 
>         So out of the items listed in "The problem" they are all not
>         true with the exception of the comparison with the other
>         platforms, but even that difference is very subtle as it only
>         affects the default on the first installation and not regular
>         use (and I'm, not even sure it that is true since admin users
>         can still install in the system location on other platforms).
> 
>         On Linux you would need to do explicitly invoke sudo R to allow
>         writing into the system lib.
>         The issue on macOS is that a regular start of R allows system
>         lib write permissions.
>         In my current view I think a similar behavior as on Linux would
>         be great, i.e. to explicitly having to request admin privileges
>         for this task.
> 
>     It only does so for admin users. Unlike "managed" unix systems, on
>     macOS you have essentially two situations:
> 
>     On a "personal" machine (like laptop) the user is the main user and
>     admin. Therefore it makes a lot more sense for the user to use a
>     single location for managing packages which is at the system level.
>     This also allows easy R upgrades. In addition, locations in user
>     home raise a lot of issues (see the various discussion where this
>     bites people on Windows) due to interactions with software that does
>     mirroring, backups etc.. Hence this approach "just works" as one
>     would expect on a Mac. If the user wishes to use his/her private
>     library, it is trivial - just click on "At User Level" and from then
>     on all packages are managed user's local library just like on any
>     other platform.
> 
>     On a "managed" Mac the user is not an admin and therefore the
>     behavior makes no difference. The status quo just makes it easier
>     for admins to manage the shared library, but in reality this doesn't
>     matter as one would assume the admins know what they are doing.
> 
>         I don?t understand the part ?as it only affects the default on
>         the first installation and not regular use? of your reply -
>         could you clarify this?
>         Unless a user creates a user lib manually, packages will always
>         go into the system lib - not only on first use - but I might be
>         misunderstanding your comment here.
> 
>         I would argue that the current setup tends to be a lot safer
>         than the alternatives, because it allows commonly used packages
>         to be installed at the system level and private packages to be
>         installed at user level. This is also the design typically used
>         on shared machines, where you separate local packages from user
>         packages where local ones are installed by administrators - so
>         exactly the same setup. Moreover R upgrades are a lot cleaner,
>         since you can easily upgrade all system packages at once so you
>         don't have to worry about individual users having stale packages
>         - the biggest problem for admins.
> 
>         Yes and no.
>         Sometimes system admins want to install certain packages
>         globally - however, I never do so for the following reason:
>         Often this will lead to multiple package installations, i.e. one
>         in the syslib and one in the user lib (if the user installs the
>         package again for some reason which quite often happens).
>         Often these duplicated packages will have different versions and
>         users are confused which one is actually loaded (the user lib
>         one is as it is first in the path).
> 
>         Aside from this practical point, Macs are rarely used in a
>         shared way.
>         And even if, I?d highly favor having to request write
>         permissions into the syslib rather it happening by default.
> 
>         Imagine a scenario where the admin of a shared Mac constantly
>         writes into the syslib (because this is the default). This
>         syslib is then also used by other non-admin users on the system.
>         I don?t think this is a desired scenario and might cause lot?s
>         of confusion (not even mentioning the fact if all people in this
>         scenario are aware what?s going on given that this is a niche
>         topic).
>         Here I think a one-time central installation of R and then only
>         working with user libs (as on Linux) would be preferable.
> 
>     Well, having administered company-wide R installations in large
>     companies for almost two decades I'd strongly disagree. As an admin
>     you want as few user-installed packages as possible, because they
>     are guaranteed to cause problems. You want to limit this for things
>     like development of packages where you want the stable version
>     globally and development version locally (and this is not just me -
>     have a look how the top tech companies manage their software). You
>     have a reliable, stable central location - if you don't do that then
>     you'll have n libraries to manage for n users which is absolutely
>     not sustainable as users will break their libraries and you cannot
>     even upgrade R. Also having a central, shared library is crucial for
>     collaboration. Unlike in Python in R it actually works since R and
>     CRAN doesn't allow randomly breaking reverse-dependencies.
> 
>          From a technical perspective, I know that setting root:root on
>         macOS is not possible. My proposed change to 755 (and leaving
>         root:admin) would however exactly mimic this (and the one of
>         Linux installs) behavior:
> 
>         ? admins would need to do sudo R to install into the system library
>         ? otherwise they are prompted to create a user library
>         Which downsides would this approach have? Currently I don?t see
>         any. It would even harmonize CRAN installer behavior across
>         platforms.
> 
>         I'd be happy to hear from more Mac user if there are reasons to
>         change the default, but as I outlined the choices were
>         deliberate after weighting the pros and cons. In my view the
>         major issue with the proposal it that is would prevent sharing
>         of packages, make R upgrades a lot harder and prevent admin
>         users from using the current tools for package management - and
>         that includes the ability to separate system and user packages
>         on single-user machines.
> 
>         I?ll try to vision the practical changes of this:
> 
>         ? Patch update experience would not change as custom packages
>         will be in the user lib for the respective minor version (by
>         default)
>         ? Admins are still able to install into the system lib when
>         using sudo R
>         ? AFAICS admins will still be able to separate system and user
>         packages as they can use sudo R for syslib installs. To me, the
>         proposed change would even make the behaviour more clear than
>         before (which requires to create a hidden folder (user lib) in
>         the right place to actually use a user lib).
>         Let me know if I overlook something - but currently I don?t see
>         any downside but various positive impacts.
> 
>     As mentioned before and above I disagree. The proposal doesn't
>     matter for managed Macs but would negatively affect users that are
>     single-user admins and since that is typically the case for the
>     majority of Mac R users (as they typically are on their personal
>     machines) I don't see any upshot. All it would do is to prevent
>     typical R users to install packages directly.
> 
>         Last, I wanted to ask if the source code for the CRAN installer
>         is publicly available? I could not find it and would be
>         interested to take a look into it. If this is not possible for
>         some reason, I would also be interested in getting to know the
>         reason for this decision.
> 
>     Everything is in the R SVN, the R build and release system is in
>     https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4
>     <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4>
>     and Apple Installer packaging is in
>     https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging
>     <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging>
>     and the relevant postflight script is in
>     https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging/scripts-R-fw/postflight
>     <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging/scripts-R-fw/postflight>
> 
>         On Apr 13, 2022, at 8:43 PM, Patrick Schratz
>         <patrick.schratz at gmail.com> wrote:
> 
>         Related to this Q: Are the macOS CRAN policies actively
>         discussed by a team of people (who might eventually also be
>         willing to share their thoughts or could be addressed with such
>         questions) or are you solely responsible for it?
> 
>     CRAN is an entire team, so yes, but as for anything Mac-related it
>     includes R-core and other stake holders that have expressed interest
>     before (e.g. Bioconductor). Obviously, this (R-SIG-Mac) is also a
>     good place as that includes anyone who cares about R on macOS.
> 
>     Cheers,
> 
>     Simon
> 
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac


From j|ox @end|ng |rom mcm@@ter@c@  Sun May  1 15:36:06 2022
From: j|ox @end|ng |rom mcm@@ter@c@ (John Fox)
Date: Sun, 1 May 2022 09:36:06 -0400
Subject: [R-SIG-Mac] Setting _R_CHECK_DEPENDS_ONLY_=true
In-Reply-To: <31677_1651408755_241CdEaF007639_764A74DF-312E-4C75-8F8E-E84027A47382@illinois.edu>
References: <9bc73767-ab49-c828-4044-36fba7274f1f@umu.se>
 <CD2DBF0F-1D4B-4A1A-AF7E-CBA1FEC9459F@gmail.com>
 <c61bb1a4-66fd-a3a4-a8f7-9530ab68b7ac@umu.se>
 <0910300B-E8DE-4E66-98C6-D08A96C4022B@R-project.org>
 <B09F0497-BBE6-4549-999E-29A59DC975D3@gmail.com>
 <916FAE6F-D1DF-409A-AFC4-8A2AA1998A37@R-project.org>
 <EE77F266-8D1D-4043-8B0A-B6FBD2DC73C0@gmail.com>
 <43c41357-75ac-e267-b42c-5d5cc8dabff7@gmail.com>
 <C35B0CCB-484F-42BE-8FEC-168ECED3F346@dcn.davis.ca.us>
 <8AC4E82C-6467-402A-B7BC-2A5BC01B6664@illinois.edu>
 <31677_1651408755_241CdEaF007639_764A74DF-312E-4C75-8F8E-E84027A47382@illinois.edu>
Message-ID: <a7f4922f-7b3b-d9cc-a08f-f30edde3135e@mcmaster.ca>

Dear Roger,

I raised a similar question on R-SIG-Mac last week, and these warnings 
are not a problem with your package. See in particular Brian Ripley's 
response at 
<https://stat.ethz.ch/pipermail/r-sig-mac/2022-April/014411.html> and 
the rest of the thread.

Best,
  John

On 2022-05-01 8:38 a.m., Koenker, Roger W wrote:
> Ok,  this worked as I expected so _R_CHECK_DEPENDS_ONLY_=true  now reveals the same problem that CRAN detected, which was easily fixed.  But I?m left with a NOTE with a large number of HTML warnings that begin with:
> 
> * checking HTML version of manual ... NOTE
> Found the following problems:
> Bosco.Rd:4:1: Warning: <link> inserting "type" attribute
> Bosco.Rd:12:1: Warning: <script> proprietary attribute "onload"
> Bosco.Rd:12:1: Warning: <script> inserting "type? reattribute
> 
> 
> Are these deadly from a CRAN perspective?  And if so, any hints about how to fix them?  Googling only produced the following thread:   https://github.com/htacg/tidy-html5/issues/377
> 
>> On Apr 30, 2022, at 5:17 PM, Koenker, Roger W <rkoenker at illinois.edu> wrote:
>>
>>
>> I?m trying to enable  _R_CHECK_DEPENDS_ONLY_=true  option for R CMD check ?as-cran  on a
>>
>> R version 4.1.3 (2022-03-10) -- "One Push-Up?  on an Intel mac mini.
>>
>>> .libPaths()
>> [1] "/Library/Frameworks/R.framework/Versions/4.1/Resources/library?
>>
>> I?ve tried putting  _R_CHECK_DEPENDS_ONLY_=true in ~/.R/check.Renviron
>>
>> and also tried (in bash) export _R_CHECK_DEPENDS_ONLY_=true in bash prior to R CMD check, but I can?t replicate the errors found with CRAN checking, which is becoming embarrassing.
>>
>> Kurt offered the following Zen koan:
>>
>>> The mechanism only works when you only have the base/recommended
>>> packages in .Library, and the rest in a separate user library. Which
>>> needs a .libPaths() of lenght at least two ?
>>
>> When I do:
>>
>>> Sys.getenv("R_LIBS_USER")
>> [1] "~/Library/R/x86_64/4.1/library?
>>
>> But as the R Installation and Administration manual says this is only used if it exists, which it doesn?t in my case.  I now interpret this to mean that I should install 4.2, create this directory and reinstall packages so that they appear there rather than under the RHOME directory.   If someone could confirm this or suggest an alternative strategy I?d be most grateful.
>>
>> Roger
>> _______________________________________________
>> R-SIG-Mac mailing list
>> R-SIG-Mac at r-project.org
>> https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-sig-mac__;!!DZ3fjg!79fWEQZV39wadd_f0tOjMxJ6Vu-Np3mrdCl2PraiyD_VFph_KJidVXoQDauIM5QKsRPMeEALDlugu2U-_MgXdNu3$
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
-- 
John Fox, Professor Emeritus
McMaster University
Hamilton, Ontario, Canada
web: https://socialsciences.mcmaster.ca/jfox/


From rkoenker @end|ng |rom ||||no|@@edu  Sun May  1 15:52:55 2022
From: rkoenker @end|ng |rom ||||no|@@edu (Koenker, Roger W)
Date: Sun, 1 May 2022 13:52:55 +0000
Subject: [R-SIG-Mac] Setting _R_CHECK_DEPENDS_ONLY_=true
In-Reply-To: <a7f4922f-7b3b-d9cc-a08f-f30edde3135e@mcmaster.ca>
References: <9bc73767-ab49-c828-4044-36fba7274f1f@umu.se>
 <CD2DBF0F-1D4B-4A1A-AF7E-CBA1FEC9459F@gmail.com>
 <c61bb1a4-66fd-a3a4-a8f7-9530ab68b7ac@umu.se>
 <0910300B-E8DE-4E66-98C6-D08A96C4022B@R-project.org>
 <B09F0497-BBE6-4549-999E-29A59DC975D3@gmail.com>
 <916FAE6F-D1DF-409A-AFC4-8A2AA1998A37@R-project.org>
 <EE77F266-8D1D-4043-8B0A-B6FBD2DC73C0@gmail.com>
 <43c41357-75ac-e267-b42c-5d5cc8dabff7@gmail.com>
 <C35B0CCB-484F-42BE-8FEC-168ECED3F346@dcn.davis.ca.us>
 <8AC4E82C-6467-402A-B7BC-2A5BC01B6664@illinois.edu>
 <31677_1651408755_241CdEaF007639_764A74DF-312E-4C75-8F8E-E84027A47382@illinois.edu>
 <a7f4922f-7b3b-d9cc-a08f-f30edde3135e@mcmaster.ca>
Message-ID: <A51F1237-EC38-44B1-884F-71146F04B1D8@illinois.edu>

Thanks John,  this is reassuring.  I did see your message and Brian??s reply, but at the time I was obsessing about _R_CHECK_DEPENDS_ONLY_=true  and misread tidy to be about R-studio which I don?t use, instead of HTML.
Seems that this is all in safe hands now, so I?ll submit quantreg and see how it goes. ;-)

> On May 1, 2022, at 2:36 PM, John Fox <jfox at mcmaster.ca> wrote:
> 
> Dear Roger,
> 
> I raised a similar question on R-SIG-Mac last week, and these warnings are not a problem with your package. See in particular Brian Ripley's response at <https://stat.ethz.ch/pipermail/r-sig-mac/2022-April/014411.html> and the rest of the thread.
> 
> Best,
> John
> 
> On 2022-05-01 8:38 a.m., Koenker, Roger W wrote:
>> Ok,  this worked as I expected so _R_CHECK_DEPENDS_ONLY_=true  now reveals the same problem that CRAN detected, which was easily fixed.  But I?m left with a NOTE with a large number of HTML warnings that begin with:
>> * checking HTML version of manual ... NOTE
>> Found the following problems:
>> Bosco.Rd:4:1: Warning: <link> inserting "type" attribute
>> Bosco.Rd:12:1: Warning: <script> proprietary attribute "onload"
>> Bosco.Rd:12:1: Warning: <script> inserting "type? reattribute
>> Are these deadly from a CRAN perspective?  And if so, any hints about how to fix them?  Googling only produced the following thread:   <a href="https://urldefense.com/v3/__https://github.com/htacg/tidy-html5/issues/377__;!!DZ3fjg!7stuJB9l2bJBEDtQ81SDx3yhq3kJzrMe6i-rTuitazSUvx3qnMvZWHj1AhhYbrhMDRPdYJpEtabS0ApF_Q$">https://github.com/htacg/tidy-html5/issues/377</a>
>>> On Apr 30, 2022, at 5:17 PM, Koenker, Roger W <rkoenker at illinois.edu> wrote:
>>> 
>>> 
>>> I?m trying to enable  _R_CHECK_DEPENDS_ONLY_=true  option for R CMD check ?as-cran  on a
>>> 
>>> R version 4.1.3 (2022-03-10) -- "One Push-Up?  on an Intel mac mini.
>>> 
>>>> .libPaths()
>>> [1] "/Library/Frameworks/R.framework/Versions/4.1/Resources/library?
>>> 
>>> I?ve tried putting  _R_CHECK_DEPENDS_ONLY_=true in ~/.R/check.Renviron
>>> 
>>> and also tried (in bash) export _R_CHECK_DEPENDS_ONLY_=true in bash prior to R CMD check, but I can?t replicate the errors found with CRAN checking, which is becoming embarrassing.
>>> 
>>> Kurt offered the following Zen koan:
>>> 
>>>> The mechanism only works when you only have the base/recommended
>>>> packages in .Library, and the rest in a separate user library. Which
>>>> needs a .libPaths() of lenght at least two ?
>>> 
>>> When I do:
>>> 
>>>> Sys.getenv("R_LIBS_USER")
>>> [1] "~/Library/R/x86_64/4.1/library?
>>> 
>>> But as the R Installation and Administration manual says this is only used if it exists, which it doesn?t in my case.  I now interpret this to mean that I should install 4.2, create this directory and reinstall packages so that they appear there rather than under the RHOME directory.   If someone could confirm this or suggest an alternative strategy I?d be most grateful.
>>> 
>>> Roger
>>> _______________________________________________
>>> R-SIG-Mac mailing list
>>> R-SIG-Mac at r-project.org
>>> https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-sig-mac__;!!DZ3fjg!79fWEQZV39wadd_f0tOjMxJ6Vu-Np3mrdCl2PraiyD_VFph_KJidVXoQDauIM5QKsRPMeEALDlugu2U-_MgXdNu3$
>> _______________________________________________
>> R-SIG-Mac mailing list
>> R-SIG-Mac at r-project.org
>> <a href="https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-sig-mac__;!!DZ3fjg!7stuJB9l2bJBEDtQ81SDx3yhq3kJzrMe6i-rTuitazSUvx3qnMvZWHj1AhhYbrhMDRPdYJpEtaZe3KfnYw$">https://stat.ethz.ch/mailman/listinfo/r-sig-mac</a>
> -- 
> John Fox, Professor Emeritus
> McMaster University
> Hamilton, Ontario, Canada
> web: <a href="https://urldefense.com/v3/__https://socialsciences.mcmaster.ca/jfox/__;!!DZ3fjg!7stuJB9l2bJBEDtQ81SDx3yhq3kJzrMe6i-rTuitazSUvx3qnMvZWHj1AhhYbrhMDRPdYJpEtaay1yPBug$">https://socialsciences.mcmaster.ca/jfox/</a>
> 


From j@me@@|@he@ter @end|ng |rom gm@||@com  Mon May  2 19:08:01 2022
From: j@me@@|@he@ter @end|ng |rom gm@||@com (Jim Hester)
Date: Mon, 2 May 2022 13:08:01 -0400
Subject: [R-SIG-Mac] CRAN installer for macOS - directory permissions
In-Reply-To: <1de0018b-addd-2aed-4f00-dd4a86b08574@gmail.com>
References: <36345395-F4E6-4069-9900-990E283FA7AC@gmail.com>
 <9200B51A-3A42-42B1-8E1F-4A31C61D5AFA@R-project.org>
 <4F79D380-A4F5-4562-97C2-7B0C4693EEB7@gmail.com>
 <290E0344-9E1B-4979-B211-321B0633C606@R-project.org>
 <21CB0991-A1A8-4F36-B151-93AD204D7A09@gmail.com>
 <1de0018b-addd-2aed-4f00-dd4a86b08574@gmail.com>
Message-ID: <CAD6tx96Jeh8Lur8wQaZ-nUWpqwQddjoLy1=MdQzX7zYJJEht3g@mail.gmail.com>

I agree with Patrick that if the macOS behavior was more like the
default on linux it would benefit most users on macOS. His proposal to
change the group writability of the system library seems a good one to
me.

The current behavior (installing by default into the system library)
is quite surprising to users when they install a new version of R
(even just a new patch version) and they lose their entire package
library. It causes some users to avoid updating R frequently as a
result.

As far as R.app having an option for this, that is good, unfortunately
many users aren't using R.app, often they are either using R through
RStudio or using the command line version of R directly. In these
cases it is not as obvious they could install packages to a user
library.

Jim

On Sun, May 1, 2022 at 9:12 AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>
> On 30/04/2022 2:58 p.m., Patrick Schratz wrote:
> >     They don't go there "silently" as in unnoticed - they go there if
> >     you instruct R to do so. That's why there is an explicit choice in
> >     the Installer. Otherwise regular R rules apply.
> >
> > Where is this choice in the installer? I don?t see a menu/setting which
> > users could change to install packages into a user lib instead of the
> > system lib (if they are part of the |admin| group).
> > To me, they go there if the lib is writable - and ?the common? R user
> > does not know that the system lib is writeable by default.
>
> I think Simon is talking about the package installer in R.app and you
> are talking about the installer for R itself.  The package installer
> dialog in R.app has a pretty clear section called Install Location.
>
> Duncan Murdoch
>
> >
> >     It only does so for admin users. Unlike "managed" unix systems, on
> >     macOS you have essentially two situations:
> >
> >     On a "personal" machine (like laptop) the user is the main user and
> >     admin. Therefore it makes a lot more sense for the user to use a
> >     single location for managing packages which is at the system level.
> >     This also allows easy R upgrades. In addition, locations in user
> >     home raise a lot of issues (see the various discussion where this
> >     bites people on Windows) due to interactions with software that does
> >     mirroring, backups etc.. Hence this approach "just works" as one
> >     would expect on a Mac.
> >
> > To be clear: I don?t question the system-wide installation and I think
> > this is good as is (this also happens on Linux).
> > I am questioning the group write permissions for the system lib.
> >
> >     If the user wishes to use his/her private library, it is trivial -
> >     just click on "At User Level" and from then on all packages are
> >     managed user's local library just like on any other platform.
> >
> > I might be missing something obvious but where is this option ?at the
> > user level?? I assumed you?re talking about the official |.dmg|
> > installer - which does not have such an option AFAICS?
> >
> >     On a "managed" Mac the user is not an admin and therefore the
> >     behavior makes no difference. The status quo just makes it easier
> >     for admins to manage the shared library, but in reality this doesn't
> >     matter as one would assume the admins know what they are doing.
> >
> > I disagree on this, especially the point ?makes it easier for admins to
> > manage the shared library?.
> > Admins should (and will) always be able to manage the system lib /after/
> > authenticating (as on Linux). The authentication step does not really
> > make a difference in practice for admins and is required in almost all
> > places where system-wide changes are desired.
> >
> > This is also the /core/ of the whole discussion: 775 vs 755 (WRT to
> > directory permissions).
> > I don?t see any (strong) reason that would result in 775 > 755.
> > (If so, then the default should probably also be changed on Linux.)
> > In a previous message, Kevin Ushey also agreed on the point that
> > explicit authorization should be required to write into the system lib.
> > I assume there might be many more people who would actually agree on
> > this 755 being preferable in this situation.
> > How can a proposal be phrased to reconsider this setting that is
> > evaluated by a representative group of people?
> > I am not claiming to be right but I?d be interested in a multi-person
> > evaluation of this setting rather than keeping this at a
> > person-to-person discussion level.
> >
> >     Well, having administered company-wide R installations in large
> >     companies for almost two decades I'd strongly disagree. As an admin
> >     you want as few user-installed packages as possible, because they
> >     are guaranteed to cause problems. You want to limit this for things
> >     like development of packages where you want the stable version
> >     globally and development version locally (and this is not just me -
> >     have a look how the top tech companies manage their software). You
> >     have a reliable, stable central location - if you don't do that then
> >     you'll have n libraries to manage for n users which is absolutely
> >     not sustainable as users will break their libraries and you cannot
> >     even upgrade R. Also having a central, shared library is crucial for
> >     collaboration. Unlike in Python in R it actually works since R and
> >     CRAN doesn't allow randomly breaking reverse-dependencies.
> >
> > As a system engineer and admin myself (for several ?large?
> > companies/institutions), I kindly disagree on your view here.
> > User packages are not a problem but /a feature/, everyone can install
> > the versions they need for their project.
> > They don?t interfere with packages from other users and are not forced
> > go with the update interval of an admin.
> > With the additional use of renv (thanks Kevin!), redundancy is highly
> > reduced as a shared cache can be used from with users can simply use
> > symlinks rather than installing the x-th copy of the same R package
> > version. But this is partly off-topic WRT to the actual discussion.
> >
> > Overall this sub-discussion part might come down to the philosophy of
> > having a ?centrally managed, unflexible admin installation? or a
> > ?centrally managed, partly-flexible admin installation? where only the R
> > versions and system libs are managed but users have the freedom to
> > install any R packages they want.
> > Also in ?my? philosophy, it?s not about ?upgrading? R and removing the
> > previous version but adding new versions as they come in and keeping
> > previous ones - for the purpose of reproducibility.
> > I usually keep the latest patch version of a minor version and aim to
> > provide a consistent R environment for various minor versions where
> > users are guaranteed to be able to work with that minor version in a
> > flexible way (i.e. by installing user packages as they want) for many
> > years ahead.
> >
> >     As mentioned before and above I disagree. The proposal doesn't
> >     matter for managed Macs but would negatively affect users that are
> >     single-user admins and since that is typically the case for the
> >     majority of Mac R users (as they typically are on their personal
> >     machines) I don't see any upshot. All it would do is to prevent
> >     typical R users to install packages directly.
> >
> > How would it affect single-user admins in a negative way?
> > They can
> >
> >   * still install packages per R minor version into a dedicated user library
> >   * install multiple R minor versions side by side
> >   * actually enjoy the same behavior as on Linux
> >
> >     All it would do is to prevent typical R users to install packages
> >     directly.
> >
> > I don?t understand this point. It would behave similar as on Linux,
> > where users are prompted to create a user library (on first use and if
> > non exists yet).
> >
> > As you can see, the overall discussion topic is quite important to me
> > and I am still convinced that the current state on macOS is suboptimal.
> > Thanks for your time and sharing your thoughts.
> >
> > Cheers
> > Patrick
> >
> > On 25 Apr 2022, at 1:46, Simon Urbanek wrote:
> >
> >     Patrick,
> >
> >     sorry fo the delayed reply - this was not a quick e-mail so I had to
> >     find time after the release :)
> >
> >         On Apr 3, 2022, at 8:26 PM, Patrick Schratz
> >         <patrick.schratz at gmail.com> wrote:
> >
> >         Hi Simon,
> >
> >         thanks for your extensive reply.
> >
> >         The choice is deliberate: the admin group on macOS corresponds
> >         to users that are allowed to install system-wide software so it
> >         allows all admins on the machine to install packages which is
> >         the expected way on macOS.
> >
> >         I think this choice is unfortunate as it contrasts with existing
> >         behavior on other platforms where one needs to explicitly
> >         request admin privileges by either using sudo or starting R as
> >         an admin.
> >         On macOS, packages just go into the system lib ?silently?
> >         because of the write permissions granted via the admin group.
> >         See also my comments further down for more details on this.
> >
> >     They don't go there "silently" as in unnoticed - they go there if
> >     you instruct R to do so. That's why there is an explicit choice in
> >     the Installer. Otherwise regular R rules apply.
> >
> >         Also the versioning of the R framework as x.y is also deliberate
> >         - upgrading R to a new patch version does *not* require
> >         re-installation of packages, they work by design so in fact the
> >         system location is the safest way to do that. Also note that
> >         packages are never removed by the installer.
> >
> >         Thanks, I am aware that a patch update does not require a
> >         reinstallation as the packages are functional across minor versions.
> >
> >         I checked again and was indeed wrong, patch updates from the
> >         CRAN installer do not remove additional custom packages in the
> >         system lib.
> >         I was confused by some custom approaches of mine which cause
> >         this behavior - sorry for this!
> >
> >         So out of the items listed in "The problem" they are all not
> >         true with the exception of the comparison with the other
> >         platforms, but even that difference is very subtle as it only
> >         affects the default on the first installation and not regular
> >         use (and I'm, not even sure it that is true since admin users
> >         can still install in the system location on other platforms).
> >
> >         On Linux you would need to do explicitly invoke sudo R to allow
> >         writing into the system lib.
> >         The issue on macOS is that a regular start of R allows system
> >         lib write permissions.
> >         In my current view I think a similar behavior as on Linux would
> >         be great, i.e. to explicitly having to request admin privileges
> >         for this task.
> >
> >     It only does so for admin users. Unlike "managed" unix systems, on
> >     macOS you have essentially two situations:
> >
> >     On a "personal" machine (like laptop) the user is the main user and
> >     admin. Therefore it makes a lot more sense for the user to use a
> >     single location for managing packages which is at the system level.
> >     This also allows easy R upgrades. In addition, locations in user
> >     home raise a lot of issues (see the various discussion where this
> >     bites people on Windows) due to interactions with software that does
> >     mirroring, backups etc.. Hence this approach "just works" as one
> >     would expect on a Mac. If the user wishes to use his/her private
> >     library, it is trivial - just click on "At User Level" and from then
> >     on all packages are managed user's local library just like on any
> >     other platform.
> >
> >     On a "managed" Mac the user is not an admin and therefore the
> >     behavior makes no difference. The status quo just makes it easier
> >     for admins to manage the shared library, but in reality this doesn't
> >     matter as one would assume the admins know what they are doing.
> >
> >         I don?t understand the part ?as it only affects the default on
> >         the first installation and not regular use? of your reply -
> >         could you clarify this?
> >         Unless a user creates a user lib manually, packages will always
> >         go into the system lib - not only on first use - but I might be
> >         misunderstanding your comment here.
> >
> >         I would argue that the current setup tends to be a lot safer
> >         than the alternatives, because it allows commonly used packages
> >         to be installed at the system level and private packages to be
> >         installed at user level. This is also the design typically used
> >         on shared machines, where you separate local packages from user
> >         packages where local ones are installed by administrators - so
> >         exactly the same setup. Moreover R upgrades are a lot cleaner,
> >         since you can easily upgrade all system packages at once so you
> >         don't have to worry about individual users having stale packages
> >         - the biggest problem for admins.
> >
> >         Yes and no.
> >         Sometimes system admins want to install certain packages
> >         globally - however, I never do so for the following reason:
> >         Often this will lead to multiple package installations, i.e. one
> >         in the syslib and one in the user lib (if the user installs the
> >         package again for some reason which quite often happens).
> >         Often these duplicated packages will have different versions and
> >         users are confused which one is actually loaded (the user lib
> >         one is as it is first in the path).
> >
> >         Aside from this practical point, Macs are rarely used in a
> >         shared way.
> >         And even if, I?d highly favor having to request write
> >         permissions into the syslib rather it happening by default.
> >
> >         Imagine a scenario where the admin of a shared Mac constantly
> >         writes into the syslib (because this is the default). This
> >         syslib is then also used by other non-admin users on the system.
> >         I don?t think this is a desired scenario and might cause lot?s
> >         of confusion (not even mentioning the fact if all people in this
> >         scenario are aware what?s going on given that this is a niche
> >         topic).
> >         Here I think a one-time central installation of R and then only
> >         working with user libs (as on Linux) would be preferable.
> >
> >     Well, having administered company-wide R installations in large
> >     companies for almost two decades I'd strongly disagree. As an admin
> >     you want as few user-installed packages as possible, because they
> >     are guaranteed to cause problems. You want to limit this for things
> >     like development of packages where you want the stable version
> >     globally and development version locally (and this is not just me -
> >     have a look how the top tech companies manage their software). You
> >     have a reliable, stable central location - if you don't do that then
> >     you'll have n libraries to manage for n users which is absolutely
> >     not sustainable as users will break their libraries and you cannot
> >     even upgrade R. Also having a central, shared library is crucial for
> >     collaboration. Unlike in Python in R it actually works since R and
> >     CRAN doesn't allow randomly breaking reverse-dependencies.
> >
> >          From a technical perspective, I know that setting root:root on
> >         macOS is not possible. My proposed change to 755 (and leaving
> >         root:admin) would however exactly mimic this (and the one of
> >         Linux installs) behavior:
> >
> >         ? admins would need to do sudo R to install into the system library
> >         ? otherwise they are prompted to create a user library
> >         Which downsides would this approach have? Currently I don?t see
> >         any. It would even harmonize CRAN installer behavior across
> >         platforms.
> >
> >         I'd be happy to hear from more Mac user if there are reasons to
> >         change the default, but as I outlined the choices were
> >         deliberate after weighting the pros and cons. In my view the
> >         major issue with the proposal it that is would prevent sharing
> >         of packages, make R upgrades a lot harder and prevent admin
> >         users from using the current tools for package management - and
> >         that includes the ability to separate system and user packages
> >         on single-user machines.
> >
> >         I?ll try to vision the practical changes of this:
> >
> >         ? Patch update experience would not change as custom packages
> >         will be in the user lib for the respective minor version (by
> >         default)
> >         ? Admins are still able to install into the system lib when
> >         using sudo R
> >         ? AFAICS admins will still be able to separate system and user
> >         packages as they can use sudo R for syslib installs. To me, the
> >         proposed change would even make the behaviour more clear than
> >         before (which requires to create a hidden folder (user lib) in
> >         the right place to actually use a user lib).
> >         Let me know if I overlook something - but currently I don?t see
> >         any downside but various positive impacts.
> >
> >     As mentioned before and above I disagree. The proposal doesn't
> >     matter for managed Macs but would negatively affect users that are
> >     single-user admins and since that is typically the case for the
> >     majority of Mac R users (as they typically are on their personal
> >     machines) I don't see any upshot. All it would do is to prevent
> >     typical R users to install packages directly.
> >
> >         Last, I wanted to ask if the source code for the CRAN installer
> >         is publicly available? I could not find it and would be
> >         interested to take a look into it. If this is not possible for
> >         some reason, I would also be interested in getting to know the
> >         reason for this decision.
> >
> >     Everything is in the R SVN, the R build and release system is in
> >     https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4
> >     <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4>
> >     and Apple Installer packaging is in
> >     https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging
> >     <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging>
> >     and the relevant postflight script is in
> >     https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging/scripts-R-fw/postflight
> >     <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging/scripts-R-fw/postflight>
> >
> >         On Apr 13, 2022, at 8:43 PM, Patrick Schratz
> >         <patrick.schratz at gmail.com> wrote:
> >
> >         Related to this Q: Are the macOS CRAN policies actively
> >         discussed by a team of people (who might eventually also be
> >         willing to share their thoughts or could be addressed with such
> >         questions) or are you solely responsible for it?
> >
> >     CRAN is an entire team, so yes, but as for anything Mac-related it
> >     includes R-core and other stake holders that have expressed interest
> >     before (e.g. Bioconductor). Obviously, this (R-SIG-Mac) is also a
> >     good place as that includes anyone who cares about R on macOS.
> >
> >     Cheers,
> >
> >     Simon
> >
> >
> > _______________________________________________
> > R-SIG-Mac mailing list
> > R-SIG-Mac at r-project.org
> > https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon May  2 20:00:43 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 2 May 2022 14:00:43 -0400
Subject: [R-SIG-Mac] CRAN installer for macOS - directory permissions
In-Reply-To: <CAD6tx96Jeh8Lur8wQaZ-nUWpqwQddjoLy1=MdQzX7zYJJEht3g@mail.gmail.com>
References: <36345395-F4E6-4069-9900-990E283FA7AC@gmail.com>
 <9200B51A-3A42-42B1-8E1F-4A31C61D5AFA@R-project.org>
 <4F79D380-A4F5-4562-97C2-7B0C4693EEB7@gmail.com>
 <290E0344-9E1B-4979-B211-321B0633C606@R-project.org>
 <21CB0991-A1A8-4F36-B151-93AD204D7A09@gmail.com>
 <1de0018b-addd-2aed-4f00-dd4a86b08574@gmail.com>
 <CAD6tx96Jeh8Lur8wQaZ-nUWpqwQddjoLy1=MdQzX7zYJJEht3g@mail.gmail.com>
Message-ID: <8a3ee598-88af-f8f6-251a-163a87887044@gmail.com>

On 02/05/2022 1:08 p.m., Jim Hester wrote:
> I agree with Patrick that if the macOS behavior was more like the
> default on linux it would benefit most users on macOS. His proposal to
> change the group writability of the system library seems a good one to
> me.
> 
> The current behavior (installing by default into the system library)
> is quite surprising to users when they install a new version of R
> (even just a new patch version) and they lose their entire package
> library. It causes some users to avoid updating R frequently as a
> result.
> 
> As far as R.app having an option for this, that is good, unfortunately
> many users aren't using R.app, often they are either using R through
> RStudio or using the command line version of R directly. In these
> cases it is not as obvious they could install packages to a user
> library.

I think migrating packages is something the installer could do.

I'm not sure I understand the details of the proposed change.  I'm in 
the admin group on my laptop, because I'm the only user.  So when I 
install R using the MacOS installer, where should it be installed, and 
where should it install packages?

I would find it strange if the installer wanted to install R.app 
anywhere but the system /Applications folder.  That's where almost 
everything else I use gets installed.

The installer also installs two kinds of R packages:  base and 
recommended ones.  Base packages are closely tied to the internals and 
can't be updated without updating everything, so it makes sense to 
install them in the system library if R itself is going there.

But what about recommended packages?  They are contributed packages, and 
they are often updated between R releases.  Should they go by default 
into a user library?

Duncan Murdoch


> 
> Jim
> 
> On Sun, May 1, 2022 at 9:12 AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>
>> On 30/04/2022 2:58 p.m., Patrick Schratz wrote:
>>>      They don't go there "silently" as in unnoticed - they go there if
>>>      you instruct R to do so. That's why there is an explicit choice in
>>>      the Installer. Otherwise regular R rules apply.
>>>
>>> Where is this choice in the installer? I don?t see a menu/setting which
>>> users could change to install packages into a user lib instead of the
>>> system lib (if they are part of the |admin| group).
>>> To me, they go there if the lib is writable - and ?the common? R user
>>> does not know that the system lib is writeable by default.
>>
>> I think Simon is talking about the package installer in R.app and you
>> are talking about the installer for R itself.  The package installer
>> dialog in R.app has a pretty clear section called Install Location.
>>
>> Duncan Murdoch
>>
>>>
>>>      It only does so for admin users. Unlike "managed" unix systems, on
>>>      macOS you have essentially two situations:
>>>
>>>      On a "personal" machine (like laptop) the user is the main user and
>>>      admin. Therefore it makes a lot more sense for the user to use a
>>>      single location for managing packages which is at the system level.
>>>      This also allows easy R upgrades. In addition, locations in user
>>>      home raise a lot of issues (see the various discussion where this
>>>      bites people on Windows) due to interactions with software that does
>>>      mirroring, backups etc.. Hence this approach "just works" as one
>>>      would expect on a Mac.
>>>
>>> To be clear: I don?t question the system-wide installation and I think
>>> this is good as is (this also happens on Linux).
>>> I am questioning the group write permissions for the system lib.
>>>
>>>      If the user wishes to use his/her private library, it is trivial -
>>>      just click on "At User Level" and from then on all packages are
>>>      managed user's local library just like on any other platform.
>>>
>>> I might be missing something obvious but where is this option ?at the
>>> user level?? I assumed you?re talking about the official |.dmg|
>>> installer - which does not have such an option AFAICS?
>>>
>>>      On a "managed" Mac the user is not an admin and therefore the
>>>      behavior makes no difference. The status quo just makes it easier
>>>      for admins to manage the shared library, but in reality this doesn't
>>>      matter as one would assume the admins know what they are doing.
>>>
>>> I disagree on this, especially the point ?makes it easier for admins to
>>> manage the shared library?.
>>> Admins should (and will) always be able to manage the system lib /after/
>>> authenticating (as on Linux). The authentication step does not really
>>> make a difference in practice for admins and is required in almost all
>>> places where system-wide changes are desired.
>>>
>>> This is also the /core/ of the whole discussion: 775 vs 755 (WRT to
>>> directory permissions).
>>> I don?t see any (strong) reason that would result in 775 > 755.
>>> (If so, then the default should probably also be changed on Linux.)
>>> In a previous message, Kevin Ushey also agreed on the point that
>>> explicit authorization should be required to write into the system lib.
>>> I assume there might be many more people who would actually agree on
>>> this 755 being preferable in this situation.
>>> How can a proposal be phrased to reconsider this setting that is
>>> evaluated by a representative group of people?
>>> I am not claiming to be right but I?d be interested in a multi-person
>>> evaluation of this setting rather than keeping this at a
>>> person-to-person discussion level.
>>>
>>>      Well, having administered company-wide R installations in large
>>>      companies for almost two decades I'd strongly disagree. As an admin
>>>      you want as few user-installed packages as possible, because they
>>>      are guaranteed to cause problems. You want to limit this for things
>>>      like development of packages where you want the stable version
>>>      globally and development version locally (and this is not just me -
>>>      have a look how the top tech companies manage their software). You
>>>      have a reliable, stable central location - if you don't do that then
>>>      you'll have n libraries to manage for n users which is absolutely
>>>      not sustainable as users will break their libraries and you cannot
>>>      even upgrade R. Also having a central, shared library is crucial for
>>>      collaboration. Unlike in Python in R it actually works since R and
>>>      CRAN doesn't allow randomly breaking reverse-dependencies.
>>>
>>> As a system engineer and admin myself (for several ?large?
>>> companies/institutions), I kindly disagree on your view here.
>>> User packages are not a problem but /a feature/, everyone can install
>>> the versions they need for their project.
>>> They don?t interfere with packages from other users and are not forced
>>> go with the update interval of an admin.
>>> With the additional use of renv (thanks Kevin!), redundancy is highly
>>> reduced as a shared cache can be used from with users can simply use
>>> symlinks rather than installing the x-th copy of the same R package
>>> version. But this is partly off-topic WRT to the actual discussion.
>>>
>>> Overall this sub-discussion part might come down to the philosophy of
>>> having a ?centrally managed, unflexible admin installation? or a
>>> ?centrally managed, partly-flexible admin installation? where only the R
>>> versions and system libs are managed but users have the freedom to
>>> install any R packages they want.
>>> Also in ?my? philosophy, it?s not about ?upgrading? R and removing the
>>> previous version but adding new versions as they come in and keeping
>>> previous ones - for the purpose of reproducibility.
>>> I usually keep the latest patch version of a minor version and aim to
>>> provide a consistent R environment for various minor versions where
>>> users are guaranteed to be able to work with that minor version in a
>>> flexible way (i.e. by installing user packages as they want) for many
>>> years ahead.
>>>
>>>      As mentioned before and above I disagree. The proposal doesn't
>>>      matter for managed Macs but would negatively affect users that are
>>>      single-user admins and since that is typically the case for the
>>>      majority of Mac R users (as they typically are on their personal
>>>      machines) I don't see any upshot. All it would do is to prevent
>>>      typical R users to install packages directly.
>>>
>>> How would it affect single-user admins in a negative way?
>>> They can
>>>
>>>    * still install packages per R minor version into a dedicated user library
>>>    * install multiple R minor versions side by side
>>>    * actually enjoy the same behavior as on Linux
>>>
>>>      All it would do is to prevent typical R users to install packages
>>>      directly.
>>>
>>> I don?t understand this point. It would behave similar as on Linux,
>>> where users are prompted to create a user library (on first use and if
>>> non exists yet).
>>>
>>> As you can see, the overall discussion topic is quite important to me
>>> and I am still convinced that the current state on macOS is suboptimal.
>>> Thanks for your time and sharing your thoughts.
>>>
>>> Cheers
>>> Patrick
>>>
>>> On 25 Apr 2022, at 1:46, Simon Urbanek wrote:
>>>
>>>      Patrick,
>>>
>>>      sorry fo the delayed reply - this was not a quick e-mail so I had to
>>>      find time after the release :)
>>>
>>>          On Apr 3, 2022, at 8:26 PM, Patrick Schratz
>>>          <patrick.schratz at gmail.com> wrote:
>>>
>>>          Hi Simon,
>>>
>>>          thanks for your extensive reply.
>>>
>>>          The choice is deliberate: the admin group on macOS corresponds
>>>          to users that are allowed to install system-wide software so it
>>>          allows all admins on the machine to install packages which is
>>>          the expected way on macOS.
>>>
>>>          I think this choice is unfortunate as it contrasts with existing
>>>          behavior on other platforms where one needs to explicitly
>>>          request admin privileges by either using sudo or starting R as
>>>          an admin.
>>>          On macOS, packages just go into the system lib ?silently?
>>>          because of the write permissions granted via the admin group.
>>>          See also my comments further down for more details on this.
>>>
>>>      They don't go there "silently" as in unnoticed - they go there if
>>>      you instruct R to do so. That's why there is an explicit choice in
>>>      the Installer. Otherwise regular R rules apply.
>>>
>>>          Also the versioning of the R framework as x.y is also deliberate
>>>          - upgrading R to a new patch version does *not* require
>>>          re-installation of packages, they work by design so in fact the
>>>          system location is the safest way to do that. Also note that
>>>          packages are never removed by the installer.
>>>
>>>          Thanks, I am aware that a patch update does not require a
>>>          reinstallation as the packages are functional across minor versions.
>>>
>>>          I checked again and was indeed wrong, patch updates from the
>>>          CRAN installer do not remove additional custom packages in the
>>>          system lib.
>>>          I was confused by some custom approaches of mine which cause
>>>          this behavior - sorry for this!
>>>
>>>          So out of the items listed in "The problem" they are all not
>>>          true with the exception of the comparison with the other
>>>          platforms, but even that difference is very subtle as it only
>>>          affects the default on the first installation and not regular
>>>          use (and I'm, not even sure it that is true since admin users
>>>          can still install in the system location on other platforms).
>>>
>>>          On Linux you would need to do explicitly invoke sudo R to allow
>>>          writing into the system lib.
>>>          The issue on macOS is that a regular start of R allows system
>>>          lib write permissions.
>>>          In my current view I think a similar behavior as on Linux would
>>>          be great, i.e. to explicitly having to request admin privileges
>>>          for this task.
>>>
>>>      It only does so for admin users. Unlike "managed" unix systems, on
>>>      macOS you have essentially two situations:
>>>
>>>      On a "personal" machine (like laptop) the user is the main user and
>>>      admin. Therefore it makes a lot more sense for the user to use a
>>>      single location for managing packages which is at the system level.
>>>      This also allows easy R upgrades. In addition, locations in user
>>>      home raise a lot of issues (see the various discussion where this
>>>      bites people on Windows) due to interactions with software that does
>>>      mirroring, backups etc.. Hence this approach "just works" as one
>>>      would expect on a Mac. If the user wishes to use his/her private
>>>      library, it is trivial - just click on "At User Level" and from then
>>>      on all packages are managed user's local library just like on any
>>>      other platform.
>>>
>>>      On a "managed" Mac the user is not an admin and therefore the
>>>      behavior makes no difference. The status quo just makes it easier
>>>      for admins to manage the shared library, but in reality this doesn't
>>>      matter as one would assume the admins know what they are doing.
>>>
>>>          I don?t understand the part ?as it only affects the default on
>>>          the first installation and not regular use? of your reply -
>>>          could you clarify this?
>>>          Unless a user creates a user lib manually, packages will always
>>>          go into the system lib - not only on first use - but I might be
>>>          misunderstanding your comment here.
>>>
>>>          I would argue that the current setup tends to be a lot safer
>>>          than the alternatives, because it allows commonly used packages
>>>          to be installed at the system level and private packages to be
>>>          installed at user level. This is also the design typically used
>>>          on shared machines, where you separate local packages from user
>>>          packages where local ones are installed by administrators - so
>>>          exactly the same setup. Moreover R upgrades are a lot cleaner,
>>>          since you can easily upgrade all system packages at once so you
>>>          don't have to worry about individual users having stale packages
>>>          - the biggest problem for admins.
>>>
>>>          Yes and no.
>>>          Sometimes system admins want to install certain packages
>>>          globally - however, I never do so for the following reason:
>>>          Often this will lead to multiple package installations, i.e. one
>>>          in the syslib and one in the user lib (if the user installs the
>>>          package again for some reason which quite often happens).
>>>          Often these duplicated packages will have different versions and
>>>          users are confused which one is actually loaded (the user lib
>>>          one is as it is first in the path).
>>>
>>>          Aside from this practical point, Macs are rarely used in a
>>>          shared way.
>>>          And even if, I?d highly favor having to request write
>>>          permissions into the syslib rather it happening by default.
>>>
>>>          Imagine a scenario where the admin of a shared Mac constantly
>>>          writes into the syslib (because this is the default). This
>>>          syslib is then also used by other non-admin users on the system.
>>>          I don?t think this is a desired scenario and might cause lot?s
>>>          of confusion (not even mentioning the fact if all people in this
>>>          scenario are aware what?s going on given that this is a niche
>>>          topic).
>>>          Here I think a one-time central installation of R and then only
>>>          working with user libs (as on Linux) would be preferable.
>>>
>>>      Well, having administered company-wide R installations in large
>>>      companies for almost two decades I'd strongly disagree. As an admin
>>>      you want as few user-installed packages as possible, because they
>>>      are guaranteed to cause problems. You want to limit this for things
>>>      like development of packages where you want the stable version
>>>      globally and development version locally (and this is not just me -
>>>      have a look how the top tech companies manage their software). You
>>>      have a reliable, stable central location - if you don't do that then
>>>      you'll have n libraries to manage for n users which is absolutely
>>>      not sustainable as users will break their libraries and you cannot
>>>      even upgrade R. Also having a central, shared library is crucial for
>>>      collaboration. Unlike in Python in R it actually works since R and
>>>      CRAN doesn't allow randomly breaking reverse-dependencies.
>>>
>>>           From a technical perspective, I know that setting root:root on
>>>          macOS is not possible. My proposed change to 755 (and leaving
>>>          root:admin) would however exactly mimic this (and the one of
>>>          Linux installs) behavior:
>>>
>>>          ? admins would need to do sudo R to install into the system library
>>>          ? otherwise they are prompted to create a user library
>>>          Which downsides would this approach have? Currently I don?t see
>>>          any. It would even harmonize CRAN installer behavior across
>>>          platforms.
>>>
>>>          I'd be happy to hear from more Mac user if there are reasons to
>>>          change the default, but as I outlined the choices were
>>>          deliberate after weighting the pros and cons. In my view the
>>>          major issue with the proposal it that is would prevent sharing
>>>          of packages, make R upgrades a lot harder and prevent admin
>>>          users from using the current tools for package management - and
>>>          that includes the ability to separate system and user packages
>>>          on single-user machines.
>>>
>>>          I?ll try to vision the practical changes of this:
>>>
>>>          ? Patch update experience would not change as custom packages
>>>          will be in the user lib for the respective minor version (by
>>>          default)
>>>          ? Admins are still able to install into the system lib when
>>>          using sudo R
>>>          ? AFAICS admins will still be able to separate system and user
>>>          packages as they can use sudo R for syslib installs. To me, the
>>>          proposed change would even make the behaviour more clear than
>>>          before (which requires to create a hidden folder (user lib) in
>>>          the right place to actually use a user lib).
>>>          Let me know if I overlook something - but currently I don?t see
>>>          any downside but various positive impacts.
>>>
>>>      As mentioned before and above I disagree. The proposal doesn't
>>>      matter for managed Macs but would negatively affect users that are
>>>      single-user admins and since that is typically the case for the
>>>      majority of Mac R users (as they typically are on their personal
>>>      machines) I don't see any upshot. All it would do is to prevent
>>>      typical R users to install packages directly.
>>>
>>>          Last, I wanted to ask if the source code for the CRAN installer
>>>          is publicly available? I could not find it and would be
>>>          interested to take a look into it. If this is not possible for
>>>          some reason, I would also be interested in getting to know the
>>>          reason for this decision.
>>>
>>>      Everything is in the R SVN, the R build and release system is in
>>>      https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4
>>>      <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4>
>>>      and Apple Installer packaging is in
>>>      https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging
>>>      <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging>
>>>      and the relevant postflight script is in
>>>      https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging/scripts-R-fw/postflight
>>>      <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging/scripts-R-fw/postflight>
>>>
>>>          On Apr 13, 2022, at 8:43 PM, Patrick Schratz
>>>          <patrick.schratz at gmail.com> wrote:
>>>
>>>          Related to this Q: Are the macOS CRAN policies actively
>>>          discussed by a team of people (who might eventually also be
>>>          willing to share their thoughts or could be addressed with such
>>>          questions) or are you solely responsible for it?
>>>
>>>      CRAN is an entire team, so yes, but as for anything Mac-related it
>>>      includes R-core and other stake holders that have expressed interest
>>>      before (e.g. Bioconductor). Obviously, this (R-SIG-Mac) is also a
>>>      good place as that includes anyone who cares about R on macOS.
>>>
>>>      Cheers,
>>>
>>>      Simon
>>>
>>>
>>> _______________________________________________
>>> R-SIG-Mac mailing list
>>> R-SIG-Mac at r-project.org
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>
>> _______________________________________________
>> R-SIG-Mac mailing list
>> R-SIG-Mac at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Mon May  2 21:00:06 2022
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Mon, 02 May 2022 12:00:06 -0700
Subject: [R-SIG-Mac] CRAN installer for macOS - directory permissions
In-Reply-To: <8a3ee598-88af-f8f6-251a-163a87887044@gmail.com>
References: <36345395-F4E6-4069-9900-990E283FA7AC@gmail.com>
 <9200B51A-3A42-42B1-8E1F-4A31C61D5AFA@R-project.org>
 <4F79D380-A4F5-4562-97C2-7B0C4693EEB7@gmail.com>
 <290E0344-9E1B-4979-B211-321B0633C606@R-project.org>
 <21CB0991-A1A8-4F36-B151-93AD204D7A09@gmail.com>
 <1de0018b-addd-2aed-4f00-dd4a86b08574@gmail.com>
 <CAD6tx96Jeh8Lur8wQaZ-nUWpqwQddjoLy1=MdQzX7zYJJEht3g@mail.gmail.com>
 <8a3ee598-88af-f8f6-251a-163a87887044@gmail.com>
Message-ID: <E3656023-72E4-42BE-8828-188A82C97065@dcn.davis.ca.us>

FWIW I lurk here not because I use MacOS regularly but because my wife does. However I find some of the conventions being discussed here puzzling.

System-wide software and support data is usually read-only for normal users on other OSes... avoiding having one user making changes that surprise another is one reason, and avoiding inter-account security leaks is another. Any desire to avoid duplication needs to be tempered by use of administrative privilege escalation. Group write-access does not conform with how this admin-vs-user normal practice is handled on other OSes.

It is not uncommon for reproducible research to specify that explicit versions of R and an project-specific selection of packages be used, which is kind of the opposite end of the library management spectrum. Whether such efforts manage to avoid duplication or not, bleeding those project-level decisions into the user-specific library would be just as troublesome as leaking user-specific package choices into the system library.

IMO the fact that any one computer happens to have only one user shouldn't change the default library setup. Even installing an update to a recommended package into the user library seems like a small price to pay for the overall consistency of security and behavioral isolation practices.

On May 2, 2022 11:00:43 AM PDT, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>On 02/05/2022 1:08 p.m., Jim Hester wrote:
>> I agree with Patrick that if the macOS behavior was more like the
>> default on linux it would benefit most users on macOS. His proposal to
>> change the group writability of the system library seems a good one to
>> me.
>> 
>> The current behavior (installing by default into the system library)
>> is quite surprising to users when they install a new version of R
>> (even just a new patch version) and they lose their entire package
>> library. It causes some users to avoid updating R frequently as a
>> result.
>> 
>> As far as R.app having an option for this, that is good, unfortunately
>> many users aren't using R.app, often they are either using R through
>> RStudio or using the command line version of R directly. In these
>> cases it is not as obvious they could install packages to a user
>> library.
>
>I think migrating packages is something the installer could do.
>
>I'm not sure I understand the details of the proposed change.  I'm in the admin group on my laptop, because I'm the only user.  So when I install R using the MacOS installer, where should it be installed, and where should it install packages?
>
>I would find it strange if the installer wanted to install R.app anywhere but the system /Applications folder.  That's where almost everything else I use gets installed.
>
>The installer also installs two kinds of R packages:  base and recommended ones.  Base packages are closely tied to the internals and can't be updated without updating everything, so it makes sense to install them in the system library if R itself is going there.
>
>But what about recommended packages?  They are contributed packages, and they are often updated between R releases.  Should they go by default into a user library?
>
>Duncan Murdoch
>
>
>> 
>> Jim
>> 
>> On Sun, May 1, 2022 at 9:12 AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>> 
>>> On 30/04/2022 2:58 p.m., Patrick Schratz wrote:
>>>>      They don't go there "silently" as in unnoticed - they go there if
>>>>      you instruct R to do so. That's why there is an explicit choice in
>>>>      the Installer. Otherwise regular R rules apply.
>>>> 
>>>> Where is this choice in the installer? I don?t see a menu/setting which
>>>> users could change to install packages into a user lib instead of the
>>>> system lib (if they are part of the |admin| group).
>>>> To me, they go there if the lib is writable - and ?the common? R user
>>>> does not know that the system lib is writeable by default.
>>> 
>>> I think Simon is talking about the package installer in R.app and you
>>> are talking about the installer for R itself.  The package installer
>>> dialog in R.app has a pretty clear section called Install Location.
>>> 
>>> Duncan Murdoch
>>> 
>>>> 
>>>>      It only does so for admin users. Unlike "managed" unix systems, on
>>>>      macOS you have essentially two situations:
>>>> 
>>>>      On a "personal" machine (like laptop) the user is the main user and
>>>>      admin. Therefore it makes a lot more sense for the user to use a
>>>>      single location for managing packages which is at the system level.
>>>>      This also allows easy R upgrades. In addition, locations in user
>>>>      home raise a lot of issues (see the various discussion where this
>>>>      bites people on Windows) due to interactions with software that does
>>>>      mirroring, backups etc.. Hence this approach "just works" as one
>>>>      would expect on a Mac.
>>>> 
>>>> To be clear: I don?t question the system-wide installation and I think
>>>> this is good as is (this also happens on Linux).
>>>> I am questioning the group write permissions for the system lib.
>>>> 
>>>>      If the user wishes to use his/her private library, it is trivial -
>>>>      just click on "At User Level" and from then on all packages are
>>>>      managed user's local library just like on any other platform.
>>>> 
>>>> I might be missing something obvious but where is this option ?at the
>>>> user level?? I assumed you?re talking about the official |.dmg|
>>>> installer - which does not have such an option AFAICS?
>>>> 
>>>>      On a "managed" Mac the user is not an admin and therefore the
>>>>      behavior makes no difference. The status quo just makes it easier
>>>>      for admins to manage the shared library, but in reality this doesn't
>>>>      matter as one would assume the admins know what they are doing.
>>>> 
>>>> I disagree on this, especially the point ?makes it easier for admins to
>>>> manage the shared library?.
>>>> Admins should (and will) always be able to manage the system lib /after/
>>>> authenticating (as on Linux). The authentication step does not really
>>>> make a difference in practice for admins and is required in almost all
>>>> places where system-wide changes are desired.
>>>> 
>>>> This is also the /core/ of the whole discussion: 775 vs 755 (WRT to
>>>> directory permissions).
>>>> I don?t see any (strong) reason that would result in 775 > 755.
>>>> (If so, then the default should probably also be changed on Linux.)
>>>> In a previous message, Kevin Ushey also agreed on the point that
>>>> explicit authorization should be required to write into the system lib.
>>>> I assume there might be many more people who would actually agree on
>>>> this 755 being preferable in this situation.
>>>> How can a proposal be phrased to reconsider this setting that is
>>>> evaluated by a representative group of people?
>>>> I am not claiming to be right but I?d be interested in a multi-person
>>>> evaluation of this setting rather than keeping this at a
>>>> person-to-person discussion level.
>>>> 
>>>>      Well, having administered company-wide R installations in large
>>>>      companies for almost two decades I'd strongly disagree. As an admin
>>>>      you want as few user-installed packages as possible, because they
>>>>      are guaranteed to cause problems. You want to limit this for things
>>>>      like development of packages where you want the stable version
>>>>      globally and development version locally (and this is not just me -
>>>>      have a look how the top tech companies manage their software). You
>>>>      have a reliable, stable central location - if you don't do that then
>>>>      you'll have n libraries to manage for n users which is absolutely
>>>>      not sustainable as users will break their libraries and you cannot
>>>>      even upgrade R. Also having a central, shared library is crucial for
>>>>      collaboration. Unlike in Python in R it actually works since R and
>>>>      CRAN doesn't allow randomly breaking reverse-dependencies.
>>>> 
>>>> As a system engineer and admin myself (for several ?large?
>>>> companies/institutions), I kindly disagree on your view here.
>>>> User packages are not a problem but /a feature/, everyone can install
>>>> the versions they need for their project.
>>>> They don?t interfere with packages from other users and are not forced
>>>> go with the update interval of an admin.
>>>> With the additional use of renv (thanks Kevin!), redundancy is highly
>>>> reduced as a shared cache can be used from with users can simply use
>>>> symlinks rather than installing the x-th copy of the same R package
>>>> version. But this is partly off-topic WRT to the actual discussion.
>>>> 
>>>> Overall this sub-discussion part might come down to the philosophy of
>>>> having a ?centrally managed, unflexible admin installation? or a
>>>> ?centrally managed, partly-flexible admin installation? where only the R
>>>> versions and system libs are managed but users have the freedom to
>>>> install any R packages they want.
>>>> Also in ?my? philosophy, it?s not about ?upgrading? R and removing the
>>>> previous version but adding new versions as they come in and keeping
>>>> previous ones - for the purpose of reproducibility.
>>>> I usually keep the latest patch version of a minor version and aim to
>>>> provide a consistent R environment for various minor versions where
>>>> users are guaranteed to be able to work with that minor version in a
>>>> flexible way (i.e. by installing user packages as they want) for many
>>>> years ahead.
>>>> 
>>>>      As mentioned before and above I disagree. The proposal doesn't
>>>>      matter for managed Macs but would negatively affect users that are
>>>>      single-user admins and since that is typically the case for the
>>>>      majority of Mac R users (as they typically are on their personal
>>>>      machines) I don't see any upshot. All it would do is to prevent
>>>>      typical R users to install packages directly.
>>>> 
>>>> How would it affect single-user admins in a negative way?
>>>> They can
>>>> 
>>>>    * still install packages per R minor version into a dedicated user library
>>>>    * install multiple R minor versions side by side
>>>>    * actually enjoy the same behavior as on Linux
>>>> 
>>>>      All it would do is to prevent typical R users to install packages
>>>>      directly.
>>>> 
>>>> I don?t understand this point. It would behave similar as on Linux,
>>>> where users are prompted to create a user library (on first use and if
>>>> non exists yet).
>>>> 
>>>> As you can see, the overall discussion topic is quite important to me
>>>> and I am still convinced that the current state on macOS is suboptimal.
>>>> Thanks for your time and sharing your thoughts.
>>>> 
>>>> Cheers
>>>> Patrick
>>>> 
>>>> On 25 Apr 2022, at 1:46, Simon Urbanek wrote:
>>>> 
>>>>      Patrick,
>>>> 
>>>>      sorry fo the delayed reply - this was not a quick e-mail so I had to
>>>>      find time after the release :)
>>>> 
>>>>          On Apr 3, 2022, at 8:26 PM, Patrick Schratz
>>>>          <patrick.schratz at gmail.com> wrote:
>>>> 
>>>>          Hi Simon,
>>>> 
>>>>          thanks for your extensive reply.
>>>> 
>>>>          The choice is deliberate: the admin group on macOS corresponds
>>>>          to users that are allowed to install system-wide software so it
>>>>          allows all admins on the machine to install packages which is
>>>>          the expected way on macOS.
>>>> 
>>>>          I think this choice is unfortunate as it contrasts with existing
>>>>          behavior on other platforms where one needs to explicitly
>>>>          request admin privileges by either using sudo or starting R as
>>>>          an admin.
>>>>          On macOS, packages just go into the system lib ?silently?
>>>>          because of the write permissions granted via the admin group.
>>>>          See also my comments further down for more details on this.
>>>> 
>>>>      They don't go there "silently" as in unnoticed - they go there if
>>>>      you instruct R to do so. That's why there is an explicit choice in
>>>>      the Installer. Otherwise regular R rules apply.
>>>> 
>>>>          Also the versioning of the R framework as x.y is also deliberate
>>>>          - upgrading R to a new patch version does *not* require
>>>>          re-installation of packages, they work by design so in fact the
>>>>          system location is the safest way to do that. Also note that
>>>>          packages are never removed by the installer.
>>>> 
>>>>          Thanks, I am aware that a patch update does not require a
>>>>          reinstallation as the packages are functional across minor versions.
>>>> 
>>>>          I checked again and was indeed wrong, patch updates from the
>>>>          CRAN installer do not remove additional custom packages in the
>>>>          system lib.
>>>>          I was confused by some custom approaches of mine which cause
>>>>          this behavior - sorry for this!
>>>> 
>>>>          So out of the items listed in "The problem" they are all not
>>>>          true with the exception of the comparison with the other
>>>>          platforms, but even that difference is very subtle as it only
>>>>          affects the default on the first installation and not regular
>>>>          use (and I'm, not even sure it that is true since admin users
>>>>          can still install in the system location on other platforms).
>>>> 
>>>>          On Linux you would need to do explicitly invoke sudo R to allow
>>>>          writing into the system lib.
>>>>          The issue on macOS is that a regular start of R allows system
>>>>          lib write permissions.
>>>>          In my current view I think a similar behavior as on Linux would
>>>>          be great, i.e. to explicitly having to request admin privileges
>>>>          for this task.
>>>> 
>>>>      It only does so for admin users. Unlike "managed" unix systems, on
>>>>      macOS you have essentially two situations:
>>>> 
>>>>      On a "personal" machine (like laptop) the user is the main user and
>>>>      admin. Therefore it makes a lot more sense for the user to use a
>>>>      single location for managing packages which is at the system level.
>>>>      This also allows easy R upgrades. In addition, locations in user
>>>>      home raise a lot of issues (see the various discussion where this
>>>>      bites people on Windows) due to interactions with software that does
>>>>      mirroring, backups etc.. Hence this approach "just works" as one
>>>>      would expect on a Mac. If the user wishes to use his/her private
>>>>      library, it is trivial - just click on "At User Level" and from then
>>>>      on all packages are managed user's local library just like on any
>>>>      other platform.
>>>> 
>>>>      On a "managed" Mac the user is not an admin and therefore the
>>>>      behavior makes no difference. The status quo just makes it easier
>>>>      for admins to manage the shared library, but in reality this doesn't
>>>>      matter as one would assume the admins know what they are doing.
>>>> 
>>>>          I don?t understand the part ?as it only affects the default on
>>>>          the first installation and not regular use? of your reply -
>>>>          could you clarify this?
>>>>          Unless a user creates a user lib manually, packages will always
>>>>          go into the system lib - not only on first use - but I might be
>>>>          misunderstanding your comment here.
>>>> 
>>>>          I would argue that the current setup tends to be a lot safer
>>>>          than the alternatives, because it allows commonly used packages
>>>>          to be installed at the system level and private packages to be
>>>>          installed at user level. This is also the design typically used
>>>>          on shared machines, where you separate local packages from user
>>>>          packages where local ones are installed by administrators - so
>>>>          exactly the same setup. Moreover R upgrades are a lot cleaner,
>>>>          since you can easily upgrade all system packages at once so you
>>>>          don't have to worry about individual users having stale packages
>>>>          - the biggest problem for admins.
>>>> 
>>>>          Yes and no.
>>>>          Sometimes system admins want to install certain packages
>>>>          globally - however, I never do so for the following reason:
>>>>          Often this will lead to multiple package installations, i.e. one
>>>>          in the syslib and one in the user lib (if the user installs the
>>>>          package again for some reason which quite often happens).
>>>>          Often these duplicated packages will have different versions and
>>>>          users are confused which one is actually loaded (the user lib
>>>>          one is as it is first in the path).
>>>> 
>>>>          Aside from this practical point, Macs are rarely used in a
>>>>          shared way.
>>>>          And even if, I?d highly favor having to request write
>>>>          permissions into the syslib rather it happening by default.
>>>> 
>>>>          Imagine a scenario where the admin of a shared Mac constantly
>>>>          writes into the syslib (because this is the default). This
>>>>          syslib is then also used by other non-admin users on the system.
>>>>          I don?t think this is a desired scenario and might cause lot?s
>>>>          of confusion (not even mentioning the fact if all people in this
>>>>          scenario are aware what?s going on given that this is a niche
>>>>          topic).
>>>>          Here I think a one-time central installation of R and then only
>>>>          working with user libs (as on Linux) would be preferable.
>>>> 
>>>>      Well, having administered company-wide R installations in large
>>>>      companies for almost two decades I'd strongly disagree. As an admin
>>>>      you want as few user-installed packages as possible, because they
>>>>      are guaranteed to cause problems. You want to limit this for things
>>>>      like development of packages where you want the stable version
>>>>      globally and development version locally (and this is not just me -
>>>>      have a look how the top tech companies manage their software). You
>>>>      have a reliable, stable central location - if you don't do that then
>>>>      you'll have n libraries to manage for n users which is absolutely
>>>>      not sustainable as users will break their libraries and you cannot
>>>>      even upgrade R. Also having a central, shared library is crucial for
>>>>      collaboration. Unlike in Python in R it actually works since R and
>>>>      CRAN doesn't allow randomly breaking reverse-dependencies.
>>>> 
>>>>           From a technical perspective, I know that setting root:root on
>>>>          macOS is not possible. My proposed change to 755 (and leaving
>>>>          root:admin) would however exactly mimic this (and the one of
>>>>          Linux installs) behavior:
>>>> 
>>>>          ? admins would need to do sudo R to install into the system library
>>>>          ? otherwise they are prompted to create a user library
>>>>          Which downsides would this approach have? Currently I don?t see
>>>>          any. It would even harmonize CRAN installer behavior across
>>>>          platforms.
>>>> 
>>>>          I'd be happy to hear from more Mac user if there are reasons to
>>>>          change the default, but as I outlined the choices were
>>>>          deliberate after weighting the pros and cons. In my view the
>>>>          major issue with the proposal it that is would prevent sharing
>>>>          of packages, make R upgrades a lot harder and prevent admin
>>>>          users from using the current tools for package management - and
>>>>          that includes the ability to separate system and user packages
>>>>          on single-user machines.
>>>> 
>>>>          I?ll try to vision the practical changes of this:
>>>> 
>>>>          ? Patch update experience would not change as custom packages
>>>>          will be in the user lib for the respective minor version (by
>>>>          default)
>>>>          ? Admins are still able to install into the system lib when
>>>>          using sudo R
>>>>          ? AFAICS admins will still be able to separate system and user
>>>>          packages as they can use sudo R for syslib installs. To me, the
>>>>          proposed change would even make the behaviour more clear than
>>>>          before (which requires to create a hidden folder (user lib) in
>>>>          the right place to actually use a user lib).
>>>>          Let me know if I overlook something - but currently I don?t see
>>>>          any downside but various positive impacts.
>>>> 
>>>>      As mentioned before and above I disagree. The proposal doesn't
>>>>      matter for managed Macs but would negatively affect users that are
>>>>      single-user admins and since that is typically the case for the
>>>>      majority of Mac R users (as they typically are on their personal
>>>>      machines) I don't see any upshot. All it would do is to prevent
>>>>      typical R users to install packages directly.
>>>> 
>>>>          Last, I wanted to ask if the source code for the CRAN installer
>>>>          is publicly available? I could not find it and would be
>>>>          interested to take a look into it. If this is not possible for
>>>>          some reason, I would also be interested in getting to know the
>>>>          reason for this decision.
>>>> 
>>>>      Everything is in the R SVN, the R build and release system is in
>>>>      https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4
>>>>      <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4>
>>>>      and Apple Installer packaging is in
>>>>      https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging
>>>>      <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging>
>>>>      and the relevant postflight script is in
>>>>      https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging/scripts-R-fw/postflight
>>>>      <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging/scripts-R-fw/postflight>
>>>> 
>>>>          On Apr 13, 2022, at 8:43 PM, Patrick Schratz
>>>>          <patrick.schratz at gmail.com> wrote:
>>>> 
>>>>          Related to this Q: Are the macOS CRAN policies actively
>>>>          discussed by a team of people (who might eventually also be
>>>>          willing to share their thoughts or could be addressed with such
>>>>          questions) or are you solely responsible for it?
>>>> 
>>>>      CRAN is an entire team, so yes, but as for anything Mac-related it
>>>>      includes R-core and other stake holders that have expressed interest
>>>>      before (e.g. Bioconductor). Obviously, this (R-SIG-Mac) is also a
>>>>      good place as that includes anyone who cares about R on macOS.
>>>> 
>>>>      Cheers,
>>>> 
>>>>      Simon
>>>> 
>>>> 
>>>> _______________________________________________
>>>> R-SIG-Mac mailing list
>>>> R-SIG-Mac at r-project.org
>>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>> 
>>> _______________________________________________
>>> R-SIG-Mac mailing list
>>> R-SIG-Mac at r-project.org
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>
>_______________________________________________
>R-SIG-Mac mailing list
>R-SIG-Mac at r-project.org
>https://stat.ethz.ch/mailman/listinfo/r-sig-mac

-- 
Sent from my phone. Please excuse my brevity.


From p@tr|ck@@chr@tz @end|ng |rom gm@||@com  Mon May  2 21:11:04 2022
From: p@tr|ck@@chr@tz @end|ng |rom gm@||@com (Patrick Schratz)
Date: Mon, 02 May 2022 21:11:04 +0200
Subject: [R-SIG-Mac] CRAN installer for macOS - directory permissions
In-Reply-To: <8a3ee598-88af-f8f6-251a-163a87887044@gmail.com>
References: <36345395-F4E6-4069-9900-990E283FA7AC@gmail.com>
 <9200B51A-3A42-42B1-8E1F-4A31C61D5AFA@R-project.org>
 <4F79D380-A4F5-4562-97C2-7B0C4693EEB7@gmail.com>
 <290E0344-9E1B-4979-B211-321B0633C606@R-project.org>
 <21CB0991-A1A8-4F36-B151-93AD204D7A09@gmail.com>
 <1de0018b-addd-2aed-4f00-dd4a86b08574@gmail.com>
 <CAD6tx96Jeh8Lur8wQaZ-nUWpqwQddjoLy1=MdQzX7zYJJEht3g@mail.gmail.com>
 <8a3ee598-88af-f8f6-251a-163a87887044@gmail.com>
Message-ID: <A6FDE15B-51A1-49CA-8F0C-8DA76C79CD5C@gmail.com>

Thanks Jim, that?s a very well phrased summary!

Duncan,

> So when I install R using the MacOS installer, where should it be installed, and where should it install packages?

There is only one place the official CRAN installer will install things into which is `/Library/Frameworks/R.framework`.
However, the proposal is not about the install location of *R* or *R.app* (which resides in `/Applications/R.app`) but about base and recommended packages (which go into the ?system lib?) and ?other? packages.

> The installer also installs two kinds of R packages:  base and recommended ones.  Base packages are closely tied to the internals and can't be updated without updating everything, so it makes sense to install them in the system library if R itself is going there.

Both base and recommended packaged are placed in `/Library/Frameworks/R.framework/Resources/library`.
And yes, base packages should not be touched while recommended packages can be. Yet, the discussion is not about these two but about the location where all other packages go into which the user install *after* R has been installed.

> But what about recommended packages?  They are contributed packages, and they are often updated between R releases.  Should they go by default into a user library?

Recommended packages can live in both system and user library. If a user library exists, the package instance within the user library will be loaded as it is first in the library path (`.libPaths()`).

One practical issue is that if users upgrade from one minor version to the next (e.g. 4.1 to 4.2), they loose *all* packages because in this scenario the system lib is overwritten. One could argue that this is needed as packages are not compatible between minor versions anyhow (which is true) but this is not the overall/actual point: actually ?the point? is manifold:

- prevent users from accidentally deleting/interacting with base and recommended packages
- prompt the creation of a user lib by default by not allowing unauthorized (sudo) write actions into the system lib
- align the overall experience/flow with R on Linux and by this reduce confusion for users
- retain user packages for a specific minor version between minor version upgrades and by this simplify the existence of multiple R versions side-by-side (this would even open the door for multiple R patch versions of the same minor side by side, which is not officially supported by the CRAN installer for macOS but only possible with tools like [RSwitch](https://rud.is/rswitch/) or [rcli](https://rcli.pat-s.me/))

On the flip side I am having a hard time to fine arguments which would speak against the change. What I took away so far from Simon?s replies (and apologies if I am wrong here) was mainly along the lines of

- makes admin work easier (I don?t understand this point)
- local admin users should be able to write into directories owned by `admin` (yes and I am not voting against this, but they should use explicitly authenticate with `sudo`)
- a bit of ?it has been like this since XY, let?s keep it like this? (apologies if I misinterpreted this potentially :))

There are additional things which could be simplified WRT to the macOS CRAN installer (e.g. the addition of the option to change the root install location to allow for other install locations than `/Library/Frameworks/R.framework/Resources/library` which would allow the installation of multiple R patch versions side-by-side) but this is clearly a separate discussion.

I am happy to see that more people are joining the discussion and I would also happy to create an official proposal for such a change (if this is required and backed up by more people than just myself).

Cheers
Patrick


On 2 May 2022, at 20:00, Duncan Murdoch wrote:

> On 02/05/2022 1:08 p.m., Jim Hester wrote:
>> I agree with Patrick that if the macOS behavior was more like the
>> default on linux it would benefit most users on macOS. His proposal to
>> change the group writability of the system library seems a good one to
>> me.
>>
>> The current behavior (installing by default into the system library)
>> is quite surprising to users when they install a new version of R
>> (even just a new patch version) and they lose their entire package
>> library. It causes some users to avoid updating R frequently as a
>> result.
>>
>> As far as R.app having an option for this, that is good, unfortunately
>> many users aren't using R.app, often they are either using R through
>> RStudio or using the command line version of R directly. In these
>> cases it is not as obvious they could install packages to a user
>> library.
>
> I think migrating packages is something the installer could do.
>
> I'm not sure I understand the details of the proposed change.  I'm in the admin group on my laptop, because I'm the only user.  So when I install R using the MacOS installer, where should it be installed, and where should it install packages?
>
> I would find it strange if the installer wanted to install R.app anywhere but the system /Applications folder.  That's where almost everything else I use gets installed.
>
> The installer also installs two kinds of R packages:  base and recommended ones.  Base packages are closely tied to the internals and can't be updated without updating everything, so it makes sense to install them in the system library if R itself is going there.
>
> But what about recommended packages?  They are contributed packages, and they are often updated between R releases.  Should they go by default into a user library?
>
> Duncan Murdoch
>
>
>>
>> Jim
>>
>> On Sun, May 1, 2022 at 9:12 AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>>
>>> On 30/04/2022 2:58 p.m., Patrick Schratz wrote:
>>>>      They don't go there "silently" as in unnoticed - they go there if
>>>>      you instruct R to do so. That's why there is an explicit choice in
>>>>      the Installer. Otherwise regular R rules apply.
>>>>
>>>> Where is this choice in the installer? I don?t see a menu/setting which
>>>> users could change to install packages into a user lib instead of the
>>>> system lib (if they are part of the |admin| group).
>>>> To me, they go there if the lib is writable - and ?the common? R user
>>>> does not know that the system lib is writeable by default.
>>>
>>> I think Simon is talking about the package installer in R.app and you
>>> are talking about the installer for R itself.  The package installer
>>> dialog in R.app has a pretty clear section called Install Location.
>>>
>>> Duncan Murdoch
>>>
>>>>
>>>>      It only does so for admin users. Unlike "managed" unix systems, on
>>>>      macOS you have essentially two situations:
>>>>
>>>>      On a "personal" machine (like laptop) the user is the main user and
>>>>      admin. Therefore it makes a lot more sense for the user to use a
>>>>      single location for managing packages which is at the system level.
>>>>      This also allows easy R upgrades. In addition, locations in user
>>>>      home raise a lot of issues (see the various discussion where this
>>>>      bites people on Windows) due to interactions with software that does
>>>>      mirroring, backups etc.. Hence this approach "just works" as one
>>>>      would expect on a Mac.
>>>>
>>>> To be clear: I don?t question the system-wide installation and I think
>>>> this is good as is (this also happens on Linux).
>>>> I am questioning the group write permissions for the system lib.
>>>>
>>>>      If the user wishes to use his/her private library, it is trivial -
>>>>      just click on "At User Level" and from then on all packages are
>>>>      managed user's local library just like on any other platform.
>>>>
>>>> I might be missing something obvious but where is this option ?at the
>>>> user level?? I assumed you?re talking about the official |.dmg|
>>>> installer - which does not have such an option AFAICS?
>>>>
>>>>      On a "managed" Mac the user is not an admin and therefore the
>>>>      behavior makes no difference. The status quo just makes it easier
>>>>      for admins to manage the shared library, but in reality this doesn't
>>>>      matter as one would assume the admins know what they are doing.
>>>>
>>>> I disagree on this, especially the point ?makes it easier for admins to
>>>> manage the shared library?.
>>>> Admins should (and will) always be able to manage the system lib /after/
>>>> authenticating (as on Linux). The authentication step does not really
>>>> make a difference in practice for admins and is required in almost all
>>>> places where system-wide changes are desired.
>>>>
>>>> This is also the /core/ of the whole discussion: 775 vs 755 (WRT to
>>>> directory permissions).
>>>> I don?t see any (strong) reason that would result in 775 > 755.
>>>> (If so, then the default should probably also be changed on Linux.)
>>>> In a previous message, Kevin Ushey also agreed on the point that
>>>> explicit authorization should be required to write into the system lib.
>>>> I assume there might be many more people who would actually agree on
>>>> this 755 being preferable in this situation.
>>>> How can a proposal be phrased to reconsider this setting that is
>>>> evaluated by a representative group of people?
>>>> I am not claiming to be right but I?d be interested in a multi-person
>>>> evaluation of this setting rather than keeping this at a
>>>> person-to-person discussion level.
>>>>
>>>>      Well, having administered company-wide R installations in large
>>>>      companies for almost two decades I'd strongly disagree. As an admin
>>>>      you want as few user-installed packages as possible, because they
>>>>      are guaranteed to cause problems. You want to limit this for things
>>>>      like development of packages where you want the stable version
>>>>      globally and development version locally (and this is not just me -
>>>>      have a look how the top tech companies manage their software). You
>>>>      have a reliable, stable central location - if you don't do that then
>>>>      you'll have n libraries to manage for n users which is absolutely
>>>>      not sustainable as users will break their libraries and you cannot
>>>>      even upgrade R. Also having a central, shared library is crucial for
>>>>      collaboration. Unlike in Python in R it actually works since R and
>>>>      CRAN doesn't allow randomly breaking reverse-dependencies.
>>>>
>>>> As a system engineer and admin myself (for several ?large?
>>>> companies/institutions), I kindly disagree on your view here.
>>>> User packages are not a problem but /a feature/, everyone can install
>>>> the versions they need for their project.
>>>> They don?t interfere with packages from other users and are not forced
>>>> go with the update interval of an admin.
>>>> With the additional use of renv (thanks Kevin!), redundancy is highly
>>>> reduced as a shared cache can be used from with users can simply use
>>>> symlinks rather than installing the x-th copy of the same R package
>>>> version. But this is partly off-topic WRT to the actual discussion.
>>>>
>>>> Overall this sub-discussion part might come down to the philosophy of
>>>> having a ?centrally managed, unflexible admin installation? or a
>>>> ?centrally managed, partly-flexible admin installation? where only the R
>>>> versions and system libs are managed but users have the freedom to
>>>> install any R packages they want.
>>>> Also in ?my? philosophy, it?s not about ?upgrading? R and removing the
>>>> previous version but adding new versions as they come in and keeping
>>>> previous ones - for the purpose of reproducibility.
>>>> I usually keep the latest patch version of a minor version and aim to
>>>> provide a consistent R environment for various minor versions where
>>>> users are guaranteed to be able to work with that minor version in a
>>>> flexible way (i.e. by installing user packages as they want) for many
>>>> years ahead.
>>>>
>>>>      As mentioned before and above I disagree. The proposal doesn't
>>>>      matter for managed Macs but would negatively affect users that are
>>>>      single-user admins and since that is typically the case for the
>>>>      majority of Mac R users (as they typically are on their personal
>>>>      machines) I don't see any upshot. All it would do is to prevent
>>>>      typical R users to install packages directly.
>>>>
>>>> How would it affect single-user admins in a negative way?
>>>> They can
>>>>
>>>>    * still install packages per R minor version into a dedicated user library
>>>>    * install multiple R minor versions side by side
>>>>    * actually enjoy the same behavior as on Linux
>>>>
>>>>      All it would do is to prevent typical R users to install packages
>>>>      directly.
>>>>
>>>> I don?t understand this point. It would behave similar as on Linux,
>>>> where users are prompted to create a user library (on first use and if
>>>> non exists yet).
>>>>
>>>> As you can see, the overall discussion topic is quite important to me
>>>> and I am still convinced that the current state on macOS is suboptimal.
>>>> Thanks for your time and sharing your thoughts.
>>>>
>>>> Cheers
>>>> Patrick
>>>>
>>>> On 25 Apr 2022, at 1:46, Simon Urbanek wrote:
>>>>
>>>>      Patrick,
>>>>
>>>>      sorry fo the delayed reply - this was not a quick e-mail so I had to
>>>>      find time after the release :)
>>>>
>>>>          On Apr 3, 2022, at 8:26 PM, Patrick Schratz
>>>>          <patrick.schratz at gmail.com> wrote:
>>>>
>>>>          Hi Simon,
>>>>
>>>>          thanks for your extensive reply.
>>>>
>>>>          The choice is deliberate: the admin group on macOS corresponds
>>>>          to users that are allowed to install system-wide software so it
>>>>          allows all admins on the machine to install packages which is
>>>>          the expected way on macOS.
>>>>
>>>>          I think this choice is unfortunate as it contrasts with existing
>>>>          behavior on other platforms where one needs to explicitly
>>>>          request admin privileges by either using sudo or starting R as
>>>>          an admin.
>>>>          On macOS, packages just go into the system lib ?silently?
>>>>          because of the write permissions granted via the admin group.
>>>>          See also my comments further down for more details on this.
>>>>
>>>>      They don't go there "silently" as in unnoticed - they go there if
>>>>      you instruct R to do so. That's why there is an explicit choice in
>>>>      the Installer. Otherwise regular R rules apply.
>>>>
>>>>          Also the versioning of the R framework as x.y is also deliberate
>>>>          - upgrading R to a new patch version does *not* require
>>>>          re-installation of packages, they work by design so in fact the
>>>>          system location is the safest way to do that. Also note that
>>>>          packages are never removed by the installer.
>>>>
>>>>          Thanks, I am aware that a patch update does not require a
>>>>          reinstallation as the packages are functional across minor versions.
>>>>
>>>>          I checked again and was indeed wrong, patch updates from the
>>>>          CRAN installer do not remove additional custom packages in the
>>>>          system lib.
>>>>          I was confused by some custom approaches of mine which cause
>>>>          this behavior - sorry for this!
>>>>
>>>>          So out of the items listed in "The problem" they are all not
>>>>          true with the exception of the comparison with the other
>>>>          platforms, but even that difference is very subtle as it only
>>>>          affects the default on the first installation and not regular
>>>>          use (and I'm, not even sure it that is true since admin users
>>>>          can still install in the system location on other platforms).
>>>>
>>>>          On Linux you would need to do explicitly invoke sudo R to allow
>>>>          writing into the system lib.
>>>>          The issue on macOS is that a regular start of R allows system
>>>>          lib write permissions.
>>>>          In my current view I think a similar behavior as on Linux would
>>>>          be great, i.e. to explicitly having to request admin privileges
>>>>          for this task.
>>>>
>>>>      It only does so for admin users. Unlike "managed" unix systems, on
>>>>      macOS you have essentially two situations:
>>>>
>>>>      On a "personal" machine (like laptop) the user is the main user and
>>>>      admin. Therefore it makes a lot more sense for the user to use a
>>>>      single location for managing packages which is at the system level.
>>>>      This also allows easy R upgrades. In addition, locations in user
>>>>      home raise a lot of issues (see the various discussion where this
>>>>      bites people on Windows) due to interactions with software that does
>>>>      mirroring, backups etc.. Hence this approach "just works" as one
>>>>      would expect on a Mac. If the user wishes to use his/her private
>>>>      library, it is trivial - just click on "At User Level" and from then
>>>>      on all packages are managed user's local library just like on any
>>>>      other platform.
>>>>
>>>>      On a "managed" Mac the user is not an admin and therefore the
>>>>      behavior makes no difference. The status quo just makes it easier
>>>>      for admins to manage the shared library, but in reality this doesn't
>>>>      matter as one would assume the admins know what they are doing.
>>>>
>>>>          I don?t understand the part ?as it only affects the default on
>>>>          the first installation and not regular use? of your reply -
>>>>          could you clarify this?
>>>>          Unless a user creates a user lib manually, packages will always
>>>>          go into the system lib - not only on first use - but I might be
>>>>          misunderstanding your comment here.
>>>>
>>>>          I would argue that the current setup tends to be a lot safer
>>>>          than the alternatives, because it allows commonly used packages
>>>>          to be installed at the system level and private packages to be
>>>>          installed at user level. This is also the design typically used
>>>>          on shared machines, where you separate local packages from user
>>>>          packages where local ones are installed by administrators - so
>>>>          exactly the same setup. Moreover R upgrades are a lot cleaner,
>>>>          since you can easily upgrade all system packages at once so you
>>>>          don't have to worry about individual users having stale packages
>>>>          - the biggest problem for admins.
>>>>
>>>>          Yes and no.
>>>>          Sometimes system admins want to install certain packages
>>>>          globally - however, I never do so for the following reason:
>>>>          Often this will lead to multiple package installations, i.e. one
>>>>          in the syslib and one in the user lib (if the user installs the
>>>>          package again for some reason which quite often happens).
>>>>          Often these duplicated packages will have different versions and
>>>>          users are confused which one is actually loaded (the user lib
>>>>          one is as it is first in the path).
>>>>
>>>>          Aside from this practical point, Macs are rarely used in a
>>>>          shared way.
>>>>          And even if, I?d highly favor having to request write
>>>>          permissions into the syslib rather it happening by default.
>>>>
>>>>          Imagine a scenario where the admin of a shared Mac constantly
>>>>          writes into the syslib (because this is the default). This
>>>>          syslib is then also used by other non-admin users on the system.
>>>>          I don?t think this is a desired scenario and might cause lot?s
>>>>          of confusion (not even mentioning the fact if all people in this
>>>>          scenario are aware what?s going on given that this is a niche
>>>>          topic).
>>>>          Here I think a one-time central installation of R and then only
>>>>          working with user libs (as on Linux) would be preferable.
>>>>
>>>>      Well, having administered company-wide R installations in large
>>>>      companies for almost two decades I'd strongly disagree. As an admin
>>>>      you want as few user-installed packages as possible, because they
>>>>      are guaranteed to cause problems. You want to limit this for things
>>>>      like development of packages where you want the stable version
>>>>      globally and development version locally (and this is not just me -
>>>>      have a look how the top tech companies manage their software). You
>>>>      have a reliable, stable central location - if you don't do that then
>>>>      you'll have n libraries to manage for n users which is absolutely
>>>>      not sustainable as users will break their libraries and you cannot
>>>>      even upgrade R. Also having a central, shared library is crucial for
>>>>      collaboration. Unlike in Python in R it actually works since R and
>>>>      CRAN doesn't allow randomly breaking reverse-dependencies.
>>>>
>>>>           From a technical perspective, I know that setting root:root on
>>>>          macOS is not possible. My proposed change to 755 (and leaving
>>>>          root:admin) would however exactly mimic this (and the one of
>>>>          Linux installs) behavior:
>>>>
>>>>          ? admins would need to do sudo R to install into the system library
>>>>          ? otherwise they are prompted to create a user library
>>>>          Which downsides would this approach have? Currently I don?t see
>>>>          any. It would even harmonize CRAN installer behavior across
>>>>          platforms.
>>>>
>>>>          I'd be happy to hear from more Mac user if there are reasons to
>>>>          change the default, but as I outlined the choices were
>>>>          deliberate after weighting the pros and cons. In my view the
>>>>          major issue with the proposal it that is would prevent sharing
>>>>          of packages, make R upgrades a lot harder and prevent admin
>>>>          users from using the current tools for package management - and
>>>>          that includes the ability to separate system and user packages
>>>>          on single-user machines.
>>>>
>>>>          I?ll try to vision the practical changes of this:
>>>>
>>>>          ? Patch update experience would not change as custom packages
>>>>          will be in the user lib for the respective minor version (by
>>>>          default)
>>>>          ? Admins are still able to install into the system lib when
>>>>          using sudo R
>>>>          ? AFAICS admins will still be able to separate system and user
>>>>          packages as they can use sudo R for syslib installs. To me, the
>>>>          proposed change would even make the behaviour more clear than
>>>>          before (which requires to create a hidden folder (user lib) in
>>>>          the right place to actually use a user lib).
>>>>          Let me know if I overlook something - but currently I don?t see
>>>>          any downside but various positive impacts.
>>>>
>>>>      As mentioned before and above I disagree. The proposal doesn't
>>>>      matter for managed Macs but would negatively affect users that are
>>>>      single-user admins and since that is typically the case for the
>>>>      majority of Mac R users (as they typically are on their personal
>>>>      machines) I don't see any upshot. All it would do is to prevent
>>>>      typical R users to install packages directly.
>>>>
>>>>          Last, I wanted to ask if the source code for the CRAN installer
>>>>          is publicly available? I could not find it and would be
>>>>          interested to take a look into it. If this is not possible for
>>>>          some reason, I would also be interested in getting to know the
>>>>          reason for this decision.
>>>>
>>>>      Everything is in the R SVN, the R build and release system is in
>>>>  https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4
>>>>      <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4>
>>>>      and Apple Installer packaging is in
>>>>  https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging
>>>>      <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging>
>>>>      and the relevant postflight script is in
>>>>  https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging/scripts-R-fw/postflight
>>>>      <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging/scripts-R-fw/postflight>
>>>>
>>>>          On Apr 13, 2022, at 8:43 PM, Patrick Schratz
>>>>          <patrick.schratz at gmail.com> wrote:
>>>>
>>>>          Related to this Q: Are the macOS CRAN policies actively
>>>>          discussed by a team of people (who might eventually also be
>>>>          willing to share their thoughts or could be addressed with such
>>>>          questions) or are you solely responsible for it?
>>>>
>>>>      CRAN is an entire team, so yes, but as for anything Mac-related it
>>>>      includes R-core and other stake holders that have expressed interest
>>>>      before (e.g. Bioconductor). Obviously, this (R-SIG-Mac) is also a
>>>>      good place as that includes anyone who cares about R on macOS.
>>>>
>>>>      Cheers,
>>>>
>>>>      Simon
>>>>
>>>>
>>>> _______________________________________________
>>>> R-SIG-Mac mailing list
>>>> R-SIG-Mac at r-project.org
>>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>>
>>> _______________________________________________
>>> R-SIG-Mac mailing list
>>> R-SIG-Mac at r-project.org
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20220502/17161490/attachment-0001.html>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 870 bytes
Desc: OpenPGP digital signature
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20220502/17161490/attachment-0001.sig>

From murdoch@dunc@n @end|ng |rom gm@||@com  Mon May  2 22:28:52 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 2 May 2022 16:28:52 -0400
Subject: [R-SIG-Mac] CRAN installer for macOS - directory permissions
In-Reply-To: <A6FDE15B-51A1-49CA-8F0C-8DA76C79CD5C@gmail.com>
References: <36345395-F4E6-4069-9900-990E283FA7AC@gmail.com>
 <9200B51A-3A42-42B1-8E1F-4A31C61D5AFA@R-project.org>
 <4F79D380-A4F5-4562-97C2-7B0C4693EEB7@gmail.com>
 <290E0344-9E1B-4979-B211-321B0633C606@R-project.org>
 <21CB0991-A1A8-4F36-B151-93AD204D7A09@gmail.com>
 <1de0018b-addd-2aed-4f00-dd4a86b08574@gmail.com>
 <CAD6tx96Jeh8Lur8wQaZ-nUWpqwQddjoLy1=MdQzX7zYJJEht3g@mail.gmail.com>
 <8a3ee598-88af-f8f6-251a-163a87887044@gmail.com>
 <A6FDE15B-51A1-49CA-8F0C-8DA76C79CD5C@gmail.com>
Message-ID: <29f7add2-1da6-8a7e-82cb-c01ec6b393f2@gmail.com>

On 02/05/2022 3:11 p.m., Patrick Schratz wrote:
> Thanks Jim, that?s a very well phrased summary!
> 
> Duncan,
> 
>     So when I install R using the MacOS installer, where should it be
>     installed, and where should it install packages?
> 
> There is only one place the official CRAN installer will install things 
> into which is |/Library/Frameworks/R.framework|.
> However, the proposal is not about the install location of /R/ or 
> /R.app/ (which resides in |/Applications/R.app|) but about base and 
> recommended packages (which go into the ?system lib?) and ?other? packages.
> 
>     The installer also installs two kinds of R packages: base and
>     recommended ones. Base packages are closely tied to the internals
>     and can't be updated without updating everything, so it makes sense
>     to install them in the system library if R itself is going there.
> 
> Both base and recommended packaged are placed in 
> |/Library/Frameworks/R.framework/Resources/library|.
> And yes, base packages should not be touched while recommended packages 
> can be. Yet, the discussion is not about these two but about the 
> location where all other packages go into which the user install /after/ 
> R has been installed.
> 
>     But what about recommended packages? They are contributed packages,
>     and they are often updated between R releases. Should they go by
>     default into a user library?
> 
> Recommended packages can live in both system and user library. If a user 
> library exists, the package instance within the user library will be 
> loaded as it is first in the library path (|.libPaths()|).

I'd really rather have just one library on my system.  In special 
circumstances I sometimes want to have two different versions of a 
package installed, and then I need an extra library, but normally I want 
just one, because it reduces confusion and prevents errors that can in 
the worst case be catastrophic.  (An example is given down below.)

> One practical issue is that if users upgrade from one minor version to 
> the next (e.g. 4.1 to 4.2), they loose /all/ packages because in this 
> scenario the system lib is overwritten.


  One could argue that this is
> needed as packages are not compatible between minor versions anyhow 
> (which is true) but this is not the overall/actual point: actually ?the 
> point? is manifold:
> 
>   * prevent users from accidentally deleting/interacting with base and
>     recommended packages

Users *should* interact with recommended packages.  As I said before, 
recommended packages are contributed packages, and they can be updated 
between R releases.  If they are updated, in normal circumstances users 
*should* update the default copy.  If your proposal makes this harder, 
then that's a strong negative in my opinion.

>   * prompt the creation of a user lib by default by not allowing
>     unauthorized (sudo) write actions into the system lib
>   * align the overall experience/flow with R on Linux and by this reduce
>     confusion for users

Few MacOS users would be confused by what happens on Linux.  Most MacOS 
users never use Linux; the ones who do are the more sophisticated ones.


>   * retain user packages for a specific minor version between minor
>     version upgrades and by this simplify the existence of multiple R
>     versions side-by-side (this would even open the door for multiple R
>     patch versions of the same minor side by side, which is not
>     officially supported by the CRAN installer for macOS but only
>     possible with tools like RSwitch <https://rud.is/rswitch/> or rcli
>     <https://rcli.pat-s.me/>)

This is impossible, unless by "minor version upgrade" you mean "patch 
version upgrade".  An installed package for x.y.z is not guaranteed to 
work in a minor upgrade to x.(y+1).0, only in a patch version upgrade to 
x.y.(z+n).  As I said already, a patch version upgrade should migrate 
packages (or at least offer to do so).

> On the flip side I am having a hard time to fine arguments which would 
> speak against the change. What I took away so far from Simon?s replies 
> (and apologies if I am wrong here) was mainly along the lines of
> 
>   * makes admin work easier (I don?t understand this point)
>   * local admin users should be able to write into directories owned by
>     |admin| (yes and I am not voting against this, but they should use
>     explicitly authenticate with |sudo|)
>   * a bit of ?it has been like this since XY, let?s keep it like this?
>     (apologies if I misinterpreted this potentially :))

I offered one more above:

  * It makes the user interface simpler and less error prone.  It is a 
disaster if a package fixes a serious bug, I install the update, then 
because I have multiple libraries installed, I use the old one without 
realizing it.

It should be harder to end up with two versions of a package installed 
than just one.  Your proposal says I have to jump through the sudo hoop 
to update recommended packages, or any other packages that I (running as 
admin) decided should be visible system-wide.  That's a flaw.

Perhaps a solution to the flaw would be for the package installer to 
warn users that they are about to install a second version instead of 
replacing the defective one, and offer to elevate privileges so the 
replacement could take place.  But that's not a great user interface 
design, and (since most users always answer yes to such questions) not 
really any safer than the current design.

> There are additional things which could be simplified WRT to the macOS 
> CRAN installer (e.g. the addition of the option to change the root 
> install location to allow for other install locations than 
> |/Library/Frameworks/R.framework/Resources/library| which would allow 
> the installation of multiple R patch versions side-by-side) but this is 
> clearly a separate discussion.

That's such a rare need that RSwitch is sufficient.  I've only used it a 
few times in the last decade, so it doesn't really make sense to make 
the install process more confusing to accommodate that need.

Duncan Murdoch

> 
> I am happy to see that more people are joining the discussion and I 
> would also happy to create an official proposal for such a change (if 
> this is required and backed up by more people than just myself).
> 
> Cheers
> Patrick
> 
> On 2 May 2022, at 20:00, Duncan Murdoch wrote:
> 
>     On 02/05/2022 1:08 p.m., Jim Hester wrote:
> 
>         I agree with Patrick that if the macOS behavior was more like the
>         default on linux it would benefit most users on macOS. His
>         proposal to
>         change the group writability of the system library seems a good
>         one to
>         me.
> 
>         The current behavior (installing by default into the system
>         library)
>         is quite surprising to users when they install a new version of R
>         (even just a new patch version) and they lose their entire package
>         library. It causes some users to avoid updating R frequently as a
>         result.
> 
>         As far as R.app having an option for this, that is good,
>         unfortunately
>         many users aren't using R.app, often they are either using R
>         through
>         RStudio or using the command line version of R directly. In these
>         cases it is not as obvious they could install packages to a user
>         library.
> 
>     I think migrating packages is something the installer could do.
> 
>     I'm not sure I understand the details of the proposed change. I'm in
>     the admin group on my laptop, because I'm the only user. So when I
>     install R using the MacOS installer, where should it be installed,
>     and where should it install packages?
> 
>     I would find it strange if the installer wanted to install R.app
>     anywhere but the system /Applications folder. That's where almost
>     everything else I use gets installed.
> 
>     The installer also installs two kinds of R packages: base and
>     recommended ones. Base packages are closely tied to the internals
>     and can't be updated without updating everything, so it makes sense
>     to install them in the system library if R itself is going there.
> 
>     But what about recommended packages? They are contributed packages,
>     and they are often updated between R releases. Should they go by
>     default into a user library?
> 
>     Duncan Murdoch
> 
>         Jim
> 
>         On Sun, May 1, 2022 at 9:12 AM Duncan Murdoch
>         <murdoch.duncan at gmail.com> wrote:
> 
>             On 30/04/2022 2:58 p.m., Patrick Schratz wrote:
> 
>                 They don't go there "silently" as in unnoticed - they go
>                 there if
>                 you instruct R to do so. That's why there is an explicit
>                 choice in
>                 the Installer. Otherwise regular R rules apply.
> 
>                 Where is this choice in the installer? I don?t see a
>                 menu/setting which
>                 users could change to install packages into a user lib
>                 instead of the
>                 system lib (if they are part of the |admin| group).
>                 To me, they go there if the lib is writable - and ?the
>                 common? R user
>                 does not know that the system lib is writeable by default.
> 
>             I think Simon is talking about the package installer in
>             R.app and you
>             are talking about the installer for R itself. The package
>             installer
>             dialog in R.app has a pretty clear section called Install
>             Location.
> 
>             Duncan Murdoch
> 
>                 It only does so for admin users. Unlike "managed" unix
>                 systems, on
>                 macOS you have essentially two situations:
> 
>                 On a "personal" machine (like laptop) the user is the
>                 main user and
>                 admin. Therefore it makes a lot more sense for the user
>                 to use a
>                 single location for managing packages which is at the
>                 system level.
>                 This also allows easy R upgrades. In addition, locations
>                 in user
>                 home raise a lot of issues (see the various discussion
>                 where this
>                 bites people on Windows) due to interactions with
>                 software that does
>                 mirroring, backups etc.. Hence this approach "just
>                 works" as one
>                 would expect on a Mac.
> 
>                 To be clear: I don?t question the system-wide
>                 installation and I think
>                 this is good as is (this also happens on Linux).
>                 I am questioning the group write permissions for the
>                 system lib.
> 
>                 If the user wishes to use his/her private library, it is
>                 trivial -
>                 just click on "At User Level" and from then on all
>                 packages are
>                 managed user's local library just like on any other
>                 platform.
> 
>                 I might be missing something obvious but where is this
>                 option ?at the
>                 user level?? I assumed you?re talking about the official
>                 |.dmg|
>                 installer - which does not have such an option AFAICS?
> 
>                 On a "managed" Mac the user is not an admin and
>                 therefore the
>                 behavior makes no difference. The status quo just makes
>                 it easier
>                 for admins to manage the shared library, but in reality
>                 this doesn't
>                 matter as one would assume the admins know what they are
>                 doing.
> 
>                 I disagree on this, especially the point ?makes it
>                 easier for admins to
>                 manage the shared library?.
>                 Admins should (and will) always be able to manage the
>                 system lib /after/
>                 authenticating (as on Linux). The authentication step
>                 does not really
>                 make a difference in practice for admins and is required
>                 in almost all
>                 places where system-wide changes are desired.
> 
>                 This is also the /core/ of the whole discussion: 775 vs
>                 755 (WRT to
>                 directory permissions).
>                 I don?t see any (strong) reason that would result in 775
>                  > 755.
>                 (If so, then the default should probably also be changed
>                 on Linux.)
>                 In a previous message, Kevin Ushey also agreed on the
>                 point that
>                 explicit authorization should be required to write into
>                 the system lib.
>                 I assume there might be many more people who would
>                 actually agree on
>                 this 755 being preferable in this situation.
>                 How can a proposal be phrased to reconsider this setting
>                 that is
>                 evaluated by a representative group of people?
>                 I am not claiming to be right but I?d be interested in a
>                 multi-person
>                 evaluation of this setting rather than keeping this at a
>                 person-to-person discussion level.
> 
>                 Well, having administered company-wide R installations
>                 in large
>                 companies for almost two decades I'd strongly disagree.
>                 As an admin
>                 you want as few user-installed packages as possible,
>                 because they
>                 are guaranteed to cause problems. You want to limit this
>                 for things
>                 like development of packages where you want the stable
>                 version
>                 globally and development version locally (and this is
>                 not just me -
>                 have a look how the top tech companies manage their
>                 software). You
>                 have a reliable, stable central location - if you don't
>                 do that then
>                 you'll have n libraries to manage for n users which is
>                 absolutely
>                 not sustainable as users will break their libraries and
>                 you cannot
>                 even upgrade R. Also having a central, shared library is
>                 crucial for
>                 collaboration. Unlike in Python in R it actually works
>                 since R and
>                 CRAN doesn't allow randomly breaking reverse-dependencies.
> 
>                 As a system engineer and admin myself (for several ?large?
>                 companies/institutions), I kindly disagree on your view
>                 here.
>                 User packages are not a problem but /a feature/,
>                 everyone can install
>                 the versions they need for their project.
>                 They don?t interfere with packages from other users and
>                 are not forced
>                 go with the update interval of an admin.
>                 With the additional use of renv (thanks Kevin!),
>                 redundancy is highly
>                 reduced as a shared cache can be used from with users
>                 can simply use
>                 symlinks rather than installing the x-th copy of the
>                 same R package
>                 version. But this is partly off-topic WRT to the actual
>                 discussion.
> 
>                 Overall this sub-discussion part might come down to the
>                 philosophy of
>                 having a ?centrally managed, unflexible admin
>                 installation? or a
>                 ?centrally managed, partly-flexible admin installation?
>                 where only the R
>                 versions and system libs are managed but users have the
>                 freedom to
>                 install any R packages they want.
>                 Also in ?my? philosophy, it?s not about ?upgrading? R
>                 and removing the
>                 previous version but adding new versions as they come in
>                 and keeping
>                 previous ones - for the purpose of reproducibility.
>                 I usually keep the latest patch version of a minor
>                 version and aim to
>                 provide a consistent R environment for various minor
>                 versions where
>                 users are guaranteed to be able to work with that minor
>                 version in a
>                 flexible way (i.e. by installing user packages as they
>                 want) for many
>                 years ahead.
> 
>                 As mentioned before and above I disagree. The proposal
>                 doesn't
>                 matter for managed Macs but would negatively affect
>                 users that are
>                 single-user admins and since that is typically the case
>                 for the
>                 majority of Mac R users (as they typically are on their
>                 personal
>                 machines) I don't see any upshot. All it would do is to
>                 prevent
>                 typical R users to install packages directly.
> 
>                 How would it affect single-user admins in a negative way?
>                 They can
> 
>                 * still install packages per R minor version into a
>                 dedicated user library
>                 * install multiple R minor versions side by side
>                 * actually enjoy the same behavior as on Linux
> 
>                 All it would do is to prevent typical R users to install
>                 packages
>                 directly.
> 
>                 I don?t understand this point. It would behave similar
>                 as on Linux,
>                 where users are prompted to create a user library (on
>                 first use and if
>                 non exists yet).
> 
>                 As you can see, the overall discussion topic is quite
>                 important to me
>                 and I am still convinced that the current state on macOS
>                 is suboptimal.
>                 Thanks for your time and sharing your thoughts.
> 
>                 Cheers
>                 Patrick
> 
>                 On 25 Apr 2022, at 1:46, Simon Urbanek wrote:
> 
>                 Patrick,
> 
>                 sorry fo the delayed reply - this was not a quick e-mail
>                 so I had to
>                 find time after the release :)
> 
>                 On Apr 3, 2022, at 8:26 PM, Patrick Schratz
>                 <patrick.schratz at gmail.com> wrote:
> 
>                 Hi Simon,
> 
>                 thanks for your extensive reply.
> 
>                 The choice is deliberate: the admin group on macOS
>                 corresponds
>                 to users that are allowed to install system-wide
>                 software so it
>                 allows all admins on the machine to install packages
>                 which is
>                 the expected way on macOS.
> 
>                 I think this choice is unfortunate as it contrasts with
>                 existing
>                 behavior on other platforms where one needs to explicitly
>                 request admin privileges by either using sudo or
>                 starting R as
>                 an admin.
>                 On macOS, packages just go into the system lib ?silently?
>                 because of the write permissions granted via the admin
>                 group.
>                 See also my comments further down for more details on this.
> 
>                 They don't go there "silently" as in unnoticed - they go
>                 there if
>                 you instruct R to do so. That's why there is an explicit
>                 choice in
>                 the Installer. Otherwise regular R rules apply.
> 
>                 Also the versioning of the R framework as x.y is also
>                 deliberate
>                 - upgrading R to a new patch version does *not* require
>                 re-installation of packages, they work by design so in
>                 fact the
>                 system location is the safest way to do that. Also note
>                 that
>                 packages are never removed by the installer.
> 
>                 Thanks, I am aware that a patch update does not require a
>                 reinstallation as the packages are functional across
>                 minor versions.
> 
>                 I checked again and was indeed wrong, patch updates from
>                 the
>                 CRAN installer do not remove additional custom packages
>                 in the
>                 system lib.
>                 I was confused by some custom approaches of mine which
>                 cause
>                 this behavior - sorry for this!
> 
>                 So out of the items listed in "The problem" they are all
>                 not
>                 true with the exception of the comparison with the other
>                 platforms, but even that difference is very subtle as it
>                 only
>                 affects the default on the first installation and not
>                 regular
>                 use (and I'm, not even sure it that is true since admin
>                 users
>                 can still install in the system location on other
>                 platforms).
> 
>                 On Linux you would need to do explicitly invoke sudo R
>                 to allow
>                 writing into the system lib.
>                 The issue on macOS is that a regular start of R allows
>                 system
>                 lib write permissions.
>                 In my current view I think a similar behavior as on
>                 Linux would
>                 be great, i.e. to explicitly having to request admin
>                 privileges
>                 for this task.
> 
>                 It only does so for admin users. Unlike "managed" unix
>                 systems, on
>                 macOS you have essentially two situations:
> 
>                 On a "personal" machine (like laptop) the user is the
>                 main user and
>                 admin. Therefore it makes a lot more sense for the user
>                 to use a
>                 single location for managing packages which is at the
>                 system level.
>                 This also allows easy R upgrades. In addition, locations
>                 in user
>                 home raise a lot of issues (see the various discussion
>                 where this
>                 bites people on Windows) due to interactions with
>                 software that does
>                 mirroring, backups etc.. Hence this approach "just
>                 works" as one
>                 would expect on a Mac. If the user wishes to use his/her
>                 private
>                 library, it is trivial - just click on "At User Level"
>                 and from then
>                 on all packages are managed user's local library just
>                 like on any
>                 other platform.
> 
>                 On a "managed" Mac the user is not an admin and
>                 therefore the
>                 behavior makes no difference. The status quo just makes
>                 it easier
>                 for admins to manage the shared library, but in reality
>                 this doesn't
>                 matter as one would assume the admins know what they are
>                 doing.
> 
>                 I don?t understand the part ?as it only affects the
>                 default on
>                 the first installation and not regular use? of your reply -
>                 could you clarify this?
>                 Unless a user creates a user lib manually, packages will
>                 always
>                 go into the system lib - not only on first use - but I
>                 might be
>                 misunderstanding your comment here.
> 
>                 I would argue that the current setup tends to be a lot
>                 safer
>                 than the alternatives, because it allows commonly used
>                 packages
>                 to be installed at the system level and private packages
>                 to be
>                 installed at user level. This is also the design
>                 typically used
>                 on shared machines, where you separate local packages
>                 from user
>                 packages where local ones are installed by
>                 administrators - so
>                 exactly the same setup. Moreover R upgrades are a lot
>                 cleaner,
>                 since you can easily upgrade all system packages at once
>                 so you
>                 don't have to worry about individual users having stale
>                 packages
>                 - the biggest problem for admins.
> 
>                 Yes and no.
>                 Sometimes system admins want to install certain packages
>                 globally - however, I never do so for the following reason:
>                 Often this will lead to multiple package installations,
>                 i.e. one
>                 in the syslib and one in the user lib (if the user
>                 installs the
>                 package again for some reason which quite often happens).
>                 Often these duplicated packages will have different
>                 versions and
>                 users are confused which one is actually loaded (the
>                 user lib
>                 one is as it is first in the path).
> 
>                 Aside from this practical point, Macs are rarely used in a
>                 shared way.
>                 And even if, I?d highly favor having to request write
>                 permissions into the syslib rather it happening by default.
> 
>                 Imagine a scenario where the admin of a shared Mac
>                 constantly
>                 writes into the syslib (because this is the default). This
>                 syslib is then also used by other non-admin users on the
>                 system.
>                 I don?t think this is a desired scenario and might cause
>                 lot?s
>                 of confusion (not even mentioning the fact if all people
>                 in this
>                 scenario are aware what?s going on given that this is a
>                 niche
>                 topic).
>                 Here I think a one-time central installation of R and
>                 then only
>                 working with user libs (as on Linux) would be preferable.
> 
>                 Well, having administered company-wide R installations
>                 in large
>                 companies for almost two decades I'd strongly disagree.
>                 As an admin
>                 you want as few user-installed packages as possible,
>                 because they
>                 are guaranteed to cause problems. You want to limit this
>                 for things
>                 like development of packages where you want the stable
>                 version
>                 globally and development version locally (and this is
>                 not just me -
>                 have a look how the top tech companies manage their
>                 software). You
>                 have a reliable, stable central location - if you don't
>                 do that then
>                 you'll have n libraries to manage for n users which is
>                 absolutely
>                 not sustainable as users will break their libraries and
>                 you cannot
>                 even upgrade R. Also having a central, shared library is
>                 crucial for
>                 collaboration. Unlike in Python in R it actually works
>                 since R and
>                 CRAN doesn't allow randomly breaking reverse-dependencies.
> 
>                  From a technical perspective, I know that setting
>                 root:root on
>                 macOS is not possible. My proposed change to 755 (and
>                 leaving
>                 root:admin) would however exactly mimic this (and the
>                 one of
>                 Linux installs) behavior:
> 
>                 ? admins would need to do sudo R to install into the
>                 system library
>                 ? otherwise they are prompted to create a user library
>                 Which downsides would this approach have? Currently I
>                 don?t see
>                 any. It would even harmonize CRAN installer behavior across
>                 platforms.
> 
>                 I'd be happy to hear from more Mac user if there are
>                 reasons to
>                 change the default, but as I outlined the choices were
>                 deliberate after weighting the pros and cons. In my view
>                 the
>                 major issue with the proposal it that is would prevent
>                 sharing
>                 of packages, make R upgrades a lot harder and prevent admin
>                 users from using the current tools for package
>                 management - and
>                 that includes the ability to separate system and user
>                 packages
>                 on single-user machines.
> 
>                 I?ll try to vision the practical changes of this:
> 
>                 ? Patch update experience would not change as custom
>                 packages
>                 will be in the user lib for the respective minor version
>                 (by
>                 default)
>                 ? Admins are still able to install into the system lib when
>                 using sudo R
>                 ? AFAICS admins will still be able to separate system
>                 and user
>                 packages as they can use sudo R for syslib installs. To
>                 me, the
>                 proposed change would even make the behaviour more clear
>                 than
>                 before (which requires to create a hidden folder (user
>                 lib) in
>                 the right place to actually use a user lib).
>                 Let me know if I overlook something - but currently I
>                 don?t see
>                 any downside but various positive impacts.
> 
>                 As mentioned before and above I disagree. The proposal
>                 doesn't
>                 matter for managed Macs but would negatively affect
>                 users that are
>                 single-user admins and since that is typically the case
>                 for the
>                 majority of Mac R users (as they typically are on their
>                 personal
>                 machines) I don't see any upshot. All it would do is to
>                 prevent
>                 typical R users to install packages directly.
> 
>                 Last, I wanted to ask if the source code for the CRAN
>                 installer
>                 is publicly available? I could not find it and would be
>                 interested to take a look into it. If this is not
>                 possible for
>                 some reason, I would also be interested in getting to
>                 know the
>                 reason for this decision.
> 
>                 Everything is in the R SVN, the R build and release
>                 system is in
>                 https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4
>                 <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4>
>                 <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4
>                 <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4>>
>                 and Apple Installer packaging is in
>                 https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging
>                 <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging>
> 
>                 <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging
>                 <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging>>
> 
>                 and the relevant postflight script is in
>                 https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging/scripts-R-fw/postflight
>                 <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging/scripts-R-fw/postflight>
> 
>                 <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging/scripts-R-fw/postflight
>                 <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging/scripts-R-fw/postflight>>
> 
>                 On Apr 13, 2022, at 8:43 PM, Patrick Schratz
>                 <patrick.schratz at gmail.com> wrote:
> 
>                 Related to this Q: Are the macOS CRAN policies actively
>                 discussed by a team of people (who might eventually also be
>                 willing to share their thoughts or could be addressed
>                 with such
>                 questions) or are you solely responsible for it?
> 
>                 CRAN is an entire team, so yes, but as for anything
>                 Mac-related it
>                 includes R-core and other stake holders that have
>                 expressed interest
>                 before (e.g. Bioconductor). Obviously, this (R-SIG-Mac)
>                 is also a
>                 good place as that includes anyone who cares about R on
>                 macOS.
> 
>                 Cheers,
> 
>                 Simon
> 
>                 _______________________________________________
>                 R-SIG-Mac mailing list
>                 R-SIG-Mac at r-project.org
>                 https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>                 <https://stat.ethz.ch/mailman/listinfo/r-sig-mac>
> 
>             _______________________________________________
>             R-SIG-Mac mailing list
>             R-SIG-Mac at r-project.org
> 
>             https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>             <https://stat.ethz.ch/mailman/listinfo/r-sig-mac>
>


From p@tr|ck@@chr@tz @end|ng |rom gm@||@com  Tue May  3 08:52:59 2022
From: p@tr|ck@@chr@tz @end|ng |rom gm@||@com (Patrick Schratz)
Date: Tue, 03 May 2022 08:52:59 +0200
Subject: [R-SIG-Mac] CRAN installer for macOS - directory permissions
In-Reply-To: <29f7add2-1da6-8a7e-82cb-c01ec6b393f2@gmail.com>
References: <36345395-F4E6-4069-9900-990E283FA7AC@gmail.com>
 <9200B51A-3A42-42B1-8E1F-4A31C61D5AFA@R-project.org>
 <4F79D380-A4F5-4562-97C2-7B0C4693EEB7@gmail.com>
 <290E0344-9E1B-4979-B211-321B0633C606@R-project.org>
 <21CB0991-A1A8-4F36-B151-93AD204D7A09@gmail.com>
 <1de0018b-addd-2aed-4f00-dd4a86b08574@gmail.com>
 <CAD6tx96Jeh8Lur8wQaZ-nUWpqwQddjoLy1=MdQzX7zYJJEht3g@mail.gmail.com>
 <8a3ee598-88af-f8f6-251a-163a87887044@gmail.com>
 <A6FDE15B-51A1-49CA-8F0C-8DA76C79CD5C@gmail.com>
 <29f7add2-1da6-8a7e-82cb-c01ec6b393f2@gmail.com>
Message-ID: <4E015B0C-9CF4-4AD7-9909-15A809B0628B@gmail.com>

> I'd really rather have just one library on my system.  In special circumstances I sometimes want to have two different versions of a package installed, and then I need an extra library, but normally I want just one, because it reduces confusion and prevents errors that can in the worst case be catastrophic.  (An example is given down below.)

I think we should distinguish here between ?what one wants personally? and ?how R works on most systems? and ?why a user library exists in the first place?.
Both Windows and Linux don?t allow ?normal users? to write into the system lib and require a user library (which to me is the right approach).
-> Aligning macOS to this state would simplify things for users.

Also user libraries are a quite common thing across many languages. R is a bit special here in that it ships much of it ?default? functionality split in ?base? and ?recommended? packages of which some are mainly there for historic reasons (arguably).
I really don?t think that everything should be in one library, simply for the fact that users can easily destroy the system-wide installation by this.

> Users *should* interact with recommended packages.  As I said before, recommended packages are contributed packages, and they can be updated between R releases.  If they are updated, in normal circumstances users *should* update the default copy.  If your proposal makes this harder, then that's a strong negative in my opinion.

I didn?t say they should not. But they should install updated recommended packages into the user lib. Updated versions of rec. pkgs in there will be take precedence when loading. This is how things are working on Win and Linux since ever (?).
Why would users need to update the default copy in the system lib?

> Few MacOS users would be confused by what happens on Linux.  Most MacOS users never use Linux; the ones who do are the more sophisticated ones.

I strongly disagree.
Modern users don?t just live on one operating system these days.
They switch between multiple ones even during the day (e.g. by using R in a central RStudio Workbench installation which usually run on Linux) and a local installation on their machine running Win or Mac.
This is in fact the standard for thousands of people - and I am in contact with many of such in my daily R consulting/system administration work.
Also even if you are a ?one OS only? user and you aim to switch at some point, after many years?you would want to have things work the same way in your new OS, wouldn?t you?

> This is impossible, unless by "minor version upgrade" you mean "patch version upgrade".  An installed package for x.y.z is not guaranteed to work in a minor upgrade to x.(y+1).0, only in a patch version upgrade to x.y.(z+n).  As I said already, a patch version upgrade should migrate packages (or at least offer to do so).

I was not aiming to reuse those for the updated minor version but preserving them for the previous minor version to be able to switch to this.
This is actually a quite common task and I do this almost on a daily base (yes really).
E.g. right now I am switching between 4.1.3 and 4.2.0 (the former for projects, the latter for pkg dev).

>  * It makes the user interface simpler and less error prone.  It is a disaster if a package fixes a serious bug, I install the update, then because I have multiple libraries installed, I use the old one without realizing it.

I think you?re confusing things here. If you install an updated version it will go into your preferred library and will be available to you afterwards. You cannot ?just use the old one?.

> It should be harder to end up with two versions of a package installed than just one.  Your proposal says I have to jump through the sudo hoop to update recommended packages, or any other packages that I (running as admin) decided should be visible system-wide.  That's a flaw.

You should not update recommended pkgs in the system lib, it should not be touched by a normal user. Just interact with your user library and be happy.
This is not a flaw at all, this is how it works on Win and Linux and many people are happy with it.

And ?jump through the sudo hoop? - is it really a problem to call `sudo` once and put in your PW if you aim to interact with the system lib? If this is a real argument than my time spent arguing about technical details feels worthless?

> Perhaps a solution to the flaw would be for the package installer to warn users that they are about to install a second version instead of replacing the defective one, and offer to elevate privileges so the replacement could take place.  But that's not a great user interface design, and (since most users always answer yes to such questions) not really any safer than the current design.

I think the concept of a user lib is just fine.
If at all, those changes should be implemented and discussed across OS for R and not implemented in one OS only.
The way R is installed and behaves on an admin level on Win/Linux/Mac essentially differs in many points but for no real reason often, i.e. the behavior could be aligned in many places.

> That's such a rare need that RSwitch is sufficient.  I've only used it a few times in the last decade, so it doesn't really make sense to make the install process more confusing to accommodate that need.

I think this is quite subjective, I use such tools all day. And I know many other people who do.
One major point is reproducibility (among others) which is otherwise quite hard to achieve.
The mileage varies here and also how people use R. I think allowing people to be as flexible as possible should be the goal, no matter how much of this flexibility is used in the end.

Having multiple versions installed side-by-side is so much easier for other programming languages and R could really do better here in my opinion.

Cheers
Patrick

On 2 May 2022, at 22:28, Duncan Murdoch wrote:

> On 02/05/2022 3:11 p.m., Patrick Schratz wrote:
>> Thanks Jim, that?s a very well phrased summary!
>>
>> Duncan,
>>
>>     So when I install R using the MacOS installer, where should it be
>>     installed, and where should it install packages?
>>
>> There is only one place the official CRAN installer will install things into which is |/Library/Frameworks/R.framework|.
>> However, the proposal is not about the install location of /R/ or /R.app/ (which resides in |/Applications/R.app|) but about base and recommended packages (which go into the ?system lib?) and ?other? packages.
>>
>>     The installer also installs two kinds of R packages: base and
>>     recommended ones. Base packages are closely tied to the internals
>>     and can't be updated without updating everything, so it makes sense
>>     to install them in the system library if R itself is going there.
>>
>> Both base and recommended packaged are placed in |/Library/Frameworks/R.framework/Resources/library|.
>> And yes, base packages should not be touched while recommended packages can be. Yet, the discussion is not about these two but about the location where all other packages go into which the user install /after/ R has been installed.
>>
>>     But what about recommended packages? They are contributed packages,
>>     and they are often updated between R releases. Should they go by
>>     default into a user library?
>>
>> Recommended packages can live in both system and user library. If a user library exists, the package instance within the user library will be loaded as it is first in the library path (|.libPaths()|).
>
> I'd really rather have just one library on my system.  In special circumstances I sometimes want to have two different versions of a package installed, and then I need an extra library, but normally I want just one, because it reduces confusion and prevents errors that can in the worst case be catastrophic.  (An example is given down below.)
>
>> One practical issue is that if users upgrade from one minor version to the next (e.g. 4.1 to 4.2), they loose /all/ packages because in this scenario the system lib is overwritten.
>
>
>  One could argue that this is
>> needed as packages are not compatible between minor versions anyhow (which is true) but this is not the overall/actual point: actually ?the point? is manifold:
>>
>>   * prevent users from accidentally deleting/interacting with base and
>>     recommended packages
>
> Users *should* interact with recommended packages.  As I said before, recommended packages are contributed packages, and they can be updated between R releases.  If they are updated, in normal circumstances users *should* update the default copy.  If your proposal makes this harder, then that's a strong negative in my opinion.
>
>>   * prompt the creation of a user lib by default by not allowing
>>     unauthorized (sudo) write actions into the system lib
>>   * align the overall experience/flow with R on Linux and by this reduce
>>     confusion for users
>
> Few MacOS users would be confused by what happens on Linux.  Most MacOS users never use Linux; the ones who do are the more sophisticated ones.
>
>
>>   * retain user packages for a specific minor version between minor
>>     version upgrades and by this simplify the existence of multiple R
>>     versions side-by-side (this would even open the door for multiple R
>>     patch versions of the same minor side by side, which is not
>>     officially supported by the CRAN installer for macOS but only
>>     possible with tools like RSwitch <https://rud.is/rswitch/> or rcli
>>     <https://rcli.pat-s.me/> )
>
> This is impossible, unless by "minor version upgrade" you mean "patch version upgrade".  An installed package for x.y.z is not guaranteed to work in a minor upgrade to x.(y+1).0, only in a patch version upgrade to x.y.(z+n).  As I said already, a patch version upgrade should migrate packages (or at least offer to do so).
>
>> On the flip side I am having a hard time to fine arguments which would speak against the change. What I took away so far from Simon?s replies (and apologies if I am wrong here) was mainly along the lines of
>>
>>   * makes admin work easier (I don?t understand this point)
>>   * local admin users should be able to write into directories owned by
>>     |admin| (yes and I am not voting against this, but they should use
>>     explicitly authenticate with |sudo|)
>>   * a bit of ?it has been like this since XY, let?s keep it like this?
>>     (apologies if I misinterpreted this potentially :))
>
> I offered one more above:
>
>  * It makes the user interface simpler and less error prone.  It is a disaster if a package fixes a serious bug, I install the update, then because I have multiple libraries installed, I use the old one without realizing it.
>
> It should be harder to end up with two versions of a package installed than just one.  Your proposal says I have to jump through the sudo hoop to update recommended packages, or any other packages that I (running as admin) decided should be visible system-wide.  That's a flaw.
>
> Perhaps a solution to the flaw would be for the package installer to warn users that they are about to install a second version instead of replacing the defective one, and offer to elevate privileges so the replacement could take place.  But that's not a great user interface design, and (since most users always answer yes to such questions) not really any safer than the current design.
>
>> There are additional things which could be simplified WRT to the macOS CRAN installer (e.g. the addition of the option to change the root install location to allow for other install locations than |/Library/Frameworks/R.framework/Resources/library| which would allow the installation of multiple R patch versions side-by-side) but this is clearly a separate discussion.
>
> That's such a rare need that RSwitch is sufficient.  I've only used it a few times in the last decade, so it doesn't really make sense to make the install process more confusing to accommodate that need.
>
> Duncan Murdoch
>
>>
>> I am happy to see that more people are joining the discussion and I would also happy to create an official proposal for such a change (if this is required and backed up by more people than just myself).
>>
>> Cheers
>> Patrick
>>
>> On 2 May 2022, at 20:00, Duncan Murdoch wrote:
>>
>>     On 02/05/2022 1:08 p.m., Jim Hester wrote:
>>
>>         I agree with Patrick that if the macOS behavior was more like the
>>         default on linux it would benefit most users on macOS. His
>>         proposal to
>>         change the group writability of the system library seems a good
>>         one to
>>         me.
>>
>>         The current behavior (installing by default into the system
>>         library)
>>         is quite surprising to users when they install a new version of R
>>         (even just a new patch version) and they lose their entire package
>>         library. It causes some users to avoid updating R frequently as a
>>         result.
>>
>>         As far as R.app having an option for this, that is good,
>>         unfortunately
>>         many users aren't using R.app, often they are either using R
>>         through
>>         RStudio or using the command line version of R directly. In these
>>         cases it is not as obvious they could install packages to a user
>>         library.
>>
>>     I think migrating packages is something the installer could do.
>>
>>     I'm not sure I understand the details of the proposed change. I'm in
>>     the admin group on my laptop, because I'm the only user. So when I
>>     install R using the MacOS installer, where should it be installed,
>>     and where should it install packages?
>>
>>     I would find it strange if the installer wanted to install R.app
>>     anywhere but the system /Applications folder. That's where almost
>>     everything else I use gets installed.
>>
>>     The installer also installs two kinds of R packages: base and
>>     recommended ones. Base packages are closely tied to the internals
>>     and can't be updated without updating everything, so it makes sense
>>     to install them in the system library if R itself is going there.
>>
>>     But what about recommended packages? They are contributed packages,
>>     and they are often updated between R releases. Should they go by
>>     default into a user library?
>>
>>     Duncan Murdoch
>>
>>         Jim
>>
>>         On Sun, May 1, 2022 at 9:12 AM Duncan Murdoch
>>         <murdoch.duncan at gmail.com> wrote:
>>
>>             On 30/04/2022 2:58 p.m., Patrick Schratz wrote:
>>
>>                 They don't go there "silently" as in unnoticed - they go
>>                 there if
>>                 you instruct R to do so. That's why there is an explicit
>>                 choice in
>>                 the Installer. Otherwise regular R rules apply.
>>
>>                 Where is this choice in the installer? I don?t see a
>>                 menu/setting which
>>                 users could change to install packages into a user lib
>>                 instead of the
>>                 system lib (if they are part of the |admin| group).
>>                 To me, they go there if the lib is writable - and ?the
>>                 common? R user
>>                 does not know that the system lib is writeable by default.
>>
>>             I think Simon is talking about the package installer in
>>             R.app and you
>>             are talking about the installer for R itself. The package
>>             installer
>>             dialog in R.app has a pretty clear section called Install
>>             Location.
>>
>>             Duncan Murdoch
>>
>>                 It only does so for admin users. Unlike "managed" unix
>>                 systems, on
>>                 macOS you have essentially two situations:
>>
>>                 On a "personal" machine (like laptop) the user is the
>>                 main user and
>>                 admin. Therefore it makes a lot more sense for the user
>>                 to use a
>>                 single location for managing packages which is at the
>>                 system level.
>>                 This also allows easy R upgrades. In addition, locations
>>                 in user
>>                 home raise a lot of issues (see the various discussion
>>                 where this
>>                 bites people on Windows) due to interactions with
>>                 software that does
>>                 mirroring, backups etc.. Hence this approach "just
>>                 works" as one
>>                 would expect on a Mac.
>>
>>                 To be clear: I don?t question the system-wide
>>                 installation and I think
>>                 this is good as is (this also happens on Linux).
>>                 I am questioning the group write permissions for the
>>                 system lib.
>>
>>                 If the user wishes to use his/her private library, it is
>>                 trivial -
>>                 just click on "At User Level" and from then on all
>>                 packages are
>>                 managed user's local library just like on any other
>>                 platform.
>>
>>                 I might be missing something obvious but where is this
>>                 option ?at the
>>                 user level?? I assumed you?re talking about the official
>>                 |.dmg|
>>                 installer - which does not have such an option AFAICS?
>>
>>                 On a "managed" Mac the user is not an admin and
>>                 therefore the
>>                 behavior makes no difference. The status quo just makes
>>                 it easier
>>                 for admins to manage the shared library, but in reality
>>                 this doesn't
>>                 matter as one would assume the admins know what they are
>>                 doing.
>>
>>                 I disagree on this, especially the point ?makes it
>>                 easier for admins to
>>                 manage the shared library?.
>>                 Admins should (and will) always be able to manage the
>>                 system lib /after/
>>                 authenticating (as on Linux). The authentication step
>>                 does not really
>>                 make a difference in practice for admins and is required
>>                 in almost all
>>                 places where system-wide changes are desired.
>>
>>                 This is also the /core/ of the whole discussion: 775 vs
>>                 755 (WRT to
>>                 directory permissions).
>>                 I don?t see any (strong) reason that would result in 775
>>                  > 755.
>>                 (If so, then the default should probably also be changed
>>                 on Linux.)
>>                 In a previous message, Kevin Ushey also agreed on the
>>                 point that
>>                 explicit authorization should be required to write into
>>                 the system lib.
>>                 I assume there might be many more people who would
>>                 actually agree on
>>                 this 755 being preferable in this situation.
>>                 How can a proposal be phrased to reconsider this setting
>>                 that is
>>                 evaluated by a representative group of people?
>>                 I am not claiming to be right but I?d be interested in a
>>                 multi-person
>>                 evaluation of this setting rather than keeping this at a
>>                 person-to-person discussion level.
>>
>>                 Well, having administered company-wide R installations
>>                 in large
>>                 companies for almost two decades I'd strongly disagree.
>>                 As an admin
>>                 you want as few user-installed packages as possible,
>>                 because they
>>                 are guaranteed to cause problems. You want to limit this
>>                 for things
>>                 like development of packages where you want the stable
>>                 version
>>                 globally and development version locally (and this is
>>                 not just me -
>>                 have a look how the top tech companies manage their
>>                 software). You
>>                 have a reliable, stable central location - if you don't
>>                 do that then
>>                 you'll have n libraries to manage for n users which is
>>                 absolutely
>>                 not sustainable as users will break their libraries and
>>                 you cannot
>>                 even upgrade R. Also having a central, shared library is
>>                 crucial for
>>                 collaboration. Unlike in Python in R it actually works
>>                 since R and
>>                 CRAN doesn't allow randomly breaking reverse-dependencies.
>>
>>                 As a system engineer and admin myself (for several ?large?
>>                 companies/institutions), I kindly disagree on your view
>>                 here.
>>                 User packages are not a problem but /a feature/,
>>                 everyone can install
>>                 the versions they need for their project.
>>                 They don?t interfere with packages from other users and
>>                 are not forced
>>                 go with the update interval of an admin.
>>                 With the additional use of renv (thanks Kevin!),
>>                 redundancy is highly
>>                 reduced as a shared cache can be used from with users
>>                 can simply use
>>                 symlinks rather than installing the x-th copy of the
>>                 same R package
>>                 version. But this is partly off-topic WRT to the actual
>>                 discussion.
>>
>>                 Overall this sub-discussion part might come down to the
>>                 philosophy of
>>                 having a ?centrally managed, unflexible admin
>>                 installation? or a
>>                 ?centrally managed, partly-flexible admin installation?
>>                 where only the R
>>                 versions and system libs are managed but users have the
>>                 freedom to
>>                 install any R packages they want.
>>                 Also in ?my? philosophy, it?s not about ?upgrading? R
>>                 and removing the
>>                 previous version but adding new versions as they come in
>>                 and keeping
>>                 previous ones - for the purpose of reproducibility.
>>                 I usually keep the latest patch version of a minor
>>                 version and aim to
>>                 provide a consistent R environment for various minor
>>                 versions where
>>                 users are guaranteed to be able to work with that minor
>>                 version in a
>>                 flexible way (i.e. by installing user packages as they
>>                 want) for many
>>                 years ahead.
>>
>>                 As mentioned before and above I disagree. The proposal
>>                 doesn't
>>                 matter for managed Macs but would negatively affect
>>                 users that are
>>                 single-user admins and since that is typically the case
>>                 for the
>>                 majority of Mac R users (as they typically are on their
>>                 personal
>>                 machines) I don't see any upshot. All it would do is to
>>                 prevent
>>                 typical R users to install packages directly.
>>
>>                 How would it affect single-user admins in a negative way?
>>                 They can
>>
>>                 * still install packages per R minor version into a
>>                 dedicated user library
>>                 * install multiple R minor versions side by side
>>                 * actually enjoy the same behavior as on Linux
>>
>>                 All it would do is to prevent typical R users to install
>>                 packages
>>                 directly.
>>
>>                 I don?t understand this point. It would behave similar
>>                 as on Linux,
>>                 where users are prompted to create a user library (on
>>                 first use and if
>>                 non exists yet).
>>
>>                 As you can see, the overall discussion topic is quite
>>                 important to me
>>                 and I am still convinced that the current state on macOS
>>                 is suboptimal.
>>                 Thanks for your time and sharing your thoughts.
>>
>>                 Cheers
>>                 Patrick
>>
>>                 On 25 Apr 2022, at 1:46, Simon Urbanek wrote:
>>
>>                 Patrick,
>>
>>                 sorry fo the delayed reply - this was not a quick e-mail
>>                 so I had to
>>                 find time after the release :)
>>
>>                 On Apr 3, 2022, at 8:26 PM, Patrick Schratz
>>                 <patrick.schratz at gmail.com> wrote:
>>
>>                 Hi Simon,
>>
>>                 thanks for your extensive reply.
>>
>>                 The choice is deliberate: the admin group on macOS
>>                 corresponds
>>                 to users that are allowed to install system-wide
>>                 software so it
>>                 allows all admins on the machine to install packages
>>                 which is
>>                 the expected way on macOS.
>>
>>                 I think this choice is unfortunate as it contrasts with
>>                 existing
>>                 behavior on other platforms where one needs to explicitly
>>                 request admin privileges by either using sudo or
>>                 starting R as
>>                 an admin.
>>                 On macOS, packages just go into the system lib ?silently?
>>                 because of the write permissions granted via the admin
>>                 group.
>>                 See also my comments further down for more details on this.
>>
>>                 They don't go there "silently" as in unnoticed - they go
>>                 there if
>>                 you instruct R to do so. That's why there is an explicit
>>                 choice in
>>                 the Installer. Otherwise regular R rules apply.
>>
>>                 Also the versioning of the R framework as x.y is also
>>                 deliberate
>>                 - upgrading R to a new patch version does *not* require
>>                 re-installation of packages, they work by design so in
>>                 fact the
>>                 system location is the safest way to do that. Also note
>>                 that
>>                 packages are never removed by the installer.
>>
>>                 Thanks, I am aware that a patch update does not require a
>>                 reinstallation as the packages are functional across
>>                 minor versions.
>>
>>                 I checked again and was indeed wrong, patch updates from
>>                 the
>>                 CRAN installer do not remove additional custom packages
>>                 in the
>>                 system lib.
>>                 I was confused by some custom approaches of mine which
>>                 cause
>>                 this behavior - sorry for this!
>>
>>                 So out of the items listed in "The problem" they are all
>>                 not
>>                 true with the exception of the comparison with the other
>>                 platforms, but even that difference is very subtle as it
>>                 only
>>                 affects the default on the first installation and not
>>                 regular
>>                 use (and I'm, not even sure it that is true since admin
>>                 users
>>                 can still install in the system location on other
>>                 platforms).
>>
>>                 On Linux you would need to do explicitly invoke sudo R
>>                 to allow
>>                 writing into the system lib.
>>                 The issue on macOS is that a regular start of R allows
>>                 system
>>                 lib write permissions.
>>                 In my current view I think a similar behavior as on
>>                 Linux would
>>                 be great, i.e. to explicitly having to request admin
>>                 privileges
>>                 for this task.
>>
>>                 It only does so for admin users. Unlike "managed" unix
>>                 systems, on
>>                 macOS you have essentially two situations:
>>
>>                 On a "personal" machine (like laptop) the user is the
>>                 main user and
>>                 admin. Therefore it makes a lot more sense for the user
>>                 to use a
>>                 single location for managing packages which is at the
>>                 system level.
>>                 This also allows easy R upgrades. In addition, locations
>>                 in user
>>                 home raise a lot of issues (see the various discussion
>>                 where this
>>                 bites people on Windows) due to interactions with
>>                 software that does
>>                 mirroring, backups etc.. Hence this approach "just
>>                 works" as one
>>                 would expect on a Mac. If the user wishes to use his/her
>>                 private
>>                 library, it is trivial - just click on "At User Level"
>>                 and from then
>>                 on all packages are managed user's local library just
>>                 like on any
>>                 other platform.
>>
>>                 On a "managed" Mac the user is not an admin and
>>                 therefore the
>>                 behavior makes no difference. The status quo just makes
>>                 it easier
>>                 for admins to manage the shared library, but in reality
>>                 this doesn't
>>                 matter as one would assume the admins know what they are
>>                 doing.
>>
>>                 I don?t understand the part ?as it only affects the
>>                 default on
>>                 the first installation and not regular use? of your reply -
>>                 could you clarify this?
>>                 Unless a user creates a user lib manually, packages will
>>                 always
>>                 go into the system lib - not only on first use - but I
>>                 might be
>>                 misunderstanding your comment here.
>>
>>                 I would argue that the current setup tends to be a lot
>>                 safer
>>                 than the alternatives, because it allows commonly used
>>                 packages
>>                 to be installed at the system level and private packages
>>                 to be
>>                 installed at user level. This is also the design
>>                 typically used
>>                 on shared machines, where you separate local packages
>>                 from user
>>                 packages where local ones are installed by
>>                 administrators - so
>>                 exactly the same setup. Moreover R upgrades are a lot
>>                 cleaner,
>>                 since you can easily upgrade all system packages at once
>>                 so you
>>                 don't have to worry about individual users having stale
>>                 packages
>>                 - the biggest problem for admins.
>>
>>                 Yes and no.
>>                 Sometimes system admins want to install certain packages
>>                 globally - however, I never do so for the following reason:
>>                 Often this will lead to multiple package installations,
>>                 i.e. one
>>                 in the syslib and one in the user lib (if the user
>>                 installs the
>>                 package again for some reason which quite often happens).
>>                 Often these duplicated packages will have different
>>                 versions and
>>                 users are confused which one is actually loaded (the
>>                 user lib
>>                 one is as it is first in the path).
>>
>>                 Aside from this practical point, Macs are rarely used in a
>>                 shared way.
>>                 And even if, I?d highly favor having to request write
>>                 permissions into the syslib rather it happening by default.
>>
>>                 Imagine a scenario where the admin of a shared Mac
>>                 constantly
>>                 writes into the syslib (because this is the default). This
>>                 syslib is then also used by other non-admin users on the
>>                 system.
>>                 I don?t think this is a desired scenario and might cause
>>                 lot?s
>>                 of confusion (not even mentioning the fact if all people
>>                 in this
>>                 scenario are aware what?s going on given that this is a
>>                 niche
>>                 topic).
>>                 Here I think a one-time central installation of R and
>>                 then only
>>                 working with user libs (as on Linux) would be preferable.
>>
>>                 Well, having administered company-wide R installations
>>                 in large
>>                 companies for almost two decades I'd strongly disagree.
>>                 As an admin
>>                 you want as few user-installed packages as possible,
>>                 because they
>>                 are guaranteed to cause problems. You want to limit this
>>                 for things
>>                 like development of packages where you want the stable
>>                 version
>>                 globally and development version locally (and this is
>>                 not just me -
>>                 have a look how the top tech companies manage their
>>                 software). You
>>                 have a reliable, stable central location - if you don't
>>                 do that then
>>                 you'll have n libraries to manage for n users which is
>>                 absolutely
>>                 not sustainable as users will break their libraries and
>>                 you cannot
>>                 even upgrade R. Also having a central, shared library is
>>                 crucial for
>>                 collaboration. Unlike in Python in R it actually works
>>                 since R and
>>                 CRAN doesn't allow randomly breaking reverse-dependencies.
>>
>>                  From a technical perspective, I know that setting
>>                 root:root on
>>                 macOS is not possible. My proposed change to 755 (and
>>                 leaving
>>                 root:admin) would however exactly mimic this (and the
>>                 one of
>>                 Linux installs) behavior:
>>
>>                 ? admins would need to do sudo R to install into the
>>                 system library
>>                 ? otherwise they are prompted to create a user library
>>                 Which downsides would this approach have? Currently I
>>                 don?t see
>>                 any. It would even harmonize CRAN installer behavior across
>>                 platforms.
>>
>>                 I'd be happy to hear from more Mac user if there are
>>                 reasons to
>>                 change the default, but as I outlined the choices were
>>                 deliberate after weighting the pros and cons. In my view
>>                 the
>>                 major issue with the proposal it that is would prevent
>>                 sharing
>>                 of packages, make R upgrades a lot harder and prevent admin
>>                 users from using the current tools for package
>>                 management - and
>>                 that includes the ability to separate system and user
>>                 packages
>>                 on single-user machines.
>>
>>                 I?ll try to vision the practical changes of this:
>>
>>                 ? Patch update experience would not change as custom
>>                 packages
>>                 will be in the user lib for the respective minor version
>>                 (by
>>                 default)
>>                 ? Admins are still able to install into the system lib when
>>                 using sudo R
>>                 ? AFAICS admins will still be able to separate system
>>                 and user
>>                 packages as they can use sudo R for syslib installs. To
>>                 me, the
>>                 proposed change would even make the behaviour more clear
>>                 than
>>                 before (which requires to create a hidden folder (user
>>                 lib) in
>>                 the right place to actually use a user lib).
>>                 Let me know if I overlook something - but currently I
>>                 don?t see
>>                 any downside but various positive impacts.
>>
>>                 As mentioned before and above I disagree. The proposal
>>                 doesn't
>>                 matter for managed Macs but would negatively affect
>>                 users that are
>>                 single-user admins and since that is typically the case
>>                 for the
>>                 majority of Mac R users (as they typically are on their
>>                 personal
>>                 machines) I don't see any upshot. All it would do is to
>>                 prevent
>>                 typical R users to install packages directly.
>>
>>                 Last, I wanted to ask if the source code for the CRAN
>>                 installer
>>                 is publicly available? I could not find it and would be
>>                 interested to take a look into it. If this is not
>>                 possible for
>>                 some reason, I would also be interested in getting to
>>                 know the
>>                 reason for this decision.
>>
>>                 Everything is in the R SVN, the R build and release
>>                 system is in
>>             https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4
>>                 <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4>
>>                 <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4
>>                 <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4>>
>>                 and Apple Installer packaging is in
>>             https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging
>>                 <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging>
>>
>>                 <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging
>>                 <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging>>
>>
>>                 and the relevant postflight script is in
>>             https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging/scripts-R-fw/postflight
>>                 <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging/scripts-R-fw/postflight>
>>
>>                 <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging/scripts-R-fw/postflight
>>                 <https://svn.r-project.org/R-dev-web/trunk/QA/Simon/R4/packaging/scripts-R-fw/postflight>>
>>
>>                 On Apr 13, 2022, at 8:43 PM, Patrick Schratz
>>                 <patrick.schratz at gmail.com> wrote:
>>
>>                 Related to this Q: Are the macOS CRAN policies actively
>>                 discussed by a team of people (who might eventually also be
>>                 willing to share their thoughts or could be addressed
>>                 with such
>>                 questions) or are you solely responsible for it?
>>
>>                 CRAN is an entire team, so yes, but as for anything
>>                 Mac-related it
>>                 includes R-core and other stake holders that have
>>                 expressed interest
>>                 before (e.g. Bioconductor). Obviously, this (R-SIG-Mac)
>>                 is also a
>>                 good place as that includes anyone who cares about R on
>>                 macOS.
>>
>>                 Cheers,
>>
>>                 Simon
>>
>>                 _______________________________________________
>>                 R-SIG-Mac mailing list
>>                 R-SIG-Mac at r-project.org
>>             https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>                 <https://stat.ethz.ch/mailman/listinfo/r-sig-mac>
>>
>>             _______________________________________________
>>             R-SIG-Mac mailing list
>>             R-SIG-Mac at r-project.org
>>
>>         https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>             <https://stat.ethz.ch/mailman/listinfo/r-sig-mac>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20220503/ad2ddf56/attachment-0001.html>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 870 bytes
Desc: OpenPGP digital signature
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20220503/ad2ddf56/attachment-0001.sig>

From @@ch@ndh|@| @end|ng |rom bt|nternet@com  Tue May  3 09:01:41 2022
From: @@ch@ndh|@| @end|ng |rom bt|nternet@com (Amarjit Chandhial)
Date: Tue, 3 May 2022 08:01:41 +0100 (BST)
Subject: [R-SIG-Mac] R Console screen window size
Message-ID: <1d0b2a51.10b5e.18088b985d0.Webtop.109@btinternet.com>



Hi,


A general question regarding the size of the R Console screen:

To adjust the size I can Toolbar -> Window -> Zoom. I can also adjust 
via the corners. Is there a way to restore the default size?


thanks,
Amarjit



	[[alternative HTML version deleted]]


From @@ch@ndh|@| @end|ng |rom bt|nternet@com  Tue May  3 09:01:53 2022
From: @@ch@ndh|@| @end|ng |rom bt|nternet@com (Amarjit Chandhial)
Date: Tue, 3 May 2022 08:01:53 +0100 (BST)
Subject: [R-SIG-Mac] R Console window size
Message-ID: <2effdabb.10b62.18088b9b412.Webtop.109@btinternet.com>



Hi,


A general question:

Regarding the size of R Console screen. to adjust the size I can Toolbar 
-> Window -> Zoom or Minimize, buta I can also adjust manually. Is there 
a way to restore the default size?


thanks,
Amarjit



	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Tue May  3 10:50:03 2022
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 3 May 2022 04:50:03 -0400
Subject: [R-SIG-Mac] CRAN installer for macOS - directory permissions
In-Reply-To: <4E015B0C-9CF4-4AD7-9909-15A809B0628B@gmail.com>
References: <36345395-F4E6-4069-9900-990E283FA7AC@gmail.com>
 <9200B51A-3A42-42B1-8E1F-4A31C61D5AFA@R-project.org>
 <4F79D380-A4F5-4562-97C2-7B0C4693EEB7@gmail.com>
 <290E0344-9E1B-4979-B211-321B0633C606@R-project.org>
 <21CB0991-A1A8-4F36-B151-93AD204D7A09@gmail.com>
 <1de0018b-addd-2aed-4f00-dd4a86b08574@gmail.com>
 <CAD6tx96Jeh8Lur8wQaZ-nUWpqwQddjoLy1=MdQzX7zYJJEht3g@mail.gmail.com>
 <8a3ee598-88af-f8f6-251a-163a87887044@gmail.com>
 <A6FDE15B-51A1-49CA-8F0C-8DA76C79CD5C@gmail.com>
 <29f7add2-1da6-8a7e-82cb-c01ec6b393f2@gmail.com>
 <4E015B0C-9CF4-4AD7-9909-15A809B0628B@gmail.com>
Message-ID: <2459bf24-2a7a-58fc-74a8-e8fceeb5ea9e@gmail.com>

Just one more comment below.

On 03/05/2022 2:52 a.m., Patrick Schratz wrote:
>     I'd really rather have just one library on my system. In special
>     circumstances I sometimes want to have two different versions of a
>     package installed, and then I need an extra library, but normally I
>     want just one, because it reduces confusion and prevents errors that
>     can in the worst case be catastrophic. (An example is given down below.)
> 
> I think we should distinguish here between ?what one wants personally? 
> and ?how R works on most systems? and ?why a user library exists in the 
> first place?.
> Both Windows and Linux don?t allow ?normal users? to write into the 
> system lib and require a user library (which to me is the right approach).
> -> Aligning macOS to this state would simplify things for users.
> 
> Also user libraries are a quite common thing across many languages. R is 
> a bit special here in that it ships much of it ?default? functionality 
> split in ?base? and ?recommended? packages of which some are mainly 
> there for historic reasons (arguably).
> I really don?t think that everything should be in one library, simply 
> for the fact that users can easily destroy the system-wide installation 
> by this.
> 
>     Users *should* interact with recommended packages. As I said before,
>     recommended packages are contributed packages, and they can be
>     updated between R releases. If they are updated, in normal
>     circumstances users *should* update the default copy. If your
>     proposal makes this harder, then that's a strong negative in my opinion.
> 
> I didn?t say they should not. But they should install updated 
> recommended packages into the user lib. Updated versions of rec. pkgs in 
> there will be take precedence when loading. This is how things are 
> working on Win and Linux since ever (?).
> Why would users need to update the default copy in the system lib?

It prevents easily made errors.

Let's pretend a contributed package (e.g. a recommended package) in the 
system lib has a newly discovered bug, and I update it with the fix, 
then a little while later accidentally remove it.

Two scenarios:

1.  I have a user lib and a system lib.  In this case, the fix would 
have gone into my user lib, and that's where the delete would happen 
too.  When I try to use the package, I'd get no warning that I'm using 
the buggy copy from the system lib, I'll just get incorrect results.

2.  I do everything in the system lib.  The fix went there, and the 
deletion happened there.  When I try to use the package, I'll get

   Error in library(foobar) : there is no package called ?foobar?

and I'll realize I need to reinstall it.

I prefer scenario 2.  If I'm going to make mistakes, I want to know 
about them.  If I am updating buggy software, I want it to be harder to 
keep the old version than to replace it.

Duncan Murdoch


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Tue May  3 16:07:41 2022
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Tue, 3 May 2022 15:07:41 +0100
Subject: [R-SIG-Mac] R CMD check "HTML version of manual" NOTE/Warnings
In-Reply-To: <c5fc924b-8154-b541-41b1-0d10a3fe2475@stats.ox.ac.uk>
References: <8c7b94c4-b0de-0e32-da29-0d6701e503e7@mcmaster.ca>
 <e964b23d-0905-c7a4-4474-98032268d017@stats.ox.ac.uk>
 <e790b76b-e615-2fce-dcec-e09efabd59b5@mcmaster.ca>
 <F963B5EF-0F5F-4D18-87FF-1640E57D2E1A@gmail.com>
 <c5fc924b-8154-b541-41b1-0d10a3fe2475@stats.ox.ac.uk>
Message-ID: <288e3147-a4c9-22f7-fbd9-8d9333a12dcf@stats.ox.ac.uk>

To round this off, R-patched has the NEWS item

     ? Setting environment variable _R_CHECK_RD_VALIDATE_RD2HTML_ to a
       false value will override R CMD check --as-cran and turn off HTML
       validation.  This provides a way to circumvent a problematic
       tidy.

       The 2006 version that ships with macOS is always skipped.

and R-admin now says

R CMD check --as-cran also makes use of ?HTML Tidy?. macOS has a version 
in /usr/bin/tidy dating from 2006 which is far too old and is skipped. 
Up-to-date versions can be installed from http://binaries.html-tidy.org/.

The current version there is 5.8.0, later than Debian's 5.6.0 used in 
developing this and detecting further issues in Rd2HTML that have since 
been addressed.

So the simplest thing for someone wanting to do an -as-cran check is to 
install html-tidy 5.8.0.

Unfortunately there is nothing we can do about 4.2.0.

On 26/04/2022 16:22, Prof Brian Ripley wrote:
> On 26/04/2022 15:43, peter dalgaard wrote:
>> Yes, I think this should go to r-package-devel or maybe even file a 
>> bug report against "R CMD check". Looks like we "just" need to revise 
>> the logic at the start of check_Rd2HTML():
>>
>> ???? check_Rd2HTML <- function(pkgdir) {
>> ???????? if(!nzchar(Sys.which("tidy")) ||
>> ??????????? !startsWith(system2("tidy", "--version", stdout = TRUE),
>> ??????????????????????? "HTML Tidy"))
>> ???????????? return()
>>
>> to either
>>
>> - look for a version number (which the Apple builds don't have)
>> - explicitly reject the 2006 Apple builds
>> - somehow allow for an override using an environment variable
> 
> This is switched on by _R_CHECK_RD_VALIDATE_RD2HTML_=true or --as-cran. 
>  ?I plan to at least let _R_CHECK_RD_VALIDATE_RD2HTML_=false override 
> --as-cran.
> 
> There seems to have been a report on r-package-devel not mentioning macOS:
> 
> https://stat.ethz.ch/pipermail/r-package-devel/2022q1/007804.html
> https://stat.ethz.ch/pipermail/r-package-devel/2022q2/007932.html
> 
> but I don't think anyone had a clue that the macOS 'tidy' might be 
> insufficient.
> 
>>
>> or thereabouts...
>>
>> - pd
>>
>>> On 26 Apr 2022, at 16:25 , John Fox <jfox at mcmaster.ca> wrote:
>>>
>>> Dear Brian,
>>>
>>> Thank you very much for the explanation. Please see interline below:
>>>
>>> On 2022-04-25 4:51 p.m., Prof Brian Ripley wrote:
>>>> On 25/04/2022 20:04, John Fox wrote:
>>>>> Dear R-sig-mac list members,
>>>>>
>>>>> When checking packages --as-cran with R 4.2.0 (and R 4.2.0 
>>>>> patched), I'm seeing multiple warnings (and a NOTE) concerning the 
>>>>> HTML version of the package help-page manuals. The warning appears 
>>>>> for every .Rd file in all of the packages that I've checked. I 
>>>>> didn't see this problem before R 4.2.0.
>>>>>
>>>>> I'm writing to the r-sig-mac list rather than r-package-devel 
>>>>> because I
>>>> Unfortunately the authors of this are not on r-sig-mac.
>>>
>>> Should I mention this as well on r-package-devel?
>>>
>>>>> don't encounter the same problem under Windows. Nor does it appear 
>>>>> on the CRAN check pages for the packages.
>>>> This check is only done if you have 'tidy' on the path.? My Monterey 
>>>> M1 MBP has
>>>> auk2% tidy --version
>>>> HTML Tidy for Mac OS X released on 31 October 2006 - Apple Inc. 
>>>> build 2649
>>>
>>> That's exactly the version installed on my MacBook Pro. Is this 
>>> standard for Monterey? If not, would it be best simply to remove tidy 
>>> (and how did it get there?).
>>>
>>>> I think that is far too old.? The short answer is to ignore these, 
>>>> or update tidy (from http://binaries.html-tidy.org/) which (5.8.0) 
>>>> finds different issues for car that I do not see on Fedora (with 
>>>> 5.7.16).
>>>
>>> I saw these warnings for every .Rd file in all of the packages I 
>>> checked, not just for the car package. The HTML is presumably 
>>> generated from the .Rd files by the R installation process. If tidy 
>>> is general, or common, on Monterey Macs, I wonder why others aren't 
>>> reporting similar warnings on R CMD check --as-cran.
>>>
>>>> Probably your Windows machine does not have tidy installed.
>>>>> I know that there's been discussion of adding an HTML manual, which 
>>>>> seems a good idea, but I didn't realize that this has apparently 
>>>>> already been implemented.
>>>>>
>>>>> Has anyone else experienced this problem or does anyone understand 
>>>>> its source? AFAIK, there's nothing unusual about the R installation 
>>>>> on my Mac, but of course there may be some setting that 
>>>>> inadvertently turned on checking the HTML manual.
>>>> --as-cran turned it on ((f tidy is available).
>>>
>>> Again, thank you for the explanation.
>>>
>>> Best,
>>> John
>>>
>>>>>
>>>>> Here's an example (with many lines elided, . . .):
>>>>>
>>>>> ------ snip ------
>>>>>
>>>>> Johns-MacBook-Pro:car johnfox$ R CMD check --as-cran car_3.0-13.tar.gz
>>>>> * using log directory 
>>>>> '/Users/johnfox/Documents/R-package-sources/car/car.Rcheck'
>>>>> * using R version 4.2.0 Patched (2022-04-24 r82246)
>>>>> * using platform: aarch64-apple-darwin20 (64-bit)
>>>>> * using session charset: UTF-8
>>>>> * using option '--as-cran'
>>>>> * checking for file 'car/DESCRIPTION' ... OK
>>>>> * this is package 'car' version '3.0-13'
>>>>> * checking CRAN incoming feasibility ... Note_to_CRAN_maintainers
>>>>> Maintainer: 'John Fox <jfox at mcmaster.ca>'
>>>>> * checking package namespace information ... OK
>>>>>
>>>>> . . .
>>>>>
>>>>> * checking PDF version of manual ... OK
>>>>> * checking HTML version of manual ... NOTE
>>>>> Found the following problems:
>>>>> Anova.Rd:4:1: Warning: <link> inserting "type" attribute
>>>>> Anova.Rd:12:1: Warning: <script> proprietary attribute "onload"
>>>>> Anova.Rd:12:1: Warning: <script> inserting "type" attribute
>>>>> Anova.Rd:17:1: Warning: <table> lacks "summary" attribute
>>>>> Anova.Rd:135:1: Warning: <table> lacks "summary" attribute
>>>>> Anova.Rd:285:1: Warning: <table> lacks "summary" attribute
>>>>> Boot.Rd:4:1: Warning: <link> inserting "type" attribute
>>>>> Boot.Rd:12:1: Warning: <script> proprietary attribute "onload"
>>>>> Boot.Rd:12:1: Warning: <script> inserting "type" attribute
>>>>> Boot.Rd:17:1: Warning: <table> lacks "summary" attribute
>>>>> Boot.Rd:56:1: Warning: <table> lacks "summary" attribute
>>>>>
>>>>> . . .
>>>>>
>>>>> which.names.Rd:12:1: Warning: <script> proprietary attribute "onload"
>>>>> which.names.Rd:12:1: Warning: <script> inserting "type" attribute
>>>>> which.names.Rd:17:1: Warning: <table> lacks "summary" attribute
>>>>> which.names.Rd:44:1: Warning: <table> lacks "summary" attribute
>>>>> * checking for non-standard things in the check directory ... OK
>>>>> * checking for detritus in the temp directory ... OK
>>>>> * DONE
>>>>>
>>>>> Status: 1 NOTE
>>>>> See
>>>>>    
>>>>> '/Users/johnfox/Documents/R-package-sources/car/car.Rcheck/00check.log' 
>>>>>
>>>>> for details.
>>>>>
>>>>> ------ snip ------
>>>>>
>>>>> Any help would be appreciated.
>>>>>
>>>>> Thanks,
>>>>> ?? John
>>> -- 
>>> John Fox, Professor Emeritus
>>> McMaster University
>>> Hamilton, Ontario, Canada
>>> web: https://socialsciences.mcmaster.ca/jfox/
>>>
>>> _______________________________________________
>>> R-SIG-Mac mailing list
>>> R-SIG-Mac at r-project.org
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>
> 
> 


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From @|mon@urb@nek @end|ng |rom R-project@org  Tue May  3 23:03:17 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 4 May 2022 09:03:17 +1200
Subject: [R-SIG-Mac] R Console window size
In-Reply-To: <2effdabb.10b62.18088b9b412.Webtop.109@btinternet.com>
References: <2effdabb.10b62.18088b9b412.Webtop.109@btinternet.com>
Message-ID: <738E644F-3E08-400B-B1DB-AE97B3FDB799@R-project.org>

Amarjit,

no, there is no shortcut to restore the font size to its default. It is probably a good idea to add such a shortcut (typically <Cmd><0>). The default size (11pt) is only used if your preferences don't say otherwise, so you can remove or change the preferences. To reset the default console font you can close R and run

defaults delete org.R-project.R "R Console default font"

in Terminal. Analogously, for the editor font you can use

defaults delete org.R-project.R "R Script Editor default font"

Cheers,
Simon



> On 3/05/2022, at 7:01 PM, Amarjit Chandhial via R-SIG-Mac <r-sig-mac at r-project.org> wrote:
> 
> 
> 
> Hi,
> 
> 
> A general question:
> 
> Regarding the size of R Console screen. to adjust the size I can Toolbar 
> -> Window -> Zoom or Minimize, buta I can also adjust manually. Is there 
> a way to restore the default size?
> 
> 
> thanks,
> Amarjit
> 
> 
> 
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 


From @@ch@ndh|@| @end|ng |rom bt|nternet@com  Wed May  4 07:52:27 2022
From: @@ch@ndh|@| @end|ng |rom bt|nternet@com (Amarjit Chandhial)
Date: Wed, 4 May 2022 06:52:27 +0100 (BST)
Subject: [R-SIG-Mac] R Console window size
In-Reply-To: <738E644F-3E08-400B-B1DB-AE97B3FDB799@R-project.org>
References: <2effdabb.10b62.18088b9b412.Webtop.109@btinternet.com>
 <738E644F-3E08-400B-B1DB-AE97B3FDB799@R-project.org>
Message-ID: <44521cef.2922.1808da08114.Webtop.96@btinternet.com>





Hi Simon,


Not the font size to its default, but the R Console.

To adjust the size, I can:
Toolbar -> Window -> Zoom, and R Console will maximise to the left.
To restore:
Toolbar -> Window -> Zoom, and R Console will adjust back to the right.

However, if I adjust the size of the R Console via the corners, how do I 
restore R Console to the default size?


Cheers,
Amarjit



------ Original Message ------
From: "Simon Urbanek" <simon.urbanek at R-project.org>
To: a.chandhial at btinternet.com
Cc: r-sig-mac at r-project.org
Sent: Tuesday, 3 May, 2022 At 22:03
Subject: Re: [R-SIG-Mac] R Console window size
Amarjit,
no, there is no shortcut to restore the font size to its default. It is 
probably a good idea to add such a shortcut (typically <Cmd><0>). The 
default size (11pt) is only used if your preferences don't say 
otherwise, so you can remove or change the preferences. To reset the 
default console font you can close R and run
defaults delete org.R-project.R "R Console default font"
in Terminal. Analogously, for the editor font you can use
defaults delete org.R-project.R "R Script Editor default font"
Cheers,
Simon

On 3/05/2022, at 7:01 PM, Amarjit Chandhial via R-SIG-Mac 
<r-sig-mac at r-project.org> wrote:

Hi,

A general question:
Regarding the size of R Console screen. to adjust the size I can Toolbar
-> Window -> Zoom or Minimize, buta I can also adjust manually. Is there
a way to restore the default size?

thanks,
Amarjit

	[[alternative HTML version deleted]]
_______________________________________________
R-SIG-Mac mailing list
R-SIG-Mac at r-project.org
https://stat.ethz.ch/mailman/listinfo/r-sig-mac 
<https://stat.ethz.ch/mailman/listinfo/r-sig-mac>


	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Thu May  5 00:45:17 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Thu, 5 May 2022 10:45:17 +1200
Subject: [R-SIG-Mac] R Console window size
In-Reply-To: <44521cef.2922.1808da08114.Webtop.96@btinternet.com>
References: <2effdabb.10b62.18088b9b412.Webtop.109@btinternet.com>
 <738E644F-3E08-400B-B1DB-AE97B3FDB799@R-project.org>
 <44521cef.2922.1808da08114.Webtop.96@btinternet.com>
Message-ID: <7D940915-F6EB-40B0-8237-5FB00BD9515D@R-project.org>

Amarjit,

ah, ok, if I parse your request correctly then

defaults delete org.R-project.R "NSWindow Frame R Console Output.txt"

should reset the default position and size of the console window for the next start.

FWIW you can simply delete/rename ~/Library/Preferences/org.R-project.R.plist if you want to reset all defaults.

Cheers,
Simon


> On 4/05/2022, at 5:52 PM, Amarjit Chandhial <a.chandhial at btinternet.com> wrote:
> 
> 
> 
> Hi Simon,
> 
> 
> Not the font size to its default, but the R Console.
> 
> To adjust the size, I can:
> Toolbar -> Window -> Zoom, and R Console will maximise to the left.
> To restore:
> Toolbar -> Window -> Zoom, and R Console will adjust back to the right.
> 
> However, if I adjust the size of the R Console via the corners, how do I restore R Console to the default size?
> 
> 
> Cheers,
> Amarjit
> 
> 
> 
> 
> 
> ------ Original Message ------
> From: "Simon Urbanek" <simon.urbanek at R-project.org>
> To: a.chandhial at btinternet.com
> Cc: r-sig-mac at r-project.org
> Sent: Tuesday, 3 May, 2022 At 22:03
> Subject: Re: [R-SIG-Mac] R Console window size
> 
> Amarjit,
> 
> 
> 
> no, there is no shortcut to restore the font size to its default. It is probably a good idea to add such a shortcut (typically <Cmd><0>). The default size (11pt) is only used if your preferences don't say otherwise, so you can remove or change the preferences. To reset the default console font you can close R and run
> 
> 
> 
> 
> defaults delete org.R-project.R "R Console default font"
> 
> 
> 
> 
> in Terminal. Analogously, for the editor font you can use
> 
> 
> 
> 
> defaults delete org.R-project.R "R Script Editor default font"
> 
> 
> 
> 
> Cheers,
> 
> 
> Simon
> 
> 
> 
> 
> 
> 
> 
> 
> On 3/05/2022, at 7:01 PM, Amarjit Chandhial via R-SIG-Mac <r-sig-mac at r-project.org> wrote:
> 
> 
> 
> Hi,
> 
> 
> A general question:
> 
> Regarding the size of R Console screen. to adjust the size I can Toolbar 
> -> Window -> Zoom or Minimize, buta I can also adjust manually. Is there 
> a way to restore the default size?
> 
> 
> thanks,
> Amarjit
> 
> 
> 
> [[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac


From @@ch@ndh|@| @end|ng |rom bt|nternet@com  Thu May  5 08:55:30 2022
From: @@ch@ndh|@| @end|ng |rom bt|nternet@com (Amarjit Chandhial)
Date: Thu, 5 May 2022 07:55:30 +0100 (BST)
Subject: [R-SIG-Mac] R Console window size
In-Reply-To: <7D940915-F6EB-40B0-8237-5FB00BD9515D@R-project.org>
References: <2effdabb.10b62.18088b9b412.Webtop.109@btinternet.com>
 <738E644F-3E08-400B-B1DB-AE97B3FDB799@R-project.org>
 <44521cef.2922.1808da08114.Webtop.96@btinternet.com>
 <7D940915-F6EB-40B0-8237-5FB00BD9515D@R-project.org>
Message-ID: <7795ad41.36fd.180930093dd.Webtop.98@btinternet.com>






Hi Simon,


Unfortunately, neither of those work.


If I adjust R Console, then Toolbar -> R -> Quit R

Open terminal and type

defaults delete org.R-project.R "NSWindow Frame R Console Output.txt"

then click on R icon, R Console opens but at the adjusted size, not the 
default size.


Alternatively, if type

delete/rename ~/Library/Preferences/org.R-project.R.plist

in the terminal, I get

No such file or directory.



Please advise.


Cheers,
Amarjit



------ Original Message ------
From: "Simon Urbanek" <simon.urbanek at R-project.org>
To: a.chandhial at btinternet.com
Cc: r-sig-mac at r-project.org
Sent: Wednesday, 4 May, 2022 At 23:45
Subject: Re: [R-SIG-Mac] R Console window size
Amarjit,
ah, ok, if I parse your request correctly then
defaults delete org.R-project.R "NSWindow Frame R Console Output.txt"
should reset the default position and size of the console window for the 
next start.
FWIW you can simply delete/rename 
~/Library/Preferences/org.R-project.R.plist if you want to reset all 
defaults.
Cheers,
Simon

On 4/05/2022, at 5:52 PM, Amarjit Chandhial <a.chandhial at btinternet.com> 
wrote:

Hi Simon,

Not the font size to its default, but the R Console.
To adjust the size, I can:
Toolbar -> Window -> Zoom, and R Console will maximise to the left.
To restore:
Toolbar -> Window -> Zoom, and R Console will adjust back to the right.
However, if I adjust the size of the R Console via the corners, how do I 
restore R Console to the default size?

Cheers,
Amarjit


------ Original Message ------
From: "Simon Urbanek" <simon.urbanek at R-project.org>
To: a.chandhial at btinternet.com
Cc: r-sig-mac at r-project.org
Sent: Tuesday, 3 May, 2022 At 22:03
Subject: Re: [R-SIG-Mac] R Console window size
Amarjit,

no, there is no shortcut to restore the font size to its default. It is 
probably a good idea to add such a shortcut (typically <Cmd><0>). The 
default size (11pt) is only used if your preferences don't say 
otherwise, so you can remove or change the preferences. To reset the 
default console font you can close R and run


defaults delete org.R-project.R "R Console default font"


in Terminal. Analogously, for the editor font you can use


defaults delete org.R-project.R "R Script Editor default font"


Cheers,

Simon




On 3/05/2022, at 7:01 PM, Amarjit Chandhial via R-SIG-Mac 
<r-sig-mac at r-project.org> wrote:

Hi,

A general question:
Regarding the size of R Console screen. to adjust the size I can Toolbar
-> Window -> Zoom or Minimize, buta I can also adjust manually. Is there
a way to restore the default size?

thanks,
Amarjit

[[alternative HTML version deleted]]
_______________________________________________
R-SIG-Mac mailing list
R-SIG-Mac at r-project.org
https://stat.ethz.ch/mailman/listinfo/r-sig-mac 
<https://stat.ethz.ch/mailman/listinfo/r-sig-mac>


	[[alternative HTML version deleted]]


From ken@knob|@uch @end|ng |rom |n@erm@|r  Mon May  9 10:27:03 2022
From: ken@knob|@uch @end|ng |rom |n@erm@|r (Kenneth Knoblauch)
Date: Mon, 09 May 2022 10:27:03 +0200
Subject: [R-SIG-Mac] compilation problem
Message-ID: <55e570b35aef3c64d8f03050f979db78@inserm.fr>

Hi,

When compiling packages with C/Fortran code, I'm frequently getting the
following sort of error at the stage of testing if package can be 
installed
from temporary location:

** testing if installed package can be loaded from temporary location
Error: package or namespace load failed for 'akima' in dyn.load(file,
DLLpath = DLLpath, ...):
unable to load shared object
'/Users/ken/Library/R/x86_64/4.2/library/00LOCK-akima/00new/akima/libs/akima.so':
dlopen(/Users/ken/Library/R/x86_64/4.2/library/00LOCK-akima/00new/akima/libs/akima.so,
6): Symbol not found: ___addtf3
Referenced from: /usr/local/lib/libquadmath.0.dylib
Expected in: /usr/local/lib/libgcc_s_x86_64.1.dylib
in /usr/local/lib/libquadmath.0.dylib
Error: loading failed
Execution halted
ERROR: loading failed

Any suggestions about how to fix this?  If it is a PATH problem, how do 
I set that so that it is correct when I start up R?

Thank you.

best,

Ken

> sessionInfo()
R version 4.2.0 (2022-04-22)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Catalina 10.15.7

Matrix products: default
BLAS:
/Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib
LAPACK:
/Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib


locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats graphics grDevices utils datasets methods base

loaded via a namespace (and not attached):
[1] compiler_4.2.0 tools_4.2.0

> Sys.getenv()
  .
  .
  .
PATH /usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin
  .
  .
  .


-- 
Kenneth Knoblauch
Inserm U1208
Stem-cell and Brain Research Institute
18 avenue du Doyen L?pine
69500 Bron
France
tel: +33 (0)4 72 91 34 77
fax: +33 (0)4 72 91 34 61
portable: +33 (0)6 84 10 64 10
http://www.sbri.fr/user/1453


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Mon May  9 11:12:01 2022
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Mon, 9 May 2022 10:12:01 +0100
Subject: [R-SIG-Mac] compilation problem
In-Reply-To: <55e570b35aef3c64d8f03050f979db78@inserm.fr>
References: <55e570b35aef3c64d8f03050f979db78@inserm.fr>
Message-ID: <07059450-e4e4-baf3-4a27-9d2528e1483b@stats.ox.ac.uk>

On 09/05/2022 09:27, Kenneth Knoblauch wrote:
> Hi,
> 
> When compiling packages with C/Fortran code, I'm frequently getting the
> following sort of error at the stage of testing if package can be installed
> from temporary location:
> 
> ** testing if installed package can be loaded from temporary location
> Error: package or namespace load failed for 'akima' in dyn.load(file,
> DLLpath = DLLpath, ...):
> unable to load shared object
> '/Users/ken/Library/R/x86_64/4.2/library/00LOCK-akima/00new/akima/libs/akima.so': 
> 
> dlopen(/Users/ken/Library/R/x86_64/4.2/library/00LOCK-akima/00new/akima/libs/akima.so, 
> 
> 6): Symbol not found: ___addtf3
> Referenced from: /usr/local/lib/libquadmath.0.dylib
> Expected in: /usr/local/lib/libgcc_s_x86_64.1.dylib
> in /usr/local/lib/libquadmath.0.dylib
> Error: loading failed
> Execution halted
> ERROR: loading failed
> 
> Any suggestions about how to fix this?? If it is a PATH problem, how do 
> I set that so that it is correct when I start up R?

Can you start by telling us which Fortran compiler you have installed 
(the manual mentions several), and where 
/usr/local/lib/libquadmath.0.dylib came from?  AFAIK all the recommended 
compilers install it in /usr/local/gfortran/lib.

I'd try moving /usr/local/lib/libquadmath.0.dylib aside (and any other 
libs that look like those in /usr/local/gfortran/lib).

> 
> Thank you.
> 
> best,
> 
> Ken
> 
>> sessionInfo()
> R version 4.2.0 (2022-04-22)
> Platform: x86_64-apple-darwin17.0 (64-bit)
> Running under: macOS Catalina 10.15.7
> 
> Matrix products: default
> BLAS:
> /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib
> LAPACK:
> /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib
> 
> 
> locale:
> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
> 
> attached base packages:
> [1] stats graphics grDevices utils datasets methods base
> 
> loaded via a namespace (and not attached):
> [1] compiler_4.2.0 tools_4.2.0
> 
>> Sys.getenv()
>  ?.
>  ?.
>  ?.
> PATH /usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin
>  ?.
>  ?.
>  ?.
> 
> 


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From jcg@ntunez @end|ng |rom gm@||@com  Tue May 10 02:30:30 2022
From: jcg@ntunez @end|ng |rom gm@||@com (=?UTF-8?Q?Jos=C3=A9_Carlos_Guerrero_Ant=C3=BAnez?=)
Date: Mon, 9 May 2022 21:30:30 -0300
Subject: [R-SIG-Mac] Problems in install some packages in R 4.2
Message-ID: <CAEO28jegKnLkbyoKBvhmciZ8fdHqfCZRW4j2xTkG=JvF5Snvdw@mail.gmail.com>

Hi,

When I upgraded to R version 4.2 (Platform: x86_64-apple-darwin17.0
(64-bit)), I was having problems installing certain packages (e.g. ggplot2,
Hmisc, devtools) and their dependencies.

I got this error message "installation of package ?package? had non-zero
exit status.

I have tried several ways to install (e.g. Package Archive file (.tgz).

Any ideas on how to solve this problem, thank you very much.


-- 
Jos? Carlos Guerrero

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Tue May 10 04:47:42 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Tue, 10 May 2022 14:47:42 +1200
Subject: [R-SIG-Mac] Problems in install some packages in R 4.2
In-Reply-To: <CAEO28jegKnLkbyoKBvhmciZ8fdHqfCZRW4j2xTkG=JvF5Snvdw@mail.gmail.com>
References: <CAEO28jegKnLkbyoKBvhmciZ8fdHqfCZRW4j2xTkG=JvF5Snvdw@mail.gmail.com>
Message-ID: <6544634E-A446-4ED7-8DFB-9321F9118843@R-project.org>

Jos?,

can you be more specific as of what you did and exact output? I would recommend using a simple

install.packages("ggplot2",type="binary")

in R.

Cheers,
Simon


> On 10/05/2022, at 12:30 PM, Jos? Carlos Guerrero Ant?nez <jcgantunez at gmail.com> wrote:
> 
> Hi,
> 
> When I upgraded to R version 4.2 (Platform: x86_64-apple-darwin17.0
> (64-bit)), I was having problems installing certain packages (e.g. ggplot2,
> Hmisc, devtools) and their dependencies.
> 
> I got this error message "installation of package ?package? had non-zero
> exit status.
> 
> I have tried several ways to install (e.g. Package Archive file (.tgz).
> 
> Any ideas on how to solve this problem, thank you very much.
> 
> 
> -- 
> Jos? Carlos Guerrero
> 
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 


From pd@|gd @end|ng |rom gm@||@com  Tue May 10 11:18:13 2022
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Tue, 10 May 2022 11:18:13 +0200
Subject: [R-SIG-Mac] Problems in install some packages in R 4.2
In-Reply-To: <6544634E-A446-4ED7-8DFB-9321F9118843@R-project.org>
References: <CAEO28jegKnLkbyoKBvhmciZ8fdHqfCZRW4j2xTkG=JvF5Snvdw@mail.gmail.com>
 <6544634E-A446-4ED7-8DFB-9321F9118843@R-project.org>
Message-ID: <FBA4CD3D-B4AA-41CF-8426-633DF28E7B4F@gmail.com>

Marginally related:

The "binary" bit trips up my students from time to time (with tseries recently). 

They get the option to install from source because it's marginally newer, answer "yes" because that'w what they always do, and then installation bombs because they don't have the compilers.  

Yes, they should know better, but no... 

We might want to consider implementing something like capabilities("compilers") so that we can condition the source installs more carefully.


-pd



> On 10 May 2022, at 04:47 , Simon Urbanek <simon.urbanek at r-project.org> wrote:
> 
> Jos?,
> 
> can you be more specific as of what you did and exact output? I would recommend using a simple
> 
> install.packages("ggplot2",type="binary")
> 
> in R.
> 
> Cheers,
> Simon
> 
> 
>> On 10/05/2022, at 12:30 PM, Jos? Carlos Guerrero Ant?nez <jcgantunez at gmail.com> wrote:
>> 
>> Hi,
>> 
>> When I upgraded to R version 4.2 (Platform: x86_64-apple-darwin17.0
>> (64-bit)), I was having problems installing certain packages (e.g. ggplot2,
>> Hmisc, devtools) and their dependencies.
>> 
>> I got this error message "installation of package ?package? had non-zero
>> exit status.
>> 
>> I have tried several ways to install (e.g. Package Archive file (.tgz).
>> 
>> Any ideas on how to solve this problem, thank you very much.
>> 
>> 
>> -- 
>> Jos? Carlos Guerrero
>> 
>> 	[[alternative HTML version deleted]]
>> 
>> _______________________________________________
>> R-SIG-Mac mailing list
>> R-SIG-Mac at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>> 
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From ken@knob|@uch @end|ng |rom |n@erm@|r  Tue May 10 11:55:34 2022
From: ken@knob|@uch @end|ng |rom |n@erm@|r (Kenneth Knoblauch)
Date: Tue, 10 May 2022 11:55:34 +0200
Subject: [R-SIG-Mac] compilation problem
Message-ID: <eb7ce72ed7f5d02912cc31d135238499@inserm.fr>


First off, thank you very much.  I followed your instructions and now 
all but  2 of the packages compile without error.

To answer your questions (which are perhaps moot, now), I installed the 
compiler Intel Macs: gfortran-8.2-Mojave.dmg (ca. 87MB, GNU Fortran 8.2 
from F.X.Coudert) from https://mac.r-project.org/tools/.  I don't know 
where /usr/local/lib/libquadmath.0.dylib came from.

As you suggested, I moved aside the common packages between 
/usr/local/lib and /usr/local/gfortran/lib that are in /usr/local/lib, 
and as I indicated, nearly all of the packages compile.  The 2 that 
don't are for other reasons.

Thank you again.



> On 09/05/2022 09:27, Kenneth Knoblauch wrote:
>> Hi,
>> 
>> When compiling packages with C/Fortran code, I'm frequently getting 
>> the
>> following sort of error at the stage of testing if package can be 
>> installed
>> from temporary location:
>> 
>> ** testing if installed package can be loaded from temporary location
>> Error: package or namespace load failed for 'akima' in dyn.load(file,
>> DLLpath = DLLpath, ...):
>> unable to load shared object
>> '/Users/ken/Library/R/x86_64/4.2/library/00LOCK-akima/00new/akima/libs/akima.so':
>> 
>> dlopen(/Users/ken/Library/R/x86_64/4.2/library/00LOCK-akima/00new/akima/libs/akima.so,
>> 
>> 6): Symbol not found: ___addtf3
>> Referenced from: /usr/local/lib/libquadmath.0.dylib
>> Expected in: /usr/local/lib/libgcc_s_x86_64.1.dylib
>> in /usr/local/lib/libquadmath.0.dylib
>> Error: loading failed
>> Execution halted
>> ERROR: loading failed
>> 
>> Any suggestions about how to fix this?  If it is a PATH problem, how 
>> do
>> I set that so that it is correct when I start up R?
> 
> Can you start by telling us which Fortran compiler you have installed
> (the manual mentions several), and where
> /usr/local/lib/libquadmath.0.dylib came from?  AFAIK all the 
> recommended
> compilers install it in /usr/local/gfortran/lib.
> 
> I'd try moving /usr/local/lib/libquadmath.0.dylib aside (and any other
> libs that look like those in /usr/local/gfortran/lib).
> 
>> 
>> Thank you.
>> 
>> best,
>> 
>> Ken
>> 
>>> sessionInfo()
>> R version 4.2.0 (2022-04-22)
>> Platform: x86_64-apple-darwin17.0 (64-bit)
>> Running under: macOS Catalina 10.15.7
>> 
>> Matrix products: default
>> BLAS:
>> /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib
>> LAPACK:
>> /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib
>> 
>> 
>> locale:
>> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>> 
>> attached base packages:
>> [1] stats graphics grDevices utils datasets methods base
>> 
>> loaded via a namespace (and not attached):
>> [1] compiler_4.2.0 tools_4.2.0
>> 
>>> Sys.getenv()
>>   .
>>   .
>>   .
>> PATH /usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin
>>   .
> 
> --
> Brian D. Ripley,                  ripley using stats.ox.ac.uk
> Emeritus Professor of Applied Statistics, University of Oxford

-- 
Kenneth Knoblauch
Inserm U1208
Stem-cell and Brain Research Institute
18 avenue du Doyen L?pine
69500 Bron
France
tel: +33 (0)4 72 91 34 77
fax: +33 (0)4 72 91 34 61
portable: +33 (0)6 84 10 64 10
http://www.sbri.fr/user/1453


From jcg@ntunez @end|ng |rom gm@||@com  Wed May 11 01:41:43 2022
From: jcg@ntunez @end|ng |rom gm@||@com (=?UTF-8?Q?Jos=C3=A9_Carlos_Guerrero_Ant=C3=BAnez?=)
Date: Tue, 10 May 2022 20:41:43 -0300
Subject: [R-SIG-Mac] Problems in install some packages in R 4.2
In-Reply-To: <FBA4CD3D-B4AA-41CF-8426-633DF28E7B4F@gmail.com>
References: <CAEO28jegKnLkbyoKBvhmciZ8fdHqfCZRW4j2xTkG=JvF5Snvdw@mail.gmail.com>
 <6544634E-A446-4ED7-8DFB-9321F9118843@R-project.org>
 <FBA4CD3D-B4AA-41CF-8426-633DF28E7B4F@gmail.com>
Message-ID: <CAEO28jdMabgs3hXrtF9770zvQPT_stMODPWkWipMjtZ89A=2nQ@mail.gmail.com>

Thanks, I was able to install the binary packages.

El mar, 10 may 2022 a las 6:18, peter dalgaard (<pdalgd at gmail.com>)
escribi?:

> Marginally related:
>
> The "binary" bit trips up my students from time to time (with tseries
> recently).
>
> They get the option to install from source because it's marginally newer,
> answer "yes" because that'w what they always do, and then installation
> bombs because they don't have the compilers.
>
> Yes, they should know better, but no...
>
> We might want to consider implementing something like
> capabilities("compilers") so that we can condition the source installs more
> carefully.
>
>
> -pd
>
>
>
> > On 10 May 2022, at 04:47 , Simon Urbanek <simon.urbanek at r-project.org>
> wrote:
> >
> > Jos?,
> >
> > can you be more specific as of what you did and exact output? I would
> recommend using a simple
> >
> > install.packages("ggplot2",type="binary")
> >
> > in R.
> >
> > Cheers,
> > Simon
> >
> >
> >> On 10/05/2022, at 12:30 PM, Jos? Carlos Guerrero Ant?nez <
> jcgantunez at gmail.com> wrote:
> >>
> >> Hi,
> >>
> >> When I upgraded to R version 4.2 (Platform: x86_64-apple-darwin17.0
> >> (64-bit)), I was having problems installing certain packages (e.g.
> ggplot2,
> >> Hmisc, devtools) and their dependencies.
> >>
> >> I got this error message "installation of package ?package? had non-zero
> >> exit status.
> >>
> >> I have tried several ways to install (e.g. Package Archive file (.tgz).
> >>
> >> Any ideas on how to solve this problem, thank you very much.
> >>
> >>
> >> --
> >> Jos? Carlos Guerrero
> >>
> >>      [[alternative HTML version deleted]]
> >>
> >> _______________________________________________
> >> R-SIG-Mac mailing list
> >> R-SIG-Mac at r-project.org
> >> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> >>
> >
> > _______________________________________________
> > R-SIG-Mac mailing list
> > R-SIG-Mac at r-project.org
> > https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
>

-- 
Jos? Carlos Guerrero

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Wed May 11 07:56:03 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 11 May 2022 17:56:03 +1200
Subject: [R-SIG-Mac] Problems in install some packages in R 4.2
In-Reply-To: <FBA4CD3D-B4AA-41CF-8426-633DF28E7B4F@gmail.com>
References: <CAEO28jegKnLkbyoKBvhmciZ8fdHqfCZRW4j2xTkG=JvF5Snvdw@mail.gmail.com>
 <6544634E-A446-4ED7-8DFB-9321F9118843@R-project.org>
 <FBA4CD3D-B4AA-41CF-8426-633DF28E7B4F@gmail.com>
Message-ID: <E104A339-EA3E-46D8-BBC1-E46E6F22ED20@R-project.org>

Peter,

I agree that the current behavior is not very helpful for the majority of users. Personally, I'd change the default "no" so that users that don't know or care what it entails can still get the package installed. Note that having a compiler may not be enough, since there are often library dependencies, so compiling from sources should really be attempted only by developers that do it deliberately. The only argument I see for using the "both" default is for cases where the package binary doesn't exist, but that is another story as the user has no choice there.

Cheers,
Simon

PS: version mismatches are in principle expected due to package sources being released before binaries, but should be generally rare. However, there is currently an unusual back-log of package builds for R 4.2.0 on the high-sierra x86_64 system which should hopefully clear by tomorrow.


> On 10/05/2022, at 9:18 PM, peter dalgaard <pdalgd at gmail.com> wrote:
> 
> Marginally related:
> 
> The "binary" bit trips up my students from time to time (with tseries recently). 
> 
> They get the option to install from source because it's marginally newer, answer "yes" because that'w what they always do, and then installation bombs because they don't have the compilers.  
> 
> Yes, they should know better, but no... 
> 
> We might want to consider implementing something like capabilities("compilers") so that we can condition the source installs more carefully.
> 
> 
> -pd
> 
> 
> 
>> On 10 May 2022, at 04:47 , Simon Urbanek <simon.urbanek at r-project.org> wrote:
>> 
>> Jos?,
>> 
>> can you be more specific as of what you did and exact output? I would recommend using a simple
>> 
>> install.packages("ggplot2",type="binary")
>> 
>> in R.
>> 
>> Cheers,
>> Simon
>> 
>> 
>>> On 10/05/2022, at 12:30 PM, Jos? Carlos Guerrero Ant?nez <jcgantunez at gmail.com> wrote:
>>> 
>>> Hi,
>>> 
>>> When I upgraded to R version 4.2 (Platform: x86_64-apple-darwin17.0
>>> (64-bit)), I was having problems installing certain packages (e.g. ggplot2,
>>> Hmisc, devtools) and their dependencies.
>>> 
>>> I got this error message "installation of package ?package? had non-zero
>>> exit status.
>>> 
>>> I have tried several ways to install (e.g. Package Archive file (.tgz).
>>> 
>>> Any ideas on how to solve this problem, thank you very much.
>>> 
>>> 
>>> -- 
>>> Jos? Carlos Guerrero
>>> 
>>> 	[[alternative HTML version deleted]]
>>> 
>>> _______________________________________________
>>> R-SIG-Mac mailing list
>>> R-SIG-Mac at r-project.org
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>> 
>> 
>> _______________________________________________
>> R-SIG-Mac mailing list
>> R-SIG-Mac at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 
> -- 
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> 


From pd@|gd @end|ng |rom gm@||@com  Wed May 11 10:01:14 2022
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Wed, 11 May 2022 10:01:14 +0200
Subject: [R-SIG-Mac] Problems in install some packages in R 4.2
In-Reply-To: <E104A339-EA3E-46D8-BBC1-E46E6F22ED20@R-project.org>
References: <CAEO28jegKnLkbyoKBvhmciZ8fdHqfCZRW4j2xTkG=JvF5Snvdw@mail.gmail.com>
 <6544634E-A446-4ED7-8DFB-9321F9118843@R-project.org>
 <FBA4CD3D-B4AA-41CF-8426-633DF28E7B4F@gmail.com>
 <E104A339-EA3E-46D8-BBC1-E46E6F22ED20@R-project.org>
Message-ID: <C493C2C5-9E7B-49C0-B696-AB918EB871F7@gmail.com>

We might want to circulate this in R Core, but offhand, I'd say that since the package ecosystem is somewhat platform dependent, it could be in the platform maintainers' domain to set defaults like

 options(pkgType="binary")

in the default installation's start-up files. This would make sense on Mac & Windows, but probably not on Linux variants. Users can always override it if needed.

(There's also an issue with pure R packages, which can be source-installed if the source is newer, but the byte-compile may still take a while and not be worth it for an incremental update.)

- Peter

> On 11 May 2022, at 07:56 , Simon Urbanek <simon.urbanek at r-project.org> wrote:
> 
> Peter,
> 
> I agree that the current behavior is not very helpful for the majority of users. Personally, I'd change the default "no" so that users that don't know or care what it entails can still get the package installed. Note that having a compiler may not be enough, since there are often library dependencies, so compiling from sources should really be attempted only by developers that do it deliberately. The only argument I see for using the "both" default is for cases where the package binary doesn't exist, but that is another story as the user has no choice there.
> 
> Cheers,
> Simon
> 
> PS: version mismatches are in principle expected due to package sources being released before binaries, but should be generally rare. However, there is currently an unusual back-log of package builds for R 4.2.0 on the high-sierra x86_64 system which should hopefully clear by tomorrow.
> 
> 
>> On 10/05/2022, at 9:18 PM, peter dalgaard <pdalgd at gmail.com> wrote:
>> 
>> Marginally related:
>> 
>> The "binary" bit trips up my students from time to time (with tseries recently). 
>> 
>> They get the option to install from source because it's marginally newer, answer "yes" because that'w what they always do, and then installation bombs because they don't have the compilers.  
>> 
>> Yes, they should know better, but no... 
>> 
>> We might want to consider implementing something like capabilities("compilers") so that we can condition the source installs more carefully.
>> 
>> 
>> -pd
>> 
>> 
>> 
>>> On 10 May 2022, at 04:47 , Simon Urbanek <simon.urbanek at r-project.org> wrote:
>>> 
>>> Jos?,
>>> 
>>> can you be more specific as of what you did and exact output? I would recommend using a simple
>>> 
>>> install.packages("ggplot2",type="binary")
>>> 
>>> in R.
>>> 
>>> Cheers,
>>> Simon
>>> 
>>> 
>>>> On 10/05/2022, at 12:30 PM, Jos? Carlos Guerrero Ant?nez <jcgantunez at gmail.com> wrote:
>>>> 
>>>> Hi,
>>>> 
>>>> When I upgraded to R version 4.2 (Platform: x86_64-apple-darwin17.0
>>>> (64-bit)), I was having problems installing certain packages (e.g. ggplot2,
>>>> Hmisc, devtools) and their dependencies.
>>>> 
>>>> I got this error message "installation of package ?package? had non-zero
>>>> exit status.
>>>> 
>>>> I have tried several ways to install (e.g. Package Archive file (.tgz).
>>>> 
>>>> Any ideas on how to solve this problem, thank you very much.
>>>> 
>>>> 
>>>> -- 
>>>> Jos? Carlos Guerrero
>>>> 
>>>> 	[[alternative HTML version deleted]]
>>>> 
>>>> _______________________________________________
>>>> R-SIG-Mac mailing list
>>>> R-SIG-Mac at r-project.org
>>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>>> 
>>> 
>>> _______________________________________________
>>> R-SIG-Mac mailing list
>>> R-SIG-Mac at r-project.org
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>> 
>> -- 
>> Peter Dalgaard, Professor,
>> Center for Statistics, Copenhagen Business School
>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>> Phone: (+45)38153501
>> Office: A 4.23
>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>> 
> 

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From jcg@ntunez @end|ng |rom gm@||@com  Thu May 12 00:16:05 2022
From: jcg@ntunez @end|ng |rom gm@||@com (=?UTF-8?Q?Jos=C3=A9_Carlos_Guerrero_Ant=C3=BAnez?=)
Date: Wed, 11 May 2022 19:16:05 -0300
Subject: [R-SIG-Mac] Problems in install some packages in R 4.2
In-Reply-To: <6544634E-A446-4ED7-8DFB-9321F9118843@R-project.org>
References: <CAEO28jegKnLkbyoKBvhmciZ8fdHqfCZRW4j2xTkG=JvF5Snvdw@mail.gmail.com>
 <6544634E-A446-4ED7-8DFB-9321F9118843@R-project.org>
Message-ID: <CAEO28jfE_aoYhMujZ1+eK1doXg=-6b8pOAsdqMMQhJYQenpcbA@mail.gmail.com>

Hi Simon,

Although I was able to install ggplot2 when activating I get this error
message.

What can I do now to solve this problem?

Thank you very much.

> library(ggplot2)
Error: package or namespace load failed for ?ggplot2? in dyn.load(file,
DLLpath = DLLpath, ...):
 unable to load shared object
'/Library/Frameworks/R.framework/Versions/4.2/Resources/library/tibble/libs/tibble.so':

dlopen(/Library/Frameworks/R.framework/Versions/4.2/Resources/library/tibble/libs/tibble.so,
6): no suitable image found.  Did find:
/Library/Frameworks/R.framework/Versions/4.2/Resources/library/tibble/libs/tibble.so:
mach-o, but wrong architecture
/Library/Frameworks/R.framework/Versions/4.2/Resources/library/tibble/libs/tibble.so:
mach-o, but wrong architecture



El lun, 9 may 2022 a las 23:47, Simon Urbanek (<simon.urbanek at r-project.org>)
escribi?:

> Jos?,
>
> can you be more specific as of what you did and exact output? I would
> recommend using a simple
>
> install.packages("ggplot2",type="binary")
>
> in R.
>
> Cheers,
> Simon
>
>
> > On 10/05/2022, at 12:30 PM, Jos? Carlos Guerrero Ant?nez <
> jcgantunez at gmail.com> wrote:
> >
> > Hi,
> >
> > When I upgraded to R version 4.2 (Platform: x86_64-apple-darwin17.0
> > (64-bit)), I was having problems installing certain packages (e.g.
> ggplot2,
> > Hmisc, devtools) and their dependencies.
> >
> > I got this error message "installation of package ?package? had non-zero
> > exit status.
> >
> > I have tried several ways to install (e.g. Package Archive file (.tgz).
> >
> > Any ideas on how to solve this problem, thank you very much.
> >
> >
> > --
> > Jos? Carlos Guerrero
> >
> >       [[alternative HTML version deleted]]
> >
> > _______________________________________________
> > R-SIG-Mac mailing list
> > R-SIG-Mac at r-project.org
> > https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> >
>
>

-- 
Jos? Carlos Guerrero

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Thu May 12 02:08:24 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Thu, 12 May 2022 12:08:24 +1200
Subject: [R-SIG-Mac] Problems in install some packages in R 4.2
In-Reply-To: <CAEO28jfE_aoYhMujZ1+eK1doXg=-6b8pOAsdqMMQhJYQenpcbA@mail.gmail.com>
References: <CAEO28jegKnLkbyoKBvhmciZ8fdHqfCZRW4j2xTkG=JvF5Snvdw@mail.gmail.com>
 <6544634E-A446-4ED7-8DFB-9321F9118843@R-project.org>
 <CAEO28jfE_aoYhMujZ1+eK1doXg=-6b8pOAsdqMMQhJYQenpcbA@mail.gmail.com>
Message-ID: <6F98D739-3C0F-4D8D-8C91-3E32EC6A7A73@R-project.org>

Jos?,

given your earlier attempts I suspect you may have broken your library by installing the incorrect .tgz package binaries by hand. There are two different Mac architectures now so the package must match your R so it appears you may have installed tibble for the wrong Mac architecture.

You can fix your library by letting R re-install all packages automatically via

install.packages(rownames(installed.packages()), type='binary')

FWIW there was a big back-log that has now cleared, but may take a bit to propagate through the CRAN mirrors, so if your mirror is behind you may want to use the master Mac repository:

install.packages(rownames(installed.packages()), type='binary', repo="https://mac.R-project.org")

Cheers,
Simon

 

> On 12/05/2022, at 10:16 AM, Jos? Carlos Guerrero Ant?nez <jcgantunez at gmail.com> wrote:
> 
> Hi Simon,
> 
> Although I was able to install ggplot2 when activating I get this error message.
> 
> What can I do now to solve this problem?
> 
> Thank you very much.
> 
> > library(ggplot2)
> Error: package or namespace load failed for ?ggplot2? in dyn.load(file, DLLpath = DLLpath, ...):
>  unable to load shared object '/Library/Frameworks/R.framework/Versions/4.2/Resources/library/tibble/libs/tibble.so':
>   dlopen(/Library/Frameworks/R.framework/Versions/4.2/Resources/library/tibble/libs/tibble.so, 6): no suitable image found.  Did find:
> /Library/Frameworks/R.framework/Versions/4.2/Resources/library/tibble/libs/tibble.so: mach-o, but wrong architecture
> /Library/Frameworks/R.framework/Versions/4.2/Resources/library/tibble/libs/tibble.so: mach-o, but wrong architecture
> 
> 
> 
> El lun, 9 may 2022 a las 23:47, Simon Urbanek (<simon.urbanek at r-project.org>) escribi?:
> Jos?,
> 
> can you be more specific as of what you did and exact output? I would recommend using a simple
> 
> install.packages("ggplot2",type="binary")
> 
> in R.
> 
> Cheers,
> Simon
> 
> 
> > On 10/05/2022, at 12:30 PM, Jos? Carlos Guerrero Ant?nez <jcgantunez at gmail.com> wrote:
> > 
> > Hi,
> > 
> > When I upgraded to R version 4.2 (Platform: x86_64-apple-darwin17.0
> > (64-bit)), I was having problems installing certain packages (e.g. ggplot2,
> > Hmisc, devtools) and their dependencies.
> > 
> > I got this error message "installation of package ?package? had non-zero
> > exit status.
> > 
> > I have tried several ways to install (e.g. Package Archive file (.tgz).
> > 
> > Any ideas on how to solve this problem, thank you very much.
> > 
> > 
> > -- 
> > Jos? Carlos Guerrero
> > 
> >       [[alternative HTML version deleted]]
> > 
> > _______________________________________________
> > R-SIG-Mac mailing list
> > R-SIG-Mac at r-project.org
> > https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> > 
> 
> 
> 
> -- 
> Jos? Carlos Guerrero


From jcg@ntunez @end|ng |rom gm@||@com  Thu May 12 02:46:09 2022
From: jcg@ntunez @end|ng |rom gm@||@com (=?UTF-8?Q?Jos=C3=A9_Carlos_Guerrero_Ant=C3=BAnez?=)
Date: Wed, 11 May 2022 21:46:09 -0300
Subject: [R-SIG-Mac] Problems in install some packages in R 4.2
In-Reply-To: <6F98D739-3C0F-4D8D-8C91-3E32EC6A7A73@R-project.org>
References: <CAEO28jegKnLkbyoKBvhmciZ8fdHqfCZRW4j2xTkG=JvF5Snvdw@mail.gmail.com>
 <6544634E-A446-4ED7-8DFB-9321F9118843@R-project.org>
 <CAEO28jfE_aoYhMujZ1+eK1doXg=-6b8pOAsdqMMQhJYQenpcbA@mail.gmail.com>
 <6F98D739-3C0F-4D8D-8C91-3E32EC6A7A73@R-project.org>
Message-ID: <CAEO28jd9kDJB5qWaLNOBQ_rnBebX9DB15nGGr+CwcZ39RLC2BA@mail.gmail.com>

Simon,

I was able to install the packages correctly using the master Mac
repository.

Again, thank you for your work that allows people like me who do not
program to use R.

El mi?, 11 may 2022 a las 21:08, Simon Urbanek (<simon.urbanek at r-project.org>)
escribi?:

> Jos?,
>
> given your earlier attempts I suspect you may have broken your library by
> installing the incorrect .tgz package binaries by hand. There are two
> different Mac architectures now so the package must match your R so it
> appears you may have installed tibble for the wrong Mac architecture.
>
> You can fix your library by letting R re-install all packages
> automatically via
>
> install.packages(rownames(installed.packages()), type='binary')
>
> FWIW there was a big back-log that has now cleared, but may take a bit to
> propagate through the CRAN mirrors, so if your mirror is behind you may
> want to use the master Mac repository:
>
> install.packages(rownames(installed.packages()), type='binary', repo="
> https://mac.R-project.org")
>
> Cheers,
> Simon
>
>
>
> > On 12/05/2022, at 10:16 AM, Jos? Carlos Guerrero Ant?nez <
> jcgantunez at gmail.com> wrote:
> >
> > Hi Simon,
> >
> > Although I was able to install ggplot2 when activating I get this error
> message.
> >
> > What can I do now to solve this problem?
> >
> > Thank you very much.
> >
> > > library(ggplot2)
> > Error: package or namespace load failed for ?ggplot2? in dyn.load(file,
> DLLpath = DLLpath, ...):
> >  unable to load shared object
> '/Library/Frameworks/R.framework/Versions/4.2/Resources/library/tibble/libs/tibble.so':
> >
>  dlopen(/Library/Frameworks/R.framework/Versions/4.2/Resources/library/tibble/libs/tibble.so,
> 6): no suitable image found.  Did find:
> >
> /Library/Frameworks/R.framework/Versions/4.2/Resources/library/tibble/libs/tibble.so:
> mach-o, but wrong architecture
> >
> /Library/Frameworks/R.framework/Versions/4.2/Resources/library/tibble/libs/tibble.so:
> mach-o, but wrong architecture
> >
> >
> >
> > El lun, 9 may 2022 a las 23:47, Simon Urbanek (<
> simon.urbanek at r-project.org>) escribi?:
> > Jos?,
> >
> > can you be more specific as of what you did and exact output? I would
> recommend using a simple
> >
> > install.packages("ggplot2",type="binary")
> >
> > in R.
> >
> > Cheers,
> > Simon
> >
> >
> > > On 10/05/2022, at 12:30 PM, Jos? Carlos Guerrero Ant?nez <
> jcgantunez at gmail.com> wrote:
> > >
> > > Hi,
> > >
> > > When I upgraded to R version 4.2 (Platform: x86_64-apple-darwin17.0
> > > (64-bit)), I was having problems installing certain packages (e.g.
> ggplot2,
> > > Hmisc, devtools) and their dependencies.
> > >
> > > I got this error message "installation of package ?package? had
> non-zero
> > > exit status.
> > >
> > > I have tried several ways to install (e.g. Package Archive file (.tgz).
> > >
> > > Any ideas on how to solve this problem, thank you very much.
> > >
> > >
> > > --
> > > Jos? Carlos Guerrero
> > >
> > >       [[alternative HTML version deleted]]
> > >
> > > _______________________________________________
> > > R-SIG-Mac mailing list
> > > R-SIG-Mac at r-project.org
> > > https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> > >
> >
> >
> >
> > --
> > Jos? Carlos Guerrero
>
>

-- 
Jos? Carlos Guerrero

	[[alternative HTML version deleted]]


From j|ox @end|ng |rom mcm@@ter@c@  Sat May 28 19:36:40 2022
From: j|ox @end|ng |rom mcm@@ter@c@ (John Fox)
Date: Sat, 28 May 2022 13:36:40 -0400
Subject: [R-SIG-Mac] tcltk causes help() to hang in R 4.2.0 on macOS
Message-ID: <753c64bf-4dbc-0d5c-9684-a9116217d9c8@mcmaster.ca>

Dear R-sig-mac list members,

I've discovered that loading the tcltk package apparently causes R 4.2.0 
(including the current patched version) to hang on an M1 Mac.

Try, e.g.,

library("tcltk")
help("lm")

My session info:

------- snip -------

 > sessionInfo()
R version 4.2.0 Patched (2022-05-28 r82413)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Monterey 12.3.1

Matrix products: default
BLAS: 
/Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRblas.0.dylib
LAPACK: 
/Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] tcltk     stats     graphics  grDevices utils     datasets  methods
[8] base

loaded via a namespace (and not attached):
[1] compiler_4.2.0

------- snip -------

Some additional details: The problem occurs both in the R macOS console 
and, if options(help_type="html"), when R is run in a terminal window on 
macOS, but not when options(help_type="text"). The former is the default 
in the Mac R console, the latter when R is run in a terminal.

The problem is apparently new in R 4.2.0 -- it doesn't, e.g., occur in R 
4.1.3. My apologies for not turning it up earlier.

I discovered the problem when accessing help in the Rcmdr GUI, which 
uses tcltk, caused R to hang.

Has anyone else encountered this problem?

Best,
  John
-- 
John Fox, Professor Emeritus
McMaster University
Hamilton, Ontario, Canada
web: https://socialsciences.mcmaster.ca/jfox/


From D@n@Ke||ey @end|ng |rom D@|@C@  Sat May 28 19:43:38 2022
From: D@n@Ke||ey @end|ng |rom D@|@C@ (Daniel Kelley)
Date: Sat, 28 May 2022 17:43:38 +0000
Subject: [R-SIG-Mac] tcltk causes help() to hang in R 4.2.0 on macOS
In-Reply-To: <753c64bf-4dbc-0d5c-9684-a9116217d9c8@mcmaster.ca>
References: <753c64bf-4dbc-0d5c-9684-a9116217d9c8@mcmaster.ca>
Message-ID: <C44B140A-1E90-4D05-8153-DA1BD48572AA@dal.ca>

Yes, on my Intel mac (macos 12.5beta), I get the same in the macOS R.app, but not in commandline-R or R-within-RStudio.

Dan Kelley / Dalhousie University / Nova Scotia / Canada

> On May 28, 2022, at 2:36 PM, John Fox <jfox at mcmaster.ca> wrote:
> 
> CAUTION: The Sender of this email is not from within Dalhousie.
> 
> Dear R-sig-mac list members,
> 
> I've discovered that loading the tcltk package apparently causes R 4.2.0
> (including the current patched version) to hang on an M1 Mac.
> 
> Try, e.g.,
> 
> library("tcltk")
> help("lm")
> 
> My session info:
> 
> ------- snip -------
> 
> > sessionInfo()
> R version 4.2.0 Patched (2022-05-28 r82413)
> Platform: aarch64-apple-darwin20 (64-bit)
> Running under: macOS Monterey 12.3.1
> 
> Matrix products: default
> BLAS:
> /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRblas.0.dylib
> LAPACK:
> /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib
> 
> locale:
> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
> 
> attached base packages:
> [1] tcltk     stats     graphics  grDevices utils     datasets  methods
> [8] base
> 
> loaded via a namespace (and not attached):
> [1] compiler_4.2.0
> 
> ------- snip -------
> 
> Some additional details: The problem occurs both in the R macOS console
> and, if options(help_type="html"), when R is run in a terminal window on
> macOS, but not when options(help_type="text"). The former is the default
> in the Mac R console, the latter when R is run in a terminal.
> 
> The problem is apparently new in R 4.2.0 -- it doesn't, e.g., occur in R
> 4.1.3. My apologies for not turning it up earlier.
> 
> I discovered the problem when accessing help in the Rcmdr GUI, which
> uses tcltk, caused R to hang.
> 
> Has anyone else encountered this problem?
> 
> Best,
> John
> --
> John Fox, Professor Emeritus
> McMaster University
> Hamilton, Ontario, Canada
> web: https://socialsciences.mcmaster.ca/jfox/
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac


From je@n@th|ou|ou@e @end|ng |rom un|v-|yon1@|r  Sat May 28 19:46:02 2022
From: je@n@th|ou|ou@e @end|ng |rom un|v-|yon1@|r (Jean Thioulouse)
Date: Sat, 28 May 2022 19:46:02 +0200
Subject: [R-SIG-Mac] tcltk causes help() to hang in R 4.2.0 on macOS
In-Reply-To: <753c64bf-4dbc-0d5c-9684-a9116217d9c8@mcmaster.ca>
References: <753c64bf-4dbc-0d5c-9684-a9116217d9c8@mcmaster.ca>
Message-ID: <5F6A3F0D-847F-4263-9BA2-0838B45A7850@univ-lyon1.fr>


Thank you ! I was wondering why I had this problem with help hanging. Note that if you close the browser window and type Ctrl-C in the console, the next help command will work correctly.

> sessionInfo()
R version 4.2.0 (2022-04-22)
Platform: aarch64-apple-darwin20 (64-bit)
Running under: macOS Monterey 12.4

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRblas.0.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib

Random number generation:
 RNG:     Mersenne-Twister 
 Normal:  Inversion 
 Sample:  Rounding 
 
locale:
[1] fr_FR.UTF-8/fr_FR.UTF-8/fr_FR.UTF-8/C/fr_FR.UTF-8/fr_FR.UTF-8

attached base packages:
[1] tcltk     stats     graphics  grDevices utils     datasets  methods  
[8] base     

loaded via a namespace (and not attached):
[1] compiler_4.2.0 tools_4.2.0   


> Le 28 mai 2022 ? 19:36, John Fox <jfox at mcmaster.ca> a ?crit :
> 
> Dear R-sig-mac list members,
> 
> I've discovered that loading the tcltk package apparently causes R 4.2.0 (including the current patched version) to hang on an M1 Mac.
> 
> Try, e.g.,
> 
> library("tcltk")
> help("lm")
> 
> My session info:
> 
> ------- snip -------
> 
> > sessionInfo()
> R version 4.2.0 Patched (2022-05-28 r82413)
> Platform: aarch64-apple-darwin20 (64-bit)
> Running under: macOS Monterey 12.3.1
> 
> Matrix products: default
> BLAS: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRblas.0.dylib
> LAPACK: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib
> 
> locale:
> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
> 
> attached base packages:
> [1] tcltk     stats     graphics  grDevices utils     datasets  methods
> [8] base
> 
> loaded via a namespace (and not attached):
> [1] compiler_4.2.0
> 
> ------- snip -------
> 
> Some additional details: The problem occurs both in the R macOS console and, if options(help_type="html"), when R is run in a terminal window on macOS, but not when options(help_type="text"). The former is the default in the Mac R console, the latter when R is run in a terminal.
> 
> The problem is apparently new in R 4.2.0 -- it doesn't, e.g., occur in R 4.1.3. My apologies for not turning it up earlier.
> 
> I discovered the problem when accessing help in the Rcmdr GUI, which uses tcltk, caused R to hang.
> 
> Has anyone else encountered this problem?
> 
> Best,
> John
> -- 
> John Fox, Professor Emeritus
> McMaster University
> Hamilton, Ontario, Canada
> web: https://socialsciences.mcmaster.ca/jfox/
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac



?-
Jean THIOULOUSE - https://lbbe-web.univ-lyon1.fr/en/annuaires-des-membres/thioulouse-jean
https://orcid.org/0000-0001-7664-0598 (ORCID page)
https://www.springer.com/fr/book/9781493988488 (ade4 Book)
https://pbil.univ-lyon1.fr/JTHome/Biblio/ThioulouseEB2021.pdf (Evol. Biol. paper)


From @|mon@urb@nek @end|ng |rom R-project@org  Mon May 30 00:09:47 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Mon, 30 May 2022 10:09:47 +1200
Subject: [R-SIG-Mac] tcltk causes help() to hang in R 4.2.0 on macOS
In-Reply-To: <753c64bf-4dbc-0d5c-9684-a9116217d9c8@mcmaster.ca>
References: <753c64bf-4dbc-0d5c-9684-a9116217d9c8@mcmaster.ca>
Message-ID: <6FF22407-8E58-4644-9B62-42472D859C7D@R-project.org>

John,

thanks, this is a regression caused by r78421 (deadlock when TclTk's event loop is called in http processing). Removing L875 in src/modules/internet/Rhttpd.c restores the previous behavior, but the underlying problem is more complex and will require more investigation.

Cheers,
Simon


> On 29/05/2022, at 5:36 AM, John Fox <jfox at mcmaster.ca> wrote:
> 
> Dear R-sig-mac list members,
> 
> I've discovered that loading the tcltk package apparently causes R 4.2.0 (including the current patched version) to hang on an M1 Mac.
> 
> Try, e.g.,
> 
> library("tcltk")
> help("lm")
> 
> My session info:
> 
> ------- snip -------
> 
> > sessionInfo()
> R version 4.2.0 Patched (2022-05-28 r82413)
> Platform: aarch64-apple-darwin20 (64-bit)
> Running under: macOS Monterey 12.3.1
> 
> Matrix products: default
> BLAS: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRblas.0.dylib
> LAPACK: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib
> 
> locale:
> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
> 
> attached base packages:
> [1] tcltk     stats     graphics  grDevices utils     datasets  methods
> [8] base
> 
> loaded via a namespace (and not attached):
> [1] compiler_4.2.0
> 
> ------- snip -------
> 
> Some additional details: The problem occurs both in the R macOS console and, if options(help_type="html"), when R is run in a terminal window on macOS, but not when options(help_type="text"). The former is the default in the Mac R console, the latter when R is run in a terminal.
> 
> The problem is apparently new in R 4.2.0 -- it doesn't, e.g., occur in R 4.1.3. My apologies for not turning it up earlier.
> 
> I discovered the problem when accessing help in the Rcmdr GUI, which uses tcltk, caused R to hang.
> 
> Has anyone else encountered this problem?
> 
> Best,
> John
> -- 
> John Fox, Professor Emeritus
> McMaster University
> Hamilton, Ontario, Canada
> web: https://socialsciences.mcmaster.ca/jfox/
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 


From @|mon@urb@nek @end|ng |rom R-project@org  Mon May 30 00:51:56 2022
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Mon, 30 May 2022 10:51:56 +1200
Subject: [R-SIG-Mac] tcltk causes help() to hang in R 4.2.0 on macOS
In-Reply-To: <6FF22407-8E58-4644-9B62-42472D859C7D@R-project.org>
References: <753c64bf-4dbc-0d5c-9684-a9116217d9c8@mcmaster.ca>
 <6FF22407-8E58-4644-9B62-42472D859C7D@R-project.org>
Message-ID: <514B9903-9154-417E-8B97-185DAA1C891F@R-project.org>

Actually, I take back the reference to the commit - the deadlock is true, and removing the line is a work-around, but r78421 was not necessarily the regression. The issue seems to be caused by a combination of Tcl/Tk and KaTeX (the latter causes the browser to issue multiple parallel http-requests and the former causes the deadlock in its event loop) which has not been there in earlier R versions.

Cheers,
Simon


> On 30/05/2022, at 10:09 AM, Simon Urbanek <simon.urbanek at r-project.org> wrote:
> 
> John,
> 
> thanks, this is a regression caused by r78421 (deadlock when TclTk's event loop is called in http processing). Removing L875 in src/modules/internet/Rhttpd.c restores the previous behavior, but the underlying problem is more complex and will require more investigation.
> 
> Cheers,
> Simon
> 
> 
>> On 29/05/2022, at 5:36 AM, John Fox <jfox at mcmaster.ca> wrote:
>> 
>> Dear R-sig-mac list members,
>> 
>> I've discovered that loading the tcltk package apparently causes R 4.2.0 (including the current patched version) to hang on an M1 Mac.
>> 
>> Try, e.g.,
>> 
>> library("tcltk")
>> help("lm")
>> 
>> My session info:
>> 
>> ------- snip -------
>> 
>>> sessionInfo()
>> R version 4.2.0 Patched (2022-05-28 r82413)
>> Platform: aarch64-apple-darwin20 (64-bit)
>> Running under: macOS Monterey 12.3.1
>> 
>> Matrix products: default
>> BLAS: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRblas.0.dylib
>> LAPACK: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib
>> 
>> locale:
>> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>> 
>> attached base packages:
>> [1] tcltk     stats     graphics  grDevices utils     datasets  methods
>> [8] base
>> 
>> loaded via a namespace (and not attached):
>> [1] compiler_4.2.0
>> 
>> ------- snip -------
>> 
>> Some additional details: The problem occurs both in the R macOS console and, if options(help_type="html"), when R is run in a terminal window on macOS, but not when options(help_type="text"). The former is the default in the Mac R console, the latter when R is run in a terminal.
>> 
>> The problem is apparently new in R 4.2.0 -- it doesn't, e.g., occur in R 4.1.3. My apologies for not turning it up earlier.
>> 
>> I discovered the problem when accessing help in the Rcmdr GUI, which uses tcltk, caused R to hang.
>> 
>> Has anyone else encountered this problem?
>> 
>> Best,
>> John
>> -- 
>> John Fox, Professor Emeritus
>> McMaster University
>> Hamilton, Ontario, Canada
>> web: https://socialsciences.mcmaster.ca/jfox/
>> 
>> _______________________________________________
>> R-SIG-Mac mailing list
>> R-SIG-Mac at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>> 
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 


From j|ox @end|ng |rom mcm@@ter@c@  Mon May 30 01:27:28 2022
From: j|ox @end|ng |rom mcm@@ter@c@ (John Fox)
Date: Sun, 29 May 2022 19:27:28 -0400
Subject: [R-SIG-Mac] tcltk causes help() to hang in R 4.2.0 on macOS
In-Reply-To: <514B9903-9154-417E-8B97-185DAA1C891F@R-project.org>
References: <753c64bf-4dbc-0d5c-9684-a9116217d9c8@mcmaster.ca>
 <6FF22407-8E58-4644-9B62-42472D859C7D@R-project.org>
 <514B9903-9154-417E-8B97-185DAA1C891F@R-project.org>
Message-ID: <eab8b8ff-9619-8b59-27ee-4779875fe8c4@mcmaster.ca>

Dear Simon,

Thank you for addressing this problem so promptly.

Best,
  John

On 2022-05-29 6:51 p.m., Simon Urbanek wrote:
> Actually, I take back the reference to the commit - the deadlock is true, and removing the line is a work-around, but r78421 was not necessarily the regression. The issue seems to be caused by a combination of Tcl/Tk and KaTeX (the latter causes the browser to issue multiple parallel http-requests and the former causes the deadlock in its event loop) which has not been there in earlier R versions.
> 
> Cheers,
> Simon
> 
> 
>> On 30/05/2022, at 10:09 AM, Simon Urbanek <simon.urbanek at r-project.org> wrote:
>>
>> John,
>>
>> thanks, this is a regression caused by r78421 (deadlock when TclTk's event loop is called in http processing). Removing L875 in src/modules/internet/Rhttpd.c restores the previous behavior, but the underlying problem is more complex and will require more investigation.
>>
>> Cheers,
>> Simon
>>
>>
>>> On 29/05/2022, at 5:36 AM, John Fox <jfox at mcmaster.ca> wrote:
>>>
>>> Dear R-sig-mac list members,
>>>
>>> I've discovered that loading the tcltk package apparently causes R 4.2.0 (including the current patched version) to hang on an M1 Mac.
>>>
>>> Try, e.g.,
>>>
>>> library("tcltk")
>>> help("lm")
>>>
>>> My session info:
>>>
>>> ------- snip -------
>>>
>>>> sessionInfo()
>>> R version 4.2.0 Patched (2022-05-28 r82413)
>>> Platform: aarch64-apple-darwin20 (64-bit)
>>> Running under: macOS Monterey 12.3.1
>>>
>>> Matrix products: default
>>> BLAS: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRblas.0.dylib
>>> LAPACK: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib
>>>
>>> locale:
>>> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>>>
>>> attached base packages:
>>> [1] tcltk     stats     graphics  grDevices utils     datasets  methods
>>> [8] base
>>>
>>> loaded via a namespace (and not attached):
>>> [1] compiler_4.2.0
>>>
>>> ------- snip -------
>>>
>>> Some additional details: The problem occurs both in the R macOS console and, if options(help_type="html"), when R is run in a terminal window on macOS, but not when options(help_type="text"). The former is the default in the Mac R console, the latter when R is run in a terminal.
>>>
>>> The problem is apparently new in R 4.2.0 -- it doesn't, e.g., occur in R 4.1.3. My apologies for not turning it up earlier.
>>>
>>> I discovered the problem when accessing help in the Rcmdr GUI, which uses tcltk, caused R to hang.
>>>
>>> Has anyone else encountered this problem?
>>>
>>> Best,
>>> John
>>> -- 
>>> John Fox, Professor Emeritus
>>> McMaster University
>>> Hamilton, Ontario, Canada
>>> web: https://socialsciences.mcmaster.ca/jfox/
>>>
>>> _______________________________________________
>>> R-SIG-Mac mailing list
>>> R-SIG-Mac at r-project.org
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>>
>>
>> _______________________________________________
>> R-SIG-Mac mailing list
>> R-SIG-Mac at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>>
> 
-- 
John Fox, Professor Emeritus
McMaster University
Hamilton, Ontario, Canada
web: https://socialsciences.mcmaster.ca/jfox/


