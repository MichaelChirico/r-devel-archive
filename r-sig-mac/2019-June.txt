From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Tue Jun  4 17:10:17 2019
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Tue, 4 Jun 2019 16:10:17 +0100
Subject: [R-SIG-Mac] Warning on XCode / Command Line Tools 11
Message-ID: <0ba34c12-ed03-9aff-b3c9-a6e90ea98ea2@stats.ox.ac.uk>

My Mojave machine today prompted me to update to version 11 of Command 
Line Tools (apparently 'beta 1', but I am not a Beta tester).

In short: don't do that (you can revert to 10.2.1 from the URL above, at 
least if your Apple ID has (free) developer privileges).

CoreFoundation.framework has been removed (and its headers are used in a 
couple of spots compiling R).

Further its seems that 
/Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg 
is no longer included and setting CPPFLAGS did not suffice.

Hopefully we will have solutions in due course, but that version is 
really for 10.15 Catalina which is months away ('in the Fall', whenever 
that is).

-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From k@@perd@n|e|h@n@en @end|ng |rom gm@||@com  Wed Jun  5 02:47:35 2019
From: k@@perd@n|e|h@n@en @end|ng |rom gm@||@com (Kasper Daniel Hansen)
Date: Tue, 4 Jun 2019 20:47:35 -0400
Subject: [R-SIG-Mac] Warning on XCode / Command Line Tools 11
In-Reply-To: <0ba34c12-ed03-9aff-b3c9-a6e90ea98ea2@stats.ox.ac.uk>
References: <0ba34c12-ed03-9aff-b3c9-a6e90ea98ea2@stats.ox.ac.uk>
Message-ID: <CAC2h7utB-VLmCdfi6Gt=rJWOVRkA9E2o4YF3HLeMNXOiNLg42Q@mail.gmail.com>

Thanks a lot for checking this so quickly.

I was alarmed by the label "beta 1", and frankly surprised that this got
pushed to my machine. I believe it is the first time system updated has
suggested a beta version for something on my laptop. I am wondering if this
could have been a mistake; it is Apple Developer Week right now.

On Tue, Jun 4, 2019 at 11:10 AM Prof Brian Ripley <ripley at stats.ox.ac.uk>
wrote:

> My Mojave machine today prompted me to update to version 11 of Command
> Line Tools (apparently 'beta 1', but I am not a Beta tester).
>
> In short: don't do that (you can revert to 10.2.1 from the URL above, at
> least if your Apple ID has (free) developer privileges).
>
> CoreFoundation.framework has been removed (and its headers are used in a
> couple of spots compiling R).
>
> Further its seems that
> /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg
>
> is no longer included and setting CPPFLAGS did not suffice.
>
> Hopefully we will have solutions in due course, but that version is
> really for 10.15 Catalina which is months away ('in the Fall', whenever
> that is).
>
> --
> Brian D. Ripley,                  ripley at stats.ox.ac.uk
> Emeritus Professor of Applied Statistics, University of Oxford
>
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
>


-- 
Best,
Kasper

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Wed Jun  5 22:12:49 2019
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 5 Jun 2019 16:12:49 -0400
Subject: [R-SIG-Mac] trouble loading C++-using packages on El Capitan
In-Reply-To: <CAJXgQP0F25tEjWx6sX68RCyrae9pHzHB8K38nCzG=jkvXOmA4Q@mail.gmail.com>
References: <CAJXgQP0F25tEjWx6sX68RCyrae9pHzHB8K38nCzG=jkvXOmA4Q@mail.gmail.com>
Message-ID: <724CF5C4-3EDE-4827-A7EA-8EF8D88B19C0@R-project.org>

Kevin,

I cannot replicate the problem. The libraries are as provided by LLVM so they do link both the system and clang 7 dylibs. Can you give details on exact versions? Also is does this happen in R or RStudio?

Thanks,
Simon



> On May 30, 2019, at 12:11 PM, Kevin Ushey <kevinushey at gmail.com> wrote:
> 
> Hi,
> 
> Some users have reported issues when attempting to load packages using
> C++ code on El Capitan -- for example:
> 
> Error: package or namespace load failed for ?readr? in dyn.load(file,
> DLLpath = DLLpath, ...):
> unable to load shared object
> '/Library/Frameworks/R.framework/Versions/3.6/Resources/library/Rcpp/libs/Rcpp.so':
> dlopen(/Library/Frameworks/R.framework/Versions/3.6/Resources/library/Rcpp/libs/Rcpp.so,
> 6): Symbol not found: ___cxa_uncaught_exceptions
> Referenced from:
> /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libc++.1.dylib
> Expected in: /usr/lib/libc++abi.dylib
> in /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libc++.1.dylib
> 
> The main thing that stands out to me is that /usr/lib/libc++abi.dylib
> is being requested, rather than the libc++abi library that's
> distributed with the macOS R binaries. I can confirm as much in my R
> 3.6.0 installation:
> 
> kevin at cdrv:/Library/Frameworks/R.framework/Resources/lib
> $ otool -L libc++.1.dylib
> libc++.1.dylib:
>        /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libc++.1.dylib
> (compatibility version 1.0.0, current version 1.0.0)
>        /usr/lib/libc++abi.dylib (compatibility version 1.0.0, current
> version 400.17.0)
>        /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libc++abi.1.dylib
> (compatibility version 1.0.0, current version 1.0.0)
>        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0,
> current version 1252.200.5)
> 
> This can be changed with install_name_tool; e.g.
> 
> install_name_tool -change \
>    /usr/lib/libc++abi.dylib \
>    /Library/Frameworks/R.framework/Resources/lib/libc++abi.1.dylib \
>    /Library/Frameworks/R.framework/Resources/lib/libc++.1.dylib
> 
> And this did fix the issue for one user
> (https://community.rstudio.com/t/installing-packages-after-update-to-3-6-same-problem/31824)
> 
> My question is: is the usage of the system's libc++abi intentional, or
> should that be pointing to the bundled libc++abi?
> 
> Thanks,
> Kevin
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac


From pd@|gd @end|ng |rom gm@||@com  Thu Jun  6 10:31:19 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Thu, 6 Jun 2019 10:31:19 +0200
Subject: [R-SIG-Mac] Warning on XCode / Command Line Tools 11
In-Reply-To: <0ba34c12-ed03-9aff-b3c9-a6e90ea98ea2@stats.ox.ac.uk>
References: <0ba34c12-ed03-9aff-b3c9-a6e90ea98ea2@stats.ox.ac.uk>
Message-ID: <B0689902-5A6B-4B15-8689-1D79785C04F7@gmail.com>

FWIW, no updates are suggested for the source-building machine in my office, also running Mojave. (June 5 was Constitution Day and Election Day, so I have been away from the machine until now.)

We do need to keep an eye on the tools though. My current setup is an  -um- eclectic mix (*) of old and new tools, some of which are 32 bit, and this is going to be a problem in 10.15 Catalina. I did try getting the tools better in line with Simon's setup at some point, but there were hiccups and then I ran out of time and couldn't risk collateral damage.

-pd


(*) ="dogs dinner"

> On 4 Jun 2019, at 17:10 , Prof Brian Ripley <ripley at stats.ox.ac.uk> wrote:
> 
> My Mojave machine today prompted me to update to version 11 of Command Line Tools (apparently 'beta 1', but I am not a Beta tester).
> 
> In short: don't do that (you can revert to 10.2.1 from the URL above, at least if your Apple ID has (free) developer privileges).
> 
> CoreFoundation.framework has been removed (and its headers are used in a couple of spots compiling R).
> 
> Further its seems that /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg is no longer included and setting CPPFLAGS did not suffice.
> 
> Hopefully we will have solutions in due course, but that version is really for 10.15 Catalina which is months away ('in the Fall', whenever that is).
> 
> -- 
> Brian D. Ripley,                  ripley at stats.ox.ac.uk
> Emeritus Professor of Applied Statistics, University of Oxford
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Thu Jun  6 11:19:04 2019
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Thu, 6 Jun 2019 10:19:04 +0100
Subject: [R-SIG-Mac] Warning on XCode / Command Line Tools 11
In-Reply-To: <B0689902-5A6B-4B15-8689-1D79785C04F7@gmail.com>
References: <0ba34c12-ed03-9aff-b3c9-a6e90ea98ea2@stats.ox.ac.uk>
 <B0689902-5A6B-4B15-8689-1D79785C04F7@gmail.com>
Message-ID: <52813442-fb0c-6b74-fc3e-f9000b78aead@stats.ox.ac.uk>

On 06/06/2019 09:31, peter dalgaard wrote:
> FWIW, no updates are suggested for the source-building machine in my office, also running Mojave. (June 5 was Constitution Day and Election Day, so I have been away from the machine until now.)

It stopping nagging me yesterday afternoon, so likely it was an Apple 
snafu.  (I heard from others who had been caught by this, and of course 
Apple allows for 'automatic' updating so this could happen in the 
background.)

> We do need to keep an eye on the tools though. My current setup is an  -um- eclectic mix (*) of old and new tools, some of which are 32 bit, and this is going to be a problem in 10.15 Catalina. I did try getting the tools better in line with Simon's setup at some point, but there were hiccups and then I ran out of time and couldn't risk collateral damage.

You have a few months yet.  The residual 32-bit applications I have are 
from Adobe, e.g. old uninstallers.

> 
> -pd
> 
> 
> (*) ="dogs dinner"
> 
>> On 4 Jun 2019, at 17:10 , Prof Brian Ripley <ripley at stats.ox.ac.uk> wrote:
>>
>> My Mojave machine today prompted me to update to version 11 of Command Line Tools (apparently 'beta 1', but I am not a Beta tester).
>>
>> In short: don't do that (you can revert to 10.2.1 from the URL above, at least if your Apple ID has (free) developer privileges).
>>
>> CoreFoundation.framework has been removed (and its headers are used in a couple of spots compiling R).
>>
>> Further its seems that /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg is no longer included and setting CPPFLAGS did not suffice.
>>
>> Hopefully we will have solutions in due course, but that version is really for 10.15 Catalina which is months away ('in the Fall', whenever that is).
>>
>> -- 
>> Brian D. Ripley,                  ripley at stats.ox.ac.uk
>> Emeritus Professor of Applied Statistics, University of Oxford
>>
>> _______________________________________________
>> R-SIG-Mac mailing list
>> R-SIG-Mac at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 


-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From jon@c|@yden @end|ng |rom gm@||@com  Thu Jun  6 12:42:35 2019
From: jon@c|@yden @end|ng |rom gm@||@com (Jon Clayden)
Date: Thu, 6 Jun 2019 11:42:35 +0100
Subject: [R-SIG-Mac] Apple Clang does support OpenMP (if libomp is available)
Message-ID: <CAM9CR=1jr+P=hVjpkQT+niKTRiY8pvQ2qvmChbFfpCCM5ByFCw@mail.gmail.com>

Dear all,

Lack of OpenMP support in Apple?s build of Clang is cited as one
reason for not using it in CRAN builds, but this is only partly true:
after installing libomp from Homebrew, I have been adding
?-Wp,-fopenmp? to CXXFLAGS and CFLAGS (and ?-lomp? to LIBS) to my
builds for a while, and everything seems to work OK.

I?m not sure how far back this support goes (and I haven?t tried the
Xcode 11 tools yet), but is there any known reason not to take this
approach, and if not, would it make sense for R?s configure script to
try ?-Wp,-fopenmp? when testing for OpenMP support?

All the best,
Jon


From b@|@mut2 @end|ng |rom ||||no|@@edu  Thu Jun  6 16:11:15 2019
From: b@|@mut2 @end|ng |rom ||||no|@@edu (Balamuta, James Joseph)
Date: Thu, 6 Jun 2019 14:11:15 +0000
Subject: [R-SIG-Mac] Apple Clang does support OpenMP (if libomp is
 available)
In-Reply-To: <CAM9CR=1jr+P=hVjpkQT+niKTRiY8pvQ2qvmChbFfpCCM5ByFCw@mail.gmail.com>
References: <CAM9CR=1jr+P=hVjpkQT+niKTRiY8pvQ2qvmChbFfpCCM5ByFCw@mail.gmail.com>
Message-ID: <9E3F1CED-00AB-44EB-A096-1C44F9238DC0@illinois.edu>

Greetings and Salutations Jon,

> Lack of OpenMP support in Apple?s build of Clang is cited as one reason for not using it in CRAN builds

From R 3.4.x forward, OpenMP has been enabled in CRAN builds as the toolchain is using a custom compiler.

You can see this with regard to the work done to enable OpenMP with RcppArmadillo with a configure script to detect the compiler:

https://github.com/RcppCore/RcppArmadillo/pull/170 
https://github.com/RcppCore/RcppArmadillo/pull/219 

> but this is only partly true: after installing libomp ***from Homebrew***, I have been adding

Unfortunately, both Xcode and Xcode CLI do not ship clang with support for OpenMP. By installing `libomp` from homebrew, the system is getting a clang-compliant OpenMP compiler from the llvm formula. To check, please see:

which clang

I wish it were the case though... 

Sincerely,

JJB

?On 6/6/19, 5:43 AM, "R-SIG-Mac on behalf of Jon Clayden" <r-sig-mac-bounces at r-project.org on behalf of jon.clayden at gmail.com> wrote:

    Dear all,
    
    Lack of OpenMP support in Apple?s build of Clang is cited as one
    reason for not using it in CRAN builds, but this is only partly true:
    after installing libomp from Homebrew, I have been adding
    ?-Wp,-fopenmp? to CXXFLAGS and CFLAGS (and ?-lomp? to LIBS) to my
    builds for a while, and everything seems to work OK.
    
    I?m not sure how far back this support goes (and I haven?t tried the
    Xcode 11 tools yet), but is there any known reason not to take this
    approach, and if not, would it make sense for R?s configure script to
    try ?-Wp,-fopenmp? when testing for OpenMP support?
    
    All the best,
    Jon
    
    _______________________________________________
    R-SIG-Mac mailing list
    R-SIG-Mac at r-project.org
    https://stat.ethz.ch/mailman/listinfo/r-sig-mac
    


From jon@c|@yden @end|ng |rom gm@||@com  Thu Jun  6 16:24:29 2019
From: jon@c|@yden @end|ng |rom gm@||@com (Jon Clayden)
Date: Thu, 6 Jun 2019 15:24:29 +0100
Subject: [R-SIG-Mac] Apple Clang does support OpenMP (if libomp is
 available)
In-Reply-To: <9E3F1CED-00AB-44EB-A096-1C44F9238DC0@illinois.edu>
References: <CAM9CR=1jr+P=hVjpkQT+niKTRiY8pvQ2qvmChbFfpCCM5ByFCw@mail.gmail.com>
 <9E3F1CED-00AB-44EB-A096-1C44F9238DC0@illinois.edu>
Message-ID: <CAM9CR=2Vp+ueS_NoJ=AGs9mzXx-2=bmvuE0o3JHPa27SG7WfBg@mail.gmail.com>

Hi James,

> > Lack of OpenMP support in Apple?s build of Clang is cited as one reason for not using it in CRAN builds
>
> From R 3.4.x forward, OpenMP has been enabled in CRAN builds as the toolchain is using a custom compiler.

I?m aware of that, but this makes building packages from source more
complicated for users in my opinion, since they also have to install
the custom compiler toolchains. But whatever one?s views on that, I?m
suggesting that one reason given for not using Apple Clang may not be
entirely correct.

> > but this is only partly true: after installing libomp ***from Homebrew***, I have been adding
>
> Unfortunately, both Xcode and Xcode CLI do not ship clang with support for OpenMP. By installing `libomp` from homebrew, the system is getting a clang-compliant OpenMP compiler from the llvm formula. To check, please see:

Not at all. The libomp formula is standalone, with no dependency on
the llvm formula. See
https://github.com/Homebrew/homebrew-core/blob/master/Formula/libomp.rb.
I can assure you that I don?t have the llvm formula installed.

> which clang

/usr/bin/clang

All the best,
Jon


From @|mon@urb@nek @end|ng |rom R-project@org  Thu Jun  6 17:39:29 2019
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Thu, 6 Jun 2019 11:39:29 -0400
Subject: [R-SIG-Mac] Apple Clang does support OpenMP (if libomp is
 available)
In-Reply-To: <CAM9CR=1jr+P=hVjpkQT+niKTRiY8pvQ2qvmChbFfpCCM5ByFCw@mail.gmail.com>
References: <CAM9CR=1jr+P=hVjpkQT+niKTRiY8pvQ2qvmChbFfpCCM5ByFCw@mail.gmail.com>
Message-ID: <323349E7-2F46-4914-B75F-D46B98706C40@R-project.org>

Jon,

some time ago Apple's clang has silently dropped -fopenmp so we were able to at least keep it in the flags even if it wasn't actually using it. Still, it was only dropping it, it wasn't actually generating any parallel code, so there was real point in using it. That's when we decided to use non-Apple clang since it has proper support for parallel code generation.

What you're pointing out is that more recent clang builds from Apple now do include the OMP generation pieces (in particular the pre-processor), they just don't ship any OpenMP-related headers or libraries. The problem is that it's hard to rely on something that is unsupported and works only on some systems. We could ship libomp (we already do - no need to get it from homebrew), but, for example, the omp.h headers from clang7 don't work with Apple's clang (you do need explicit -I.. and -lomp in addition to -Wp,-fopenmp because it's not only the pre-processor that needs to know about it).

Also note that "-Wp,-fopenmp" is a hack - just because Apple has not patched the pre-processor and only the front-end/linker to refuse it, it doesn't mean that it actually works properly. There is no guarantee that they made changes to the code-generation which break something in OpenMP since it's not not even included in any of their tests. Hence I'd say it's a quick hack if you don't want to to install clang7 that may or may not work depending on your code, but not something I'd trust in a release.

Cheers,
Simon



> On Jun 6, 2019, at 6:42 AM, Jon Clayden <jon.clayden at gmail.com> wrote:
> 
> Dear all,
> 
> Lack of OpenMP support in Apple?s build of Clang is cited as one
> reason for not using it in CRAN builds, but this is only partly true:
> after installing libomp from Homebrew, I have been adding
> ?-Wp,-fopenmp? to CXXFLAGS and CFLAGS (and ?-lomp? to LIBS) to my
> builds for a while, and everything seems to work OK.
> 
> I?m not sure how far back this support goes (and I haven?t tried the
> Xcode 11 tools yet), but is there any known reason not to take this
> approach, and if not, would it make sense for R?s configure script to
> try ?-Wp,-fopenmp? when testing for OpenMP support?
> 
> All the best,
> Jon
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 


From r|p|ey @end|ng |rom @t@t@@ox@@c@uk  Fri Jun  7 08:15:52 2019
From: r|p|ey @end|ng |rom @t@t@@ox@@c@uk (Prof Brian Ripley)
Date: Fri, 7 Jun 2019 07:15:52 +0100
Subject: [R-SIG-Mac] Apple Clang does support OpenMP (if libomp is
 available)
In-Reply-To: <323349E7-2F46-4914-B75F-D46B98706C40@R-project.org>
References: <CAM9CR=1jr+P=hVjpkQT+niKTRiY8pvQ2qvmChbFfpCCM5ByFCw@mail.gmail.com>
 <323349E7-2F46-4914-B75F-D46B98706C40@R-project.org>
Message-ID: <b158b714-0e52-e7dc-03b6-193d223b0738@stats.ox.ac.uk>

On 06/06/2019 16:39, Simon Urbanek wrote:
> Jon,
> 
> some time ago Apple's clang has silently dropped -fopenmp so we were able to at least keep it in the flags even if it wasn't actually using it. Still, it was only dropping it, it wasn't actually generating any parallel code, so there was real point in using it. That's when we decided to use non-Apple clang since it has proper support for parallel code generation.
> 
> What you're pointing out is that more recent clang builds from Apple now do include the OMP generation pieces (in particular the pre-processor), they just don't ship any OpenMP-related headers or libraries. The problem is that it's hard to rely on something that is unsupported and works only on some systems. We could ship libomp (we already do - no need to get it from homebrew), but, for example, the omp.h headers from clang7 don't work with Apple's clang (you do need explicit -I.. and -lomp in addition to -Wp,-fopenmp because it's not only the pre-processor that needs to know about it).
> 
> Also note that "-Wp,-fopenmp" is a hack - just because Apple has not patched the pre-processor and only the front-end/linker to refuse it, it doesn't mean that it actually works properly. There is no guarantee that they made changes to the code-generation which break something in OpenMP since it's not not even included in any of their tests. Hence I'd say it's a quick hack if you don't want to to install clang7 that may or may not work depending on your code, but not something I'd trust in a release.

There is another issue: libomp is not explicitly versioned, but there 
are differences between LLVM-project releases (and there are other 
sources, and even projects which symlink other implementations to 
libomp).  So putting -lomp in LIBS is unsafe, and part of the job of a 
-fopenmp flag when a compiler is used to link is to arrange to link to 
the correct libomp (also at runtime).

clang has not always done a good job in finding the right libomp, and it 
has a couple of times recently adding OpenMP features which need support 
in libomp.  So whereas this may 'work OK' for one user's limited 
testing, it may not work for all R packages (and in my experience it has 
been just a handful which failed).

> 
> Cheers,
> Simon
> 
> 
> 
>> On Jun 6, 2019, at 6:42 AM, Jon Clayden <jon.clayden at gmail.com> wrote:
>>
>> Dear all,
>>
>> Lack of OpenMP support in Apple?s build of Clang is cited as one
>> reason for not using it in CRAN builds, but this is only partly true:
>> after installing libomp from Homebrew, I have been adding
>> ?-Wp,-fopenmp? to CXXFLAGS and CFLAGS (and ?-lomp? to LIBS) to my
>> builds for a while, and everything seems to work OK.
>>
>> I?m not sure how far back this support goes (and I haven?t tried the
>> Xcode 11 tools yet), but is there any known reason not to take this
>> approach, and if not, would it make sense for R?s configure script to
>> try ?-Wp,-fopenmp? when testing for OpenMP support?
>>
>> All the best,
>> Jon



-- 
Brian D. Ripley,                  ripley at stats.ox.ac.uk
Emeritus Professor of Applied Statistics, University of Oxford


From pd@|gd @end|ng |rom gm@||@com  Fri Jun 14 13:10:43 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Fri, 14 Jun 2019 13:10:43 +0200
Subject: [R-SIG-Mac] Warning on XCode / Command Line Tools 11
In-Reply-To: <52813442-fb0c-6b74-fc3e-f9000b78aead@stats.ox.ac.uk>
References: <0ba34c12-ed03-9aff-b3c9-a6e90ea98ea2@stats.ox.ac.uk>
 <B0689902-5A6B-4B15-8689-1D79785C04F7@gmail.com>
 <52813442-fb0c-6b74-fc3e-f9000b78aead@stats.ox.ac.uk>
Message-ID: <3252D281-6F6F-41A8-9520-7174E1807776@gmail.com>

[Forgot-to-click-send-syndrome...]

OK, I suspected that it might be retracted by Apple (auto-update is turned off on this machine).

Re. time frame, it seems that "Apple fall" is like late September. I recall us getting caught  by having a release scheduled too close to be able to fix Apple-induced incompatibilities. (Presumably that was 3.4.2 on Sep 28 and the issue was time zone file location.)

-pd

> On 6 Jun 2019, at 11:19 , Prof Brian Ripley <ripley at stats.ox.ac.uk> wrote:
> 
> On 06/06/2019 09:31, peter dalgaard wrote:
>> FWIW, no updates are suggested for the source-building machine in my office, also running Mojave. (June 5 was Constitution Day and Election Day, so I have been away from the machine until now.)
> 
> It stopping nagging me yesterday afternoon, so likely it was an Apple snafu.  (I heard from others who had been caught by this, and of course Apple allows for 'automatic' updating so this could happen in the background.)
> 
>> We do need to keep an eye on the tools though. My current setup is an  -um- eclectic mix (*) of old and new tools, some of which are 32 bit, and this is going to be a problem in 10.15 Catalina. I did try getting the tools better in line with Simon's setup at some point, but there were hiccups and then I ran out of time and couldn't risk collateral damage.
> 
> You have a few months yet.  The residual 32-bit applications I have are from Adobe, e.g. old uninstallers.
> 
>> -pd
>> (*) ="dogs dinner"
>>> On 4 Jun 2019, at 17:10 , Prof Brian Ripley <ripley at stats.ox.ac.uk> wrote:
>>> 
>>> My Mojave machine today prompted me to update to version 11 of Command Line Tools (apparently 'beta 1', but I am not a Beta tester).
>>> 
>>> In short: don't do that (you can revert to 10.2.1 from the URL above, at least if your Apple ID has (free) developer privileges).
>>> 
>>> CoreFoundation.framework has been removed (and its headers are used in a couple of spots compiling R).
>>> 
>>> Further its seems that /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg is no longer included and setting CPPFLAGS did not suffice.
>>> 
>>> Hopefully we will have solutions in due course, but that version is really for 10.15 Catalina which is months away ('in the Fall', whenever that is).
>>> 
>>> -- 
>>> Brian D. Ripley,                  ripley at stats.ox.ac.uk
>>> Emeritus Professor of Applied Statistics, University of Oxford
>>> 
>>> _______________________________________________
>>> R-SIG-Mac mailing list
>>> R-SIG-Mac at r-project.org
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 
> 
> -- 
> Brian D. Ripley,                  ripley at stats.ox.ac.uk
> Emeritus Professor of Applied Statistics, University of Oxford

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Mon Jun 24 07:04:29 2019
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Mon, 24 Jun 2019 00:04:29 -0500
Subject: [R-SIG-Mac] point size in svg
In-Reply-To: <63168c7a-07b5-3ee5-281e-1274a8b43f0f@comcast.net>
References: <2044e902-5440-678a-d845-d2d521ca428a@prodsyse.com>
 <63168c7a-07b5-3ee5-281e-1274a8b43f0f@comcast.net>
Message-ID: <c864cccc-1049-d19d-51fe-da1ce8a5bd84@prodsyse.com>

Hello, All:


 ????? I'm unable to control font size in plots created by "svg" in R 
3.6.0 on macOS Mojave 10.14.5.? Consider the following:


svg('cex-svg.svg')
cex. <- 5
plot(1:2, cex.axis=cex.)
text(1:2, 1:2, c('as', 'DF'),
 ????????? cex=cex.)
dev.off()


 ??? ? When I run this in R 3.5.2 under Windows 7, it works fine.? In R 
3.6.0 under macOS 10.14.5, I get tiny fonts.? Changing "cex." has no 
impact on the result.? A question about this to R-Devel generated 
replies from Peter Langfelder and David Winsemius, who noted that it 
worked fine under Ubuntu 18.04 (supposedly with R 3.15.2 -- probably R 
3.5.2, but I'm not sure).? I experimented with the width, height, 
pointsize and family arguments for "svg", without solving this problem.


 ????? I believe this problem is fairly recent:? I just looked at svg 
files I created with R on this same computer probably last fall, and the 
font size looks reasonable -- better than what I get today.? I'm not 100 
percent sure, but I think I was able to control the font size with the 
cex and cex.axis arguments with those earlier versions of R and macOS.


 ????? Suggestions?
 ????? Thanks,
 ????? Spencer Graves


#? This script worked as expected on Windows:
sessionInfo()
R version 3.5.2 (2018-12-20)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 7 x64 (build 7601) Service Pack 1

Matrix products: default

locale:
 ? [1] LC_COLLATE=English_United States.1252
[2] LC_CTYPE=English_United States.1252
[3] LC_MONETARY=English_United States.1252
[4] LC_NUMERIC=C
[5] LC_TIME=English_United States.1252

attached base packages:
 ? [1] stats???? graphics? grDevices utils???? datasets
[6] methods?? base

loaded via a namespace (and not attached):
 ? [1] compiler_3.5.2 tools_3.5.2??? yaml_2.2.0


# It failed on macOS:


>> sessionInfo()
>> R version 3.6.0 (2019-04-26)
>> Platform: x86_64-apple-darwin15.6.0 (64-bit)
>> Running under: macOS Mojave 10.14.5
>>
>> Matrix products: default
>> BLAS: 
>> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
>> LAPACK: 
>> /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib
>>
>> locale:
>> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>>
>> attached base packages:
>> [1] stats???? graphics? grDevices utils???? datasets
>> [6] methods?? base
>>
>> other attached packages:
>> [1] Ecdat_0.3-2 Ecfun_0.2-1
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From dw|n@em|u@ @end|ng |rom comc@@t@net  Mon Jun 24 07:59:45 2019
From: dw|n@em|u@ @end|ng |rom comc@@t@net (David Winsemius)
Date: Sun, 23 Jun 2019 22:59:45 -0700
Subject: [R-SIG-Mac] point size in svg
In-Reply-To: <c864cccc-1049-d19d-51fe-da1ce8a5bd84@prodsyse.com>
References: <2044e902-5440-678a-d845-d2d521ca428a@prodsyse.com>
 <63168c7a-07b5-3ee5-281e-1274a8b43f0f@comcast.net>
 <c864cccc-1049-d19d-51fe-da1ce8a5bd84@prodsyse.com>
Message-ID: <BC6D68BF-13B5-4900-9EDA-FF99305587F9@comcast.net>


> On Jun 23, 2019, at 10:04 PM, Spencer Graves <spencer.graves at prodsyse.com> wrote:
> 
> Hello, All:
> 
> 
>       I'm unable to control font size in plots created by "svg" in R 3.6.0 on macOS Mojave 10.14.5.  Consider the following:
> 
> 
> svg('cex-svg.svg')
> cex. <- 5
> plot(1:2, cex.axis=cex.)
> text(1:2, 1:2, c('as', 'DF'),
>           cex=cex.)
> dev.off()
> 
> 
>       When I run this in R 3.5.2 under Windows 7, it works fine.  In R 3.6.0 under macOS 10.14.5, I get tiny fonts.  Changing "cex." has no impact on the result.  A question about this to R-Devel generated replies from Peter Langfelder and David Winsemius, who noted that it worked fine under Ubuntu 18.04 (supposedly with R 3.15.2 -- probably R 3.5.2, but I'm not sure).

You should be sure.

>  I experimented with the width, height, pointsize and family arguments for "svg", without solving this problem.

With R version 3.5.1 (2018-07-02) -- "Feather Spray" on OS X 10.11.6 I am unable to reproduce. My Mac hardware is considered well past (Apple) end of life despite its functionality, so I cannot upgrade my OS. I'm attaching the file that is the result so Spencer can view it, although I suspect it will be scrubbed by the mail-server.


-------------- next part --------------
A non-text attachment was scrubbed...
Name: cex-svg.svg
Type: image/svg+xml
Size: 26479 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20190623/9057a17d/attachment-0001.svg>

-------------- next part --------------


-- 
David.

> 
> 
>       I believe this problem is fairly recent:  I just looked at svg files I created with R on this same computer probably last fall, and the font size looks reasonable -- better than what I get today.  I'm not 100 percent sure, but I think I was able to control the font size with the cex and cex.axis arguments with those earlier versions of R and macOS.
> 
> 
>       Suggestions?
>       Thanks,
>       Spencer Graves
> 
> 
> #  This script worked as expected on Windows:
> sessionInfo()
> R version 3.5.2 (2018-12-20)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 7 x64 (build 7601) Service Pack 1
> 
> Matrix products: default
> 
> locale:
>   [1] LC_COLLATE=English_United States.1252
> [2] LC_CTYPE=English_United States.1252
> [3] LC_MONETARY=English_United States.1252
> [4] LC_NUMERIC=C
> [5] LC_TIME=English_United States.1252
> 
> attached base packages:
>   [1] stats     graphics  grDevices utils     datasets
> [6] methods   base
> 
> loaded via a namespace (and not attached):
>   [1] compiler_3.5.2 tools_3.5.2    yaml_2.2.0
> 
> 
> # It failed on macOS:
> 
> 
>>> sessionInfo()
>>> R version 3.6.0 (2019-04-26)
>>> Platform: x86_64-apple-darwin15.6.0 (64-bit)
>>> Running under: macOS Mojave 10.14.5
>>> 
>>> Matrix products: default
>>> BLAS: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
>>> LAPACK: /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib
>>> 
>>> locale:
>>> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
>>> 
>>> attached base packages:
>>> [1] stats     graphics  grDevices utils     datasets
>>> [6] methods   base
>>> 
>>> other attached packages:
>>> [1] Ecdat_0.3-2 Ecfun_0.2-1
>>> 
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac

David Winsemius
Alameda, CA, USA

'Any technology distinguishable from magic is insufficiently advanced.'   -Gehm's Corollary to Clarke's Third Law






From @pencer@gr@ve@ @end|ng |rom prod@y@e@com  Mon Jun 24 09:25:29 2019
From: @pencer@gr@ve@ @end|ng |rom prod@y@e@com (Spencer Graves)
Date: Mon, 24 Jun 2019 02:25:29 -0500
Subject: [R-SIG-Mac] point size in svg
In-Reply-To: <BC6D68BF-13B5-4900-9EDA-FF99305587F9@comcast.net>
References: <2044e902-5440-678a-d845-d2d521ca428a@prodsyse.com>
 <63168c7a-07b5-3ee5-281e-1274a8b43f0f@comcast.net>
 <c864cccc-1049-d19d-51fe-da1ce8a5bd84@prodsyse.com>
 <BC6D68BF-13B5-4900-9EDA-FF99305587F9@comcast.net>
Message-ID: <d76decc1-deeb-8812-084e-78a73d84222c@prodsyse.com>

 ????? Thanks to David Winsemius for his reply.? His attachment came 
through and displayed consistent with the R documentation.? Thus, the 
cex.axis and cex arguments work fine with R 3.5.1 (2018-07-02) and 
"Feather Spray" on OS X 10.11.6, but they don't work properly with the 
current version of R under the current version of macOS.


 ????? Spencer


On 2019-06-24 00:59, David Winsemius wrote:
>> On Jun 23, 2019, at 10:04 PM, Spencer Graves <spencer.graves at prodsyse.com> wrote:
>>
>> Hello, All:
>>
>>
>>        I'm unable to control font size in plots created by "svg" in R 3.6.0 on macOS Mojave 10.14.5.  Consider the following:
>>
>>
>> svg('cex-svg.svg')
>> cex. <- 5
>> plot(1:2, cex.axis=cex.)
>> text(1:2, 1:2, c('as', 'DF'),
>>            cex=cex.)
>> dev.off()
>>
>>
>>        When I run this in R 3.5.2 under Windows 7, it works fine.  In R 3.6.0 under macOS 10.14.5, I get tiny fonts.  Changing "cex." has no impact on the result.  A question about this to R-Devel generated replies from Peter Langfelder and David Winsemius, who noted that it worked fine under Ubuntu 18.04 (supposedly with R 3.15.2 -- probably R 3.5.2, but I'm not sure).
> You should be sure.
>
>>   I experimented with the width, height, pointsize and family arguments for "svg", without solving this problem.
> With R version 3.5.1 (2018-07-02) -- "Feather Spray" on OS X 10.11.6 I am unable to reproduce. My Mac hardware is considered well past (Apple) end of life despite its functionality, so I cannot upgrade my OS. I'm attaching the file that is the result so Spencer can view it, although I suspect it will be scrubbed by the mail-server.
>
>
>


	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Mon Jun 24 11:10:56 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Mon, 24 Jun 2019 11:10:56 +0200
Subject: [R-SIG-Mac] point size in svg
In-Reply-To: <d76decc1-deeb-8812-084e-78a73d84222c@prodsyse.com>
References: <2044e902-5440-678a-d845-d2d521ca428a@prodsyse.com>
 <63168c7a-07b5-3ee5-281e-1274a8b43f0f@comcast.net>
 <c864cccc-1049-d19d-51fe-da1ce8a5bd84@prodsyse.com>
 <BC6D68BF-13B5-4900-9EDA-FF99305587F9@comcast.net>
 <d76decc1-deeb-8812-084e-78a73d84222c@prodsyse.com>
Message-ID: <D42C8210-29BD-4602-8F68-1B898A299A6C@gmail.com>

Works fine for me on 10.14.5, both with CRAN-supplied 3.6.0 and locally compiled  3.6.0 Patched (2019-06-23 r76734).

I suspect that you might have a font misconfiguration of sorts on your Mojave machine.

-pd

> On 24 Jun 2019, at 09:25 , Spencer Graves <spencer.graves at prodsyse.com> wrote:
> 
> ?? Thanks to David Winsemius for his reply.? His attachment came 
> through and displayed consistent with the R documentation.? Thus, the 
> cex.axis and cex arguments work fine with R 3.5.1 (2018-07-02) and 
> "Feather Spray" on OS X 10.11.6, but they don't work properly with the 
> current version of R under the current version of macOS.
> 
> 
> ?? Spencer
> 
> 
> On 2019-06-24 00:59, David Winsemius wrote:
>>> On Jun 23, 2019, at 10:04 PM, Spencer Graves <spencer.graves at prodsyse.com> wrote:
>>> 
>>> Hello, All:
>>> 
>>> 
>>>       I'm unable to control font size in plots created by "svg" in R 3.6.0 on macOS Mojave 10.14.5.  Consider the following:
>>> 
>>> 
>>> svg('cex-svg.svg')
>>> cex. <- 5
>>> plot(1:2, cex.axis=cex.)
>>> text(1:2, 1:2, c('as', 'DF'),
>>>           cex=cex.)
>>> dev.off()
>>> 
>>> 
>>>       When I run this in R 3.5.2 under Windows 7, it works fine.  In R 3.6.0 under macOS 10.14.5, I get tiny fonts.  Changing "cex." has no impact on the result.  A question about this to R-Devel generated replies from Peter Langfelder and David Winsemius, who noted that it worked fine under Ubuntu 18.04 (supposedly with R 3.15.2 -- probably R 3.5.2, but I'm not sure).
>> You should be sure.
>> 
>>>  I experimented with the width, height, pointsize and family arguments for "svg", without solving this problem.
>> With R version 3.5.1 (2018-07-02) -- "Feather Spray" on OS X 10.11.6 I am unable to reproduce. My Mac hardware is considered well past (Apple) end of life despite its functionality, so I cannot upgrade my OS. I'm attaching the file that is the result so Spencer can view it, although I suspect it will be scrubbed by the mail-server.
>> 
>> 
>> 
> 
> 
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From jw|j||e|@ @end|ng |rom bno@@c@be  Mon Jun 24 14:11:17 2019
From: jw|j||e|@ @end|ng |rom bno@@c@be (Jan Wijffels)
Date: Mon, 24 Jun 2019 14:11:17 +0200
Subject: [R-SIG-Mac] multithreading package failure?
Message-ID: <CAJ9GNamGLtVQonKa_v5HPbjGajo+sjkMBTfqnHWeNJEDuQhhXA@mail.gmail.com>

Dear r-sig-mac mailing list,

I don't own a Mac but I'm the maintainer of the ruimtehol R package which
FAILS on CRAN on Mac only (see logs at
https://cran.r-project.org/web/checks/check_results_ruimtehol.html)
I would like to get rid of the FAIL note on CRAN but I'm a bit stabbing in
the dark about how as there is not a lot of information on the check page
on the reason of failure.
The package is developped at https://github.com/bnosac/ruimtehol and
probably the failure is due to multi-threading as the only 2 things which
are different on MacOS is the code at
https://github.com/bnosac/ruimtehol/blob/da1cd4da6bbcc6a7cc4c346989e8476f37864091/src/Starspace/src/model.cpp#L31
and at
https://github.com/bnosac/ruimtehol/blob/da1cd4da6bbcc6a7cc4c346989e8476f37864091/src/Starspace/src/model.cpp#L38


Currently R package ruimtehol apparently has been built fine at least
once on CRAN as a Mac OS a binary is available at
https://CRAN.R-project.org/package=ruimtehol
Also R CMD check ran today on 2019/06/24 on rhub running Mac OS runs fine
as shown in the log at
https://builder.r-hub.io/status/ruimtehol_0.2.1.tar.gz-98f98671fd5fe78842e5bf463f1fe05c,
which makes me wonder what is the differences in compiler setup regarding
rhub and CRAN on Mac OS?

A user of the package has managed to get the package working as shown at
issue https://github.com/bnosac/ruimtehol/issues/10#issuecomment-458311181
He basically did change the compiler he used, namely did brew install llvm
and then fixed his compiler setup as follows

CC=/usr/local/opt/llvm/bin/clang #-fopenmp
CXX=/usr/local/opt/llvm/bin/clang++ #-fopenmp
CFLAGS=-g -O3 -Wall -pedantic -std=gnu99 -mtune=native -pipe
CXXFLAGS=-g -O3 -Wall -pedantic -std=c++11 -mtune=native -pipe
LDFLAGS=-L/usr/local/opt/gettext/lib -L/usr/local/opt/llvm/lib
-Wl,-rpath,/usr/local/opt/llvm/lib
CPPFLAGS=-I/usr/local/opt/gettext/include -I/usr/local/opt/llvm/include


The Makevars in the package looks like this

CXX_STD = CXX11
PKG_LIBS = -pthread
PKG_CPPFLAGS = -pthread -DSTRICT_R_HEADERS -DBOOST_NO_AUTO_PTR -include
compliance.h -I./Starspace/src


Does anyone has a suggestion on what causes the failure of the package on
Mac OS?

Jan

Jan Wijffels
Statistician
www.bnosac.be  | +32 486 611708

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Mon Jun 24 17:57:43 2019
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Mon, 24 Jun 2019 11:57:43 -0400
Subject: [R-SIG-Mac] multithreading package failure?
In-Reply-To: <CAJ9GNamGLtVQonKa_v5HPbjGajo+sjkMBTfqnHWeNJEDuQhhXA@mail.gmail.com>
References: <CAJ9GNamGLtVQonKa_v5HPbjGajo+sjkMBTfqnHWeNJEDuQhhXA@mail.gmail.com>
Message-ID: <8F28071D-5698-452E-8603-B1BE2A0A621F@R-project.org>

Jan,

it fails due to timeout (i.e. the build gets killed after 30 minutes which is why you don't see any further output). So could it be that your example just take too long to finish? If it helps, this is the tail of the output:

$ tail ruimtehol-Ex.Rout
+                             dim = 25, epoch = 25, minCount = 2,
+                             negSearchLimit = 1, maxNegSamples = 2)
Start to initialize starspace model.
Build dict from input file : /tmp/RtmptpPQy0/textspace_14cc02e34905e.txt
Read 0M words
Number of words in dictionary:  1274
Number of labels in dictionary: 0
Loading data from file : /tmp/RtmptpPQy0/textspace_14cc02e34905e.txt
Total number of examples loaded : 470
2019-06-23 12:40:46 Initialising with learning rate 0.01

Cheers,
Simon



> On Jun 24, 2019, at 8:11 AM, Jan Wijffels <jwijffels at bnosac.be> wrote:
> 
> Dear r-sig-mac mailing list,
> 
> I don't own a Mac but I'm the maintainer of the ruimtehol R package which
> FAILS on CRAN on Mac only (see logs at
> https://cran.r-project.org/web/checks/check_results_ruimtehol.html)
> I would like to get rid of the FAIL note on CRAN but I'm a bit stabbing in
> the dark about how as there is not a lot of information on the check page
> on the reason of failure.
> The package is developped at https://github.com/bnosac/ruimtehol and
> probably the failure is due to multi-threading as the only 2 things which
> are different on MacOS is the code at
> https://github.com/bnosac/ruimtehol/blob/da1cd4da6bbcc6a7cc4c346989e8476f37864091/src/Starspace/src/model.cpp#L31
> and at
> https://github.com/bnosac/ruimtehol/blob/da1cd4da6bbcc6a7cc4c346989e8476f37864091/src/Starspace/src/model.cpp#L38
> 
> 
> Currently R package ruimtehol apparently has been built fine at least
> once on CRAN as a Mac OS a binary is available at
> https://CRAN.R-project.org/package=ruimtehol
> Also R CMD check ran today on 2019/06/24 on rhub running Mac OS runs fine
> as shown in the log at
> https://builder.r-hub.io/status/ruimtehol_0.2.1.tar.gz-98f98671fd5fe78842e5bf463f1fe05c,
> which makes me wonder what is the differences in compiler setup regarding
> rhub and CRAN on Mac OS?
> 
> A user of the package has managed to get the package working as shown at
> issue https://github.com/bnosac/ruimtehol/issues/10#issuecomment-458311181
> He basically did change the compiler he used, namely did brew install llvm
> and then fixed his compiler setup as follows
> 
> CC=/usr/local/opt/llvm/bin/clang #-fopenmp
> CXX=/usr/local/opt/llvm/bin/clang++ #-fopenmp
> CFLAGS=-g -O3 -Wall -pedantic -std=gnu99 -mtune=native -pipe
> CXXFLAGS=-g -O3 -Wall -pedantic -std=c++11 -mtune=native -pipe
> LDFLAGS=-L/usr/local/opt/gettext/lib -L/usr/local/opt/llvm/lib
> -Wl,-rpath,/usr/local/opt/llvm/lib
> CPPFLAGS=-I/usr/local/opt/gettext/include -I/usr/local/opt/llvm/include
> 
> 
> The Makevars in the package looks like this
> 
> CXX_STD = CXX11
> PKG_LIBS = -pthread
> PKG_CPPFLAGS = -pthread -DSTRICT_R_HEADERS -DBOOST_NO_AUTO_PTR -include
> compliance.h -I./Starspace/src
> 
> 
> Does anyone has a suggestion on what causes the failure of the package on
> Mac OS?
> 
> Jan
> 
> Jan Wijffels
> Statistician
> www.bnosac.be  | +32 486 611708
> 
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac


