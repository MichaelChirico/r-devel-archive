From r@cow@n @ending from m@@@trichtuniver@ity@nl  Wed Dec 12 17:39:54 2018
From: r@cow@n @ending from m@@@trichtuniver@ity@nl (Cowan, R (MERIT))
Date: Wed, 12 Dec 2018 16:39:54 +0000
Subject: [R-SIG-Mac] Different performance with different R versions
Message-ID: <C74A070B-E9F5-4314-824C-255EA77886E4@maastrichtuniversity.nl>

 I am running a small simulation, and getting very different run times when I use different versions of R. 
   Two set-ups using the same machine (MacBook Pro 2013 vintage)

   1. R version 3.1.3  running on system OS X 10.9.5

> system.time(source("simulationR-R.R"))

     user  system elapsed 
     3.890   0.061   3.965 

   Compared to

   2. R version 3.5.1  running on system OS X 10.12.6

> system.time(source("simulationR-R.R"))

     user  system elapsed 
   277.924   2.087 280.841 

The source code is identical. This is a pretty big difference running the same code on the same hardware.
Before submitting the code, is this a known issue?


Thanks,
Robin Cowan

From pd@lgd @ending from gm@il@com  Wed Dec 12 22:12:34 2018
From: pd@lgd @ending from gm@il@com (Peter Dalgaard)
Date: Wed, 12 Dec 2018 22:12:34 +0100
Subject: [R-SIG-Mac] Different performance with different R versions
In-Reply-To: <C74A070B-E9F5-4314-824C-255EA77886E4@maastrichtuniversity.nl>
References: <C74A070B-E9F5-4314-824C-255EA77886E4@maastrichtuniversity.nl>
Message-ID: <3151CB93-4966-47C0-8474-01BA2F162ECF@gmail.com>

I don't think there has been anything mentioned about slowdowns of that magnitude, but it's been 3.5 years since 3.1.3.

Would it be possible to narrow down what kind of code has become slow? 

Since the OS version is different, I assume the first timing is historical and not easily redone, but if it is now using like 70 times as long as before, chances are that it is spending 69/70 of the time in the same few places.

One generic frequent cause of grief with simulations is to keep onto the fitted models in entirety, including model frames etc., causing massive memory build-up.

-pd

> On 12 Dec 2018, at 17:39 , Cowan, R (MERIT) <r.cowan at maastrichtuniversity.nl> wrote:
> 
> I am running a small simulation, and getting very different run times when I use different versions of R. 
>   Two set-ups using the same machine (MacBook Pro 2013 vintage)
> 
>   1. R version 3.1.3  running on system OS X 10.9.5
> 
>> system.time(source("simulationR-R.R"))
> 
>     user  system elapsed 
>     3.890   0.061   3.965 
> 
>   Compared to
> 
>   2. R version 3.5.1  running on system OS X 10.12.6
> 
>> system.time(source("simulationR-R.R"))
> 
>     user  system elapsed 
>   277.924   2.087 280.841 
> 
> The source code is identical. This is a pretty big difference running the same code on the same hardware.
> Before submitting the code, is this a known issue?
> 
> 
> Thanks,
> Robin Cowan
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From m@echler @ending from @t@t@m@th@ethz@ch  Thu Dec 13 14:37:07 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 13 Dec 2018 14:37:07 +0100
Subject: [R-SIG-Mac] Different performance with different R versions
In-Reply-To: <3151CB93-4966-47C0-8474-01BA2F162ECF@gmail.com>
References: <C74A070B-E9F5-4314-824C-255EA77886E4@maastrichtuniversity.nl>
 <3151CB93-4966-47C0-8474-01BA2F162ECF@gmail.com>
Message-ID: <23570.24707.411557.776315@stat.math.ethz.ch>

>>>>> Peter Dalgaard 
>>>>>     on Wed, 12 Dec 2018 22:12:34 +0100 writes:

    > I don't think there has been anything mentioned about slowdowns of that magnitude, but it's been 3.5 years since 3.1.3.
    > Would it be possible to narrow down what kind of code has become slow? 

    > Since the OS version is different, I assume the first timing is historical and not easily redone, but if it is now using like 70 times as long as before, chances are that it is spending 69/70 of the time in the same few places.

    > One generic frequent cause of grief with simulations is to keep onto the fitted models in entirety, including model frames etc., causing massive memory build-up.

    > -pd

If the  simulationR-R.R  script is basically reproducible
(i.e. does not use data or other resources that only exist on
 your computer), it would  probably be useful if you "donated"
 it to the R project by making it publicly available.  Some of
 us do have many old R versions still running, and could quickly
 try and see...

Martin Maechler (not a Mac user though)

    >> On 12 Dec 2018, at 17:39 , Cowan, R (MERIT) <r.cowan at maastrichtuniversity.nl> wrote:
    >> 
    >> I am running a small simulation, and getting very different run times when I use different versions of R. 
    >> Two set-ups using the same machine (MacBook Pro 2013 vintage)
    >> 
    >> 1. R version 3.1.3  running on system OS X 10.9.5
    >> 
    >>> system.time(source("simulationR-R.R"))
    >> 
    >> user  system elapsed 
    >> 3.890   0.061   3.965 
    >> 
    >> Compared to
    >> 
    >> 2. R version 3.5.1  running on system OS X 10.12.6
    >> 
    >>> system.time(source("simulationR-R.R"))
    >> 
    >> user  system elapsed 
    >> 277.924   2.087 280.841 
    >> 
    >> The source code is identical. This is a pretty big difference running the same code on the same hardware.
    >> Before submitting the code, is this a known issue?
    >> 
    >> 
    >> Thanks,
    >> Robin Cowan
    >> _______________________________________________
    >> R-SIG-Mac mailing list
    >> R-SIG-Mac at r-project.org
    >> https://stat.ethz.ch/mailman/listinfo/r-sig-mac

    > -- 
    > Peter Dalgaard, Professor,
    > Center for Statistics, Copenhagen Business School
    > Solbjerg Plads 3, 2000 Frederiksberg, Denmark
    > Phone: (+45)38153501
    > Office: A 4.23
    > Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From r@cow@n @ending from m@@@trichtuniver@ity@nl  Thu Dec 13 17:28:57 2018
From: r@cow@n @ending from m@@@trichtuniver@ity@nl (Cowan, R (MERIT))
Date: Thu, 13 Dec 2018 16:28:57 +0000
Subject: [R-SIG-Mac] Different performance with different R versions
In-Reply-To: <23570.24707.411557.776315@stat.math.ethz.ch>
References: <C74A070B-E9F5-4314-824C-255EA77886E4@maastrichtuniversity.nl>
 <3151CB93-4966-47C0-8474-01BA2F162ECF@gmail.com>
 <23570.24707.411557.776315@stat.math.ethz.ch>
Message-ID: <2D821693-AD87-482B-9FCE-D35841010F5B@maastrichtuniversity.nl>

Comments below:
> On 13 Dec 2018, at 14:37, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
> 
>>>>>> Peter Dalgaard 
>>>>>>    on Wed, 12 Dec 2018 22:12:34 +0100 writes:
> 
>> I don't think there has been anything mentioned about slowdowns of that magnitude, but it's been 3.5 years since 3.1.3.
>> Would it be possible to narrow down what kind of code has become slow? 
> 

I explored a bit using Rprof() but made no progress. I can include the Rprof output if that might help. 
I will explore a bit more to see if I can narrow it down. But so far everything I have tried (cutting out various chunks of the simulation) has left the speed discrepancy intact. Which makes me think it is a very general thing, and quite possibly at a pretty low level (but that is guessing).

>> Since the OS version is different, I assume the first timing is historical and not easily redone, but if it is now using like 70 times as long as before, chances are that it is spending 69/70 of the time in the same few places.

The timing was done the same day. I have partitioned my hard drive and have two systems available, with different versions of R installed in each partition (part of the reason for this baroque structure is to be able to use the older faster R). But before going down the ?it?s the two systems? road... I noticed this issue when a student ran the code on a brand new Macbook with R 3.5.1. I couldn?t believe how long it took him so tried it on my (old-ish) machine with the R 3.1.3, before I did the partitioning. And mine was 70 times faster.


> 
>> One generic frequent cause of grief with simulations is to keep onto the fitted models in entirety, including model frames etc., causing massive memory build-up.


The code is pretty simple so I doubt it is that, unless there was some major change in memory management between 3.1 and 3.5.

> 
>> -pd
> 
> If the  simulationR-R.R  script is basically reproducible
> (i.e. does not use data or other resources that only exist on
> your computer), it would  probably be useful if you "donated"
> it to the R project by making it publicly available.  Some of
> us do have many old R versions still running, and could quickly
> try and see?
> 

I would be very happy to do that. What is the best way to do so? (It only uses the igraph package.)

Thank you both for your help.

> Martin Maechler (not a Mac user though)
> 
>>> On 12 Dec 2018, at 17:39 , Cowan, R (MERIT) <r.cowan at maastrichtuniversity.nl> wrote:
>>> 
>>> I am running a small simulation, and getting very different run times when I use different versions of R. 
>>> Two set-ups using the same machine (MacBook Pro 2013 vintage)
>>> 
>>> 1. R version 3.1.3  running on system OS X 10.9.5
>>> 
>>>> system.time(source("simulationR-R.R"))
>>> 
>>> user  system elapsed 
>>> 3.890   0.061   3.965 
>>> 
>>> Compared to
>>> 
>>> 2. R version 3.5.1  running on system OS X 10.12.6
>>> 
>>>> system.time(source("simulationR-R.R"))
>>> 
>>> user  system elapsed 
>>> 277.924   2.087 280.841 
>>> 
>>> The source code is identical. This is a pretty big difference running the same code on the same hardware.
>>> Before submitting the code, is this a known issue?
>>> 
>>> 
>>> Thanks,
>>> Robin Cowan
>>> _______________________________________________
>>> R-SIG-Mac mailing list
>>> R-SIG-Mac at r-project.org
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 
>> -- 
>> Peter Dalgaard, Professor,
>> Center for Statistics, Copenhagen Business School
>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>> Phone: (+45)38153501
>> Office: A 4.23
>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> 
> 
> 


From m@echler @ending from @t@t@m@th@ethz@ch  Thu Dec 13 18:21:04 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 13 Dec 2018 18:21:04 +0100
Subject: [R-SIG-Mac] Different performance with different R versions
In-Reply-To: <2D821693-AD87-482B-9FCE-D35841010F5B@maastrichtuniversity.nl>
References: <C74A070B-E9F5-4314-824C-255EA77886E4@maastrichtuniversity.nl>
 <3151CB93-4966-47C0-8474-01BA2F162ECF@gmail.com>
 <23570.24707.411557.776315@stat.math.ethz.ch>
 <2D821693-AD87-482B-9FCE-D35841010F5B@maastrichtuniversity.nl>
Message-ID: <23570.38144.819397.191942@stat.math.ethz.ch>

>>>>> Cowan, R (MERIT) 
>>>>>     on Thu, 13 Dec 2018 16:28:57 +0000 writes:

    > Comments below:
    >> On 13 Dec 2018, at 14:37, Martin Maechler <maechler at stat.math.ethz.ch> wrote:
    >> 
    >>>>>>> Peter Dalgaard 
    >>>>>>> on Wed, 12 Dec 2018 22:12:34 +0100 writes:
    >> 
    >>> I don't think there has been anything mentioned about slowdowns of that magnitude, but it's been 3.5 years since 3.1.3.
    >>> Would it be possible to narrow down what kind of code has become slow? 
    >> 

    > I explored a bit using Rprof() but made no progress. I can include the Rprof output if that might help. 
    > I will explore a bit more to see if I can narrow it down. But so far everything I have tried (cutting out various chunks of the simulation) has left the speed discrepancy intact. Which makes me think it is a very general thing, and quite possibly at a pretty low level (but that is guessing).

    >>> Since the OS version is different, I assume the first timing is historical and not easily redone, but if it is now using like 70 times as long as before, chances are that it is spending 69/70 of the time in the same few places.

    > The timing was done the same day. I have partitioned my hard drive and have two systems available, with different versions of R installed in each partition (part of the reason for this baroque structure is to be able to use the older faster R). But before going down the ?it?s the two systems? road... I noticed this issue when a student ran the code on a brand new Macbook with R 3.5.1. I couldn?t believe how long it took him so tried it on my (old-ish) machine with the R 3.1.3, before I did the partitioning. And mine was 70 times faster.


    >> 
    >>> One generic frequent cause of grief with simulations is to keep onto the fitted models in entirety, including model frames etc., causing massive memory build-up.


    > The code is pretty simple so I doubt it is that, unless there was some major change in memory management between 3.1 and 3.5.

    >> 
    >>> -pd
    >> 
    >> If the  simulationR-R.R  script is basically reproducible
    >> (i.e. does not use data or other resources that only exist on
    >> your computer), it would  probably be useful if you "donated"
    >> it to the R project by making it publicly available.  Some of
    >> us do have many old R versions still running, and could quickly
    >> try and see?
    >> 

    > I would be very happy to do that. What is the best way to do so? (It only uses the igraph package.)

People use free download places, or Dropbox,..  The easiest
however, if the R script is not huge: you can rename it
simulation-R.txt {note the ending!} so your e-mail software
should mark it as text/plain  .. and text/plain attachments are
allowed on R-SIG-Mac.

But  "igraph" --> aha!  :
Do notice that in general, R 3.5.x  in many places is considerably
faster than R 3.1.x.
If the code depends on the igraph package -- which is not part
of R but an important addon package, heavily relying on compiled code --
are the timing differences perhaps only in those parts where you
use igraph functionality ?

If that's the case, this will still be very interesting and
important, but probably no longer so much for the R maintainers
(among whom Peter and I are), but rather the igraph author and
maintainer, i.e., maintainer("igraph"). ...

Please also provide a shortened version of sessionInfo() *after*
packages are loaded, for the R environments.



    > Thank you both for your help.

and thank you for trying more and Rprof()ing.
Yes, indeed an summaryRprof() may be revealing.

Best, Martin

    >> Martin Maechler (not a Mac user though)
    >> 
    >>>> On 12 Dec 2018, at 17:39 , Cowan, R (MERIT) <r.cowan at maastrichtuniversity.nl> wrote:
    >>>> 
    >>>> I am running a small simulation, and getting very different run times when I use different versions of R. 
    >>>> Two set-ups using the same machine (MacBook Pro 2013 vintage)
    >>>> 
    >>>> 1. R version 3.1.3  running on system OS X 10.9.5
    >>>> 
    >>>>> system.time(source("simulationR-R.R"))
    >>>> 
    >>>> user  system elapsed 
    >>>> 3.890   0.061   3.965 
    >>>> 
    >>>> Compared to
    >>>> 
    >>>> 2. R version 3.5.1  running on system OS X 10.12.6
    >>>> 
    >>>>> system.time(source("simulationR-R.R"))
    >>>> 
    >>>> user  system elapsed 
    >>>> 277.924   2.087 280.841 
    >>>> 
    >>>> The source code is identical. This is a pretty big difference running the same code on the same hardware.
    >>>> Before submitting the code, is this a known issue?
    >>>> 
    >>>> 
    >>>> Thanks,
    >>>> Robin Cowan
    >>>> _______________________________________________
    >>>> R-SIG-Mac mailing list
    >>>> R-SIG-Mac at r-project.org
    >>>> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
    >> 
    >>> -- 
    >>> Peter Dalgaard, Professor,
    >>> Center for Statistics, Copenhagen Business School
    >>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
    >>> Phone: (+45)38153501
    >>> Office: A 4.23
    >>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
    >> 
    >> 
    >>


From r@cow@n @ending from m@@@trichtuniver@ity@nl  Fri Dec 14 09:24:10 2018
From: r@cow@n @ending from m@@@trichtuniver@ity@nl (Cowan, R (MERIT))
Date: Fri, 14 Dec 2018 08:24:10 +0000
Subject: [R-SIG-Mac] Different performance with different R versions
In-Reply-To: <23570.24707.411557.776315@stat.math.ethz.ch>
References: <C74A070B-E9F5-4314-824C-255EA77886E4@maastrichtuniversity.nl>
 <3151CB93-4966-47C0-8474-01BA2F162ECF@gmail.com>
 <23570.24707.411557.776315@stat.math.ethz.ch>
Message-ID: <5515E448-7C0E-472F-8F69-2441498886CC@maastrichtuniversity.nl>

Thanks for the help.

Attached are 3 files:
The simulation script as simulationR-R.txt
Rprof() output from R 3.1.3 as Rprof-3-1-3.txt
Rprof() output from R 3.5.1 as Rprof-3-5-1.txt

There is information about versions and system times at the top of the simulation script. I had a student try it on her windows machine. She has R version 3.4 installed. It performs the same as version 3.5, so whatever changes to R account for the change in performance probably came before version 3.4 (and suggests it is not the OS).

I hope the script contains enough documentation that you can decipher it. There are comments about what the algorithm is doing but also comments about things I have done to try to isolate the problem (deleting stuff and moving things around, which by the way makes nonsense of the simulation itself, but that is not an issue here).
It uses the igraph package, but I re-arranged things such that I am pretty sure that is not the problem. I realized just now I could get rid of the igraph stuff altogether for debugging purposes  if that would help. Let me know about that.

Thanks for your help. I hope you can track it down, because this kind of speed degradation make me really hesitate to upgrade.

Robin Cowan

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: simulationR-R.txt
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20181214/9af725ce/attachment-0004.txt>

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: Rprof-3-1-3.txt
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20181214/9af725ce/attachment-0005.txt>

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: Rprof-3-5-1.txt
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20181214/9af725ce/attachment-0006.txt>

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: ATT00001.txt
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20181214/9af725ce/attachment-0007.txt>

From i@t@z@hn @ending from gm@il@com  Fri Dec 14 11:58:25 2018
From: i@t@z@hn @ending from gm@il@com (Ista Zahn)
Date: Fri, 14 Dec 2018 05:58:25 -0500
Subject: [R-SIG-Mac] Different performance with different R versions
In-Reply-To: <5515E448-7C0E-472F-8F69-2441498886CC@maastrichtuniversity.nl>
References: <C74A070B-E9F5-4314-824C-255EA77886E4@maastrichtuniversity.nl>
 <3151CB93-4966-47C0-8474-01BA2F162ECF@gmail.com>
 <23570.24707.411557.776315@stat.math.ethz.ch>
 <5515E448-7C0E-472F-8F69-2441498886CC@maastrichtuniversity.nl>
Message-ID: <CA+vqiLEB1QMbRNQOOeuULC7KsBE_1DiZ-sw7mAkLnm-pA+Jqgw@mail.gmail.com>

This isn't Mac specific (I can reproduce it in Linux). Switching the
igraph from version from 1.2.2 (slow) to 0.7.1 (fast) is enough, so
this also has nothing to do with R itself. This should be reported to
https://igraph.org/r/, either on the mailing list, bug tracker, or
both.

Best,
Ista


On Fri, Dec 14, 2018 at 3:24 AM Cowan, R (MERIT)
<r.cowan at maastrichtuniversity.nl> wrote:
>
> Thanks for the help.
>
> Attached are 3 files:
> The simulation script as simulationR-R.txt
> Rprof() output from R 3.1.3 as Rprof-3-1-3.txt
> Rprof() output from R 3.5.1 as Rprof-3-5-1.txt
>
> There is information about versions and system times at the top of the simulation script. I had a student try it on her windows machine. She has R version 3.4 installed. It performs the same as version 3.5, so whatever changes to R account for the change in performance probably came before version 3.4 (and suggests it is not the OS).
>
> I hope the script contains enough documentation that you can decipher it. There are comments about what the algorithm is doing but also comments about things I have done to try to isolate the problem (deleting stuff and moving things around, which by the way makes nonsense of the simulation itself, but that is not an issue here).
> It uses the igraph package, but I re-arranged things such that I am pretty sure that is not the problem. I realized just now I could get rid of the igraph stuff altogether for debugging purposes  if that would help. Let me know about that.
>
> Thanks for your help. I hope you can track it down, because this kind of speed degradation make me really hesitate to upgrade.
>
> Robin Cowan
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac


From m@echler @ending from @t@t@m@th@ethz@ch  Fri Dec 14 12:41:37 2018
From: m@echler @ending from @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 14 Dec 2018 12:41:37 +0100
Subject: [R-SIG-Mac] Different performance with different R versions
In-Reply-To: <CA+vqiLEB1QMbRNQOOeuULC7KsBE_1DiZ-sw7mAkLnm-pA+Jqgw@mail.gmail.com>
References: <C74A070B-E9F5-4314-824C-255EA77886E4@maastrichtuniversity.nl>
 <3151CB93-4966-47C0-8474-01BA2F162ECF@gmail.com>
 <23570.24707.411557.776315@stat.math.ethz.ch>
 <5515E448-7C0E-472F-8F69-2441498886CC@maastrichtuniversity.nl>
 <CA+vqiLEB1QMbRNQOOeuULC7KsBE_1DiZ-sw7mAkLnm-pA+Jqgw@mail.gmail.com>
Message-ID: <23571.38641.36657.917313@stat.math.ethz.ch>

>>>>> Ista Zahn 
>>>>>     on Fri, 14 Dec 2018 05:58:25 -0500 writes:

    > This isn't Mac specific (I can reproduce it in Linux). Switching the
    > igraph from version from 1.2.2 (slow) to 0.7.1 (fast) is enough, so
    > this also has nothing to do with R itself. This should be reported to
    > https://igraph.org/r/, either on the mailing list, bug tracker, or
    > both.

    > Best,
    > Ista

Indeed (on Linux, too)

A much shorter (and 5x faster running) version of the repr.ex.
R script is appended (it uses specific .libPaths() to get the
  correct version if igraph).

Martin


-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: simulationR.R
URL: <https://stat.ethz.ch/pipermail/r-sig-mac/attachments/20181214/8d86b714/attachment.ksh>

From i@t@z@hn @ending from gm@il@com  Fri Dec 14 15:26:19 2018
From: i@t@z@hn @ending from gm@il@com (Ista Zahn)
Date: Fri, 14 Dec 2018 09:26:19 -0500
Subject: [R-SIG-Mac] Different performance with different R versions
In-Reply-To: <23571.38641.36657.917313@stat.math.ethz.ch>
References: <C74A070B-E9F5-4314-824C-255EA77886E4@maastrichtuniversity.nl>
 <3151CB93-4966-47C0-8474-01BA2F162ECF@gmail.com>
 <23570.24707.411557.776315@stat.math.ethz.ch>
 <5515E448-7C0E-472F-8F69-2441498886CC@maastrichtuniversity.nl>
 <CA+vqiLEB1QMbRNQOOeuULC7KsBE_1DiZ-sw7mAkLnm-pA+Jqgw@mail.gmail.com>
 <23571.38641.36657.917313@stat.math.ethz.ch>
Message-ID: <CA+vqiLGaqpy9b6ABz9o+cU1XSYZayuXawDnQkDuqcRHZVzHGLQ@mail.gmail.com>

The igraph slowdown is known, and discussed in several places, including

https://github.com/igraph/rigraph/issues/166
https://lists.nongnu.org/archive/html/igraph-help/2015-06/msg00067.html
https://github.com/igraph/rigraph/issues/194

--Ista
On Fri, Dec 14, 2018 at 6:41 AM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> >>>>> Ista Zahn
> >>>>>     on Fri, 14 Dec 2018 05:58:25 -0500 writes:
>
>     > This isn't Mac specific (I can reproduce it in Linux). Switching the
>     > igraph from version from 1.2.2 (slow) to 0.7.1 (fast) is enough, so
>     > this also has nothing to do with R itself. This should be reported to
>     > https://igraph.org/r/, either on the mailing list, bug tracker, or
>     > both.
>
>     > Best,
>     > Ista
>
> Indeed (on Linux, too)
>
> A much shorter (and 5x faster running) version of the repr.ex.
> R script is appended (it uses specific .libPaths() to get the
>   correct version if igraph).
>
> Martin
>


From r@cow@n @ending from m@@@trichtuniver@ity@nl  Fri Dec 14 17:49:39 2018
From: r@cow@n @ending from m@@@trichtuniver@ity@nl (Cowan, R (MERIT))
Date: Fri, 14 Dec 2018 16:49:39 +0000
Subject: [R-SIG-Mac] Different performance with different R versions
In-Reply-To: <CA+vqiLGaqpy9b6ABz9o+cU1XSYZayuXawDnQkDuqcRHZVzHGLQ@mail.gmail.com>
References: <C74A070B-E9F5-4314-824C-255EA77886E4@maastrichtuniversity.nl>
 <3151CB93-4966-47C0-8474-01BA2F162ECF@gmail.com>
 <23570.24707.411557.776315@stat.math.ethz.ch>
 <5515E448-7C0E-472F-8F69-2441498886CC@maastrichtuniversity.nl>
 <CA+vqiLEB1QMbRNQOOeuULC7KsBE_1DiZ-sw7mAkLnm-pA+Jqgw@mail.gmail.com>
 <23571.38641.36657.917313@stat.math.ethz.ch>
 <CA+vqiLGaqpy9b6ABz9o+cU1XSYZayuXawDnQkDuqcRHZVzHGLQ@mail.gmail.com>
Message-ID: <EAF7AE61-BF97-467C-804B-B47039790711@maastrichtuniversity.nl>

Thanks all, for your help.
I will turn to the  igraph lists.

Robin Cowan

> On 14 Dec 2018, at 15:26, Ista Zahn <istazahn at gmail.com> wrote:
> 
> The igraph slowdown is known, and discussed in several places, including
> 
> https://github.com/igraph/rigraph/issues/166
> https://lists.nongnu.org/archive/html/igraph-help/2015-06/msg00067.html
> https://github.com/igraph/rigraph/issues/194
> 
> --Ista
> On Fri, Dec 14, 2018 at 6:41 AM Martin Maechler
> <maechler at stat.math.ethz.ch> wrote:
>> 
>>>>>>> Ista Zahn
>>>>>>>    on Fri, 14 Dec 2018 05:58:25 -0500 writes:
>> 
>>> This isn't Mac specific (I can reproduce it in Linux). Switching the
>>> igraph from version from 1.2.2 (slow) to 0.7.1 (fast) is enough, so
>>> this also has nothing to do with R itself. This should be reported to
>>> https://igraph.org/r/, either on the mailing list, bug tracker, or
>>> both.
>> 
>>> Best,
>>> Ista
>> 
>> Indeed (on Linux, too)
>> 
>> A much shorter (and 5x faster running) version of the repr.ex.
>> R script is appended (it uses specific .libPaths() to get the
>>  correct version if igraph).
>> 
>> Martin
>> 


From r@cow@n @ending from m@@@trichtuniver@ity@nl  Fri Dec 14 18:03:11 2018
From: r@cow@n @ending from m@@@trichtuniver@ity@nl (Cowan, R (MERIT))
Date: Fri, 14 Dec 2018 17:03:11 +0000
Subject: [R-SIG-Mac] Different performance with different R versions
In-Reply-To: <CA+vqiLGaqpy9b6ABz9o+cU1XSYZayuXawDnQkDuqcRHZVzHGLQ@mail.gmail.com>
References: <C74A070B-E9F5-4314-824C-255EA77886E4@maastrichtuniversity.nl>
 <3151CB93-4966-47C0-8474-01BA2F162ECF@gmail.com>
 <23570.24707.411557.776315@stat.math.ethz.ch>
 <5515E448-7C0E-472F-8F69-2441498886CC@maastrichtuniversity.nl>
 <CA+vqiLEB1QMbRNQOOeuULC7KsBE_1DiZ-sw7mAkLnm-pA+Jqgw@mail.gmail.com>
 <23571.38641.36657.917313@stat.math.ethz.ch>
 <CA+vqiLGaqpy9b6ABz9o+cU1XSYZayuXawDnQkDuqcRHZVzHGLQ@mail.gmail.com>
Message-ID: <EF80663B-308D-47B0-9F18-EDCE74A188E5@maastrichtuniversity.nl>

A final comment in case others run across this issue.

Inserting the statement

igraph_options(return.vs.es<http://return.vs.es> = FALSE)

after loading the igraph library returns execution speeds to ?normal?. But beware, the igraph developers describe this move as ?dangerous?. So use at your own risk (and I have no idea what the risks are).

On 14 Dec 2018, at 15:26, Ista Zahn <istazahn at gmail.com<mailto:istazahn at gmail.com>> wrote:

The igraph slowdown is known, and discussed in several places, including

https://github.com/igraph/rigraph/issues/166
https://lists.nongnu.org/archive/html/igraph-help/2015-06/msg00067.html
https://github.com/igraph/rigraph/issues/194

--Ista
On Fri, Dec 14, 2018 at 6:41 AM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:

Ista Zahn
   on Fri, 14 Dec 2018 05:58:25 -0500 writes:

This isn't Mac specific (I can reproduce it in Linux). Switching the
igraph from version from 1.2.2 (slow) to 0.7.1 (fast) is enough, so
this also has nothing to do with R itself. This should be reported to
https://igraph.org/r/, either on the mailing list, bug tracker, or
both.

Best,
Ista

Indeed (on Linux, too)

A much shorter (and 5x faster running) version of the repr.ex.
R script is appended (it uses specific .libPaths() to get the
 correct version if igraph).

Martin



	[[alternative HTML version deleted]]


From c@@rdi@g@bor @ending from gm@il@com  Sat Dec 15 00:00:19 2018
From: c@@rdi@g@bor @ending from gm@il@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Fri, 14 Dec 2018 23:00:19 +0000
Subject: [R-SIG-Mac] CRAN build of R linking to /usr/local/clang4/
In-Reply-To: <CABtg=KmNj9PGtm40D=UrpvP5Ubo6mB-9txB5AiuSuMjuejrgDw@mail.gmail.com>
References: <CABtg=KmNj9PGtm40D=UrpvP5Ubo6mB-9txB5AiuSuMjuejrgDw@mail.gmail.com>
Message-ID: <CABtg=Kk_EEz-yFSACLgCRJZe1B-LaBbMzY8Kv84p5P3fx4dZAg@mail.gmail.com>

Would it be possible to fix this for the builds of the upcoming release?

Thanks,
Gabor
On Wed, Oct 10, 2018 at 11:12 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>
> https://cran.r-project.org/bin/macosx/tools/ suggests installing a
> special clang6 build. OTOH, the R binary links to a library that comes
> with CRAN's clang4 build:
>
> ? otool -L  /Library/Frameworks/R.framework/Resources/bin/exec/R
> /Library/Frameworks/R.framework/Resources/bin/exec/R:
> /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libR.dylib
> (compatibility version 3.5.0, current version 3.5.1)
> /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRblas.dylib
> (compatibility version 0.0.0, current version 0.0.0)
> /usr/local/clang4/lib/libomp.dylib (compatibility version 5.0.0,
> current version 5.0.0)
> /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current
> version 1226.10.1)
>
> Notice '/usr/local/clang4/lib/libomp.dylib' above. R seems to run
> happily without this file, though, until you start it with lldb:
>
> ? R -d  lldb
> (lldb) target create "/Library/Frameworks/R.framework/Resources/bin/exec/R"
> Current executable set to
> '/Library/Frameworks/R.framework/Resources/bin/exec/R' (x86_64).
> (lldb) run
> Process 74239 launched:
> '/Library/Frameworks/R.framework/Resources/bin/exec/R' (x86_64)
> dyld: Library not loaded: /usr/local/clang4/lib/libomp.dylib
>   Referenced from: /Library/Frameworks/R.framework/Resources/bin/exec/R
>   Reason: image not found
> Process 74239 stopped
> * thread #1, stop reason = signal SIGABRT
>     frame #0: 0x000000010002c9ee dyld`__abort_with_payload + 10
> dyld`__abort_with_payload:
> ->  0x10002c9ee <+10>: jae    0x10002c9f8               ; <+20>
>     0x10002c9f0 <+12>: movq   %rax, %rdi
>     0x10002c9f3 <+15>: jmp    0x10002c300               ; cerror_nocancel
>     0x10002c9f8 <+20>: retq
>
> After clang4 is installed from http://r.research.att.com/libs/
> everything is fine.
>
> Is linking to this library intentional? If yes, then maybe the web
> could be updated to suggest installing clang6 and clang4?
>
> Thanks,
> Gabor


From @imon@urb@nek @ending from R-project@org  Sat Dec 15 03:29:42 2018
From: @imon@urb@nek @ending from R-project@org (Simon Urbanek)
Date: Fri, 14 Dec 2018 21:29:42 -0500
Subject: [R-SIG-Mac] CRAN build of R linking to /usr/local/clang4/
In-Reply-To: <CABtg=Kk_EEz-yFSACLgCRJZe1B-LaBbMzY8Kv84p5P3fx4dZAg@mail.gmail.com>
References: <CABtg=KmNj9PGtm40D=UrpvP5Ubo6mB-9txB5AiuSuMjuejrgDw@mail.gmail.com>
 <CABtg=Kk_EEz-yFSACLgCRJZe1B-LaBbMzY8Kv84p5P3fx4dZAg@mail.gmail.com>
Message-ID: <32AE5614-A2C4-4518-A824-E14420F7B1D2@R-project.org>

Gabor,

unfortunately, I didn?t see your original e-mail. The paths are correct in libraries, e.g.:

$ otool -L /Library/Frameworks/R.framework/Resources/lib/libRblas.dylib | grep libomp
	/Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libomp.dylib (compatibility version 5.0.0, current version 5.0.0)

as well as packages:

$ otool -L BNN/libs/BNN.so | grep libomp
	/Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libomp.dylib (compatibility version 5.0.0, current version 5.0.0)

although the R binary itself was omitted. However it doesn?t actually matter, because it is always executed through the R shell wrapper which correctly prepends $R_HOME/lib which is why R works just fine.

This has nothing to do with clang4/clang6. We use clang6 to compile, it is only a matter of the location of Intel?s libomp.

Cheers,
Simon




> On Dec 14, 2018, at 6:00 PM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> 
> Would it be possible to fix this for the builds of the upcoming release?
> 
> Thanks,
> Gabor
> On Wed, Oct 10, 2018 at 11:12 PM G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
>> 
>> https://cran.r-project.org/bin/macosx/tools/ suggests installing a
>> special clang6 build. OTOH, the R binary links to a library that comes
>> with CRAN's clang4 build:
>> 
>> ? otool -L  /Library/Frameworks/R.framework/Resources/bin/exec/R
>> /Library/Frameworks/R.framework/Resources/bin/exec/R:
>> /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libR.dylib
>> (compatibility version 3.5.0, current version 3.5.1)
>> /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRblas.dylib
>> (compatibility version 0.0.0, current version 0.0.0)
>> /usr/local/clang4/lib/libomp.dylib (compatibility version 5.0.0,
>> current version 5.0.0)
>> /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current
>> version 1226.10.1)
>> 
>> Notice '/usr/local/clang4/lib/libomp.dylib' above. R seems to run
>> happily without this file, though, until you start it with lldb:
>> 
>> ? R -d  lldb
>> (lldb) target create "/Library/Frameworks/R.framework/Resources/bin/exec/R"
>> Current executable set to
>> '/Library/Frameworks/R.framework/Resources/bin/exec/R' (x86_64).
>> (lldb) run
>> Process 74239 launched:
>> '/Library/Frameworks/R.framework/Resources/bin/exec/R' (x86_64)
>> dyld: Library not loaded: /usr/local/clang4/lib/libomp.dylib
>>  Referenced from: /Library/Frameworks/R.framework/Resources/bin/exec/R
>>  Reason: image not found
>> Process 74239 stopped
>> * thread #1, stop reason = signal SIGABRT
>>    frame #0: 0x000000010002c9ee dyld`__abort_with_payload + 10
>> dyld`__abort_with_payload:
>> ->  0x10002c9ee <+10>: jae    0x10002c9f8               ; <+20>
>>    0x10002c9f0 <+12>: movq   %rax, %rdi
>>    0x10002c9f3 <+15>: jmp    0x10002c300               ; cerror_nocancel
>>    0x10002c9f8 <+20>: retq
>> 
>> After clang4 is installed from http://r.research.att.com/libs/
>> everything is fine.
>> 
>> Is linking to this library intentional? If yes, then maybe the web
>> could be updated to suggest installing clang6 and clang4?
>> 
>> Thanks,
>> Gabor
> 
> _______________________________________________
> R-SIG-Mac mailing list
> R-SIG-Mac at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 


From c@@rdi@g@bor @ending from gm@il@com  Sat Dec 15 10:41:31 2018
From: c@@rdi@g@bor @ending from gm@il@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Sat, 15 Dec 2018 09:41:31 +0000
Subject: [R-SIG-Mac] CRAN build of R linking to /usr/local/clang4/
In-Reply-To: <32AE5614-A2C4-4518-A824-E14420F7B1D2@R-project.org>
References: <CABtg=KmNj9PGtm40D=UrpvP5Ubo6mB-9txB5AiuSuMjuejrgDw@mail.gmail.com>
 <CABtg=Kk_EEz-yFSACLgCRJZe1B-LaBbMzY8Kv84p5P3fx4dZAg@mail.gmail.com>
 <32AE5614-A2C4-4518-A824-E14420F7B1D2@R-project.org>
Message-ID: <CABtg=KkJxuyEBrFojKVXFJiKYGTBuU1zU2DMHFD4KO6KOdhJ9Q@mail.gmail.com>

On Sat, Dec 15, 2018 at 2:29 AM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
[...]
> although the R binary itself was omitted. However it doesn?t actually matter, because it is always executed through the R shell wrapper which correctly prepends $R_HOME/lib which is why R works just fine.

This does not seem to happen with

? R -d lldb
(lldb) target create "/Library/Frameworks/R.framework/Resources/bin/exec/R"
[...]
(lldb) run
[...]
Process 52551 launched:
'/Library/Frameworks/R.framework/Resources/bin/exec/R' (x86_64)
dyld: Library not loaded: /usr/local/clang4/lib/libomp.dylib
  Referenced from: /Library/Frameworks/R.framework/Resources/bin/exec/R
  Reason: image not found
Process 52551 stopped
* thread #1, stop reason = signal SIGABRT
    frame #0: 0x000000010002c9ee dyld`__abort_with_payload + 10
dyld`__abort_with_payload:
->  0x10002c9ee <+10>: jae    0x10002c9f8               ; <+20>
    0x10002c9f0 <+12>: movq   %rax, %rdi
    0x10002c9f3 <+15>: jmp    0x10002c300               ; cerror_nocancel
    0x10002c9f8 <+20>: retq
(lldb)

So maybe this is a bug in the R shell wrapper then? I am not sure, but
it would be nice to make 'R -d lldb' work out of the box.

Thanks,
G.

[...]


From @imon@urb@nek @ending from R-project@org  Sat Dec 15 22:47:25 2018
From: @imon@urb@nek @ending from R-project@org (Simon Urbanek)
Date: Sat, 15 Dec 2018 16:47:25 -0500
Subject: [R-SIG-Mac] CRAN build of R linking to /usr/local/clang4/
In-Reply-To: <CABtg=KkJxuyEBrFojKVXFJiKYGTBuU1zU2DMHFD4KO6KOdhJ9Q@mail.gmail.com>
References: <CABtg=KmNj9PGtm40D=UrpvP5Ubo6mB-9txB5AiuSuMjuejrgDw@mail.gmail.com>
 <CABtg=Kk_EEz-yFSACLgCRJZe1B-LaBbMzY8Kv84p5P3fx4dZAg@mail.gmail.com>
 <32AE5614-A2C4-4518-A824-E14420F7B1D2@R-project.org>
 <CABtg=KkJxuyEBrFojKVXFJiKYGTBuU1zU2DMHFD4KO6KOdhJ9Q@mail.gmail.com>
Message-ID: <5D5FEEB6-2C87-43D7-B81E-48B2A8ADB520@R-project.org>

Gabor,

this appears to be a known issue with lldb[1] - it doesn?t pass DYLD_* variables to the executable anymore. You have to explicitly set it in lldb:

process launch -v DYLD_FALLBACK_LIBRARY_PATH=/Library/Frameworks/R.framework/Resources/lib

or similar. Unfortunately, it means the wrapper can?t help here. You can get the full setting from R if the above is not sufficient:

$ R --slave -e 'cat(Sys.getenv("DYLD_FALLBACK_LIBRARY_PATH"))'
/Library/Frameworks/R.framework/Resources/lib:/Library/Java/JavaVirtualMachines/jdk-9.jdk/Contents/Home/lib/server

Cheers,
Simon

PS: I have fixed the path for the nightly builds so it should be fixed in tonight?s build, but the lesson is that the debugger does indeed have an environment that is different from the actual executable.

[1] http://lists.llvm.org/pipermail/lldb-dev/2015-October/008691.html


> On Dec 15, 2018, at 4:41 AM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> 
> On Sat, Dec 15, 2018 at 2:29 AM Simon Urbanek
> <simon.urbanek at r-project.org> wrote:
> [...]
>> although the R binary itself was omitted. However it doesn?t actually matter, because it is always executed through the R shell wrapper which correctly prepends $R_HOME/lib which is why R works just fine.
> 
> This does not seem to happen with
> 
> ? R -d lldb
> (lldb) target create "/Library/Frameworks/R.framework/Resources/bin/exec/R"
> [...]
> (lldb) run
> [...]
> Process 52551 launched:
> '/Library/Frameworks/R.framework/Resources/bin/exec/R' (x86_64)
> dyld: Library not loaded: /usr/local/clang4/lib/libomp.dylib
>  Referenced from: /Library/Frameworks/R.framework/Resources/bin/exec/R
>  Reason: image not found
> Process 52551 stopped
> * thread #1, stop reason = signal SIGABRT
>    frame #0: 0x000000010002c9ee dyld`__abort_with_payload + 10
> dyld`__abort_with_payload:
> ->  0x10002c9ee <+10>: jae    0x10002c9f8               ; <+20>
>    0x10002c9f0 <+12>: movq   %rax, %rdi
>    0x10002c9f3 <+15>: jmp    0x10002c300               ; cerror_nocancel
>    0x10002c9f8 <+20>: retq
> (lldb)
> 
> So maybe this is a bug in the R shell wrapper then? I am not sure, but
> it would be nice to make 'R -d lldb' work out of the box.
> 
> Thanks,
> G.
> 
> [...]
> 


From c@@rdi@g@bor @ending from gm@il@com  Sun Dec 16 19:16:28 2018
From: c@@rdi@g@bor @ending from gm@il@com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Sun, 16 Dec 2018 18:16:28 +0000
Subject: [R-SIG-Mac] CRAN build of R linking to /usr/local/clang4/
In-Reply-To: <5D5FEEB6-2C87-43D7-B81E-48B2A8ADB520@R-project.org>
References: <CABtg=KmNj9PGtm40D=UrpvP5Ubo6mB-9txB5AiuSuMjuejrgDw@mail.gmail.com>
 <CABtg=Kk_EEz-yFSACLgCRJZe1B-LaBbMzY8Kv84p5P3fx4dZAg@mail.gmail.com>
 <32AE5614-A2C4-4518-A824-E14420F7B1D2@R-project.org>
 <CABtg=KkJxuyEBrFojKVXFJiKYGTBuU1zU2DMHFD4KO6KOdhJ9Q@mail.gmail.com>
 <5D5FEEB6-2C87-43D7-B81E-48B2A8ADB520@R-project.org>
Message-ID: <CABtg=Kkd324688K8yzLVL1d6OWOYpoGweiBPmHDxQgsbOJbxFA@mail.gmail.com>

Great, thanks much!

Gabor

On Sat, Dec 15, 2018 at 9:47 PM Simon Urbanek
<simon.urbanek at r-project.org> wrote:
>
> Gabor,
>
> this appears to be a known issue with lldb[1] - it doesn?t pass DYLD_* variables to the executable anymore. You have to explicitly set it in lldb:
>
> process launch -v DYLD_FALLBACK_LIBRARY_PATH=/Library/Frameworks/R.framework/Resources/lib
>
> or similar. Unfortunately, it means the wrapper can?t help here. You can get the full setting from R if the above is not sufficient:
>
> $ R --slave -e 'cat(Sys.getenv("DYLD_FALLBACK_LIBRARY_PATH"))'
> /Library/Frameworks/R.framework/Resources/lib:/Library/Java/JavaVirtualMachines/jdk-9.jdk/Contents/Home/lib/server
>
> Cheers,
> Simon
>
> PS: I have fixed the path for the nightly builds so it should be fixed in tonight?s build, but the lesson is that the debugger does indeed have an environment that is different from the actual executable.
>
> [1] http://lists.llvm.org/pipermail/lldb-dev/2015-October/008691.html
>
>
> > On Dec 15, 2018, at 4:41 AM, G?bor Cs?rdi <csardi.gabor at gmail.com> wrote:
> >
> > On Sat, Dec 15, 2018 at 2:29 AM Simon Urbanek
> > <simon.urbanek at r-project.org> wrote:
> > [...]
> >> although the R binary itself was omitted. However it doesn?t actually matter, because it is always executed through the R shell wrapper which correctly prepends $R_HOME/lib which is why R works just fine.
> >
> > This does not seem to happen with
> >
> > ? R -d lldb
> > (lldb) target create "/Library/Frameworks/R.framework/Resources/bin/exec/R"
> > [...]
> > (lldb) run
> > [...]
> > Process 52551 launched:
> > '/Library/Frameworks/R.framework/Resources/bin/exec/R' (x86_64)
> > dyld: Library not loaded: /usr/local/clang4/lib/libomp.dylib
> >  Referenced from: /Library/Frameworks/R.framework/Resources/bin/exec/R
> >  Reason: image not found
> > Process 52551 stopped
> > * thread #1, stop reason = signal SIGABRT
> >    frame #0: 0x000000010002c9ee dyld`__abort_with_payload + 10
> > dyld`__abort_with_payload:
> > ->  0x10002c9ee <+10>: jae    0x10002c9f8               ; <+20>
> >    0x10002c9f0 <+12>: movq   %rax, %rdi
> >    0x10002c9f3 <+15>: jmp    0x10002c300               ; cerror_nocancel
> >    0x10002c9f8 <+20>: retq
> > (lldb)
> >
> > So maybe this is a bug in the R shell wrapper then? I am not sure, but
> > it would be nice to make 'R -d lldb' work out of the box.
> >
> > Thanks,
> > G.
> >
> > [...]
> >
>


From rkoenker @ending from illinoi@@edu  Tue Dec 18 18:30:32 2018
From: rkoenker @ending from illinoi@@edu (Roger Koenker)
Date: Tue, 18 Dec 2018 17:30:32 +0000
Subject: [R-SIG-Mac] 'math.h' file not found
Message-ID: <E2A6AE0A-321E-4537-BB0B-63070B6C1284@illinois.edu>

I have an annoying installation issue with a new mac mini:  for example I see:

> In file included from /usr/local/clang6/include/c++/v1/cmath:305:
> /usr/local/clang6/include/c++/v1/math.h:301:15: fatal error: 'math.h' file not found
> #include_next <math.h>
>               ^~~~~~~~
> 1 error generated.

even though:

> yzzy: ls -l /usr/local/clang6/include/c++/v1/math.h
> -rw-r--r--  1 root  wheel  48240 Mar  2  2018 /usr/local/clang6/include/c++/v1/math.h

this is with clang tools installed from Simon?s page and after trying various sorts of 
voodoo from googling like 

>xyzzy:  xcode-select --install
xcode-select: error: command line tools are already installed, use "Software Update" to install updates


R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

Any hints appreciated, and apologies if this should have been in R-devel

From b@l@mut2 @ending from illinoi@@edu  Tue Dec 18 18:40:59 2018
From: b@l@mut2 @ending from illinoi@@edu (Balamuta, James Joseph)
Date: Tue, 18 Dec 2018 17:40:59 +0000
Subject: [R-SIG-Mac] 'math.h' file not found
In-Reply-To: <E2A6AE0A-321E-4537-BB0B-63070B6C1284@illinois.edu>
References: <E2A6AE0A-321E-4537-BB0B-63070B6C1284@illinois.edu>
Message-ID: <F608DC0B-76C0-451A-93D0-32523C6F87C4@illinois.edu>

Roger,

Due to macOS Mojave shift where system headers are located, you'll need to run:

sudo installer -pkg \
/Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg \
-target /

This installs the headers back to the default location of previous macOS builds, e.g. /usr/local.

Sincerely,

JJB

P.S. Can't wait for you to come back and visit UIUC in Sp'19

?On 12/18/18, 11:31 AM, "R-SIG-Mac on behalf of Roger Koenker" <r-sig-mac-bounces at r-project.org on behalf of rkoenker at illinois.edu> wrote:

    I have an annoying installation issue with a new mac mini:  for example I see:
    
    > In file included from /usr/local/clang6/include/c++/v1/cmath:305:
    > /usr/local/clang6/include/c++/v1/math.h:301:15: fatal error: 'math.h' file not found
    > #include_next <math.h>
    >               ^~~~~~~~
    > 1 error generated.
    
    even though:
    
    > yzzy: ls -l /usr/local/clang6/include/c++/v1/math.h
    > -rw-r--r--  1 root  wheel  48240 Mar  2  2018 /usr/local/clang6/include/c++/v1/math.h
    
    this is with clang tools installed from Simon?s page and after trying various sorts of 
    voodoo from googling like 
    
    >xyzzy:  xcode-select --install
    xcode-select: error: command line tools are already installed, use "Software Update" to install updates
    
    
    R version 3.5.1 (2018-07-02) -- "Feather Spray"
    Copyright (C) 2018 The R Foundation for Statistical Computing
    Platform: x86_64-apple-darwin15.6.0 (64-bit)
    
    Any hints appreciated, and apologies if this should have been in R-devel
    _______________________________________________
    R-SIG-Mac mailing list
    R-SIG-Mac at r-project.org
    https://stat.ethz.ch/mailman/listinfo/r-sig-mac
    


From rkoenker @ending from illinoi@@edu  Tue Dec 18 21:06:45 2018
From: rkoenker @ending from illinoi@@edu (Roger Koenker)
Date: Tue, 18 Dec 2018 20:06:45 +0000
Subject: [R-SIG-Mac] 'math.h' file not found
In-Reply-To: <65754c752d2f49808f16e87125282ea1@SN6PR11MB3152.namprd11.prod.outlook.com>
References: <E2A6AE0A-321E-4537-BB0B-63070B6C1284@illinois.edu>
 <65754c752d2f49808f16e87125282ea1@SN6PR11MB3152.namprd11.prod.outlook.com>
Message-ID: <87E35B1E-0805-46C3-A732-9648E21ECCAE@illinois.edu>

James,

Many thanks, all is well now.  Look forward to seeing you in April.

Roger


> On Dec 18, 2018, at 5:40 PM, Balamuta, James Joseph <balamut2 at illinois.edu> wrote:
> 
> Roger,
> 
> Due to macOS Mojave shift where system headers are located, you'll need to run:
> 
> sudo installer -pkg \
> /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg \
> -target /
> 
> This installs the headers back to the default location of previous macOS builds, e.g. /usr/local.
> 
> Sincerely,
> 
> JJB
> 
> P.S. Can't wait for you to come back and visit UIUC in Sp'19
> 
> ?On 12/18/18, 11:31 AM, "R-SIG-Mac on behalf of Roger Koenker" <r-sig-mac-bounces at r-project.org on behalf of rkoenker at illinois.edu> wrote:
> 
>    I have an annoying installation issue with a new mac mini:  for example I see:
> 
>> In file included from /usr/local/clang6/include/c++/v1/cmath:305:
>> /usr/local/clang6/include/c++/v1/math.h:301:15: fatal error: 'math.h' file not found
>> #include_next <math.h>
>>              ^~~~~~~~
>> 1 error generated.
> 
>    even though:
> 
>> yzzy: ls -l /usr/local/clang6/include/c++/v1/math.h
>> -rw-r--r--  1 root  wheel  48240 Mar  2  2018 /usr/local/clang6/include/c++/v1/math.h
> 
>    this is with clang tools installed from Simon?s page and after trying various sorts of
>    voodoo from googling like
> 
>> xyzzy:  xcode-select --install
>    xcode-select: error: command line tools are already installed, use "Software Update" to install updates
> 
> 
>    R version 3.5.1 (2018-07-02) -- "Feather Spray"
>    Copyright (C) 2018 The R Foundation for Statistical Computing
>    Platform: x86_64-apple-darwin15.6.0 (64-bit)
> 
>    Any hints appreciated, and apologies if this should have been in R-devel
>    _______________________________________________
>    R-SIG-Mac mailing list
>    R-SIG-Mac at r-project.org
>    https://stat.ethz.ch/mailman/listinfo/r-sig-mac
> 
> 


