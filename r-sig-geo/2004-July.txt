From maechler at stat.math.ethz.ch  Tue Jul  6 18:20:37 2004
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Tue, 6 Jul 2004 18:20:37 +0200
Subject: [R-sig-Geo] Fast k-NN in R^4 ?
Message-ID: <16618.53589.711079.663690@gargle.gargle.HOWL>

We are looking for a fast algorithm (implemented in C or even
available for R) to compute the k nearest neighbors of a given
point from n points in R^4 (i.e. 4-dim. Euclidean space).

Even more concretely, the n points in 4- space are in a (n x 4) matrix Y,
and he has m other points in 4-space as (m x 4) matrix X

The result should be an  (m x k) matrix Ik  where
Ik[i,] contains k indices in 1:n with the meaning that
Y[Ik[i,]] contains the k nearest neighbours of X[i,] in Y[,]

A simply implementation {also the one used inside of the
class package knn() function} will be of complexity O(m * n),
but the fast algorithms known really should provide O(m * log(n))
complexity.

I see that packages 'gstat' and 'spatstat' mention solutions to such
problems, but it seems this is just for 2-d point patterns, not
4-d or "general dim" ?

Pointers, hints, ... are very welcome.
	
Martin Maechler, Seminar fuer Statistik, 
ETH (Federal Inst. Technology) Zurich,	SWITZERLAND   <><



From tkeitt at mail.utexas.edu  Tue Jul  6 21:37:50 2004
From: tkeitt at mail.utexas.edu (Timothy H. Keitt)
Date: Tue, 06 Jul 2004 14:37:50 -0500
Subject: [R-sig-Geo] Fast k-NN in R^4 ?
In-Reply-To: <16618.53589.711079.663690@gargle.gargle.HOWL>
References: <16618.53589.711079.663690@gargle.gargle.HOWL>
Message-ID: <1089142670.11694.17.camel@workstation-3>

This is a really good resource:

http://www.cs.sunysb.edu/~algorith/major_section/1.6.shtml

T.

On Tue, 2004-07-06 at 11:20, Martin Maechler wrote:
> We are looking for a fast algorithm (implemented in C or even
> available for R) to compute the k nearest neighbors of a given
> point from n points in R^4 (i.e. 4-dim. Euclidean space).
> 
> Even more concretely, the n points in 4- space are in a (n x 4) matrix Y,
> and he has m other points in 4-space as (m x 4) matrix X
> 
> The result should be an  (m x k) matrix Ik  where
> Ik[i,] contains k indices in 1:n with the meaning that
> Y[Ik[i,]] contains the k nearest neighbours of X[i,] in Y[,]
> 
> A simply implementation {also the one used inside of the
> class package knn() function} will be of complexity O(m * n),
> but the fast algorithms known really should provide O(m * log(n))
> complexity.
> 
> I see that packages 'gstat' and 'spatstat' mention solutions to such
> problems, but it seems this is just for 2-d point patterns, not
> 4-d or "general dim" ?
> 
> Pointers, hints, ... are very welcome.
> 	
> Martin Maechler, Seminar fuer Statistik, 
> ETH (Federal Inst. Technology) Zurich,	SWITZERLAND   <><
> 
> _______________________________________________
> R-sig-Geo mailing list
> R-sig-Geo at stat.math.ethz.ch
> https://www.stat.math.ethz.ch/mailman/listinfo/r-sig-geo
-- 
Timothy H. Keitt
Section of Integrative Biology
University of Texas at Austin
http://www.keittlab.org/



From Roger.Bivand at nhh.no  Tue Jul  6 20:36:13 2004
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Tue, 6 Jul 2004 20:36:13 +0200 (CEST)
Subject: [R-sig-Geo] Fast k-NN in R^4 ?
In-Reply-To: <16618.53589.711079.663690@gargle.gargle.HOWL>
Message-ID: <Pine.LNX.4.44.0407062024540.5782-100000@reclus.nhh.no>

On Tue, 6 Jul 2004, Martin Maechler wrote:

> We are looking for a fast algorithm (implemented in C or even
> available for R) to compute the k nearest neighbors of a given
> point from n points in R^4 (i.e. 4-dim. Euclidean space).
> 
> Even more concretely, the n points in 4- space are in a (n x 4) matrix Y,
> and he has m other points in 4-space as (m x 4) matrix X
> 
> The result should be an  (m x k) matrix Ik  where
> Ik[i,] contains k indices in 1:n with the meaning that
> Y[Ik[i,]] contains the k nearest neighbours of X[i,] in Y[,]
> 
> A simply implementation {also the one used inside of the
> class package knn() function} will be of complexity O(m * n),
> but the fast algorithms known really should provide O(m * log(n))
> complexity.

Some time ago I ported ANN (http://www.cs.umd.edu/~mount/ANN/) to R as a
package, but never heard back from the authors when I wrote to ask for
permission to release. They claim to be about O(kd log n) time for
k-nearest neighbours in d dimensions (p. 31,
http://www.cs.umd.edu/~mount/Papers/dist.pdf) so this might be a starting
point. Please let me know if you'd like a copy of the draft package.

Roger

> 
> I see that packages 'gstat' and 'spatstat' mention solutions to such
> problems, but it seems this is just for 2-d point patterns, not
> 4-d or "general dim" ?
> 
> Pointers, hints, ... are very welcome.
> 	
> Martin Maechler, Seminar fuer Statistik, 
> ETH (Federal Inst. Technology) Zurich,	SWITZERLAND   <><
> 
> _______________________________________________
> R-sig-Geo mailing list
> R-sig-Geo at stat.math.ethz.ch
> https://www.stat.math.ethz.ch/mailman/listinfo/r-sig-geo
> 

-- 
Roger Bivand
Economic Geography Section, Department of Economics, Norwegian School of
Economics and Business Administration, Breiviksveien 40, N-5045 Bergen,
Norway. voice: +47 55 95 93 55; fax +47 55 95 93 93
e-mail: Roger.Bivand at nhh.no



From maechler at stat.math.ethz.ch  Fri Jul  9 18:08:47 2004
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Fri, 9 Jul 2004 18:08:47 +0200
Subject: Summary: [R-sig-Geo] Fast k-NN in R^4 ?
In-Reply-To: <16618.53589.711079.663690@gargle.gargle.HOWL>
References: <16618.53589.711079.663690@gargle.gargle.HOWL>
Message-ID: <16622.49935.842914.315806@gargle.gargle.HOWL>

Summarizing the reactions & findings to my question:

1)  Timothy Keitt said:

   This is a really good resource:
   http://www.cs.sunysb.edu/~algorith/major_section/1.6.shtml

which points to http://www.cs.sunysb.edu/~algorith/files/nearest-neighbor.shtml
which then mentions implementations  ANN, Ranger, LEDA, (and
less relevant ones).  Ranger seems a standalone visualization.
LEDA is well known but a bit "big" for me which leaves ANN, see
below.

2) Roger Bivand has an experimental version of an R package
   'ann' which interfaces to ANN mentioned above, aka,
   http://www.cs.umd.edu/~mount/ANN/
   
   Note that "A" stands for "Approximate", but the software can
   also compute the exactly k-NN solution.

   Roger sent me the package privately and is currently travelling for a
   while.  I hope that I will be eventually encourage him (:-) 
   to release 'ann' to CRAN.  AFAIK, one major obstacle has been the
   non-standard copyright/licence and the difficulty to make
   contact with the ANN authors.

3) Frank Hardisty has been interested in the related problem of
   'MST in arbitrary dimensions' where he said he found
   ``that there is no known MST solution that is better than O(n^[R/2]+1,
     where n is the number of points and R the number of dimensions. 
     Which is fairly awful. The reference is: Okabe, A., B. Bots,
     K. Sugihara and S. N. Chiu (2000). Spatial Tesselations.  NY, Wiley.
     It's a good book. ''

   (and he also attached relevant papers which I haven't studied yet).

   My conclusion here: The multivariate MST seems a harder
   problem than finding multivariate k-NN.

----

Conclusion: I hope (with good reason) that there will soon be an
            R package 'ann' (or similarly called) interfacing to ANN.

Thanks again for your support!
Martin Maechler, ETH Zurich



From B.Rowlingson at lancaster.ac.uk  Sun Jul 11 12:19:36 2004
From: B.Rowlingson at lancaster.ac.uk (Baz)
Date: Sun, 11 Jul 2004 11:19:36 +0100
Subject: [R-sig-Geo] Open Source GIS conference
Message-ID: <40F11438.5060503@lancaster.ac.uk>

Any R people go to this?

http://www.omsug.ca/osgis2004/proceedings.html

"The second MapServer Users Meeting and the first ever Open Source GIS 
Conference"

  Perhaps we'll send a deputation to the second Open Source GIS Conference.

Baz



From smitch at connect.carleton.ca  Sun Jul 11 14:28:20 2004
From: smitch at connect.carleton.ca (Scott W Mitchell)
Date: Sun, 11 Jul 2004 08:28:20 -0400 (EDT)
Subject: [R-sig-Geo] Open Source GIS conference
In-Reply-To: <40F11438.5060503@lancaster.ac.uk>
References: <40F11438.5060503@lancaster.ac.uk>
Message-ID: <Pine.LNX.4.60.0407110817360.27723@gracilis.nt.carleton.ca>


Although R wasn't the focus, the demo I gave of GRASS at that 
conference included the GRASS/R link... so there was some exposure.

Scott Mitchell
Department of Geography
Carleton University

On Sun, 11 Jul 2004, Baz wrote:

> Any R people go to this?
>
> http://www.omsug.ca/osgis2004/proceedings.html
>
> "The second MapServer Users Meeting and the first ever Open Source GIS 
> Conference"
>
> Perhaps we'll send a deputation to the second Open Source GIS Conference.
>
> Baz
>
> _______________________________________________
> R-sig-Geo mailing list
> R-sig-Geo at stat.math.ethz.ch
> https://www.stat.math.ethz.ch/mailman/listinfo/r-sig-geo
>



From nikko at hailmail.net  Sun Jul 11 14:52:34 2004
From: nikko at hailmail.net (Nicholas Lewin-Koh)
Date: Sun, 11 Jul 2004 20:52:34 +0800
Subject: Summary: [R-sig-Geo] Fast k-NN in R^4
In-Reply-To: <200407101013.i6AADF1O010546@hypatia.math.ethz.ch>
References: <200407101013.i6AADF1O010546@hypatia.math.ethz.ch>
Message-ID: <1089550353.5878.12.camel@localhost.localdomain>

Is that true?
You can construct the MST in O(n^2) given the distance matrix. Faster
if you allow some approximations. So that implies that all the extra 
time comes from calculating the distance matrix. For Euclidean distance
is it that bad to calculate the distance matrix? 

I will have to go check my copy of Okabe et al. and see what they mean.

Also, just a note on the listings from Stony Brook repository. Ranger is
part of a larger software instantiation, and not only is Leda huge it is
also semi-commercial. I used an old version of Roger's port a while
back, it was nice. Hope the license can be worked out.


Nicholas
 

>    1. Summary: [R-sig-Geo] Fast k-NN in R^4 ? (Martin Maechler)
> 
> 
> ----------------------------------------------------------------------
> 
> Message: 1
> Date: Fri, 9 Jul 2004 18:08:47 +0200
> From: Martin Maechler <maechler at stat.math.ethz.ch>
> Subject: Summary: [R-sig-Geo] Fast k-NN in R^4 ?
> To: R-SIG-geo at stat.math.ethz.ch
> Message-ID: <16622.49935.842914.315806 at gargle.gargle.HOWL>
> Content-Type: text/plain; charset=us-ascii
> 
> Summarizing the reactions & findings to my question:
> 
> 1)  Timothy Keitt said:
> 
>    This is a really good resource:
>    http://www.cs.sunysb.edu/~algorith/major_section/1.6.shtml
> 
> which points to http://www.cs.sunysb.edu/~algorith/files/nearest-neighbor.shtml
> which then mentions implementations  ANN, Ranger, LEDA, (and
> less relevant ones).  Ranger seems a standalone visualization.
> LEDA is well known but a bit "big" for me which leaves ANN, see
> below.
> 
> 2) Roger Bivand has an experimental version of an R package
>    'ann' which interfaces to ANN mentioned above, aka,
>    http://www.cs.umd.edu/~mount/ANN/
>    
>    Note that "A" stands for "Approximate", but the software can
>    also compute the exactly k-NN solution.
> 
>    Roger sent me the package privately and is currently travelling for a
>    while.  I hope that I will be eventually encourage him (:-) 
>    to release 'ann' to CRAN.  AFAIK, one major obstacle has been the
>    non-standard copyright/licence and the difficulty to make
>    contact with the ANN authors.
> 
> 3) Frank Hardisty has been interested in the related problem of
>    'MST in arbitrary dimensions' where he said he found
>    ``that there is no known MST solution that is better than O(n^[R/2]+1,
>      where n is the number of points and R the number of dimensions. 
>      Which is fairly awful. The reference is: Okabe, A., B. Bots,
>      K. Sugihara and S. N. Chiu (2000). Spatial Tesselations.  NY, Wiley.
>      It's a good book. ''
> 
>    (and he also attached relevant papers which I haven't studied yet).
> 
>    My conclusion here: The multivariate MST seems a harder
>    problem than finding multivariate k-NN.
> 
> ----
> 
> Conclusion: I hope (with good reason) that there will soon be an
>             R package 'ann' (or similarly called) interfacing to ANN.
> 
> Thanks again for your support!
> Martin Maechler, ETH Zurich
> 
> 
> 
> ------------------------------
> 
> _______________________________________________
> R-sig-Geo mailing list
> R-sig-Geo at stat.math.ethz.ch
> https://www.stat.math.ethz.ch/mailman/listinfo/r-sig-geo
> 
> 
> End of R-sig-Geo Digest, Vol 11, Issue 2
> ****************************************



From hi_ono2001 at ybb.ne.jp  Mon Jul 12 00:02:13 2004
From: hi_ono2001 at ybb.ne.jp (Hisaji ONO)
Date: Mon, 12 Jul 2004 07:02:13 +0900
Subject: [R-sig-Geo] maptools use GDAL in stead of shapelib
References: <40F11438.5060503@lancaster.ac.uk>
Message-ID: <009601c46792$b8bc70a0$598001db@webgis>

Hi.

 GDAL will support GEOS.

I think GEOS's capability is very useful for calculating spatial weight
matrices.

 And its other functions are also usefule for spatial analysis.

 maptools has any plan to support GEOS in stead of shapelib.

 Regards.



From mgilbert at ulb.ac.be  Wed Jul 14 18:49:16 2004
From: mgilbert at ulb.ac.be (Marius Gilbert)
Date: Wed, 14 Jul 2004 16:50:16 +01
Subject: [R-sig-Geo] nearest distance in matrix
Message-ID: <40F56448.17368.1AA1640@localhost>

Hello,

I'm trying to use R to simulate biological invasions, and got stuck with 
the following:

Is there a function that uses a matrix of occupied/empty values (1 or 0) 
as input, and producing an output matrix of the same size, with each cell 
containing the distance to the nearest occupied cell (1) of the input 
matrix ?

For example, the input matrix:

0    1    1    0
0    0    1    0
0    0    0    0
0    0    0    0

Would produce an output matrix like:

1    0    0    1
1.4  1    0    1
2.2  1.4  1    1.4
2.8  2.2  2.0  2.2	

For those familiar with AV Spatial Analyst, this function would be the 
equivalent of OutGrid = EucDistance (directionFN, allocationFN, 
maxDistance).

Many thanks in advance for any help or pointers,

Marius



From B.Rowlingson at lancaster.ac.uk  Wed Jul 14 18:11:57 2004
From: B.Rowlingson at lancaster.ac.uk (Barry Rowlingson)
Date: Wed, 14 Jul 2004 17:11:57 +0100
Subject: [R-sig-Geo] nearest distance in matrix
In-Reply-To: <40F56448.17368.1AA1640@localhost>
References: <40F56448.17368.1AA1640@localhost>
Message-ID: <40F55B4D.3040306@lancaster.ac.uk>

Marius Gilbert wrote:
> Hello,
> 
> I'm trying to use R to simulate biological invasions, and got stuck with 
> the following:
> 
> Is there a function that uses a matrix of occupied/empty values (1 or 0) 
> as input, and producing an output matrix of the same size, with each cell 
> containing the distance to the nearest occupied cell (1) of the input 
> matrix ?

  Try this, which uses an internal, undocumented Spatstat function 
'exactPdt':

library(spatstat)
nmatdist <- function(aMat){
   storage.mode(aMat) <- "logical"
   win <- owin(xrange=c(1,ncol(aMat)),yrange=c(1,nrow(aMat)),mask=aMat)
   m <- exactPdt(win)
   return(m$d)
}

> For example, the input matrix:
> 
> 0    1    1    0
> 0    0    1    0
> 0    0    0    0
> 0    0    0    0
>

> Would produce an output matrix like:
> 
> 1    0    0    1
> 1.4  1    0    1
> 2.2  1.4  1    1.4
> 2.8  2.2  2.0  2.2	

  test:

 > m1
      [,1] [,2] [,3] [,4] [,5]
[1,]    0    0    0    0    0
[2,]    1    0    0    0    0
[3,]    1    1    0    0    0
[4,]    0    0    0    0    0
 > nmatdist(m1)
      [,1]     [,2]     [,3]     [,4]     [,5]
[1,]    1 1.414214 2.236068 2.828427 3.605551
[2,]    0 1.000000 1.414214 2.236068 3.162278
[3,]    0 0.000000 1.000000 2.000000 3.000000
[4,]    1 1.000000 1.414214 2.236068 3.162278

  looks about right!

Baz



From White.Denis at epamail.epa.gov  Wed Jul 14 19:29:40 2004
From: White.Denis at epamail.epa.gov (White.Denis at epamail.epa.gov)
Date: Wed, 14 Jul 2004 10:29:40 -0700
Subject: [R-sig-Geo] nearest distance in matrix
In-Reply-To: <40F56448.17368.1AA1640@localhost>
Message-ID: <OF91FC6CB9.1B54B276-ON88256ED1.005FB053-88256ED1.0060118C@epamail.epa.gov>





Here's another version that probably can be simplified:

nmatdist <- function (m)
{
    v <- as.vector (m)
    ind <- as.matrix (expand.grid (seq (nrow (m)), seq (ncol (m))))
    d <- as.matrix (dist (ind, upper=TRUE))
    ones <- as.numeric (dimnames(ind[v == 1,])[[1]])
    matrix (sapply (seq(nrow(ind)),
        function (x) min (d[x, ones])), nrow=nrow(m))
}

Denis White
   US EPA, 200 SW 35th St, Corvallis, Oregon, 97333 USA
   voice: 541.754.4476, email: white.denis at epa.gov
   web: www.epa.gov/wed/pages/staff/white/

r-sig-geo-bounces at stat.math.ethz.ch wrote on 2004-07-14 09:50:16:

> Hello,
>
> I'm trying to use R to simulate biological invasions, and got stuck
with
> the following:
>
> Is there a function that uses a matrix of occupied/empty values (1 or
0)
> as input, and producing an output matrix of the same size, with each
cell
> containing the distance to the nearest occupied cell (1) of the input
> matrix ?
>
> For example, the input matrix:
>
> 0    1    1    0
> 0    0    1    0
> 0    0    0    0
> 0    0    0    0
>
> Would produce an output matrix like:
>
> 1    0    0    1
> 1.4  1    0    1
> 2.2  1.4  1    1.4
> 2.8  2.2  2.0  2.2
>
> For those familiar with AV Spatial Analyst, this function would be the

> equivalent of OutGrid = EucDistance (directionFN, allocationFN,
> maxDistance).
>
> Many thanks in advance for any help or pointers,
>
> Marius
>
> _______________________________________________
> R-sig-Geo mailing list
> R-sig-Geo at stat.math.ethz.ch
> https://www.stat.math.ethz.ch/mailman/listinfo/r-sig-geo



From B.Rowlingson at lancaster.ac.uk  Wed Jul 14 19:49:14 2004
From: B.Rowlingson at lancaster.ac.uk (Barry Rowlingson)
Date: Wed, 14 Jul 2004 18:49:14 +0100
Subject: [R-sig-Geo] nearest distance in matrix
In-Reply-To: <OF91FC6CB9.1B54B276-ON88256ED1.005FB053-88256ED1.0060118C@epamail.epa.gov>
References: <OF91FC6CB9.1B54B276-ON88256ED1.005FB053-88256ED1.0060118C@epamail.epa.gov>
Message-ID: <40F5721A.1090201@lancaster.ac.uk>

White.Denis at epamail.epa.gov wrote:
> 
> 
> 
> Here's another version that probably can be simplified:
> 
> nmatdist <- function (m)
> {
>     v <- as.vector (m)
>     ind <- as.matrix (expand.grid (seq (nrow (m)), seq (ncol (m))))
>     d <- as.matrix (dist (ind, upper=TRUE))
>     ones <- as.numeric (dimnames(ind[v == 1,])[[1]])
>     matrix (sapply (seq(nrow(ind)),
>         function (x) min (d[x, ones])), nrow=nrow(m))
> }

  Eeek! Have you tried that on a 100x100 matrix? Darn near killed my 
machine!

  > mt=matrix(runif(10000)>.1,100,100)
  > nmatdist(mt)
   ... near swap death experience...

  The code used by Adrian Baddeley's spatstat routine uses a very neat 
method for working out the distances, which involves sweeping along rows 
and columns or something. He did explain it to me when I was in Perth 
but I can't recall it now!

  Anyway, its super-quick and uses next-to-no memory. Here's how long my 
function that calls the spatstat routine takes:

  > unix.time(nmatdist(mt))
  [1] 0.02 0.01 0.02 0.00 0.00

  it was so quick I thought I'd check I'd not done it on a small matrix 
by mistake:

  > dim(mt)
  [1] 100 100

Nope!

Baz



From White.Denis at epamail.epa.gov  Wed Jul 14 20:10:43 2004
From: White.Denis at epamail.epa.gov (White.Denis at epamail.epa.gov)
Date: Wed, 14 Jul 2004 11:10:43 -0700
Subject: [R-sig-Geo] nearest distance in matrix
In-Reply-To: <40F5721A.1090201@lancaster.ac.uk>
Message-ID: <OF4A56C601.B7958F55-ON88256ED1.0063ACB7-88256ED1.0063D394@epamail.epa.gov>





Yup.  Space complexity is O((nrow(mat)*ncol(mat))^2).


r-sig-geo-bounces at stat.math.ethz.ch wrote on 2004-07-14 10:49:14:

> White.Denis at epamail.epa.gov wrote:
> >
> >
> >
> > Here's another version that probably can be simplified:
> >
> > nmatdist <- function (m)
> > {
> >     v <- as.vector (m)
> >     ind <- as.matrix (expand.grid (seq (nrow (m)), seq (ncol (m))))
> >     d <- as.matrix (dist (ind, upper=TRUE))
> >     ones <- as.numeric (dimnames(ind[v == 1,])[[1]])
> >     matrix (sapply (seq(nrow(ind)),
> >         function (x) min (d[x, ones])), nrow=nrow(m))
> > }
>
>   Eeek! Have you tried that on a 100x100 matrix? Darn near killed my
> machine!
>
>   > mt=matrix(runif(10000)>.1,100,100)
>   > nmatdist(mt)
>    ... near swap death experience...
>
>   The code used by Adrian Baddeley's spatstat routine uses a very neat

> method for working out the distances, which involves sweeping along
rows
> and columns or something. He did explain it to me when I was in Perth
> but I can't recall it now!
>
>   Anyway, its super-quick and uses next-to-no memory. Here's how long
my
> function that calls the spatstat routine takes:
>
>   > unix.time(nmatdist(mt))
>   [1] 0.02 0.01 0.02 0.00 0.00
>
>   it was so quick I thought I'd check I'd not done it on a small
matrix
> by mistake:
>
>   > dim(mt)
>   [1] 100 100
>
> Nope!
>
> Baz
>
> _______________________________________________
> R-sig-Geo mailing list
> R-sig-Geo at stat.math.ethz.ch
> https://www.stat.math.ethz.ch/mailman/listinfo/r-sig-geo



From mgilbert at ulb.ac.be  Thu Jul 15 10:46:14 2004
From: mgilbert at ulb.ac.be (Marius Gilbert)
Date: Thu, 15 Jul 2004 10:46:14 +0200
Subject: [R-sig-Geo] nearest distance in matrix
In-Reply-To: <40F5721A.1090201@lancaster.ac.uk>
References: <OF91FC6CB9.1B54B276-ON88256ED1.005FB053-88256ED1.0060118C@epamail.epa.gov>
Message-ID: <40F66076.20603.597B46@localhost>

Dear Barry,

>   The code used by Adrian Baddeley's spatstat routine uses a very neat 
> method for working out the distances, which involves sweeping along rows 
> and columns or something. He did explain it to me when I was in Perth 
> but I can't recall it now!

I knew there should be way to do it without estimating the full distance 
redistribution matrix O((nrow(mat)*ncol(mat))^2) because the equivalent  
AV Spatial analyst can do rather big raster (3000 x 3000 pixels) in a few 
seconds.

>   Anyway, its super-quick and uses next-to-no memory. Here's how long my 
> function that calls the spatstat routine takes:

It is super quick indeed, I tested it on a 1600 x 250 matrix, ang got the 
output 1600x250 distance matrix in less than 5 seconds on a PIV 1700 Mhz, 
so fairly efficient indeed,

Many thanks, there's no I could have found this myself,

Cheers,

Marius



From e.pebesma at geog.uu.nl  Mon Jul 19 19:15:04 2004
From: e.pebesma at geog.uu.nl (Edzer J. Pebesma)
Date: Mon, 19 Jul 2004 19:15:04 +0200
Subject: [R-sig-Geo] Fast k-NN in R^4 ?
In-Reply-To: <16618.53589.711079.663690@gargle.gargle.HOWL>
References: <16618.53589.711079.663690@gargle.gargle.HOWL>
Message-ID: <40FC0198.3040400@geog.uu.nl>

Martin, gstat uses quadtrees for points in up to 3 dimensions; I think
that quadtrees are generally inefficient for higher dimensions, where
k-D trees are more efficient.

The gstat quadtree code is "burried" rather deep, and not available
as a simple R function (although it could be made as such).

Best regards,
--
Edzer

Martin Maechler wrote:

>We are looking for a fast algorithm (implemented in C or even
>available for R) to compute the k nearest neighbors of a given
>point from n points in R^4 (i.e. 4-dim. Euclidean space).
>
>Even more concretely, the n points in 4- space are in a (n x 4) matrix Y,
>and he has m other points in 4-space as (m x 4) matrix X
>
>The result should be an  (m x k) matrix Ik  where
>Ik[i,] contains k indices in 1:n with the meaning that
>Y[Ik[i,]] contains the k nearest neighbours of X[i,] in Y[,]
>
>A simply implementation {also the one used inside of the
>class package knn() function} will be of complexity O(m * n),
>but the fast algorithms known really should provide O(m * log(n))
>complexity.
>
>I see that packages 'gstat' and 'spatstat' mention solutions to such
>problems, but it seems this is just for 2-d point patterns, not
>4-d or "general dim" ?
>
>Pointers, hints, ... are very welcome.
>	
>Martin Maechler, Seminar fuer Statistik, 
>ETH (Federal Inst. Technology) Zurich,	SWITZERLAND   <><
>
>_______________________________________________
>R-sig-Geo mailing list
>R-sig-Geo at stat.math.ethz.ch
>https://www.stat.math.ethz.ch/mailman/listinfo/r-sig-geo
>  
>



From dray at biomserv.univ-lyon1.fr  Thu Jul 22 17:19:44 2004
From: dray at biomserv.univ-lyon1.fr (Stephane Dray)
Date: Thu, 22 Jul 2004 17:19:44 +0200 (CEST)
Subject: [R-sig-Geo] generate data for a given level of spatial
	autocorrelation
Message-ID: <1090509584.40ffdb101eaff@webmail.univ-lyon1.fr>

Hello list(s) and sorry for cross-posting,

I would like to generate random data on a grid with a given level of spatial
autocorrelation (Moran's I). Is there a method (and a software) to do it ?

Thanks in advance,
Sincerely.


Stephane DRAY



