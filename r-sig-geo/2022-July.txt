From Roger@B|v@nd @end|ng |rom nhh@no  Wed Jul  6 17:53:32 2022
From: Roger@B|v@nd @end|ng |rom nhh@no (Roger Bivand)
Date: Wed, 6 Jul 2022 17:53:32 +0200 (CEST)
Subject: [R-sig-Geo] PhD course ECS530, Bergen, 14-18 November
Message-ID: <ad7f21d-2337-275c-4be1-8692d5f7b756@reclus2.nhh.no>

A PhD-level course in spatial data analysis will be held 14-18 November 
2022 in Bergen, Norway (quasi-hybrid format):

https://www.nhh.no/en/courses/analysing-spatial-data/

Three short "flipped" two-hour sessions will be held in September and 
October online for remote participants (these will be based on own study). 
Intensive follow-up sessions will follow on-site in November permitting 
interaction between participants.

External participants should apply using this form, best well before the 
1 September deadline to permit processing before the first short session:

https://www.nhh.no/en/study-programmes/phd-programme-at-nhh/phd-courses/beco
me-a-visiting-student-at-a-phd-course-at-nhh/

For further details see the course page; participants must cover their own 
travel and living costs; no support is offered, I'm afraid, apart from 
free tuition.

Roger

-- 
Roger Bivand
Emeritus Professor
Department of Economics, Norwegian School of Economics,
Postboks 3490 Ytre Sandviken, 5045 Bergen, Norway.
e-mail: Roger.Bivand at nhh.no
https://orcid.org/0000-0003-2392-6140
https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en


From Roger@B|v@nd @end|ng |rom nhh@no  Wed Jul  6 23:42:32 2022
From: Roger@B|v@nd @end|ng |rom nhh@no (Roger Bivand)
Date: Wed, 6 Jul 2022 21:42:32 +0000
Subject: [R-sig-Geo] PhD course ECS530, Bergen, 14-18 November
In-Reply-To: <ad7f21d-2337-275c-4be1-8692d5f7b756@reclus2.nhh.no>
References: <ad7f21d-2337-275c-4be1-8692d5f7b756@reclus2.nhh.no>
Message-ID: <SV0P279MB047563F740816C25E6993EB0EE809@SV0P279MB0475.NORP279.PROD.OUTLOOK.COM>

Outlook broke this link: https://www.nhh.no/en/study-programmes/phd-programme-at-nhh/phd-courses/become-a-visiting-student-at-a-phd-course-at-nhh/. Let's see if it does again, or https://twitter.com/RogerBivand/status/1544797614729793539?t=2Fwu7QYqj-csEib4swT49Q&s=19

---
Roger Bivand
Emeritus Professor
Department of Economics
Norwegian School of Economics, Bergen, Norway
________________________________
From: R-sig-Geo <r-sig-geo-bounces at r-project.org> on behalf of Roger Bivand <Roger.Bivand at nhh.no>
Sent: Wednesday, July 6, 2022 5:53:32 PM
To: r-sig-geo at r-project.org <r-sig-geo at r-project.org>
Subject: [R-sig-Geo] PhD course ECS530, Bergen, 14-18 November

A PhD-level course in spatial data analysis will be held 14-18 November
2022 in Bergen, Norway (quasi-hybrid format):

https://eur02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwww.nhh.no%2Fen%2Fcourses%2Fanalysing-spatial-data%2F&amp;data=05%7C01%7CRoger.Bivand%40nhh.no%7Ca934b895400a48a710e508da5f67bb10%7C33a15b2f849941998d56f20b5aa91af2%7C0%7C0%7C637927196376780120%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&amp;sdata=GLlyRlP9Wu%2BR0RAmxhlIe%2FGSonIN6dXhwKWsA%2FGnTLU%3D&amp;reserved=0

Three short "flipped" two-hour sessions will be held in September and
October online for remote participants (these will be based on own study).
Intensive follow-up sessions will follow on-site in November permitting
interaction between participants.

External participants should apply using this form, best well before the
1 September deadline to permit processing before the first short session:

https://eur02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwww.nhh.no%2Fen%2Fstudy-programmes%2Fphd-programme-at-nhh%2Fphd-courses%2Fbeco&amp;data=05%7C01%7CRoger.Bivand%40nhh.no%7Ca934b895400a48a710e508da5f67bb10%7C33a15b2f849941998d56f20b5aa91af2%7C0%7C0%7C637927196376780120%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&amp;sdata=jHZVxVoNnJIWeS2QBntDCsgvmJRoKjiwqKb7GA0vD%2Fo%3D&amp;reserved=0
me-a-visiting-student-at-a-phd-course-at-nhh/

For further details see the course page; participants must cover their own
travel and living costs; no support is offered, I'm afraid, apart from
free tuition.

Roger

--
Roger Bivand
Emeritus Professor
Department of Economics, Norwegian School of Economics,
Postboks 3490 Ytre Sandviken, 5045 Bergen, Norway.
e-mail: Roger.Bivand at nhh.no
https://eur02.safelinks.protection.outlook.com/?url=https%3A%2F%2Forcid.org%2F0000-0003-2392-6140&amp;data=05%7C01%7CRoger.Bivand%40nhh.no%7Ca934b895400a48a710e508da5f67bb10%7C33a15b2f849941998d56f20b5aa91af2%7C0%7C0%7C637927196376780120%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&amp;sdata=8SxBYKeW5hQZkQrK2YoiKwvDl%2FQQN3MD%2Bz9Kn13qHfk%3D&amp;reserved=0
https://eur02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fscholar.google.no%2Fcitations%3Fuser%3DAWeghB0AAAAJ%26hl%3Den&amp;data=05%7C01%7CRoger.Bivand%40nhh.no%7Ca934b895400a48a710e508da5f67bb10%7C33a15b2f849941998d56f20b5aa91af2%7C0%7C0%7C637927196376780120%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&amp;sdata=PRvFRRlUz7%2F0YtylCuuPlh%2BuqfgilxjB1qcPZAvJ0IA%3D&amp;reserved=0

_______________________________________________
R-sig-Geo mailing list
R-sig-Geo at r-project.org
https://eur02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fstat.ethz.ch%2Fmailman%2Flistinfo%2Fr-sig-geo&amp;data=05%7C01%7CRoger.Bivand%40nhh.no%7Ca934b895400a48a710e508da5f67bb10%7C33a15b2f849941998d56f20b5aa91af2%7C0%7C0%7C637927196376780120%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&amp;sdata=uMrqp9pWDxodhx8ueRcP9PGfdPSaTohS0Lzmc0Bfxbk%3D&amp;reserved=0

	[[alternative HTML version deleted]]


From yud @end|ng |rom m@||@montc|@|r@edu  Fri Jul  8 06:05:10 2022
From: yud @end|ng |rom m@||@montc|@|r@edu (Danlin Yu)
Date: Fri, 8 Jul 2022 00:05:10 -0400
Subject: [R-sig-Geo] How to separate a set of geographical regions to
 multiple groups that are similar to each other but also maintains
 geographic contiguity?
Message-ID: <467a6aa0-b4a2-6cb2-750b-193fe5b447a0@mail.montclair.edu>

Dear List members:


I have recently attempted to do a regionalization analysis with a group 
of geographic regions, each contains multiple attributes (A1, A2, A3, 
...). The goal is not like a regular regionalization problem (such as 
K-means) in which you define groups with minimal within group 
dissimilarity but maximal between group dissimilarity.


My regionalization is the opposite, I want the groups to be as similar 
as possible (although within group does not have to be as dissimilar as 
possible, but that is of less concern) in terms of means, variance, and 
other statistics. I ran into the minDiff package and its successor 
anticlust package in R, and it is able to do the job wonderfully except 
for one problem: since this is a regionalization problem, I would really 
want the final groups to be geographically connected (spatially 
constrained). Results from minDiff/anticlust, however, show the 
different groups are mixed with one another all over the map. Here is a 
sample code:


A dataframe contains the geographic units and attributes is read from a 
shapefile and stored in geo.df.


|geo.df<-as.data.frame(read_sf(dsn = getwd(), lay = "geolayer", 
stringsAsFactors = FALSE)) geo.df$class <- anticlustering(geo.df[, 
c("A1", "A2", "A3", "A4", ..., "An"), K = 5, objective = "variance", 
standardize = TRUE) |

I've tried to include coordinates in the list of attributes (A1, A2, 
..., An), pairwise distances, but none worked. I always ended up with 
well separated groups, but all mixed with one another in the geographic 
space.


Any pointers on how to proceed from here? Any hints will be greatly 
appreciated.


Thank you all in advance.


Best,

Danlin Yu

-- 
___________________________________________
Danlin Yu, Ph.D.
Professor of GIS and Urban Geography
Department of Earth & Environmental Studies
Montclair State University
Montclair, NJ, 07043
Tel: 973-655-4313
Fax: 973-655-4072
Office: CELS 314
Email:yud at montclair.edu
webpage: csam.montclair.edu/~yu

	[[alternative HTML version deleted]]


From b|@|ev||@t @end|ng |rom gm@||@com  Fri Jul  8 09:08:22 2022
From: b|@|ev||@t @end|ng |rom gm@||@com (=?UTF-8?Q?Bede-Fazekas_=c3=81kos?=)
Date: Fri, 8 Jul 2022 09:08:22 +0200
Subject: [R-sig-Geo] How to separate a set of geographical regions to
 multiple groups that are similar to each other but also maintains
 geographic contiguity?
In-Reply-To: <467a6aa0-b4a2-6cb2-750b-193fe5b447a0@mail.montclair.edu>
References: <467a6aa0-b4a2-6cb2-750b-193fe5b447a0@mail.montclair.edu>
Message-ID: <b0cb9baa-fdbf-b662-7441-8403afb3f663@gmail.com>

Dear Danlin,

I think you need SKATER (Spatial 'K'luster Analysis by Tree Edge 
Removal) algorithm that is implemented in package 'spdep' (function 
skater()) and does spatially constrained clustering. The results of 
SKATER are contiguous regions formed by more or less similar neighboring 
polygons. It was published by Assuncao et al. (2006). Here you can find 
a tutorial:
https://geodacenter.github.io/tutorials/spatial_cluster/skater.html

HTH,
?kos
_____
?kos Bede-Fazekas
Centre for Ecological Research, Hungary


2022.07.08. 6:05 keltez?ssel, Danlin Yu ?rta:
> Dear List members:
>
>
> I have recently attempted to do a regionalization analysis with a group
> of geographic regions, each contains multiple attributes (A1, A2, A3,
> ...). The goal is not like a regular regionalization problem (such as
> K-means) in which you define groups with minimal within group
> dissimilarity but maximal between group dissimilarity.
>
>
> My regionalization is the opposite, I want the groups to be as similar
> as possible (although within group does not have to be as dissimilar as
> possible, but that is of less concern) in terms of means, variance, and
> other statistics. I ran into the minDiff package and its successor
> anticlust package in R, and it is able to do the job wonderfully except
> for one problem: since this is a regionalization problem, I would really
> want the final groups to be geographically connected (spatially
> constrained). Results from minDiff/anticlust, however, show the
> different groups are mixed with one another all over the map. Here is a
> sample code:
>
>
> A dataframe contains the geographic units and attributes is read from a
> shapefile and stored in geo.df.
>
>
> |geo.df<-as.data.frame(read_sf(dsn = getwd(), lay = "geolayer",
> stringsAsFactors = FALSE)) geo.df$class <- anticlustering(geo.df[,
> c("A1", "A2", "A3", "A4", ..., "An"), K = 5, objective = "variance",
> standardize = TRUE) |
>
> I've tried to include coordinates in the list of attributes (A1, A2,
> ..., An), pairwise distances, but none worked. I always ended up with
> well separated groups, but all mixed with one another in the geographic
> space.
>
>
> Any pointers on how to proceed from here? Any hints will be greatly
> appreciated.
>
>
> Thank you all in advance.
>
>
> Best,
>
> Danlin Yu
>


From Roger@B|v@nd @end|ng |rom nhh@no  Thu Jul 21 17:13:25 2022
From: Roger@B|v@nd @end|ng |rom nhh@no (Roger Bivand)
Date: Thu, 21 Jul 2022 17:13:25 +0200 (CEST)
Subject: [R-sig-Geo] New package for R-GRASS interface
Message-ID: <c19584d-f127-55e1-732e-5cbdc8699b73@reclus2.nhh.no>

Since GRASS 8 has been released (current is 8.2), continuing calling the 
interface package "rgrass7" is misleading. In any case, rgrass7 suggests 
rgdal, which is nearing retirement. So rgrass has been created, and 
reached CRAN today. rgrass7 also works with GRASS 8, but will be archived 
when rgdal retires.

The new rgrass package now uses terra classes for data transfer. There is 
a new vignette showing how to coerce from and to SpatRaster and SpatVector 
to make adaptation easier. A second vignette describes various modes of 
use of the interface package.

Comments and questions are welcome here and as github issues.

Best wishes,

Roger

-- 
Roger Bivand
Emeritus Professor
Department of Economics, Norwegian School of Economics,
Postboks 3490 Ytre Sandviken, 5045 Bergen, Norway.
e-mail: Roger.Bivand at nhh.no
https://orcid.org/0000-0003-2392-6140
https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en


From |nt|@|un@@r@g|@ @end|ng |rom gm@||@com  Wed Jul 27 01:46:34 2022
From: |nt|@|un@@r@g|@ @end|ng |rom gm@||@com (inti luna)
Date: Wed, 27 Jul 2022 01:46:34 +0200
Subject: [R-sig-Geo] Height transformation (ellipsoidal to EGM2008)
Message-ID: <CABZ8+BDX66rmu4DAus3U=_wx9Crc33gnMzAXwnAVUXR9XVqJqw@mail.gmail.com>

Hi all,
I have a table with data points with CRS EPSG 4326 and ellipsoidal height
(m) and would like to transform it to another CRS. Target horizontal is
EPSG: 25831 and target height is based on EGM2008 (EPSG 3855).

I have carried the horizontal transformation with the sf package but I
don?t know how to perform the height transformation. Any guidance is
appreciated. I have been checking
https://keen-swartz-3146c4.netlify.app/sf.html#st_transform-sf_project but
still have not found information about height transformation

Repex

library(sf)

#create sample dataset

data1<-"Name,Longitude,Latitude,Ellipsoidal_height
gcp1,2.32152788,41.75758799,1235.577
gcp2,2.32129905,41.75757489,1234.38
gcp3,2.3212163,41.75760007,1233.49
gcp4,2.32165884,41.75765011,1235.785
gcp5,2.32163868,41.75764588,1235.741
gcp6,2.32167394,41.75793979,1236.763
gcp7,2.32118573,41.75769993,1232.364
gcp8,2.32115307,41.75770638,1231.897
gcp9,2.32097163,41.75779261,1228.454"

data1<-read.table(text = data1, header = T,sep = ",")
head(data1)
str(data1)

sf::sf_extSoftVersion()

crs_epsg25831 <- st_crs(25831)
crs_epsg25831

data.points <- st_as_sf(data1, coords = c("Longitude", "Latitude"))
st_crs(data.points) <- 4326
data.points

#transform from EPSG 4326 to EPSG 25831(ETRS89/UTM 31N)
data.points2<-st_transform(data.points,crs_epsg25831)

st_crs(data.points2)
data.points2
data.points2$geometry
write.csv(data.points2, "sample.points_epsg25831.csv")

# height transformation ?


Machine and software details:

OS: Windows
R: version 4.2.1 (2022-06-23 ucrt) -- "Funny-Looking Kid"
Rstudio: RStudio 2022.07.1+554 "Spotted Wakerobin" Release
(7872775ebddc40635780ca1ed238934c3345c5de, 2022-07-22) for Windows
Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like
Gecko) QtWebEngine/5.12.8 Chrome/69.0.3497.128 Safari/537.36

GEOS: 3.9.1
GDAL 3.4.3
PROJ 7.2.1
sf_use_s2: TRUE



Kind regards,
Inti Luna

-- 
+ 34 6042 19917

	[[alternative HTML version deleted]]


From Lo|c@DUTRIEUX @end|ng |rom ec@europ@@eu  Wed Jul 27 11:53:43 2022
From: Lo|c@DUTRIEUX @end|ng |rom ec@europ@@eu (DUTRIEUX Loic)
Date: Wed, 27 Jul 2022 09:53:43 +0000
Subject: [R-sig-Geo] Does stars::st_extract preserve records order
Message-ID: <394bd27430d34e60bd84680b4fa4bad2@ec.europa.eu>

Hi everyone,

I'm wondering whether st_extract() from stars package preserves the order of the input sf dataframe.
See the example below; is it a safe approach? Is there perhaps a more "elegant" way to do the same extraction?

library(sf)
library(stars)
library(geodata)
library(magrittr)

# Create sf dataframe of cities
cities <- data.frame(x=c(2.3522, 5.3698, 4.8357),
                     y=c(48.8566, 43.2965, 45.7640),
                     names=c('Paris', 'Marseille', 'Lyon'))
sfdf <- st_as_sf(cities,
                 coords=c('x','y'),
                 crs=st_crs(4326),
                 agr='identity')

# Get raster of monthly average tempature
tavg <- worldclim_tile(var = 'tavg', lon = 15, lat = 45, path = tempdir()) %>%
    st_as_stars()

# Extract monthly avg temperature for cities
tavg_df <- st_extract(tavg, at = sfdf) %>%
    st_as_sf() %>%
    st_drop_geometry()

# Recombine with original sf dataframe
full_df <- cbind(sfdf, tavg_df)


Kind regards,
Lo?c


From btupper @end|ng |rom b|ge|ow@org  Wed Jul 27 14:36:28 2022
From: btupper @end|ng |rom b|ge|ow@org (Ben Tupper)
Date: Wed, 27 Jul 2022 08:36:28 -0400
Subject: [R-sig-Geo] Does stars::st_extract preserve records order
In-Reply-To: <394bd27430d34e60bd84680b4fa4bad2@ec.europa.eu>
References: <394bd27430d34e60bd84680b4fa4bad2@ec.europa.eu>
Message-ID: <CALrbzg02Y==ufOm_YDeu2EkCmo+8D42J0+jFkDeJUdR=ZDgm7A@mail.gmail.com>

Hi,

I have never observed st_extract() fail to preserve row order.

Your workflow works well.  The documentation for st_extract() mentions
that if you might see better performance for large sets of points if
you pass `at` locations as a matrix instead as sf.  I don't think it
makes it any more or less elegant.  Such an approach might look like
this...

### start

# Set column names of matrix/data.frame to months
set_column_names <- function(x) {
  colnames(x) <- month.abb
  x
}

# Extract monthly avg temperature for cities
tavg_df <- st_extract(tavg, at = sf::st_coordinates(sfdf)) %>%  # <- pass matrix
  set_column_names() %>%
       # <- name the columns
  dplyr::as_tibble()
                    # <-cast as data frame

# Recombine with original sf dataframe
full_df <- cbind(sfdf, tavg_df)

# Simple feature collection with 3 features and 13 fields
# Geometry type: POINT
# Dimension:     XY
# Bounding box:  xmin: 2.3522 ymin: 43.2965 xmax: 5.3698 ymax: 48.8566
# Geodetic CRS:  WGS 84
#       names Jan Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct  Nov Dec
# 1     Paris 4.8 5.4  8.2 10.6 14.8 17.6 20.0 20.0 16.5 12.3  7.8 5.7
# 2 Marseille 8.6 9.2 11.1 13.3 17.3 20.7 23.6 23.4 20.3 16.4 11.7 9.5
# 3      Lyon 3.6 5.1  8.1 10.8 15.4 18.7 21.7 21.2 17.2 12.5  7.2 4.5
#                 geometry
# 1 POINT (2.3522 48.8566)
# 2 POINT (5.3698 43.2965)
# 3  POINT (4.8357 45.764)

### end

Cheers,
Ben

On Wed, Jul 27, 2022 at 5:54 AM DUTRIEUX Loic
<Loic.DUTRIEUX at ec.europa.eu> wrote:
>
> Hi everyone,
>
> I'm wondering whether st_extract() from stars package preserves the order of the input sf dataframe.
> See the example below; is it a safe approach? Is there perhaps a more "elegant" way to do the same extraction?
>
> library(sf)
> library(stars)
> library(geodata)
> library(magrittr)
>
> # Create sf dataframe of cities
> cities <- data.frame(x=c(2.3522, 5.3698, 4.8357),
>                      y=c(48.8566, 43.2965, 45.7640),
>                      names=c('Paris', 'Marseille', 'Lyon'))
> sfdf <- st_as_sf(cities,
>                  coords=c('x','y'),
>                  crs=st_crs(4326),
>                  agr='identity')
>
> # Get raster of monthly average tempature
> tavg <- worldclim_tile(var = 'tavg', lon = 15, lat = 45, path = tempdir()) %>%
>     st_as_stars()
>
> # Extract monthly avg temperature for cities
> tavg_df <- st_extract(tavg, at = sfdf) %>%
>     st_as_sf() %>%
>     st_drop_geometry()
>
> # Recombine with original sf dataframe
> full_df <- cbind(sfdf, tavg_df)
>
>
> Kind regards,
> Lo?c
>
> _______________________________________________
> R-sig-Geo mailing list
> R-sig-Geo at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-geo



-- 
Ben Tupper (he/him)
Bigelow Laboratory for Ocean Science
East Boothbay, Maine
http://www.bigelow.org/
https://eco.bigelow.org


From md@umner @end|ng |rom gm@||@com  Wed Jul 27 16:27:40 2022
From: md@umner @end|ng |rom gm@||@com (Michael Sumner)
Date: Thu, 28 Jul 2022 00:27:40 +1000
Subject: [R-sig-Geo] Does stars::st_extract preserve records order
In-Reply-To: <CALrbzg02Y==ufOm_YDeu2EkCmo+8D42J0+jFkDeJUdR=ZDgm7A@mail.gmail.com>
References: <394bd27430d34e60bd84680b4fa4bad2@ec.europa.eu>
 <CALrbzg02Y==ufOm_YDeu2EkCmo+8D42J0+jFkDeJUdR=ZDgm7A@mail.gmail.com>
Message-ID: <CAAcGz9-R=4hK45W9yphLhO6eCBJX3aLoS17A4hx2jb_ji5rg5g@mail.gmail.com>

lol, as a matrix - does it just?

very clever

On Wed, 27 July 2022, 22:36 Ben Tupper, <btupper at bigelow.org> wrote:

> Hi,
>
> I have never observed st_extract() fail to preserve row order.
>
> Your workflow works well.  The documentation for st_extract() mentions
> that if you might see better performance for large sets of points if
> you pass `at` locations as a matrix instead as sf.  I don't think it
> makes it any more or less elegant.  Such an approach might look like
> this...
>
> ### start
>
> # Set column names of matrix/data.frame to months
> set_column_names <- function(x) {
>   colnames(x) <- month.abb
>   x
> }
>
> # Extract monthly avg temperature for cities
> tavg_df <- st_extract(tavg, at = sf::st_coordinates(sfdf)) %>%  # <- pass
> matrix
>   set_column_names() %>%
>        # <- name the columns
>   dplyr::as_tibble()
>                     # <-cast as data frame
>
> # Recombine with original sf dataframe
> full_df <- cbind(sfdf, tavg_df)
>
> # Simple feature collection with 3 features and 13 fields
> # Geometry type: POINT
> # Dimension:     XY
> # Bounding box:  xmin: 2.3522 ymin: 43.2965 xmax: 5.3698 ymax: 48.8566
> # Geodetic CRS:  WGS 84
> #       names Jan Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct  Nov Dec
> # 1     Paris 4.8 5.4  8.2 10.6 14.8 17.6 20.0 20.0 16.5 12.3  7.8 5.7
> # 2 Marseille 8.6 9.2 11.1 13.3 17.3 20.7 23.6 23.4 20.3 16.4 11.7 9.5
> # 3      Lyon 3.6 5.1  8.1 10.8 15.4 18.7 21.7 21.2 17.2 12.5  7.2 4.5
> #                 geometry
> # 1 POINT (2.3522 48.8566)
> # 2 POINT (5.3698 43.2965)
> # 3  POINT (4.8357 45.764)
>
> ### end
>
> Cheers,
> Ben
>
> On Wed, Jul 27, 2022 at 5:54 AM DUTRIEUX Loic
> <Loic.DUTRIEUX at ec.europa.eu> wrote:
> >
> > Hi everyone,
> >
> > I'm wondering whether st_extract() from stars package preserves the
> order of the input sf dataframe.
> > See the example below; is it a safe approach? Is there perhaps a more
> "elegant" way to do the same extraction?
> >
> > library(sf)
> > library(stars)
> > library(geodata)
> > library(magrittr)
> >
> > # Create sf dataframe of cities
> > cities <- data.frame(x=c(2.3522, 5.3698, 4.8357),
> >                      y=c(48.8566, 43.2965, 45.7640),
> >                      names=c('Paris', 'Marseille', 'Lyon'))
> > sfdf <- st_as_sf(cities,
> >                  coords=c('x','y'),
> >                  crs=st_crs(4326),
> >                  agr='identity')
> >
> > # Get raster of monthly average tempature
> > tavg <- worldclim_tile(var = 'tavg', lon = 15, lat = 45, path =
> tempdir()) %>%
> >     st_as_stars()
> >
> > # Extract monthly avg temperature for cities
> > tavg_df <- st_extract(tavg, at = sfdf) %>%
> >     st_as_sf() %>%
> >     st_drop_geometry()
> >
> > # Recombine with original sf dataframe
> > full_df <- cbind(sfdf, tavg_df)
> >
> >
> > Kind regards,
> > Lo?c
> >
> > _______________________________________________
> > R-sig-Geo mailing list
> > R-sig-Geo at r-project.org
> > https://stat.ethz.ch/mailman/listinfo/r-sig-geo
>
>
>
> --
> Ben Tupper (he/him)
> Bigelow Laboratory for Ocean Science
> East Boothbay, Maine
> http://www.bigelow.org/
> https://eco.bigelow.org
>
> _______________________________________________
> R-sig-Geo mailing list
> R-sig-Geo at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-geo
>

	[[alternative HTML version deleted]]


From Roger@B|v@nd @end|ng |rom nhh@no  Thu Jul 28 13:38:27 2022
From: Roger@B|v@nd @end|ng |rom nhh@no (Roger Bivand)
Date: Thu, 28 Jul 2022 13:38:27 +0200 (CEST)
Subject: [R-sig-Geo] Height transformation (ellipsoidal to EGM2008)
In-Reply-To: <CABZ8+BDX66rmu4DAus3U=_wx9Crc33gnMzAXwnAVUXR9XVqJqw@mail.gmail.com>
References: <CABZ8+BDX66rmu4DAus3U=_wx9Crc33gnMzAXwnAVUXR9XVqJqw@mail.gmail.com>
Message-ID: <7b2916e-ee6e-cb33-b71a-f6f5eeafbfdd@reclus2.nhh.no>

On Tue, 26 Jul 2022, inti luna wrote:

> Hi all,
> I have a table with data points with CRS EPSG 4326 and ellipsoidal height
> (m) and would like to transform it to another CRS. Target horizontal is
> EPSG: 25831 and target height is based on EGM2008 (EPSG 3855).
>
> I have carried the horizontal transformation with the sf package but I
> don?t know how to perform the height transformation. Any guidance is
> appreciated. I have been checking
> https://eur02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fkeen-swartz-3146c4.netlify.app%2Fsf.html%23st_transform-sf_project&amp;data=05%7C01%7CRoger.Bivand%40nhh.no%7Cccb34858b29945e7edb508da6f71f01d%7C33a15b2f849941998d56f20b5aa91af2%7C0%7C0%7C637944834193544665%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C2000%7C%7C%7C&amp;sdata=tSwZgNFNWpnn5%2BeFWpyUUDSxws7QGYbSi%2Bn3G7GywkI%3D&amp;reserved=0 but
> still have not found information about height transformation

No, this is much more complex. Please read

https://proj.org/apps/cs2cs.html

to begin with (not self-explanatory but accurate). R does not provide PROJ 
apps, but running on my Linux machine (PROJ 9.0.1, but 7.2.1 is fine):

$ export PROJ_NETWORK=ON
$ echo 2.32152788 41.75758799 1235.577 | cs2cs EPSG:4326 
EPSG:25831+EPSG:3855
5182922.95	329657.82 1264.66
$ export PROJ_NETWORK=OFF
$ echo 2.32152788 41.75758799 1235.577 | cs2cs EPSG:4326 
EPSG:25831+EPSG:3855
5182922.95	329657.82 1235.58

When the CDN network is ON, us_nga_egm08_25.tif is available for grid 
transformation in 3D. When off, it is not:

$ projinfo -o PROJ -s EPSG:4326 -t EPSG:25831+EPSG:3855

gives a lot of output  describing all of the transformation operations 
that might be possible if known grids are available.

Starting R with the CDN ON:

$ PROJ_NETWORK=ON R
...
library(sf)
o <- sf_proj_pipelines("EPSG:4326", "EPSG:25831+EPSG:3855")
o

o[1,] is the best than can be instantiated with:

+proj=pipeline
  +step +proj=unitconvert +xy_in=deg +xy_out=rad
  +step +inv +proj=vgridshift +grids=us_nga_egm08_25.tif +multiplier=1
  +step +proj=utm +zone=31 +ellps=GRS80

so now making a vertical shift using a grid from the CDN.

Creating your data.points (thanks for a good reprex!) but naming 
"Ellipsoidal_height" as the third coordinate:

data.points <- st_as_sf(data1, coords = c("Longitude", "Latitude",
   "Ellipsoidal_height"))

I get:

data.points2<-st_transform(data.points, "EPSG:25831")
data.points2$geometry
First 5 geometries:
POINT Z (443597.6 4623084 1235.577)

which is wierd, but using the pipeline found above:

data.points2a<-st_transform(data.points, "EPSG:25831",
  pipeline=o$definition[1])
data.points2a$geometry

giving

POINT Z (5182923 329657.8 1264.658)

as in the PROJ app.

One point is that you need either to install the grid locally, or enable 
the CDN *before* you start R and load sf.

Another is that sf_proj_pipelines() uses PROJ directly, so can identify 
combined pipelines, but st_transform() uses PROJ via GDAL, and doesn't 
handle this correctlly, so one must pass the pipeline. The output CRS will 
also be wrong, it should be:

COMPOUNDCRS["ETRS89 / UTM zone 31N + EGM2008 height", ...

not

PROJCRS["ETRS89 / UTM zone 31N", ... .

Finally, your sf object needed the third coordinate defined, otherwise it 
had no idea that it wasn't 2D.

Consider creating an sf issue, and if possible contact others needing 
vertical transformation and consider contributing a blog or vignette. Both 
sf and terra need user input to document important topics like this.

Best wishes,

Roger


>
> Repex
>
> library(sf)
>
> #create sample dataset
>
> data1<-"Name,Longitude,Latitude,Ellipsoidal_height
> gcp1,2.32152788,41.75758799,1235.577
> gcp2,2.32129905,41.75757489,1234.38
> gcp3,2.3212163,41.75760007,1233.49
> gcp4,2.32165884,41.75765011,1235.785
> gcp5,2.32163868,41.75764588,1235.741
> gcp6,2.32167394,41.75793979,1236.763
> gcp7,2.32118573,41.75769993,1232.364
> gcp8,2.32115307,41.75770638,1231.897
> gcp9,2.32097163,41.75779261,1228.454"
>
> data1<-read.table(text = data1, header = T,sep = ",")
> head(data1)
> str(data1)
>
> sf::sf_extSoftVersion()
>
> crs_epsg25831 <- st_crs(25831)
> crs_epsg25831
>
> data.points <- st_as_sf(data1, coords = c("Longitude", "Latitude"))
> st_crs(data.points) <- 4326
> data.points
>
> #transform from EPSG 4326 to EPSG 25831(ETRS89/UTM 31N)
> data.points2<-st_transform(data.points,crs_epsg25831)
>
> st_crs(data.points2)
> data.points2
> data.points2$geometry
> write.csv(data.points2, "sample.points_epsg25831.csv")
>
> # height transformation ?
>
>
> Machine and software details:
>
> OS: Windows
> R: version 4.2.1 (2022-06-23 ucrt) -- "Funny-Looking Kid"
> Rstudio: RStudio 2022.07.1+554 "Spotted Wakerobin" Release
> (7872775ebddc40635780ca1ed238934c3345c5de, 2022-07-22) for Windows
> Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like
> Gecko) QtWebEngine/5.12.8 Chrome/69.0.3497.128 Safari/537.36
>
> GEOS: 3.9.1
> GDAL 3.4.3
> PROJ 7.2.1
> sf_use_s2: TRUE
>
>
>
> Kind regards,
> Inti Luna
>
>

-- 
Roger Bivand
Emeritus Professor
Department of Economics, Norwegian School of Economics,
Postboks 3490 Ytre Sandviken, 5045 Bergen, Norway.
e-mail: Roger.Bivand at nhh.no
https://orcid.org/0000-0003-2392-6140
https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en

From |nt|@|un@@r@g|@ @end|ng |rom gm@||@com  Thu Jul 28 13:21:17 2022
From: |nt|@|un@@r@g|@ @end|ng |rom gm@||@com (inti luna)
Date: Thu, 28 Jul 2022 13:21:17 +0200
Subject: [R-sig-Geo] Height transformation (ellipsoidal to EGM2008)
In-Reply-To: <7b2916e-ee6e-cb33-b71a-f6f5eeafbfdd@reclus2.nhh.no>
References: <CABZ8+BDX66rmu4DAus3U=_wx9Crc33gnMzAXwnAVUXR9XVqJqw@mail.gmail.com>
 <7b2916e-ee6e-cb33-b71a-f6f5eeafbfdd@reclus2.nhh.no>
Message-ID: <CABZ8+BBMU62H59Ubk1HF1dVp8m_ULrdPtUhPA-Ta7-CSG3Ac+Q@mail.gmail.com>

Dear Professor Roger,
Thank you so much for the clarification. I will try to contact others
interested in vertical transformations too and make a post.

Kind regards,
Inti Luna

El jue, 28 jul 2022 a las 13:38, Roger Bivand (<Roger.Bivand at nhh.no>)
escribi?:

> On Tue, 26 Jul 2022, inti luna wrote:
>
> > Hi all,
> > I have a table with data points with CRS EPSG 4326 and ellipsoidal height
> > (m) and would like to transform it to another CRS. Target horizontal is
> > EPSG: 25831 and target height is based on EGM2008 (EPSG 3855).
> >
> > I have carried the horizontal transformation with the sf package but I
> > don?t know how to perform the height transformation. Any guidance is
> > appreciated. I have been checking
> >
> https://eur02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fkeen-swartz-3146c4.netlify.app%2Fsf.html%23st_transform-sf_project&amp;data=05%7C01%7CRoger.Bivand%40nhh.no%7Cccb34858b29945e7edb508da6f71f01d%7C33a15b2f849941998d56f20b5aa91af2%7C0%7C0%7C637944834193544665%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C2000%7C%7C%7C&amp;sdata=tSwZgNFNWpnn5%2BeFWpyUUDSxws7QGYbSi%2Bn3G7GywkI%3D&amp;reserved=0
> but
> > still have not found information about height transformation
>
> No, this is much more complex. Please read
>
> https://proj.org/apps/cs2cs.html
>
> to begin with (not self-explanatory but accurate). R does not provide PROJ
> apps, but running on my Linux machine (PROJ 9.0.1, but 7.2.1 is fine):
>
> $ export PROJ_NETWORK=ON
> $ echo 2.32152788 41.75758799 1235.577 | cs2cs EPSG:4326
> EPSG:25831+EPSG:3855
> 5182922.95      329657.82 1264.66
> $ export PROJ_NETWORK=OFF
> $ echo 2.32152788 41.75758799 1235.577 | cs2cs EPSG:4326
> EPSG:25831+EPSG:3855
> 5182922.95      329657.82 1235.58
>
> When the CDN network is ON, us_nga_egm08_25.tif is available for grid
> transformation in 3D. When off, it is not:
>
> $ projinfo -o PROJ -s EPSG:4326 -t EPSG:25831+EPSG:3855
>
> gives a lot of output  describing all of the transformation operations
> that might be possible if known grids are available.
>
> Starting R with the CDN ON:
>
> $ PROJ_NETWORK=ON R
> ...
> library(sf)
> o <- sf_proj_pipelines("EPSG:4326", "EPSG:25831+EPSG:3855")
> o
>
> o[1,] is the best than can be instantiated with:
>
> +proj=pipeline
>   +step +proj=unitconvert +xy_in=deg +xy_out=rad
>   +step +inv +proj=vgridshift +grids=us_nga_egm08_25.tif +multiplier=1
>   +step +proj=utm +zone=31 +ellps=GRS80
>
> so now making a vertical shift using a grid from the CDN.
>
> Creating your data.points (thanks for a good reprex!) but naming
> "Ellipsoidal_height" as the third coordinate:
>
> data.points <- st_as_sf(data1, coords = c("Longitude", "Latitude",
>    "Ellipsoidal_height"))
>
> I get:
>
> data.points2<-st_transform(data.points, "EPSG:25831")
> data.points2$geometry
> First 5 geometries:
> POINT Z (443597.6 4623084 1235.577)
>
> which is wierd, but using the pipeline found above:
>
> data.points2a<-st_transform(data.points, "EPSG:25831",
>   pipeline=o$definition[1])
> data.points2a$geometry
>
> giving
>
> POINT Z (5182923 329657.8 1264.658)
>
> as in the PROJ app.
>
> One point is that you need either to install the grid locally, or enable
> the CDN *before* you start R and load sf.
>
> Another is that sf_proj_pipelines() uses PROJ directly, so can identify
> combined pipelines, but st_transform() uses PROJ via GDAL, and doesn't
> handle this correctlly, so one must pass the pipeline. The output CRS will
> also be wrong, it should be:
>
> COMPOUNDCRS["ETRS89 / UTM zone 31N + EGM2008 height", ...
>
> not
>
> PROJCRS["ETRS89 / UTM zone 31N", ... .
>
> Finally, your sf object needed the third coordinate defined, otherwise it
> had no idea that it wasn't 2D.
>
> Consider creating an sf issue, and if possible contact others needing
> vertical transformation and consider contributing a blog or vignette. Both
> sf and terra need user input to document important topics like this.
>
> Best wishes,
>
> Roger
>
>
> >
> > Repex
> >
> > library(sf)
> >
> > #create sample dataset
> >
> > data1<-"Name,Longitude,Latitude,Ellipsoidal_height
> > gcp1,2.32152788,41.75758799,1235.577
> > gcp2,2.32129905,41.75757489,1234.38
> > gcp3,2.3212163,41.75760007,1233.49
> > gcp4,2.32165884,41.75765011,1235.785
> > gcp5,2.32163868,41.75764588,1235.741
> > gcp6,2.32167394,41.75793979,1236.763
> > gcp7,2.32118573,41.75769993,1232.364
> > gcp8,2.32115307,41.75770638,1231.897
> > gcp9,2.32097163,41.75779261,1228.454"
> >
> > data1<-read.table(text = data1, header = T,sep = ",")
> > head(data1)
> > str(data1)
> >
> > sf::sf_extSoftVersion()
> >
> > crs_epsg25831 <- st_crs(25831)
> > crs_epsg25831
> >
> > data.points <- st_as_sf(data1, coords = c("Longitude", "Latitude"))
> > st_crs(data.points) <- 4326
> > data.points
> >
> > #transform from EPSG 4326 to EPSG 25831(ETRS89/UTM 31N)
> > data.points2<-st_transform(data.points,crs_epsg25831)
> >
> > st_crs(data.points2)
> > data.points2
> > data.points2$geometry
> > write.csv(data.points2, "sample.points_epsg25831.csv")
> >
> > # height transformation ?
> >
> >
> > Machine and software details:
> >
> > OS: Windows
> > R: version 4.2.1 (2022-06-23 ucrt) -- "Funny-Looking Kid"
> > Rstudio: RStudio 2022.07.1+554 "Spotted Wakerobin" Release
> > (7872775ebddc40635780ca1ed238934c3345c5de, 2022-07-22) for Windows
> > Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like
> > Gecko) QtWebEngine/5.12.8 Chrome/69.0.3497.128 Safari/537.36
> >
> > GEOS: 3.9.1
> > GDAL 3.4.3
> > PROJ 7.2.1
> > sf_use_s2: TRUE
> >
> >
> >
> > Kind regards,
> > Inti Luna
> >
> >
>
> --
> Roger Bivand
> Emeritus Professor
> Department of Economics, Norwegian School of Economics,
> Postboks 3490 Ytre Sandviken, 5045 Bergen, Norway.
> e-mail: Roger.Bivand at nhh.no
> https://orcid.org/0000-0003-2392-6140
> https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en



-- 
+ 34 6042 19917
Skype: inti_luna
Zoom *ID* : 901-077-6684
*https://evolors.com <https://evolors.com/>*

	[[alternative HTML version deleted]]


From Roger@B|v@nd @end|ng |rom nhh@no  Fri Jul 29 16:56:47 2022
From: Roger@B|v@nd @end|ng |rom nhh@no (Roger Bivand)
Date: Fri, 29 Jul 2022 16:56:47 +0200 (CEST)
Subject: [R-sig-Geo] Height transformation (ellipsoidal to EGM2008)
In-Reply-To: <CABZ8+BBMU62H59Ubk1HF1dVp8m_ULrdPtUhPA-Ta7-CSG3Ac+Q@mail.gmail.com>
References: <CABZ8+BDX66rmu4DAus3U=_wx9Crc33gnMzAXwnAVUXR9XVqJqw@mail.gmail.com>
 <7b2916e-ee6e-cb33-b71a-f6f5eeafbfdd@reclus2.nhh.no>
 <CABZ8+BBMU62H59Ubk1HF1dVp8m_ULrdPtUhPA-Ta7-CSG3Ac+Q@mail.gmail.com>
Message-ID: <2744e458-811e-d193-84aa-6acaf7bcb182@reclus2.nhh.no>

On Thu, 28 Jul 2022, inti luna wrote:

> Dear Professor Roger,
> Thank you so much for the clarification. I will try to contact others
> interested in vertical transformations too and make a post.

Good, thanks.

It appears that terra does not accept POINT Z geometries:

> library(sf)
Linking to GEOS 3.11.0, GDAL 3.5.1, PROJ 9.0.1; sf_use_s2() is TRUE
> data.points <- st_as_sf(data1, coords = c("Longitude", "Latitude",
+    "Ellipsoidal_height"))
> dp_sv <- vect(data.points)
> geom(dp_sv, wkt=TRUE)
[1] "POINT (2.321528 41.757588)" "POINT (2.321299 41.757575)"
[3] "POINT (2.321216 41.7576)"   "POINT (2.321659 41.75765)"
[5] "POINT (2.321639 41.757646)" "POINT (2.321674 41.75794)"
[7] "POINT (2.321186 41.7577)"   "POINT (2.321153 41.757706)"
[9] "POINT (2.320972 41.757793)"
> st_geometry(data.points)
Geometry set for 9 features
Geometry type: POINT
Dimension:     XYZ
Bounding box:  xmin: 2.320972 ymin: 41.75757 xmax: 2.321674 ymax: 41.75794
CRS:           NA
First 5 geometries:
POINT Z (2.321528 41.75759 1235.577)
POINT Z (2.321299 41.75757 1234.38)
POINT Z (2.321216 41.7576 1233.49)
POINT Z (2.321659 41.75765 1235.785)
POINT Z (2.321639 41.75765 1235.741)

so exploring vertical grids is not productive for now. This is worth 
addressing, to provide someting to check sf with.

Roger

>
> Kind regards,
> Inti Luna
>
> El jue, 28 jul 2022 a las 13:38, Roger Bivand (<Roger.Bivand at nhh.no>)
> escribi?:
>
>> On Tue, 26 Jul 2022, inti luna wrote:
>>
>>> Hi all,
>>> I have a table with data points with CRS EPSG 4326 and ellipsoidal height
>>> (m) and would like to transform it to another CRS. Target horizontal is
>>> EPSG: 25831 and target height is based on EGM2008 (EPSG 3855).
>>>
>>> I have carried the horizontal transformation with the sf package but I
>>> don?t know how to perform the height transformation. Any guidance is
>>> appreciated. I have been checking
>>>
>> https://eur02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fkeen-swartz-3146c4.netlify.app%2Fsf.html%23st_transform-sf_project&amp;data=05%7C01%7CRoger.Bivand%40nhh.no%7Cccb34858b29945e7edb508da6f71f01d%7C33a15b2f849941998d56f20b5aa91af2%7C0%7C0%7C637944834193544665%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C2000%7C%7C%7C&amp;sdata=tSwZgNFNWpnn5%2BeFWpyUUDSxws7QGYbSi%2Bn3G7GywkI%3D&amp;reserved=0
>> but
>>> still have not found information about height transformation
>>
>> No, this is much more complex. Please read
>>
>> https://proj.org/apps/cs2cs.html
>>
>> to begin with (not self-explanatory but accurate). R does not provide PROJ
>> apps, but running on my Linux machine (PROJ 9.0.1, but 7.2.1 is fine):
>>
>> $ export PROJ_NETWORK=ON
>> $ echo 2.32152788 41.75758799 1235.577 | cs2cs EPSG:4326
>> EPSG:25831+EPSG:3855
>> 5182922.95      329657.82 1264.66
>> $ export PROJ_NETWORK=OFF
>> $ echo 2.32152788 41.75758799 1235.577 | cs2cs EPSG:4326
>> EPSG:25831+EPSG:3855
>> 5182922.95      329657.82 1235.58
>>
>> When the CDN network is ON, us_nga_egm08_25.tif is available for grid
>> transformation in 3D. When off, it is not:
>>
>> $ projinfo -o PROJ -s EPSG:4326 -t EPSG:25831+EPSG:3855
>>
>> gives a lot of output  describing all of the transformation operations
>> that might be possible if known grids are available.
>>
>> Starting R with the CDN ON:
>>
>> $ PROJ_NETWORK=ON R
>> ...
>> library(sf)
>> o <- sf_proj_pipelines("EPSG:4326", "EPSG:25831+EPSG:3855")
>> o
>>
>> o[1,] is the best than can be instantiated with:
>>
>> +proj=pipeline
>>   +step +proj=unitconvert +xy_in=deg +xy_out=rad
>>   +step +inv +proj=vgridshift +grids=us_nga_egm08_25.tif +multiplier=1
>>   +step +proj=utm +zone=31 +ellps=GRS80
>>
>> so now making a vertical shift using a grid from the CDN.
>>
>> Creating your data.points (thanks for a good reprex!) but naming
>> "Ellipsoidal_height" as the third coordinate:
>>
>> data.points <- st_as_sf(data1, coords = c("Longitude", "Latitude",
>>    "Ellipsoidal_height"))
>>
>> I get:
>>
>> data.points2<-st_transform(data.points, "EPSG:25831")
>> data.points2$geometry
>> First 5 geometries:
>> POINT Z (443597.6 4623084 1235.577)
>>
>> which is wierd, but using the pipeline found above:
>>
>> data.points2a<-st_transform(data.points, "EPSG:25831",
>>   pipeline=o$definition[1])
>> data.points2a$geometry
>>
>> giving
>>
>> POINT Z (5182923 329657.8 1264.658)
>>
>> as in the PROJ app.
>>
>> One point is that you need either to install the grid locally, or enable
>> the CDN *before* you start R and load sf.
>>
>> Another is that sf_proj_pipelines() uses PROJ directly, so can identify
>> combined pipelines, but st_transform() uses PROJ via GDAL, and doesn't
>> handle this correctlly, so one must pass the pipeline. The output CRS will
>> also be wrong, it should be:
>>
>> COMPOUNDCRS["ETRS89 / UTM zone 31N + EGM2008 height", ...
>>
>> not
>>
>> PROJCRS["ETRS89 / UTM zone 31N", ... .
>>
>> Finally, your sf object needed the third coordinate defined, otherwise it
>> had no idea that it wasn't 2D.
>>
>> Consider creating an sf issue, and if possible contact others needing
>> vertical transformation and consider contributing a blog or vignette. Both
>> sf and terra need user input to document important topics like this.
>>
>> Best wishes,
>>
>> Roger
>>
>>
>>>
>>> Repex
>>>
>>> library(sf)
>>>
>>> #create sample dataset
>>>
>>> data1<-"Name,Longitude,Latitude,Ellipsoidal_height
>>> gcp1,2.32152788,41.75758799,1235.577
>>> gcp2,2.32129905,41.75757489,1234.38
>>> gcp3,2.3212163,41.75760007,1233.49
>>> gcp4,2.32165884,41.75765011,1235.785
>>> gcp5,2.32163868,41.75764588,1235.741
>>> gcp6,2.32167394,41.75793979,1236.763
>>> gcp7,2.32118573,41.75769993,1232.364
>>> gcp8,2.32115307,41.75770638,1231.897
>>> gcp9,2.32097163,41.75779261,1228.454"
>>>
>>> data1<-read.table(text = data1, header = T,sep = ",")
>>> head(data1)
>>> str(data1)
>>>
>>> sf::sf_extSoftVersion()
>>>
>>> crs_epsg25831 <- st_crs(25831)
>>> crs_epsg25831
>>>
>>> data.points <- st_as_sf(data1, coords = c("Longitude", "Latitude"))
>>> st_crs(data.points) <- 4326
>>> data.points
>>>
>>> #transform from EPSG 4326 to EPSG 25831(ETRS89/UTM 31N)
>>> data.points2<-st_transform(data.points,crs_epsg25831)
>>>
>>> st_crs(data.points2)
>>> data.points2
>>> data.points2$geometry
>>> write.csv(data.points2, "sample.points_epsg25831.csv")
>>>
>>> # height transformation ?
>>>
>>>
>>> Machine and software details:
>>>
>>> OS: Windows
>>> R: version 4.2.1 (2022-06-23 ucrt) -- "Funny-Looking Kid"
>>> Rstudio: RStudio 2022.07.1+554 "Spotted Wakerobin" Release
>>> (7872775ebddc40635780ca1ed238934c3345c5de, 2022-07-22) for Windows
>>> Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like
>>> Gecko) QtWebEngine/5.12.8 Chrome/69.0.3497.128 Safari/537.36
>>>
>>> GEOS: 3.9.1
>>> GDAL 3.4.3
>>> PROJ 7.2.1
>>> sf_use_s2: TRUE
>>>
>>>
>>>
>>> Kind regards,
>>> Inti Luna
>>>
>>>
>>
>> --
>> Roger Bivand
>> Emeritus Professor
>> Department of Economics, Norwegian School of Economics,
>> Postboks 3490 Ytre Sandviken, 5045 Bergen, Norway.
>> e-mail: Roger.Bivand at nhh.no
>> https://orcid.org/0000-0003-2392-6140
>> https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en
>
>
>
>

-- 
Roger Bivand
Emeritus Professor
Department of Economics, Norwegian School of Economics,
Postboks 3490 Ytre Sandviken, 5045 Bergen, Norway.
e-mail: Roger.Bivand at nhh.no
https://orcid.org/0000-0003-2392-6140
https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en

