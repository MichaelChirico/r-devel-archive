From @d|rk@e @end|ng |rom g@m@@com  Sun Mar  1 00:27:27 2020
From: @d|rk@e @end|ng |rom g@m@@com (Steven Dirkse)
Date: Sat, 29 Feb 2020 18:27:27 -0500
Subject: [Rd] dput()
In-Reply-To: <4d7acddc-485f-2de8-d802-e382b8f861be@gmail.com>
References: <CAHHjBM6zFE+UQrLeVT+gMD7R-jbHco+cygkAB+JR4P2cCik6bg@mail.gmail.com>
 <a0c1898c-2dac-cdd5-ff4b-5c91a30b065f@sapo.pt>
 <4d7acddc-485f-2de8-d802-e382b8f861be@gmail.com>
Message-ID: <CAHiA-ZkBrxe3s8+5EgzXdZU0==h2c7K_DFy_W7kU7hoagwW_7Q@mail.gmail.com>

Ben,

I'll edit and split your question just a little.
  1) "Is there a way to get an *exact* ASCII representation of a
double-precision value?"
  2) "Is there a way to get round-trip behavior, i.e. to make sure that the
value, when converted back to double, is identical() to the original"

The hexNumeric idea mentioned by Duncan is a positive answer to the first
question.  It's a little hard to grok at first, but it is fully precise and
represents exactly a 64-bit double.  And since it is exact it converts back
identically.

But there is another way to get round-trip behavior.  There is a set of
routines called dtoa that, when given an IEEE double, produce the shortest
sequence of base 10 digits that will map back to the double.  There may be
some rounding when producing these digits, but of all the digit sequences
that would map back to the input x, these routines produce the shortest
such.

A link to the original routines is here:

http://www.netlib.org/fp/dtoa.c

and some searching will turn up variants of this code in newer guises.

A good question to ask: for all finite doubles, what is the length of the
longest digit sequence required?  I believe 17 digits is the max digits
required.  It may be 18, but I doubt it.  I don't have an example at hand
and I spent some time looking when working with these routines.   Oh, BTW,
trailing or leading zeros do not count toward the length of the digit
sequence.

-Steve

On Sat, Feb 29, 2020 at 4:21 AM Ben Bolker <bbolker at gmail.com> wrote:

>
>  I think Robin knows about FAQ 7.31/floating point (author of
> 'Brobdingnag', among other numerical packages).  I agree that this is
> surprising (to me).
>
>   To reframe this question: is there way to get an *exact* ASCII
> representation of a numeric value (i.e., guaranteeing the restored value
> is identical() to the original) ?
>
>  .deparseOpts has
>
> ?"digits17"?: Real and finite complex numbers are output using
>           format ?"%.17g"? which may give more precision than the
>           default (but the output will depend on the platform and there
>           may be loss of precision when read back).
>
>   ... but this still doesn't guarantee that all precision is kept.
>
>   Maybe
>
>  saveRDS(x,textConnection("out","w"),ascii=TRUE)
> identical(x,as.numeric(out[length(out)]))   ## TRUE
>
> ?
>
>
>
>
> On 2020-02-29 2:42 a.m., Rui Barradas wrote:
> > Hello,
> >
> > FAQ 7.31
> >
> > See also this StackOverflow post:
> >
> >
> https://stackoverflow.com/questions/9508518/why-are-these-numbers-not-equal
> >
> > Hope this helps,
> >
> > Rui Barradas
> >
> > ?s 00:08 de 29/02/20, robin hankin escreveu:
> >> My interpretation of dput.Rd is that dput() gives an exact ASCII form
> >> of the internal representation of an R object.  But:
> >>
> >>   rhankin at cuttlefish:~ $ R --version
> >> R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
> >> Copyright (C) 2019 The R Foundation for Statistical Computing
> >> Platform: x86_64-pc-linux-gnu (64-bit)
> >>
> >> [snip]
> >>
> >> rhankin at cuttlefish:~ $ R --vanilla --quiet
> >>> x <- sum(dbinom(0:20,20,0.35))
> >>> dput(x)
> >> 1
> >>> x-1
> >> [1] -4.440892e-16
> >>>
> >>> x==1
> >> [1] FALSE
> >>>
> >>
> >> So, dput(x) gives 1, but x is not equal to 1.  Can anyone advise?
> >>
> >> ______________________________________________
> >> R-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


-- 
Steven Dirkse, Ph.D.
GAMS Development Corp.
office: 202.342.0180

	[[alternative HTML version deleted]]


From ch@r||e @end|ng |rom @t@t@umn@edu  Sun Mar  1 00:45:57 2020
From: ch@r||e @end|ng |rom @t@t@umn@edu (Charles Geyer)
Date: Sat, 29 Feb 2020 17:45:57 -0600
Subject: [Rd] tcl problem with R-3.6.3?
In-Reply-To: <CAKctRd38bnP+=Gq-GJxpJjfV71eJDSf8DCcK9N6=xLt73J2Vjg@mail.gmail.com>
References: <CAKctRd35HMAbWzE0wwOwX7f6V54aBfXm_HUWi4NCGzfXD3vOWA@mail.gmail.com>
 <CAFDcVCRLg-TMxsvpZc=X1q8Aq1pRxZHMQjUEn1tDzhK7qVMiQg@mail.gmail.com>
 <CAKctRd25N+RSmcncdXC9zZPPVPHS44B_MNLiA66kAfjGAE77jQ@mail.gmail.com>
 <24154.53742.260945.180539@rob.eddelbuettel.com>
 <CAKctRd38bnP+=Gq-GJxpJjfV71eJDSf8DCcK9N6=xLt73J2Vjg@mail.gmail.com>
Message-ID: <CAKctRd2GJ49s_R514QsRMqEnTfvX2dAgBHnrRved_NBSQxFpWQ@mail.gmail.com>

I realized I don't have to do those checks.  It was not working again (same
error) message when I got home, but after a reboot it worked fine.  Of
course it has tcl/tk because when it works, it brings up a gui chooser
thingy that allows me to choose a CRAN mirror.

On Sat, Feb 29, 2020 at 3:33 PM Charles Geyer <charlie at stat.umn.edu> wrote:

> No. I didn't do any of that and am now at a hockey game.  But since I
> can't reproduce the problem after an Ubuntu online update and reboot, I
> assume the issue is moot.  But I will check these things in an hour or so.
>
> On Sat, Feb 29, 2020, 3:24 PM Dirk Eddelbuettel <edd at debian.org> wrote:
>
>>
>> Charles,
>>
>> Did you try a build of the provided alpha, beta and rc releases made
>> available to allow you to ensure that the released version would build and
>> perform as expected?
>>
>> FWIW the new 3.6.3 made ~ 12 hours ago are already available for Debian,
>> built for the Ubuntu backports at CRAN (thanks to Michael) and also in the
>> base Rocker container behaves as expected (and as the one RC build did):
>>
>> edd at rob:~$ docker run --rm -ti rocker/r-base
>>
>> R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
>> Copyright (C) 2020 The R Foundation for Statistical Computing
>> Platform: x86_64-pc-linux-gnu (64-bit)
>>
>> R is free software and comes with ABSOLUTELY NO WARRANTY.
>> You are welcome to redistribute it under certain conditions.
>> Type 'license()' or 'licence()' for distribution details.
>>
>>   Natural language support but running in an English locale
>>
>> R is a collaborative project with many contributors.
>> Type 'contributors()' for more information and
>> 'citation()' on how to cite R or R packages in publications.
>>
>> Type 'demo()' for some demos, 'help()' for on-line help, or
>> 'help.start()' for an HTML browser interface to help.
>> Type 'q()' to quit R.
>>
>> > capabilities()
>>        jpeg         png        tiff       tcltk         X11        aqua
>>        TRUE        TRUE        TRUE        TRUE       FALSE       FALSE
>>    http/ftp     sockets      libxml        fifo      cledit       iconv
>>        TRUE        TRUE        TRUE        TRUE        TRUE        TRUE
>>         NLS     profmem       cairo         ICU long.double     libcurl
>>        TRUE        TRUE        TRUE        TRUE        TRUE        TRUE
>> >
>>
>>
>> And (to echo Martin Maechler) tcltk comes up as TRUE as it should.
>>
>> Dirk
>>
>> --
>> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>>
>

-- 
Charles Geyer
Professor, School of Statistics
Resident Fellow, Minnesota Center for Philosophy of Science
University of Minnesota
charlie at stat.umn.edu

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Mar  2 09:24:37 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 2 Mar 2020 09:24:37 +0100
Subject: [Rd] dput()
In-Reply-To: <CAHHjBM7uyFM+zZG=TFxmtahi1mKNnjsvbvhHnzv2xS2OpRVRgA@mail.gmail.com>
References: <CAHHjBM6zFE+UQrLeVT+gMD7R-jbHco+cygkAB+JR4P2cCik6bg@mail.gmail.com>
 <a0c1898c-2dac-cdd5-ff4b-5c91a30b065f@sapo.pt>
 <4d7acddc-485f-2de8-d802-e382b8f861be@gmail.com>
 <e3faa734-0db4-760d-ef1e-4f85e2382542@gmail.com>
 <CAHHjBM7uyFM+zZG=TFxmtahi1mKNnjsvbvhHnzv2xS2OpRVRgA@mail.gmail.com>
Message-ID: <24156.49861.922526.979505@stat.math.ethz.ch>

>>>>> robin hankin 
>>>>>     on Sun, 1 Mar 2020 09:26:24 +1300 writes:

    >  Thanks guys, I guess I should have referred to FAQ 7.31
    > (which I am indeed very familiar with) to avoid
    > misunderstanding.  I have always used dput() to clarify
    > 7.31-type issues.

    > The description in ?dput implies [to me at any rate] that
    > there will be no floating-point roundoff in its output.  I
    > hadn't realised that 'deparsing' as discussed in dput.Rd
    > includes precision roundoff issues.

    > I guess the question I should have asked is close to
    > Ben's: "How to force dput() to return an exact
    > representation of a floating point number?".  Duncan's
    > reply is the insight I was missing: exact decimal
    > representation of a double might not be possible (this had
    > not occurred to me).  Also, Duncan's suggestion of control
    > = c("all", "hexNumeric") looks good and I will experiment
    > with this.

This was not Duncan's suggestion but rather  Duncan's *citation* :
Note that he used  " .... " !

The citation is from  ?deparseOpts  (to which one is pointed when reading ?dput),
<rant>
but unfortunately many people nowadays have stopped reading texts
that are longer than a tweet... ;-)
<rant/>
... and indeed,  ?dput  and  ?deparse  use    'control = "all"'
instead of   c("all", "hexNumeric")  when talking about getting
close to an inverse of parse()

As a matter of fact,  within R Core we had discussed this, many
moons ago and actually had more or less decided to make "all"
to *include* "digits17".

"digits17" is  "almost always" (I'm sorry I cannot quantify the
'almost' here) sufficient ... and is obviously conflicting with
using hexadecimals instead of digits.

For R 4.0.0, I think we should finally consider doing something
here :

1) define "all" to include "digits17" 
   so new "all" is current  c("all", "digits17")
   {in a way such that c("all", "hexNumeric") implicitly removes
   "digits17" (as it's in contradiction with "hexNumeric").

2) add a new option  "AllHex" := c("all", "hexNumeric"),
   (Note the capital "A":  such that  match.arg()-like abbreviation
    of .deparseOpts() arguments remain possible and notably "all"
    does not suddenly become ambiguous)

Of course, '1)' is well possible without '2)',
but '2)'  would allow to use  dput(*, control = "All")
which is somewhat easier to readers & writers.

Martin

    > On Sun, Mar 1, 2020 at 6:22 AM Duncan Murdoch
    > <murdoch.duncan at gmail.com> wrote:
    >> 
    >> On 29/02/2020 4:19 a.m., Ben Bolker wrote:
    >> >
    >> > I think Robin knows about FAQ 7.31/floating point
    >> (author of > 'Brobdingnag', among other numerical
    >> packages).  I agree that this is > surprising (to me).
    >> >
    >> > To reframe this question: is there way to get an
    >> *exact* ASCII > representation of a numeric value (i.e.,
    >> guaranteeing the restored value > is identical() to the
    >> original) ?
    >> >
    >> > .deparseOpts has
    >> >
    >> > ?"digits17"?: Real and finite complex numbers are
    >> output using > format ?"%.17g"? which may give more
    >> precision than the > default (but the output will depend
    >> on the platform and there > may be loss of precision when
    >> read back).
    >> >
    >> > ... but this still doesn't guarantee that all precision
    >> is kept.
    >> 
    >> "Using control = c("all", "hexNumeric") comes closest to
    >> making deparse() an inverse of parse(), as representing
    >> double and complex numbers as decimals may well not be
    >> exact. However, not all objects are deparse-able even
    >> with this option. A warning will be issued if the
    >> function recognizes that it is being asked to do the
    >> impossible."
    >> 
    >> >
    >> > Maybe
    >> >
    >> > saveRDS(x,textConnection("out","w"),ascii=TRUE) >
    >> identical(x,as.numeric(out[length(out)])) ## TRUE
    >> >
    >> > ?
    >> >
    >> >
    >> >
    >> >
    >> > On 2020-02-29 2:42 a.m., Rui Barradas wrote: >> Hello,
    >> >>
    >> >> FAQ 7.31
    >> >>
    >> >> See also this StackOverflow post:
    >> >>
    >> >>
    >> https://stackoverflow.com/questions/9508518/why-are-these-numbers-not-equal
    >> >>
    >> >> Hope this helps,
    >> >>
    >> >> Rui Barradas
    >> >>
    >> >> ?s 00:08 de 29/02/20, robin hankin escreveu: >>> My
    >> interpretation of dput.Rd is that dput() gives an exact
    >> ASCII form >>> of the internal representation of an R
    >> object.  But:
    >> >>>
    >> >>> rhankin at cuttlefish:~ $ R --version >>> R version
    >> 3.6.2 (2019-12-12) -- "Dark and Stormy Night" >>>
    >> Copyright (C) 2019 The R Foundation for Statistical
    >> Computing >>> Platform: x86_64-pc-linux-gnu (64-bit)
    >> >>>
    >> >>> [snip]
    >> >>>
    >> >>> rhankin at cuttlefish:~ $ R --vanilla --quiet >>>> x <-
    >> sum(dbinom(0:20,20,0.35)) >>>> dput(x) >>> 1 >>>> x-1 >>>
    >> [1] -4.440892e-16
    >> >>>>
    >> >>>> x==1 >>> [1] FALSE
    >> >>>>
    >> >>>
    >> >>> So, dput(x) gives 1, but x is not equal to 1.  Can
    >> anyone advise?
    >> >>>
    >> >>> ______________________________________________ >>>
    >> R-devel at r-project.org mailing list >>>
    >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> >>>
    >> >>
    >> >> ______________________________________________ >>
    >> R-devel at r-project.org mailing list >>
    >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> >
    >> > ______________________________________________ >
    >> R-devel at r-project.org mailing list >
    >> https://stat.ethz.ch/mailman/listinfo/r-devel
    >> >
    >> 
    >> ______________________________________________
    >> R-devel at r-project.org mailing list
    >> https://stat.ethz.ch/mailman/listinfo/r-devel

    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Mar  2 10:43:53 2020
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Mon, 2 Mar 2020 04:43:53 -0500
Subject: [Rd] dput()
In-Reply-To: <24156.49861.922526.979505@stat.math.ethz.ch>
References: <CAHHjBM6zFE+UQrLeVT+gMD7R-jbHco+cygkAB+JR4P2cCik6bg@mail.gmail.com>
 <a0c1898c-2dac-cdd5-ff4b-5c91a30b065f@sapo.pt>
 <4d7acddc-485f-2de8-d802-e382b8f861be@gmail.com>
 <e3faa734-0db4-760d-ef1e-4f85e2382542@gmail.com>
 <CAHHjBM7uyFM+zZG=TFxmtahi1mKNnjsvbvhHnzv2xS2OpRVRgA@mail.gmail.com>
 <24156.49861.922526.979505@stat.math.ethz.ch>
Message-ID: <9ecdf3cd-c3af-9bee-dce1-ed0149d06462@gmail.com>

On 02/03/2020 3:24 a.m., Martin Maechler wrote:
>>>>>> robin hankin
>>>>>>      on Sun, 1 Mar 2020 09:26:24 +1300 writes:
> 
>      >  Thanks guys, I guess I should have referred to FAQ 7.31
>      > (which I am indeed very familiar with) to avoid
>      > misunderstanding.  I have always used dput() to clarify
>      > 7.31-type issues.
> 
>      > The description in ?dput implies [to me at any rate] that
>      > there will be no floating-point roundoff in its output.  I
>      > hadn't realised that 'deparsing' as discussed in dput.Rd
>      > includes precision roundoff issues.
> 
>      > I guess the question I should have asked is close to
>      > Ben's: "How to force dput() to return an exact
>      > representation of a floating point number?".  Duncan's
>      > reply is the insight I was missing: exact decimal
>      > representation of a double might not be possible (this had
>      > not occurred to me).  Also, Duncan's suggestion of control
>      > = c("all", "hexNumeric") looks good and I will experiment
>      > with this.
> 
> This was not Duncan's suggestion but rather  Duncan's *citation* :
> Note that he used  " .... " !
> 
> The citation is from  ?deparseOpts  (to which one is pointed when reading ?dput),
> <rant>
> but unfortunately many people nowadays have stopped reading texts
> that are longer than a tweet... ;-)
> <rant/>
> ... and indeed,  ?dput  and  ?deparse  use    'control = "all"'
> instead of   c("all", "hexNumeric")  when talking about getting
> close to an inverse of parse()
> 
> As a matter of fact,  within R Core we had discussed this, many
> moons ago and actually had more or less decided to make "all"
> to *include* "digits17".
> 
> "digits17" is  "almost always" (I'm sorry I cannot quantify the
> 'almost' here) sufficient ... and is obviously conflicting with
> using hexadecimals instead of digits.
> 
> For R 4.0.0, I think we should finally consider doing something
> here :
> 
> 1) define "all" to include "digits17"
>     so new "all" is current  c("all", "digits17")
>     {in a way such that c("all", "hexNumeric") implicitly removes
>     "digits17" (as it's in contradiction with "hexNumeric").
> 
> 2) add a new option  "AllHex" := c("all", "hexNumeric"),
>     (Note the capital "A":  such that  match.arg()-like abbreviation
>      of .deparseOpts() arguments remain possible and notably "all"
>      does not suddenly become ambiguous)
> 
> Of course, '1)' is well possible without '2)',
> but '2)'  would allow to use  dput(*, control = "All")
> which is somewhat easier to readers & writers.

I think 1) is a good idea, and adding something with the meaning of 
AllHex seems useful:  but that's not a name I'd choose, since it's not 
consistent with the other names (which are almost all camelCase).  I'd 
choose something like "exact" (even though it isn't :-).

Duncan Murdoch

> 
> Martin
> 
>      > On Sun, Mar 1, 2020 at 6:22 AM Duncan Murdoch
>      > <murdoch.duncan at gmail.com> wrote:
>      >>
>      >> On 29/02/2020 4:19 a.m., Ben Bolker wrote:
>      >> >
>      >> > I think Robin knows about FAQ 7.31/floating point
>      >> (author of > 'Brobdingnag', among other numerical
>      >> packages).  I agree that this is > surprising (to me).
>      >> >
>      >> > To reframe this question: is there way to get an
>      >> *exact* ASCII > representation of a numeric value (i.e.,
>      >> guaranteeing the restored value > is identical() to the
>      >> original) ?
>      >> >
>      >> > .deparseOpts has
>      >> >
>      >> > ?"digits17"?: Real and finite complex numbers are
>      >> output using > format ?"%.17g"? which may give more
>      >> precision than the > default (but the output will depend
>      >> on the platform and there > may be loss of precision when
>      >> read back).
>      >> >
>      >> > ... but this still doesn't guarantee that all precision
>      >> is kept.
>      >>
>      >> "Using control = c("all", "hexNumeric") comes closest to
>      >> making deparse() an inverse of parse(), as representing
>      >> double and complex numbers as decimals may well not be
>      >> exact. However, not all objects are deparse-able even
>      >> with this option. A warning will be issued if the
>      >> function recognizes that it is being asked to do the
>      >> impossible."
>      >>
>      >> >
>      >> > Maybe
>      >> >
>      >> > saveRDS(x,textConnection("out","w"),ascii=TRUE) >
>      >> identical(x,as.numeric(out[length(out)])) ## TRUE
>      >> >
>      >> > ?
>      >> >
>      >> >
>      >> >
>      >> >
>      >> > On 2020-02-29 2:42 a.m., Rui Barradas wrote: >> Hello,
>      >> >>
>      >> >> FAQ 7.31
>      >> >>
>      >> >> See also this StackOverflow post:
>      >> >>
>      >> >>
>      >> https://stackoverflow.com/questions/9508518/why-are-these-numbers-not-equal
>      >> >>
>      >> >> Hope this helps,
>      >> >>
>      >> >> Rui Barradas
>      >> >>
>      >> >> ?s 00:08 de 29/02/20, robin hankin escreveu: >>> My
>      >> interpretation of dput.Rd is that dput() gives an exact
>      >> ASCII form >>> of the internal representation of an R
>      >> object.  But:
>      >> >>>
>      >> >>> rhankin at cuttlefish:~ $ R --version >>> R version
>      >> 3.6.2 (2019-12-12) -- "Dark and Stormy Night" >>>
>      >> Copyright (C) 2019 The R Foundation for Statistical
>      >> Computing >>> Platform: x86_64-pc-linux-gnu (64-bit)
>      >> >>>
>      >> >>> [snip]
>      >> >>>
>      >> >>> rhankin at cuttlefish:~ $ R --vanilla --quiet >>>> x <-
>      >> sum(dbinom(0:20,20,0.35)) >>>> dput(x) >>> 1 >>>> x-1 >>>
>      >> [1] -4.440892e-16
>      >> >>>>
>      >> >>>> x==1 >>> [1] FALSE
>      >> >>>>
>      >> >>>
>      >> >>> So, dput(x) gives 1, but x is not equal to 1.  Can
>      >> anyone advise?
>      >> >>>
>      >> >>> ______________________________________________ >>>
>      >> R-devel at r-project.org mailing list >>>
>      >> https://stat.ethz.ch/mailman/listinfo/r-devel
>      >> >>>
>      >> >>
>      >> >> ______________________________________________ >>
>      >> R-devel at r-project.org mailing list >>
>      >> https://stat.ethz.ch/mailman/listinfo/r-devel
>      >> >
>      >> > ______________________________________________ >
>      >> R-devel at r-project.org mailing list >
>      >> https://stat.ethz.ch/mailman/listinfo/r-devel
>      >> >
>      >>
>      >> ______________________________________________
>      >> R-devel at r-project.org mailing list
>      >> https://stat.ethz.ch/mailman/listinfo/r-devel
> 
>      > ______________________________________________
>      > R-devel at r-project.org mailing list
>      > https://stat.ethz.ch/mailman/listinfo/r-devel
>


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Mar  2 15:36:51 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 2 Mar 2020 15:36:51 +0100
Subject: [Rd] dput()
In-Reply-To: <9ecdf3cd-c3af-9bee-dce1-ed0149d06462@gmail.com>
References: <CAHHjBM6zFE+UQrLeVT+gMD7R-jbHco+cygkAB+JR4P2cCik6bg@mail.gmail.com>
 <a0c1898c-2dac-cdd5-ff4b-5c91a30b065f@sapo.pt>
 <4d7acddc-485f-2de8-d802-e382b8f861be@gmail.com>
 <e3faa734-0db4-760d-ef1e-4f85e2382542@gmail.com>
 <CAHHjBM7uyFM+zZG=TFxmtahi1mKNnjsvbvhHnzv2xS2OpRVRgA@mail.gmail.com>
 <24156.49861.922526.979505@stat.math.ethz.ch>
 <9ecdf3cd-c3af-9bee-dce1-ed0149d06462@gmail.com>
Message-ID: <24157.6659.230987.276281@stat.math.ethz.ch>

>>>>> Duncan Murdoch 
>>>>>     on Mon, 2 Mar 2020 04:43:53 -0500 writes:

    > On 02/03/2020 3:24 a.m., Martin Maechler wrote:
    >>>>>>> robin hankin
    >>>>>>> on Sun, 1 Mar 2020 09:26:24 +1300 writes:
    >> 
    >> >  Thanks guys, I guess I should have referred to FAQ 7.31
    >> > (which I am indeed very familiar with) to avoid
    >> > misunderstanding.  I have always used dput() to clarify
    >> > 7.31-type issues.
    >> 
    >> > The description in ?dput implies [to me at any rate] that
    >> > there will be no floating-point roundoff in its output.  I
    >> > hadn't realised that 'deparsing' as discussed in dput.Rd
    >> > includes precision roundoff issues.
    >> 
    >> > I guess the question I should have asked is close to
    >> > Ben's: "How to force dput() to return an exact
    >> > representation of a floating point number?".  Duncan's
    >> > reply is the insight I was missing: exact decimal
    >> > representation of a double might not be possible (this had
    >> > not occurred to me).  Also, Duncan's suggestion of control
    >> > = c("all", "hexNumeric") looks good and I will experiment
    >> > with this.
    >> 
    >> This was not Duncan's suggestion but rather  Duncan's *citation* :
    >> Note that he used  " .... " !
    >> 
    >> The citation is from  ?deparseOpts  (to which one is pointed when reading ?dput),
    >> <rant>
    >> but unfortunately many people nowadays have stopped reading texts
    >> that are longer than a tweet... ;-)
    >> <rant/>
    >> ... and indeed,  ?dput  and  ?deparse  use    'control = "all"'
    >> instead of   c("all", "hexNumeric")  when talking about getting
    >> close to an inverse of parse()
    >> 
    >> As a matter of fact,  within R Core we had discussed this, many
    >> moons ago and actually had more or less decided to make "all"
    >> to *include* "digits17".
    >> 
    >> "digits17" is  "almost always" (I'm sorry I cannot quantify the
    >> 'almost' here) sufficient ... and is obviously conflicting with
    >> using hexadecimals instead of digits.
    >> 
    >> For R 4.0.0, I think we should finally consider doing something
    >> here :
    >> 
    >> 1) define "all" to include "digits17"
    >> so new "all" is current  c("all", "digits17")
    >> {in a way such that c("all", "hexNumeric") implicitly removes
    >> "digits17" (as it's in contradiction with "hexNumeric").
    >> 
    >> 2) add a new option  "AllHex" := c("all", "hexNumeric"),
    >> (Note the capital "A":  such that  match.arg()-like abbreviation
    >> of .deparseOpts() arguments remain possible and notably "all"
    >> does not suddenly become ambiguous)
    >> 
    >> Of course, '1)' is well possible without '2)',
    >> but '2)'  would allow to use  dput(*, control = "All")
    >> which is somewhat easier to readers & writers.

    > I think 1) is a good idea, and adding something with the meaning of 
    > AllHex seems useful:  but that's not a name I'd choose, since it's not 
    > consistent with the other names (which are almost all camelCase).  I'd 
    > choose something like "exact" (even though it isn't :-).

Thank you -- you are right;
all "AllHex" is too non-orthodox and hence a pain for people to
get right, remember, etc.

In light of  Steven Dirkse's reply (and other much older e-mails
by others I remember only vaguely), it seems we still need to
find an example (with numbers) where it is not exact  ...
which makes  "exact" even more appropriate.

Martin

    >> > On Sun, Mar 1, 2020 at 6:22 AM Duncan Murdoch
    >> > <murdoch.duncan at gmail.com> wrote:
    >> >>
    >> >> On 29/02/2020 4:19 a.m., Ben Bolker wrote:
    >> >> >
    >> >> > I think Robin knows about FAQ 7.31/floating point
    >> >> (author of > 'Brobdingnag', among other numerical
    >> >> packages).  I agree that this is > surprising (to me).
    >> >> >
    >> >> > To reframe this question: is there way to get an
    >> >> *exact* ASCII > representation of a numeric value (i.e.,
    >> >> guaranteeing the restored value > is identical() to the
    >> >> original) ?
    >> >> >
    >> >> > .deparseOpts has
    >> >> >
    >> >> > ?"digits17"?: Real and finite complex numbers are
    >> >> output using > format ?"%.17g"? which may give more
    >> >> precision than the > default (but the output will depend
    >> >> on the platform and there > may be loss of precision when
    >> >> read back).
    >> >> >
    >> >> > ... but this still doesn't guarantee that all precision
    >> >> is kept.
    >> >>
    >> >> "Using control = c("all", "hexNumeric") comes closest to
    >> >> making deparse() an inverse of parse(), as representing
    >> >> double and complex numbers as decimals may well not be
    >> >> exact. However, not all objects are deparse-able even
    >> >> with this option. A warning will be issued if the
    >> >> function recognizes that it is being asked to do the
    >> >> impossible."
    >> >>
    >> >> >
    >> >> > Maybe
    >> >> >
    >> >> > saveRDS(x,textConnection("out","w"),ascii=TRUE) >
    >> >> identical(x,as.numeric(out[length(out)])) ## TRUE
    >> >> >
    >> >> > ?
    >> >> >
    >> >> >
    >> >> >
    >> >> >
    >> >> > On 2020-02-29 2:42 a.m., Rui Barradas wrote: >> Hello,
    >> >> >>
    >> >> >> FAQ 7.31
    >> >> >>
    >> >> >> See also this StackOverflow post:
    >> >> >>
    >> >> >>
    >> >> https://stackoverflow.com/questions/9508518/why-are-these-numbers-not-equal
    >> >> >>
    >> >> >> Hope this helps,
    >> >> >>
    >> >> >> Rui Barradas
    >> >> >>
    >> >> >> ?s 00:08 de 29/02/20, robin hankin escreveu: >>> My
    >> >> interpretation of dput.Rd is that dput() gives an exact
    >> >> ASCII form >>> of the internal representation of an R
    >> >> object.  But:
    >> >> >>>
    >> >> >>> rhankin at cuttlefish:~ $ R --version >>> R version
    >> >> 3.6.2 (2019-12-12) -- "Dark and Stormy Night" >>>
    >> >> Copyright (C) 2019 The R Foundation for Statistical
    >> >> Computing >>> Platform: x86_64-pc-linux-gnu (64-bit)
    >> >> >>>
    >> >> >>> [snip]
    >> >> >>>
    >> >> >>> rhankin at cuttlefish:~ $ R --vanilla --quiet >>>> x <-
    >> >> sum(dbinom(0:20,20,0.35)) >>>> dput(x) >>> 1 >>>> x-1 >>>
    >> >> [1] -4.440892e-16
    >> >> >>>>
    >> >> >>>> x==1 >>> [1] FALSE
    >> >> >>>>
    >> >> >>>
    >> >> >>> So, dput(x) gives 1, but x is not equal to 1.  Can
    >> >> anyone advise?
    >> >> >>>

    >> > ______________________________________________
    >> > R-devel at r-project.org mailing list
    >> > https://stat.ethz.ch/mailman/listinfo/r-devel
    >>


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Mar  3 12:15:07 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 3 Mar 2020 12:15:07 +0100
Subject: [Rd] dput()
In-Reply-To: <24157.6659.230987.276281@stat.math.ethz.ch>
References: <CAHHjBM6zFE+UQrLeVT+gMD7R-jbHco+cygkAB+JR4P2cCik6bg@mail.gmail.com>
 <a0c1898c-2dac-cdd5-ff4b-5c91a30b065f@sapo.pt>
 <4d7acddc-485f-2de8-d802-e382b8f861be@gmail.com>
 <e3faa734-0db4-760d-ef1e-4f85e2382542@gmail.com>
 <CAHHjBM7uyFM+zZG=TFxmtahi1mKNnjsvbvhHnzv2xS2OpRVRgA@mail.gmail.com>
 <24156.49861.922526.979505@stat.math.ethz.ch>
 <9ecdf3cd-c3af-9bee-dce1-ed0149d06462@gmail.com>
 <24157.6659.230987.276281@stat.math.ethz.ch>
Message-ID: <24158.15419.403424.118423@stat.math.ethz.ch>

>>>>> Martin Maechler 
>>>>>     on Mon, 2 Mar 2020 15:36:51 +0100 writes:

>>>>> Duncan Murdoch 
>>>>>     on Mon, 2 Mar 2020 04:43:53 -0500 writes:

    >> On 02/03/2020 3:24 a.m., Martin Maechler wrote:
    >>>>>>>> robin hankin
    >>>>>>>> on Sun, 1 Mar 2020 09:26:24 +1300 writes:
    >>> 
    >>> >  Thanks guys, I guess I should have referred to FAQ 7.31
    >>> > (which I am indeed very familiar with) to avoid
    >>> > misunderstanding.  I have always used dput() to clarify
    >>> > 7.31-type issues.
    >>> 
    >>> > The description in ?dput implies [to me at any rate] that
    >>> > there will be no floating-point roundoff in its output.  I
    >>> > hadn't realised that 'deparsing' as discussed in dput.Rd
    >>> > includes precision roundoff issues.
    >>> 
    >>> > I guess the question I should have asked is close to
    >>> > Ben's: "How to force dput() to return an exact
    >>> > representation of a floating point number?".  Duncan's
    >>> > reply is the insight I was missing: exact decimal
    >>> > representation of a double might not be possible (this had
    >>> > not occurred to me).  Also, Duncan's suggestion of control
    >>> > = c("all", "hexNumeric") looks good and I will experiment
    >>> > with this.
    >>> 
    >>> This was not Duncan's suggestion but rather  Duncan's *citation* :
    >>> Note that he used  " .... " !
    >>> 
    >>> The citation is from  ?deparseOpts  (to which one is pointed when reading ?dput),
    >>> <rant>
    >>> but unfortunately many people nowadays have stopped reading texts
    >>> that are longer than a tweet... ;-)
    >>> <rant/>
    >>> ... and indeed,  ?dput  and  ?deparse  use    'control = "all"'
    >>> instead of   c("all", "hexNumeric")  when talking about getting
    >>> close to an inverse of parse()
    >>> 
    >>> As a matter of fact,  within R Core we had discussed this, many
    >>> moons ago and actually had more or less decided to make "all"
    >>> to *include* "digits17".
    >>> 
    >>> "digits17" is  "almost always" (I'm sorry I cannot quantify the
    >>> 'almost' here) sufficient ... and is obviously conflicting with
    >>> using hexadecimals instead of digits.
    >>> 
    >>> For R 4.0.0, I think we should finally consider doing something
    >>> here :
    >>> 
    >>> 1) define "all" to include "digits17"
    >>> so new "all" is current  c("all", "digits17")
    >>> {in a way such that c("all", "hexNumeric") implicitly removes
    >>> "digits17" (as it's in contradiction with "hexNumeric").
    >>> 
    >>> 2) add a new option  "AllHex" := c("all", "hexNumeric"),
    >>> (Note the capital "A":  such that  match.arg()-like abbreviation
    >>> of .deparseOpts() arguments remain possible and notably "all"
    >>> does not suddenly become ambiguous)
    >>> 
    >>> Of course, '1)' is well possible without '2)',
    >>> but '2)'  would allow to use  dput(*, control = "All")
    >>> which is somewhat easier to readers & writers.

    >> I think 1) is a good idea, and adding something with the meaning of 
    >> AllHex seems useful:  but that's not a name I'd choose, since it's not 
    >> consistent with the other names (which are almost all camelCase).  I'd 
    >> choose something like "exact" (even though it isn't :-).

    > Thank you -- you are right;
    > all "AllHex" is too non-orthodox and hence a pain for people to
    > get right, remember, etc.

    > In light of  Steven Dirkse's reply (and other much older e-mails
    > by others I remember only vaguely), it seems we still need to
    > find an example (with numbers) where it is not exact  ...
    > which makes  "exact" even more appropriate.

    > Martin

I've now committed these two proposals, using "exact" -- to
R-devel (i.e., for R 4.0.0).

(wanted in one svn commit, but accidentally needed 2: svn r77891 + ...2).

Martin


    >>> > On Sun, Mar 1, 2020 at 6:22 AM Duncan Murdoch
    >>> > <murdoch.duncan at gmail.com> wrote:
    >>> >>
    >>> >> On 29/02/2020 4:19 a.m., Ben Bolker wrote:
    >>> >> >
    >>> >> > I think Robin knows about FAQ 7.31/floating point
    >>> >> (author of > 'Brobdingnag', among other numerical
    >>> >> packages).  I agree that this is > surprising (to me).
    >>> >> >
    >>> >> > To reframe this question: is there way to get an
    >>> >> *exact* ASCII > representation of a numeric value (i.e.,
    >>> >> guaranteeing the restored value > is identical() to the
    >>> >> original) ?
    >>> >> >
    >>> >> > .deparseOpts has
    >>> >> >
    >>> >> > ?"digits17"?: Real and finite complex numbers are
    >>> >> output using > format ?"%.17g"? which may give more
    >>> >> precision than the > default (but the output will depend
    >>> >> on the platform and there > may be loss of precision when
    >>> >> read back).
    >>> >> >
    >>> >> > ... but this still doesn't guarantee that all precision
    >>> >> is kept.
    >>> >>
    >>> >> "Using control = c("all", "hexNumeric") comes closest to
    >>> >> making deparse() an inverse of parse(), as representing
    >>> >> double and complex numbers as decimals may well not be
    >>> >> exact. However, not all objects are deparse-able even
    >>> >> with this option. A warning will be issued if the
    >>> >> function recognizes that it is being asked to do the
    >>> >> impossible."
    >>> >>
    >>> >> >
    >>> >> > Maybe
    >>> >> >
    >>> >> > saveRDS(x,textConnection("out","w"),ascii=TRUE) >
    >>> >> identical(x,as.numeric(out[length(out)])) ## TRUE
    >>> >> >
    >>> >> > ?
    >>> >> >
    >>> >> >
    >>> >> >
    >>> >> >
    >>> >> > On 2020-02-29 2:42 a.m., Rui Barradas wrote: >> Hello,
    >>> >> >>
    >>> >> >> FAQ 7.31
    >>> >> >>
    >>> >> >> See also this StackOverflow post:
    >>> >> >>
    >>> >> >>
    >>> >> https://stackoverflow.com/questions/9508518/why-are-these-numbers-not-equal
    >>> >> >>
    >>> >> >> Hope this helps,
    >>> >> >>
    >>> >> >> Rui Barradas
    >>> >> >>
    >>> >> >> ?s 00:08 de 29/02/20, robin hankin escreveu: >>> My
    >>> >> interpretation of dput.Rd is that dput() gives an exact
    >>> >> ASCII form >>> of the internal representation of an R
    >>> >> object.  But:
    >>> >> >>>
    >>> >> >>> rhankin at cuttlefish:~ $ R --version >>> R version
    >>> >> 3.6.2 (2019-12-12) -- "Dark and Stormy Night" >>>
    >>> >> Copyright (C) 2019 The R Foundation for Statistical
    >>> >> Computing >>> Platform: x86_64-pc-linux-gnu (64-bit)
    >>> >> >>>
    >>> >> >>> [snip]
    >>> >> >>>
    >>> >> >>> rhankin at cuttlefish:~ $ R --vanilla --quiet >>>> x <-
    >>> >> sum(dbinom(0:20,20,0.35)) >>>> dput(x) >>> 1 >>>> x-1 >>>
    >>> >> [1] -4.440892e-16
    >>> >> >>>>
    >>> >> >>>> x==1 >>> [1] FALSE
    >>> >> >>>>
    >>> >> >>>
    >>> >> >>> So, dput(x) gives 1, but x is not equal to 1.  Can
    >>> >> anyone advise?


From therne@u @end|ng |rom m@yo@edu  Tue Mar  3 16:00:08 2020
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Tue, 03 Mar 2020 09:00:08 -0600
Subject: [Rd] survival bug?
Message-ID: <28fddd$dc0bti@ironport10.mayo.edu>

My latest submission of survival3.1-10 to CRAN fails? a check, but only on windows, which 
I don't use.
How do I track this down?
The test in question works fine on my Linux box.

Terry



	[[alternative HTML version deleted]]


From g@bembecker @end|ng |rom gm@||@com  Tue Mar  3 22:02:51 2020
From: g@bembecker @end|ng |rom gm@||@com (Gabriel Becker)
Date: Tue, 3 Mar 2020 13:02:51 -0800
Subject: [Rd] survival bug?
In-Reply-To: <28fddd$dc0bti@ironport10.mayo.edu>
References: <28fddd$dc0bti@ironport10.mayo.edu>
Message-ID: <CAD4oTHGguVjTQf4ishooS=T6y0HwLH799gdu7hJavB+Y9BHLgg@mail.gmail.com>

Hi Terry,

http://win-builder.r-project.org/ and the rhub build service (which can be
invoked by the rhub package) allow on demand checks in windows
environments, though for active debugging the iteration time can be quite
painful.

If you have access, e.g., through your employer, to a windows license you
should also be able to do use VMWare or VirtualBox (I can never remember
which one I like more) to run windows and test that way. This will have
some start up cost in effort but allows active testing and iteration.

Hope that helps,
~G

On Tue, Mar 3, 2020 at 7:00 AM Therneau, Terry M., Ph.D. via R-devel <
r-devel at r-project.org> wrote:

> My latest submission of survival3.1-10 to CRAN fails  a check, but only on
> windows, which
> I don't use.
> How do I track this down?
> The test in question works fine on my Linux box.
>
> Terry
>
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From bbo|ker @end|ng |rom gm@||@com  Tue Mar  3 22:15:42 2020
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Tue, 3 Mar 2020 16:15:42 -0500
Subject: [Rd] survival bug?
In-Reply-To: <CAD4oTHGguVjTQf4ishooS=T6y0HwLH799gdu7hJavB+Y9BHLgg@mail.gmail.com>
References: <28fddd$dc0bti@ironport10.mayo.edu>
 <CAD4oTHGguVjTQf4ishooS=T6y0HwLH799gdu7hJavB+Y9BHLgg@mail.gmail.com>
Message-ID: <4e00362f-0c1e-e8fd-842c-8c1d27c8b1d3@gmail.com>


  Microsoft offers fully-provisioned but time-limited developer images
for Windows 10 (I think they last for 3 months) for most major VM
platforms (including VirtualBox, which is the one I currently use).
There would certainly be a start-up cost in effort, but probably not any
financial cost.

   cheers
    Ben Bolker

On 2020-03-03 4:02 p.m., Gabriel Becker wrote:
> Hi Terry,
> 
> http://win-builder.r-project.org/ and the rhub build service (which can be
> invoked by the rhub package) allow on demand checks in windows
> environments, though for active debugging the iteration time can be quite
> painful.
> 
> If you have access, e.g., through your employer, to a windows license you
> should also be able to do use VMWare or VirtualBox (I can never remember
> which one I like more) to run windows and test that way. This will have
> some start up cost in effort but allows active testing and iteration.
> 
> Hope that helps,
> ~G
> 
> On Tue, Mar 3, 2020 at 7:00 AM Therneau, Terry M., Ph.D. via R-devel <
> r-devel at r-project.org> wrote:
> 
>> My latest submission of survival3.1-10 to CRAN fails  a check, but only on
>> windows, which
>> I don't use.
>> How do I track this down?
>> The test in question works fine on my Linux box.
>>
>> Terry
>>
>>
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>


From @|mon@urb@nek @end|ng |rom R-project@org  Tue Mar  3 22:48:10 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 4 Mar 2020 10:48:10 +1300
Subject: [Rd] survival bug?
In-Reply-To: <CAD4oTHGguVjTQf4ishooS=T6y0HwLH799gdu7hJavB+Y9BHLgg@mail.gmail.com>
References: <28fddd$dc0bti@ironport10.mayo.edu>
 <CAD4oTHGguVjTQf4ishooS=T6y0HwLH799gdu7hJavB+Y9BHLgg@mail.gmail.com>
Message-ID: <F249D41C-E1D0-4403-9175-BAD88A9386C9@R-project.org>

FWIW Microsoft provides evaluation version of Windows that can be easily installed using VirtualBox and runs for 180 days. One that I believe is the closest to the CRAN setup (Windows 2008) is:

https://www.microsoft.com/en-nz/download/details.aspx?id=11093

You just tell VB to setup a Windows 2008 VM then, select the downloaded ISO as CD-ROM drive and install from it. The installation is fairly easy and then you only have to download Rtools.exe and R from CRAN. I recommend picking a custom location for R that is painless to type, e.g C:\R. To make iteration easier, I also use a shared mount from my machine (e.g. ~/packages -> E:) so I can edit and build the package on my Mac and then just run c:\R\bin\R CMD INSTALL mypackage_0.1-0.tar.gz  in the Windows VM is the same directory (you need to install Guest Additions [see the VB menu] to enable shared directories - alternatively you can also just use SMB shares if you want).

Cheers,
Simon



> On 4/03/2020, at 10:02 AM, Gabriel Becker <gabembecker at gmail.com> wrote:
> 
> Hi Terry,
> 
> http://win-builder.r-project.org/ and the rhub build service (which can be
> invoked by the rhub package) allow on demand checks in windows
> environments, though for active debugging the iteration time can be quite
> painful.
> 
> If you have access, e.g., through your employer, to a windows license you
> should also be able to do use VMWare or VirtualBox (I can never remember
> which one I like more) to run windows and test that way. This will have
> some start up cost in effort but allows active testing and iteration.
> 
> Hope that helps,
> ~G
> 
> On Tue, Mar 3, 2020 at 7:00 AM Therneau, Terry M., Ph.D. via R-devel <
> r-devel at r-project.org> wrote:
> 
>> My latest submission of survival3.1-10 to CRAN fails  a check, but only on
>> windows, which
>> I don't use.
>> How do I track this down?
>> The test in question works fine on my Linux box.
>> 
>> Terry
>> 
>> 
>> 
>>        [[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From therne@u @end|ng |rom m@yo@edu  Thu Mar  5 14:54:32 2020
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Thu, 05 Mar 2020 07:54:32 -0600
Subject: [Rd] rounding change
Message-ID: <28fddd$dcg306@ironport10.mayo.edu>

This is a small heads up for package maintainers.?? Under the more recent R-devel, R CMD 
check turned up some changes in the *.out files.?? The simple demonstration is to type? 
"round(51/80, 3)", which gives .638 under the old and .637 under the new.?? (One of my 
coxph test cases has a concordance of exactly 51/80).

In this particular case 51/80 is exactly .63750000, but that value does not have an exact 
representation in base 2.? The line below would argue that the new version is correct, at 
least with respect to the internal representation.

 > print(51/80, digits = 20)
[1] 0.63749999999999995559

This is not a bug or problem, it just means that whichever version I put into my 
survival/tests/book6.Rout.save file, one of R-devel or R-current will flag an issue.



	[[alternative HTML version deleted]]


From therne@u @end|ng |rom m@yo@edu  Thu Mar  5 17:39:08 2020
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Thu, 05 Mar 2020 10:39:08 -0600
Subject: [Rd] survival bug? - solved
In-Reply-To: <F249D41C-E1D0-4403-9175-BAD88A9386C9@R-project.org>
References: <28fddd$dc0bti@ironport10.mayo.edu>
 <CAD4oTHGguVjTQf4ishooS=T6y0HwLH799gdu7hJavB+Y9BHLgg@mail.gmail.com>
 <F249D41C-E1D0-4403-9175-BAD88A9386C9@R-project.org>
Message-ID: <28fddd$dci1d4@ironport10.mayo.edu>

 ?I ended up finding the issue by a focused code review.

Once in the past, I had a version that would fail under one architecture but not another, 
in that case some help from Brian Ripley pointed me to the offending line of C code.?? 
That line read, but did not write, at an invalid memory location.?? Starting with the 
question of "what C routines have I added or modified most recently" along with where the 
fault appeared to occur in my test suite, I started reading C code and found one.?? 
Revised code passes tests on the winbuilder site.

For the curious, I had a line asking "is this patient id different than the last patient 
id" in the C routine underneath survcheck(); I'm making sure that patients don't go 
backwards in time. Essentially
 ?for (i=0; i< n; i) {
 ? ?? if (id[i] != id[i-1] )? { ...}

It is still a surprise to me that just LOOKING at this out of range element would cause a 
failure,? [i-1] never appears on the left hand side of any expressions in the ... chunk 
above. Nevertheless, it was an error. ? Que sera sera

A strong thanks to those who gave solid suggestions for bringing up a local copy of Windows.

Terry T

>>> My latest submission of survival3.1-10 to CRAN fails  a check, but only on
>>> windows, which
>>> I don't use.
>>> How do I track this down?
>>> The test in question works fine on my Linux box.
>>>
>>> Terry
>>>
>>>
>>>
>>>         [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>> 	[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>


	[[alternative HTML version deleted]]


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Thu Mar  5 21:41:24 2020
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Thu, 5 Mar 2020 20:41:24 +0000 (UTC)
Subject: [Rd] survival bug? - solved
In-Reply-To: <28fddd$dci1d4@ironport10.mayo.edu>
References: <28fddd$dc0bti@ironport10.mayo.edu>
 <CAD4oTHGguVjTQf4ishooS=T6y0HwLH799gdu7hJavB+Y9BHLgg@mail.gmail.com>
 <F249D41C-E1D0-4403-9175-BAD88A9386C9@R-project.org>
 <28fddd$dci1d4@ironport10.mayo.edu>
Message-ID: <987233612.5090612.1583440884314@mail.yahoo.com>

I _think_ the relevant section of the C standard is 6.5.6 Additive Operators Par 8, excerpted here:

> If both the pointer operand and the result point to elements 
> of the same array object, or one past the last element of the 
> array object, the evaluation shall not produce an overflow; 
> otherwise, **the behavior is undefined**.

This is from the [C11 draft][1], though I imagine has been part of the standard for a while.? So by doing id[-1], in this case the pointer operand is id, and the result is one element _before_ the array object, thus undefined behavior which is bad news.

I'm not an expert in these matters though.

[1]: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf


On Thursday, March 5, 2020, 11:39:38 AM EST, Therneau, Terry M., Ph.D. via R-devel <r-devel at r-project.org> wrote: 





?I ended up finding the issue by a focused code review.

Once in the past, I had a version that would fail under one architecture but not another, 
in that case some help from Brian Ripley pointed me to the offending line of C code.?? 
That line read, but did not write, at an invalid memory location.?? Starting with the 
question of "what C routines have I added or modified most recently" along with where the 
fault appeared to occur in my test suite, I started reading C code and found one.?? 
Revised code passes tests on the winbuilder site.

For the curious, I had a line asking "is this patient id different than the last patient 
id" in the C routine underneath survcheck(); I'm making sure that patients don't go 
backwards in time. Essentially
?for (i=0; i< n; i) {
? ?? if (id[i] != id[i-1] )? { ...}

It is still a surprise to me that just LOOKING at this out of range element would cause a 
failure,? [i-1] never appears on the left hand side of any expressions in the ... chunk 
above. Nevertheless, it was an error. ? Que sera sera

A strong thanks to those who gave solid suggestions for bringing up a local copy of Windows.

Terry T

>>> My latest submission of survival3.1-10 to CRAN fails? a check, but only on
>>> windows, which
>>> I don't use.
>>> How do I track this down?
>>> The test in question works fine on my Linux box.
>>>
>>> Terry
>>>
>>>
>>>
>>>? ? ? ? [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel

>>>
>> ??? [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>


??? [[alternative HTML version deleted]]

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Thu Mar  5 23:18:33 2020
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Thu, 5 Mar 2020 22:18:33 +0000 (UTC)
Subject: [Rd] findInterval Documentation Suggestion
References: <1675788134.5157075.1583446713973.ref@mail.yahoo.com>
Message-ID: <1675788134.5157075.1583446713973@mail.yahoo.com>

I've found over time that R documentation that comes off as terse at
first blush is usually revealed to be precise, concise, and complete
on close reading.? I'm sure this is also true of `?findInterval`, but
for whatever reason my brain simply refuses to extract meaning from it.

Part of the problem may be that we interact with the function via a
compressed form of the bounds of the intervals (only specify left bounds
for 2nd interval onwards), but the semantics are described mostly in
terms of the intervals themselves.? This requires indirections to map
the parameters to the concepts.

An alternative is to first describe what the function does directly in
terms of its inputs, and subsequent relate that to the intervals.? If I
understand correctly (in default mode) the function can be described as:

???? Given a vector of non-decreasing values 'vec', for each value in
???? 'x' return the highest position in 'vec' that corresponds to a
???? value less than or equal to that 'x' value, or zero if none are.
???? Equivalently, if the values in 'vec' are taken to be the closed
???? left-bounds of contiguous half-open intervals, return which of
???? those intervals each value of 'x' lies in.

Compared to the original:

???? Given a vector of non-decreasing breakpoints in ?vec?, find the
???? interval containing each element of ?x?; i.e., if ?i <-
???? findInterval(x,v)?, for each index ?j? in ?x? v[i[j]] <= x[j] <
???? v[i[j] + 1] where v[0] := - Inf, v[N+1] := + Inf, and ?N <-
???? length(v)?.? At the two boundaries, the returned index may differ
???? by 1, depending on the optional arguments ?rightmost.closed? and
???? ?all.inside?.

Obviously you would be right to question whether someone who claims not
to understand the documentation should venture to re-write it.
Nonetheless I attach a proposed alternate version in the hopes that
someone who clearly understand the original might use or adapt parts of it to
make `?findInterval` more accessible to those comprehension-challenged
like me.


Best,

Brodie

From brod|e@g@@|@m @end|ng |rom y@hoo@com  Thu Mar  5 23:24:49 2020
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Thu, 5 Mar 2020 22:24:49 +0000 (UTC)
Subject: [Rd] findInterval Documentation Suggestion
In-Reply-To: <1675788134.5157075.1583446713973@mail.yahoo.com>
References: <1675788134.5157075.1583446713973.ref@mail.yahoo.com>
 <1675788134.5157075.1583446713973@mail.yahoo.com>
Message-ID: <1911691415.5169012.1583447089124@mail.yahoo.com>

Trying the attachment as .txt instead of Rd.


On Thursday, March 5, 2020, 5:20:25 PM EST, brodie gaslam via R-devel <r-devel at r-project.org> wrote: 

<snip>

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: findInterval2.txt
URL: <https://stat.ethz.ch/pipermail/r-devel/attachments/20200305/c3b22797/attachment.txt>

From tom@@@k@||ber@ @end|ng |rom gm@||@com  Fri Mar  6 09:40:57 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Fri, 6 Mar 2020 09:40:57 +0100
Subject: [Rd] survival bug? - solved
In-Reply-To: <28fddd$dci1d4@ironport10.mayo.edu>
References: <28fddd$dc0bti@ironport10.mayo.edu>
 <CAD4oTHGguVjTQf4ishooS=T6y0HwLH799gdu7hJavB+Y9BHLgg@mail.gmail.com>
 <F249D41C-E1D0-4403-9175-BAD88A9386C9@R-project.org>
 <28fddd$dci1d4@ironport10.mayo.edu>
Message-ID: <a3dda934-fd30-c133-fd3d-e9392b98880a@gmail.com>

On 3/5/20 5:39 PM, Therneau, Terry M., Ph.D. via R-devel wrote:
>   ?I ended up finding the issue by a focused code review.
>
> Once in the past, I had a version that would fail under one architecture but not another,
> in that case some help from Brian Ripley pointed me to the offending line of C code.
> That line read, but did not write, at an invalid memory location.?? Starting with the
> question of "what C routines have I added or modified most recently" along with where the
> fault appeared to occur in my test suite, I started reading C code and found one.
> Revised code passes tests on the winbuilder site.
>
> For the curious, I had a line asking "is this patient id different than the last patient
> id" in the C routine underneath survcheck(); I'm making sure that patients don't go
> backwards in time. Essentially
>   ?for (i=0; i< n; i) {
>   ? ?? if (id[i] != id[i-1] )? { ...}
>
> It is still a surprise to me that just LOOKING at this out of range element would cause a
> failure,? [i-1] never appears on the left hand side of any expressions in the ... chunk
> above. Nevertheless, it was an error. ? Que sera sera

In principle out of bounds access to an array, even reading, may not 
only return any value that may be there, but cause a memory protection 
failure (the memory there is not accessible) or have some other impact. 
Reads from memory can also have side effects (other than crashing your 
process).

Tomas

>
> A strong thanks to those who gave solid suggestions for bringing up a local copy of Windows.
>
> Terry T
>
>>>> My latest submission of survival3.1-10 to CRAN fails  a check, but only on
>>>> windows, which
>>>> I don't use.
>>>> How do I track this down?
>>>> The test in question works fine on my Linux box.
>>>>
>>>> Terry
>>>>
>>>>
>>>>
>>>>          [[alternative HTML version deleted]]
>>>>
>>>> ______________________________________________
>>>> R-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>> 	[[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Mar  6 14:56:51 2020
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 6 Mar 2020 14:56:51 +0100
Subject: [Rd] findInterval Documentation Suggestion
In-Reply-To: <1675788134.5157075.1583446713973@mail.yahoo.com>
References: <1675788134.5157075.1583446713973.ref@mail.yahoo.com>
 <1675788134.5157075.1583446713973@mail.yahoo.com>
Message-ID: <24162.22179.40324.212614@stat.math.ethz.ch>

>>>>> brodie gaslam via R-devel 
>>>>>     on Thu, 5 Mar 2020 22:18:33 +0000 (UTC) writes:

    > I've found over time that R documentation that comes off as terse at
    > first blush is usually revealed to be precise, concise, and complete
    > on close reading.? I'm sure this is also true of `?findInterval`, but
    > for whatever reason my brain simply refuses to extract meaning from it.

    > Part of the problem may be that we interact with the function via a
    > compressed form of the bounds of the intervals (only specify left bounds
    > for 2nd interval onwards), but the semantics are described mostly in
    > terms of the intervals themselves.? This requires indirections to map
    > the parameters to the concepts.

    > An alternative is to first describe what the function does directly in
    > terms of its inputs, and subsequent relate that to the intervals.? If I
    > understand correctly (in default mode) the function can be described as:

    > ???? Given a vector of non-decreasing values 'vec', for each value in
    > ???? 'x' return the highest position in 'vec' that corresponds to a
    > ???? value less than or equal to that 'x' value, or zero if none are.
    > ???? Equivalently, if the values in 'vec' are taken to be the closed
    > ???? left-bounds of contiguous half-open intervals, return which of
    > ???? those intervals each value of 'x' lies in.

    > Compared to the original:

    > ???? Given a vector of non-decreasing breakpoints in ?vec?, find the
    > ???? interval containing each element of ?x?; i.e., if ?i <-
    > ???? findInterval(x,v)?, for each index ?j? in ?x? v[i[j]] <= x[j] <
    > ???? v[i[j] + 1] where v[0] := - Inf, v[N+1] := + Inf, and ?N <-
    > ???? length(v)?.? At the two boundaries, the returned index may differ
    > ???? by 1, depending on the optional arguments ?rightmost.closed? and
    > ???? ?all.inside?.

Note that the  * -> LaTex -> PDF rendered version looks a bit
nicer.

  See lower part of page 206 of (the 33nn pages of)
  https://cran.r-project.org/doc/manuals/r-release/fullrefman.pdf
  
I wrote the function and that help page originally.  Of
course, I'm interested to hear how to improve the documentation.
However, the help pages make up the "Reference Manual", and so
-- as you mention initially -- should be precise and (mostly)
comprehensive.

For that reason, replacing the well defined precise
inequality-based definition by *much* less precise English prosa
is out of the question. 

Extending that very long first sentence
    "Given .... .... .... length(v)'.
by adding some helper words or other means may be fine and
indeed an improvement, .. so I'm happy for another try.

Martin

    > Obviously you would be right to question whether someone who claims not
    > to understand the documentation should venture to re-write it.
    > Nonetheless I attach a proposed alternate version in the hopes that
    > someone who clearly understand the original might use or adapt parts of it to
    > make `?findInterval` more accessible to those comprehension-challenged
    > like me.


    > Best,
    > Brodie
    > ______________________________________________
    > R-devel at r-project.org mailing list
    > https://stat.ethz.ch/mailman/listinfo/r-devel


From brod|e@g@@|@m @end|ng |rom y@hoo@com  Fri Mar  6 15:17:37 2020
From: brod|e@g@@|@m @end|ng |rom y@hoo@com (brodie gaslam)
Date: Fri, 6 Mar 2020 14:17:37 +0000 (UTC)
Subject: [Rd] findInterval Documentation Suggestion
In-Reply-To: <24162.22179.40324.212614@stat.math.ethz.ch>
References: <1675788134.5157075.1583446713973.ref@mail.yahoo.com>
 <1675788134.5157075.1583446713973@mail.yahoo.com>
 <24162.22179.40324.212614@stat.math.ethz.ch>
Message-ID: <1206418066.5458182.1583504257233@mail.yahoo.com>

 > On Friday, March 6, 2020, 8:56:54 AM EST, Martin Maechler <maechler at stat.math.ethz.ch> wrote: 

> Note that the? * -> LaTex -> PDF rendered version looks a bitnicer.

Ah yes, that does indeed look quite a bit nicer.

> I wrote the function and that help page originally.

And thank you for doing so. It is a wonderful function.
(0 sarcasm here).

> For that reason, replacing the well defined precise
> inequality-based definition by *much* less precise English prosa
> is out of the question.

I figured that might be an issue.? Would you be open to 
providing a prose translation, but putting that in the 
details? If so, it would be useful to get feedback on 
what parts of the prose I proposed are imprecise enough 
to be incorrect/incomplete for some corner case.

Finally, would it make sense to move this discussion to
bugzilla?

Best,

Brodie.


From m@rc_@chw@rtz @end|ng |rom me@com  Fri Mar  6 15:52:29 2020
From: m@rc_@chw@rtz @end|ng |rom me@com (Marc Schwartz)
Date: Fri, 6 Mar 2020 09:52:29 -0500
Subject: [Rd] findInterval Documentation Suggestion
In-Reply-To: <1206418066.5458182.1583504257233@mail.yahoo.com>
References: <1675788134.5157075.1583446713973.ref@mail.yahoo.com>
 <1675788134.5157075.1583446713973@mail.yahoo.com>
 <24162.22179.40324.212614@stat.math.ethz.ch>
 <1206418066.5458182.1583504257233@mail.yahoo.com>
Message-ID: <2BA47922-7178-4869-A494-B709CB97C3CF@me.com>


> On Mar 6, 2020, at 9:17 AM, brodie gaslam via R-devel <r-devel at r-project.org> wrote:
> 
>> On Friday, March 6, 2020, 8:56:54 AM EST, Martin Maechler <maechler at stat.math.ethz.ch> wrote: 
> 
>> Note that the  * -> LaTex -> PDF rendered version looks a bitnicer.
> 
> Ah yes, that does indeed look quite a bit nicer.
> 
>> I wrote the function and that help page originally.
> 
> And thank you for doing so. It is a wonderful function.
> (0 sarcasm here).
> 
>> For that reason, replacing the well defined precise
>> inequality-based definition by *much* less precise English prosa
>> is out of the question.
> 
> I figured that might be an issue.  Would you be open to 
> providing a prose translation, but putting that in the 
> details? If so, it would be useful to get feedback on 
> what parts of the prose I proposed are imprecise enough 
> to be incorrect/incomplete for some corner case.
> 
> Finally, would it make sense to move this discussion to
> bugzilla?
> 
> Best,
> 
> Brodie.


Hi,

Just to put forth an alternative to modifying the existing, precise content that Martin wrote, in many cases, that content can be reasonably supplemented by the addition of specific examples and perhaps concise comments, that demonstrate what, otherwise, may be surprising behavior.

If Brodie can construct one or more such examples that might provide additional insights, then perhaps they can be considered for inclusion in the help file, such that meeting both goals of not compromising the language that Martin has contributed, while expanding comprehension, can be achieved.

Regards,

Marc Schwartz


From @zwj|08 @end|ng |rom gm@||@com  Tue Mar 10 08:22:13 2020
From: @zwj|08 @end|ng |rom gm@||@com (Wang Jiefei)
Date: Tue, 10 Mar 2020 03:22:13 -0400
Subject: [Rd] R CMD INSTALL cannot recognize full path on Windows
Message-ID: <CAGiFhPM1C_J_LGUWVHc-jb8DpbVqt_c9ZwMjCafT0ZLozsbe0Q@mail.gmail.com>

Hi all,

Here is a bug(or feature?) that exists at least from R 2020-02-24
r77852 to 2020-03-09 r77919 on Window. Consider this example makefile in a
package
```






*test1=$(shell echo 'runif(3)'|R --vanilla --slave)test2=$(shell echo
'runif(3)'|"C:/Program Files/R/R-devel/bin/R" --vanilla
--slave)test3=$(shell echo 'runif(3)'|"C:/PROGRA~1/R/R-devel/bin/R"
--vanilla --slave)$(info test1 is $(test1))$(info test2 is $(test2))$(info
test3 is $(test3))*
```

I have no problem running the file using GUN make or installing the package
on R 3.6, both give the same result.
```
*C:\Rtools\mingw_64\bin\mingw32-make.exe  *



*test1 is [1] 0.3427626 0.8027041 0.5611914test2 is [1] 0.9904205 0.3922129
0.5970083test3 is [1] 0.3469528 0.1993838 0.8434841mingw32-make: *** No
targets.  Stop.*
*```*

However, on the devel version of R, it cannot recognize both the full and
short path of R and gives an error
```




*test1 is  [1] 0.42686376 0.84126831 0.09538047The filename, directory
name, or volume label syntax is incorrect.test2 isThe filename, directory
name, or volume label syntax is incorrect.test3 is*
```

I found this issue because my package needs to call R functions in the
makefile. The code is similar to:
```
*  myvar = $(shell echo 'runif(3)'|"${R_HOME}/bin/R" --vanilla --slave)*
```
Since *R_HOME *is set to *C:/PROGRA~1/R/R-devel/*, this will result in the
same error as I mentioned above. I do not know whether this is intentional.
If so, what is the correct way to call R function in a makefile?

Best,
Jiefei

	[[alternative HTML version deleted]]


From @zwj|08 @end|ng |rom gm@||@com  Tue Mar 10 10:15:33 2020
From: @zwj|08 @end|ng |rom gm@||@com (Wang Jiefei)
Date: Tue, 10 Mar 2020 05:15:33 -0400
Subject: [Rd] R CMD INSTALL cannot recognize full path on Windows
In-Reply-To: <CAGiFhPOutqdxQ+is13-bFGx93f531O28zb20kPDsD1AdMn9_TA@mail.gmail.com>
References: <CAGiFhPM1C_J_LGUWVHc-jb8DpbVqt_c9ZwMjCafT0ZLozsbe0Q@mail.gmail.com>
 <b372a694-da0b-e16a-4798-7978c78b6bd5@gmail.com>
 <CAGiFhPOutqdxQ+is13-bFGx93f531O28zb20kPDsD1AdMn9_TA@mail.gmail.com>
Message-ID: <CAGiFhPPWY64mPjett5aZ5EdRwAkP2TBJn42d9G4iCyLsq_3g+g@mail.gmail.com>

  Oops, I think both of us forget to cite the r-devel channel.

Best,
Jiefei

On Tue, Mar 10, 2020 at 5:13 AM Wang Jiefei <szwjf08 at gmail.com> wrote:

> Thanks for your quick response, Tomas.
>
> Yes, this is a path issue, I think the problem is related to R, not the
> Rtools make. I built an example package for reproducing the problem:
> https://github.com/Jiefei-Wang/example
>
> Here is the version of my R and Rtools:
> The release R version:
> R version 3.6.2 (2019-12-12)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 18362)
>
> The devel R version:
> R Under development (unstable) (2020-03-09 r77919)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 10 x64 (build 18362)
>
> Rtools version 3.5.0.4
>
> Things become interesting after I did more tests. I originally thought
> this might be only related to the devel R, but it seems like the released
> version is also affected. Here is a summary of my test results using the
> example package:
>
> 1. command-line Rtools make: Success
> 2. command-line R CMD INSTALL: Failed on both R3.6.2 and R4.0
> 3. Rstudio install button: Success on R3.6.2 but failed on R4.0
> 4. Rstudio running devtool::install: Success on both
>
> Now the problem becomes more intricate. I have no idea which one goes
> wrong. Here are the details of my test results, I hope it can be helpful:
>
> *Command line:*
> 1. "C:\Rtools\mingw_64\bin\mingw32-make.exe" -f example-master/src/Makevars
> test1 is [1] 0.2039269 0.1454402 0.1578401
> test2 is [1] 0.1919521 0.9257183 0.2130247
> test3 is [1] 0.06255174 0.27555363 0.72737111
> mingw32-make: *** No targets.  Stop.
>
> 2. "C:\Program Files\R\R-3.6.2\bin\R" CMD INSTALL testPackage_1.0.tar.gz
> *** arch - x64
> test1 is [1] 0.1584299 0.9338829 0.9528810
> The filename, directory name, or volume label syntax is incorrect.
> test2 is
> The filename, directory name, or volume label syntax is incorrect.
> test3 is
>
>   3. "C:\Program Files\R\R-devel\bin\R" CMD INSTALL testPackage_1.0.tar.gz
> *** arch - x64
> test1 is [1] 0.2668522 0.9246174 0.0184601
> The filename, directory name, or volume label syntax is incorrect.
> test2 is
> The filename, directory name, or volume label syntax is incorrect.
> test3 is
>
> *R studio:*
> 1. R3.6:  Clicking the install button
> ==> Rcmd.exe INSTALL --no-multiarch --with-keep.source example-master
> * installing to library 'C:/Users/wangj/Documents/R/win-library/3.6'
> * installing *source* package 'testPackage' ...
> ** using staged installation
> ** libs
> test1 is [1] 0.1583112 0.6631700 0.2265564
> test2 is [1] 0.6999799 0.5205237 0.8264029
> test3 is [1] 0.3591798 0.1767392 0.2869383
>
> 2.  R4.0: Clicking the install button
> Rcmd.exe INSTALL --no-multiarch --with-keep.source example-master
> * installing to library 'C:/Program Files/R/R-devel/library'
> * installing *source* package 'testPackage' ...
> ** using staged installation
> ** libs
> test1 is [1] 0.2091070 0.5411138 0.1051517
> The filename, directory name, or volume label syntax is incorrect.
> test2 is
> The filename, directory name, or volume label syntax is incorrect.
> test3 is
>
> 3. R3.6:  devtools::load_all(".")
> devtools::load_all(".")
> Loading testPackage
> Re-compiling testPackage
> -  installing *source* package 'testPackage' ... (364ms)
>    ** using staged installation
>    ** libs
>    test1 is [1] 0.93251741 0.03975758 0.57824150
>    test2 is [1] 0.8681301 0.4801464 0.9112827
>    test3 is [1] 0.430470791 0.008393394 0.341484128
>    test1 is [1] 0.68865768 0.05354531 0.91665539
>    test2 is [1] 0.19473846 0.60293655 0.09421961
>    test3 is [1] 0.90653581 0.12456034 0.09526018
>
> 4. R4.0: devtools::load_all(".")
> Loading testPackage
> Re-compiling testPackage
> ?  installing *source* package 'testPackage' ... (357ms)
>    ** using staged installation
>    ** libs
>    test1 is [1] 0.00545376 0.30696231 0.68752312
>    test2 is [1] 0.1059506 0.7506894 0.8607918
>    test3 is [1] 0.5321226 0.6985332 0.7343680
>    test1 is [1] 0.7722255 0.3881171 0.5611294
>    test2 is [1] 0.5443175 0.8418503 0.3479382
>    test3 is [1] 0.7400557 0.3322797 0.6818899
>
>
> Cheers,
> Jiefei
>
> On Tue, Mar 10, 2020 at 4:11 AM Tomas Kalibera <tomas.kalibera at gmail.com>
> wrote:
>
>> Hi Jiefei,
>>
>> thanks for your report, but I don't understand from you current
>> description what the problem is. Are you saying that "make" shipped with
>> some recent Rtools is not accepting some forms of PATHs? But, which
>> Rtools then, which version of make, how do you run it?
>>
>> Why are you referring to "R CMD INSTALL" when none of your examples use
>> it? Is "R CMD INSTALL" necessary for reproducing the problem, cannot you
>> just run "make" directly?
>>
>> Or are you reporting a bug inside R itself? (you are referring to
>> specific svn revisions of R). But how could R be involved in this, is it
>> in how it executes make?
>>
>> Please provide a minimal but complete reproducible example, please
>> provide somehow test files that can be used.  Perhaps if you try to do a
>> little bit of debugging on your end, it might help you to narrow down
>> the problem to the point that it will be then easier to understand it.
>> For example: if the problem is in "make", it should be possible to
>> trigger it directly from the command line, then you could easily try
>> with different versions of make and report which ones are the problem..
>>
>> Thanks
>> Tomas
>>
>>
>> On 3/10/20 8:22 AM, Wang Jiefei wrote:
>> > Hi all,
>> >
>> > Here is a bug(or feature?) that exists at least from R 2020-02-24
>> > r77852 to 2020-03-09 r77919 on Window. Consider this example makefile
>> in a
>> > package
>> > ```
>> >
>> >
>> >
>> >
>> >
>> >
>> > *test1=$(shell echo 'runif(3)'|R --vanilla --slave)test2=$(shell echo
>> > 'runif(3)'|"C:/Program Files/R/R-devel/bin/R" --vanilla
>> > --slave)test3=$(shell echo 'runif(3)'|"C:/PROGRA~1/R/R-devel/bin/R"
>> > --vanilla --slave)$(info test1 is $(test1))$(info test2 is
>> $(test2))$(info
>> > test3 is $(test3))*
>> > ```
>> >
>> > I have no problem running the file using GUN make or installing the
>> package
>> > on R 3.6, both give the same result.
>> > ```
>> > *C:\Rtools\mingw_64\bin\mingw32-make.exe  *
>> >
>> >
>> >
>> > *test1 is [1] 0.3427626 0.8027041 0.5611914test2 is [1] 0.9904205
>> 0.3922129
>> > 0.5970083test3 is [1] 0.3469528 0.1993838 0.8434841mingw32-make: *** No
>> > targets.  Stop.*
>> > *```*
>> >
>> > However, on the devel version of R, it cannot recognize both the full
>> and
>> > short path of R and gives an error
>> > ```
>> >
>> >
>> >
>> >
>> > *test1 is  [1] 0.42686376 0.84126831 0.09538047The filename, directory
>> > name, or volume label syntax is incorrect.test2 isThe filename,
>> directory
>> > name, or volume label syntax is incorrect.test3 is*
>> > ```
>> >
>> > I found this issue because my package needs to call R functions in the
>> > makefile. The code is similar to:
>> > ```
>> > *  myvar = $(shell echo 'runif(3)'|"${R_HOME}/bin/R" --vanilla --slave)*
>> > ```
>> > Since *R_HOME *is set to *C:/PROGRA~1/R/R-devel/*, this will result in
>> the
>> > same error as I mentioned above. I do not know whether this is
>> intentional.
>> > If so, what is the correct way to call R function in a makefile?
>> >
>> > Best,
>> > Jiefei
>> >
>> >       [[alternative HTML version deleted]]
>> >
>> > ______________________________________________
>> > R-devel at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>
>>
>>

	[[alternative HTML version deleted]]


From suh@rto_@@ggo@o m@iii@g oii y@hoo@com  Tue Mar 10 17:53:16 2020
From: suh@rto_@@ggo@o m@iii@g oii y@hoo@com (suh@rto_@@ggo@o m@iii@g oii y@hoo@com)
Date: Tue, 10 Mar 2020 16:53:16 +0000 (UTC)
Subject: [Rd] tryCatch without handler in QC.R
References: <1086438820.1310703.1583859196072.ref@mail.yahoo.com>
Message-ID: <1086438820.1310703.1583859196072@mail.yahoo.com>

The following is among those added by r77792 to src/library/tools/R/QC.R in R devel.
                bad <- tryCatch(check_url_db(udb))

The 'tryCatch' has no handler. It does nothing. Error would still stop execution.


From suh@rto_@@ggo@o m@iii@g oii y@hoo@com  Tue Mar 10 18:14:52 2020
From: suh@rto_@@ggo@o m@iii@g oii y@hoo@com (suh@rto_@@ggo@o m@iii@g oii y@hoo@com)
Date: Tue, 10 Mar 2020 17:14:52 +0000 (UTC)
Subject: [Rd] tryCatch without handler in QC.R
In-Reply-To: <1086438820.1310703.1583859196072@mail.yahoo.com>
References: <1086438820.1310703.1583859196072.ref@mail.yahoo.com>
 <1086438820.1310703.1583859196072@mail.yahoo.com>
Message-ID: <1199343571.1828497.1583860492779@mail.yahoo.com>

 Sorry, it is already fixed. Currently, it is as follows.
 bad <- tryCatch(check_url_db(udb), error = identity)


On Tuesday, 10 March 2020, 11:53:16 pm GMT+7, <suharto_anggono at yahoo.com> wrote:


The following is among those added by r77792 to src/library/tools/R/QC.R in R devel.
? ? ? ? ? ? ? ? bad <- tryCatch(check_url_db(udb))

The 'tryCatch' has no handler. It does nothing. Error would still stop execution.  
	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Mar 11 13:57:12 2020
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 11 Mar 2020 13:57:12 +0100
Subject: [Rd] R CMD INSTALL cannot recognize full path on Windows
In-Reply-To: <CAGiFhPPWY64mPjett5aZ5EdRwAkP2TBJn42d9G4iCyLsq_3g+g@mail.gmail.com>
References: <CAGiFhPM1C_J_LGUWVHc-jb8DpbVqt_c9ZwMjCafT0ZLozsbe0Q@mail.gmail.com>
 <b372a694-da0b-e16a-4798-7978c78b6bd5@gmail.com>
 <CAGiFhPOutqdxQ+is13-bFGx93f531O28zb20kPDsD1AdMn9_TA@mail.gmail.com>
 <CAGiFhPPWY64mPjett5aZ5EdRwAkP2TBJn42d9G4iCyLsq_3g+g@mail.gmail.com>
Message-ID: <8b15a23e-7db0-b4f7-d5a4-327230e6fdbb@gmail.com>


Thanks, Jiefei, unfortunately your example does not work on my system, 
and also it is far from minimal. The error message you are getting is 
from Windows and could be caused for example by accidental quoting of 
the path using single quotes.

Issues with RStudio or devtools would have to be discussed in their 
mailing lists/with their authors, but my guess is that the problem is in 
your local configuration, and after all you need it to work with the 
base R CMD INSTALL anyway. There is not much wrong R could do here, it 
just sets R_HOME and runs "make".

For example this works for me, but some closer alternations of your code 
work as well:

test1 := $(shell $(R_HOME)/bin/R --slave -e 'runif(3)')
all:
 ??????? echo "test1 is $(test1)"
 ??????? echo "R_HOME is $(R_HOME)"

I would recommend that you try to narrow down your example so that it is 
really minimal. Use R_HOME, not hard-coded paths, as that is what you 
would use in reality anyway. Print R_HOME and check it is valid. If the 
problem persists, find out why it works when invoked from the command 
line but not from R CMD INSTALL.

Best
Tomas

On 3/10/20 10:15 AM, Wang Jiefei wrote:
> ? Oops, I think both of us forget to cite the r-devel channel.
>
> Best,
> Jiefei
>
> On Tue, Mar 10, 2020 at 5:13 AM Wang Jiefei <szwjf08 at gmail.com 
> <mailto:szwjf08 at gmail.com>> wrote:
>
>     Thanks for your quick response, Tomas.
>
>     Yes, this is a path issue, I think the problem is related to R,
>     not the Rtools make. I built an example package for reproducing
>     the problem: https://github.com/Jiefei-Wang/example
>
>     Here is the version of my R and Rtools:
>     The release R version:
>     R version 3.6.2 (2019-12-12)
>     Platform: x86_64-w64-mingw32/x64 (64-bit)
>     Running under: Windows 10 x64 (build 18362)
>
>     The devel R version:
>     R Under development (unstable) (2020-03-09 r77919)
>     Platform: x86_64-w64-mingw32/x64 (64-bit)
>     Running under: Windows 10 x64 (build 18362)
>
>     Rtools version 3.5.0.4
>
>     Things become interesting?after I did more tests. I originally
>     thought this might be only related to the devel R, but it seems
>     like the released version is also affected. Here is a summary of
>     my test results using the example package:
>
>     1. command-line Rtools make: Success
>     2. command-line R CMD INSTALL: Failed on both R3.6.2 and R4.0
>     3. Rstudio install button: Success on R3.6.2 but failed on R4.0
>     4. Rstudio running devtool::install: Success on both
>
>     Now the problem becomes more intricate. I have no idea which one
>     goes wrong. Here are the details of my test results, I hope it can
>     be helpful:
>
>     *Command line:*
>     1. "C:\Rtools\mingw_64\bin\mingw32-make.exe" -f
>     example-master/src/Makevars
>     test1 is [1] 0.2039269 0.1454402 0.1578401
>     test2 is [1] 0.1919521 0.9257183 0.2130247
>     test3 is [1] 0.06255174 0.27555363 0.72737111
>     mingw32-make: *** No targets.? Stop.
>
>     2. "C:\Program Files\R\R-3.6.2\bin\R" CMD INSTALL
>     testPackage_1.0.tar.gz
>     *** arch - x64
>     test1 is [1] 0.1584299 0.9338829 0.9528810
>     The filename, directory name, or volume label syntax is incorrect.
>     test2 is
>     The filename, directory name, or volume label syntax is incorrect.
>     test3 is
>
>     ? 3. "C:\Program Files\R\R-devel\bin\R" CMD INSTALL
>     testPackage_1.0.tar.gz
>     *** arch - x64
>     test1 is [1] 0.2668522 0.9246174 0.0184601
>     The filename, directory name, or volume label syntax is incorrect.
>     test2 is
>     The filename, directory name, or volume label syntax is incorrect.
>     test3 is
>
>     *R studio:*
>     1. R3.6: Clicking the install button
>     ==> Rcmd.exe INSTALL --no-multiarch --with-keep.source example-master
>     * installing to library 'C:/Users/wangj/Documents/R/win-library/3.6'
>     * installing *source* package 'testPackage' ...
>     ** using staged installation
>     ** libs
>     test1 is [1] 0.1583112 0.6631700 0.2265564
>     test2 is [1] 0.6999799 0.5205237 0.8264029
>     test3 is [1] 0.3591798 0.1767392 0.2869383
>
>     2.? R4.0: Clicking the install button
>     Rcmd.exe INSTALL --no-multiarch --with-keep.source example-master
>     * installing to library 'C:/Program Files/R/R-devel/library'
>     * installing *source* package 'testPackage' ...
>     ** using staged installation
>     ** libs
>     test1 is [1] 0.2091070 0.5411138 0.1051517
>     The filename, directory name, or volume label syntax is incorrect.
>     test2 is
>     The filename, directory name, or volume label syntax is incorrect.
>     test3 is
>
>     3. R3.6:? devtools::load_all(".")
>     devtools::load_all(".")
>     Loading testPackage
>     Re-compiling testPackage
>     - ?installing *source* package 'testPackage' ... (364ms)
>     ? ?** using staged installation
>     ? ?** libs
>     ? ?test1 is [1] 0.93251741 0.03975758 0.57824150
>     ? ?test2 is [1] 0.8681301 0.4801464 0.9112827
>     ? ?test3 is [1] 0.430470791 0.008393394 0.341484128
>     ? ?test1 is [1] 0.68865768 0.05354531 0.91665539
>     ? ?test2 is [1] 0.19473846 0.60293655 0.09421961
>     ? ?test3 is [1] 0.90653581 0.12456034 0.09526018
>
>     4. R4.0: devtools::load_all(".")
>     Loading testPackage
>     Re-compiling testPackage
>     ? ?installing *source* package 'testPackage' ... (357ms)
>     ? ?** using staged installation
>     ? ?** libs
>     ? ?test1 is [1] 0.00545376 0.30696231 0.68752312
>     ? ?test2 is [1] 0.1059506 0.7506894 0.8607918
>     ? ?test3 is [1] 0.5321226 0.6985332 0.7343680
>     ? ?test1 is [1] 0.7722255 0.3881171 0.5611294
>     ? ?test2 is [1] 0.5443175 0.8418503 0.3479382
>     ? ?test3 is [1] 0.7400557 0.3322797 0.6818899
>
>
>     Cheers,
>     Jiefei
>
>     On Tue, Mar 10, 2020 at 4:11 AM Tomas Kalibera
>     <tomas.kalibera at gmail.com <mailto:tomas.kalibera at gmail.com>> wrote:
>
>         Hi Jiefei,
>
>         thanks for your report, but I don't understand from you current
>         description what the problem is. Are you saying that "make"
>         shipped with
>         some recent Rtools is not accepting some forms of PATHs? But,
>         which
>         Rtools then, which version of make, how do you run it?
>
>         Why are you referring to "R CMD INSTALL" when none of your
>         examples use
>         it? Is "R CMD INSTALL" necessary for reproducing the problem,
>         cannot you
>         just run "make" directly?
>
>         Or are you reporting a bug inside R itself? (you are referring to
>         specific svn revisions of R). But how could R be involved in
>         this, is it
>         in how it executes make?
>
>         Please provide a minimal but complete reproducible example,
>         please
>         provide somehow test files that can be used.? Perhaps if you
>         try to do a
>         little bit of debugging on your end, it might help you to
>         narrow down
>         the problem to the point that it will be then easier to
>         understand it.
>         For example: if the problem is in "make", it should be
>         possible to
>         trigger it directly from the command line, then you could
>         easily try
>         with different versions of make and report which ones are the
>         problem..
>
>         Thanks
>         Tomas
>
>
>         On 3/10/20 8:22 AM, Wang Jiefei wrote:
>         > Hi all,
>         >
>         > Here is a bug(or feature?) that exists at least from R
>         2020-02-24
>         > r77852 to 2020-03-09 r77919 on Window. Consider this example
>         makefile in a
>         > package
>         > ```
>         >
>         >
>         >
>         >
>         >
>         >
>         > *test1=$(shell echo 'runif(3)'|R --vanilla
>         --slave)test2=$(shell echo
>         > 'runif(3)'|"C:/Program Files/R/R-devel/bin/R" --vanilla
>         > --slave)test3=$(shell echo
>         'runif(3)'|"C:/PROGRA~1/R/R-devel/bin/R"
>         > --vanilla --slave)$(info test1 is $(test1))$(info test2 is
>         $(test2))$(info
>         > test3 is $(test3))*
>         > ```
>         >
>         > I have no problem running the file using GUN make or
>         installing the package
>         > on R 3.6, both give the same result.
>         > ```
>         > *C:\Rtools\mingw_64\bin\mingw32-make.exe? *
>         >
>         >
>         >
>         > *test1 is [1] 0.3427626 0.8027041 0.5611914test2 is [1]
>         0.9904205 0.3922129
>         > 0.5970083test3 is [1] 0.3469528 0.1993838
>         0.8434841mingw32-make: *** No
>         > targets.? Stop.*
>         > *```*
>         >
>         > However, on the devel version of R, it cannot recognize both
>         the full and
>         > short path of R and gives an error
>         > ```
>         >
>         >
>         >
>         >
>         > *test1 is? [1] 0.42686376 0.84126831 0.09538047The filename,
>         directory
>         > name, or volume label syntax is incorrect.test2 isThe
>         filename, directory
>         > name, or volume label syntax is incorrect.test3 is*
>         > ```
>         >
>         > I found this issue because my package needs to call R
>         functions in the
>         > makefile. The code is similar to:
>         > ```
>         > *? myvar = $(shell echo 'runif(3)'|"${R_HOME}/bin/R"
>         --vanilla --slave)*
>         > ```
>         > Since *R_HOME *is set to *C:/PROGRA~1/R/R-devel/*, this will
>         result in the
>         > same error as I mentioned above. I do not know whether this
>         is intentional.
>         > If so, what is the correct way to call R function in a makefile?
>         >
>         > Best,
>         > Jiefei
>         >
>         >? ? ? ?[[alternative HTML version deleted]]
>         >
>         > ______________________________________________
>         > R-devel at r-project.org <mailto:R-devel at r-project.org> mailing
>         list
>         > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>


	[[alternative HTML version deleted]]


From @zwj|08 @end|ng |rom gm@||@com  Wed Mar 11 14:26:54 2020
From: @zwj|08 @end|ng |rom gm@||@com (Wang Jiefei)
Date: Wed, 11 Mar 2020 09:26:54 -0400
Subject: [Rd] R CMD INSTALL cannot recognize full path on Windows
In-Reply-To: <8b15a23e-7db0-b4f7-d5a4-327230e6fdbb@gmail.com>
References: <CAGiFhPM1C_J_LGUWVHc-jb8DpbVqt_c9ZwMjCafT0ZLozsbe0Q@mail.gmail.com>
 <b372a694-da0b-e16a-4798-7978c78b6bd5@gmail.com>
 <CAGiFhPOutqdxQ+is13-bFGx93f531O28zb20kPDsD1AdMn9_TA@mail.gmail.com>
 <CAGiFhPPWY64mPjett5aZ5EdRwAkP2TBJn42d9G4iCyLsq_3g+g@mail.gmail.com>
 <8b15a23e-7db0-b4f7-d5a4-327230e6fdbb@gmail.com>
Message-ID: <CAGiFhPPS1Gq609kVOF8E1+Mk_L2i5UDmmsgCX4vAv6ekd=dWqQ@mail.gmail.com>

Thanks, Tomas. I took your suggestion and change the make file to

test1:=$(shell $(R_HOME)/bin/R --slave -e 'runif(3)')

all: testPackage.dll
    echo "test1 is $(test1)"
    echo "R_HOME is $(R_HOME)"

However, R CMD INSTALL still gives me the same error:

> R CMD INSTALL testPackage_1.0.tar.gz* installing to library 'C:/Program
Files/R/R-devel/library'
* installing *source* package 'testPackage' ...
** using staged installation
** libs

*** arch - i386
The filename, directory name, or volume label syntax is incorrect.
c:/Rtools/mingw_32/bin/g++ -std=gnu++11  -I"C:/PROGRA~1/R/R-devel/include"
-DNDEBUG  -I'C:/Program Files/R/R-devel/library/Rcpp/include'
-I"C:/projects/BUILD/R-source-win32/extsoft/include"     -O2 -Wall
 -mfpmath=sse -msse2 -c RcppExports.cpp -o RcppExports.o
c:/Rtools/mingw_32/bin/g++ -std=gnu++11  -I"C:/PROGRA~1/R/R-devel/include"
-DNDEBUG  -I'C:/Program Files/R/R-devel/library/Rcpp/include'
-I"C:/projects/BUILD/R-source-win32/extsoft/include"     -O2 -Wall
 -mfpmath=sse -msse2 -c example.cpp -o example.o
c:/Rtools/mingw_32/bin/g++ -std=gnu++11 -shared -s -static-libgcc -o
testPackage.dll tmp.def RcppExports.o example.o
-LC:/projects/BUILD/R-source-win32/extsoft/lib/i386
-LC:/projects/BUILD/R-source-win32/extsoft/lib
-LC:/PROGRA~1/R/R-devel/bin/i386 -lR
echo "test1 is "
test1 is
echo "R_HOME is C:/PROGRA~1/R/R-devel"
installing to C:/Program
Files/R/R-devel/library/00LOCK-testPackage/00new/testPackage/libs/i386


I have no idea how to make the example even more minimal for there is
literally nothing in the package now. Like you said if R just sets R_HOME
and runs "make", I do not understand why it cannot find R in this case for
R_HOME seems correct to me. I think there are some other things behind R
CMD INSTALL but my poor knowledge does not allow me to see them...Any help
will be appreciated.


Best,
Jiefei


On Wed, Mar 11, 2020 at 8:57 AM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

>
> Thanks, Jiefei, unfortunately your example does not work on my system, and
> also it is far from minimal. The error message you are getting is from
> Windows and could be caused for example by accidental quoting of the path
> using single quotes.
>
> Issues with RStudio or devtools would have to be discussed in their
> mailing lists/with their authors, but my guess is that the problem is in
> your local configuration, and after all you need it to work with the base R
> CMD INSTALL anyway. There is not much wrong R could do here, it just sets
> R_HOME and runs "make".
>
> For example this works for me, but some closer alternations of your code
> work as well:
>
> test1 := $(shell $(R_HOME)/bin/R --slave -e 'runif(3)')
> all:
>         echo "test1 is $(test1)"
>         echo "R_HOME is $(R_HOME)"
>
> I would recommend that you try to narrow down your example so that it is
> really minimal. Use R_HOME, not hard-coded paths, as that is what you would
> use in reality anyway. Print R_HOME and check it is valid. If the problem
> persists, find out why it works when invoked from the command line but not
> from R CMD INSTALL.
>
> Best
> Tomas
>
> On 3/10/20 10:15 AM, Wang Jiefei wrote:
>
>   Oops, I think both of us forget to cite the r-devel channel.
>
> Best,
> Jiefei
>
> On Tue, Mar 10, 2020 at 5:13 AM Wang Jiefei <szwjf08 at gmail.com> wrote:
>
>> Thanks for your quick response, Tomas.
>>
>> Yes, this is a path issue, I think the problem is related to R, not the
>> Rtools make. I built an example package for reproducing the problem:
>> https://github.com/Jiefei-Wang/example
>>
>> Here is the version of my R and Rtools:
>> The release R version:
>> R version 3.6.2 (2019-12-12)
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>> Running under: Windows 10 x64 (build 18362)
>>
>> The devel R version:
>> R Under development (unstable) (2020-03-09 r77919)
>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>> Running under: Windows 10 x64 (build 18362)
>>
>> Rtools version 3.5.0.4
>>
>> Things become interesting after I did more tests. I originally thought
>> this might be only related to the devel R, but it seems like the released
>> version is also affected. Here is a summary of my test results using the
>> example package:
>>
>> 1. command-line Rtools make: Success
>> 2. command-line R CMD INSTALL: Failed on both R3.6.2 and R4.0
>> 3. Rstudio install button: Success on R3.6.2 but failed on R4.0
>> 4. Rstudio running devtool::install: Success on both
>>
>> Now the problem becomes more intricate. I have no idea which one goes
>> wrong. Here are the details of my test results, I hope it can be helpful:
>>
>> *Command line:*
>> 1. "C:\Rtools\mingw_64\bin\mingw32-make.exe" -f
>> example-master/src/Makevars
>> test1 is [1] 0.2039269 0.1454402 0.1578401
>> test2 is [1] 0.1919521 0.9257183 0.2130247
>> test3 is [1] 0.06255174 0.27555363 0.72737111
>> mingw32-make: *** No targets.  Stop.
>>
>> 2. "C:\Program Files\R\R-3.6.2\bin\R" CMD INSTALL testPackage_1.0.tar.gz
>> *** arch - x64
>> test1 is [1] 0.1584299 0.9338829 0.9528810
>> The filename, directory name, or volume label syntax is incorrect.
>> test2 is
>> The filename, directory name, or volume label syntax is incorrect.
>> test3 is
>>
>>   3. "C:\Program Files\R\R-devel\bin\R" CMD INSTALL testPackage_1.0.tar.gz
>> *** arch - x64
>> test1 is [1] 0.2668522 0.9246174 0.0184601
>> The filename, directory name, or volume label syntax is incorrect.
>> test2 is
>> The filename, directory name, or volume label syntax is incorrect.
>> test3 is
>>
>> *R studio:*
>> 1. R3.6:  Clicking the install button
>> ==> Rcmd.exe INSTALL --no-multiarch --with-keep.source example-master
>> * installing to library 'C:/Users/wangj/Documents/R/win-library/3.6'
>> * installing *source* package 'testPackage' ...
>> ** using staged installation
>> ** libs
>> test1 is [1] 0.1583112 0.6631700 0.2265564
>> test2 is [1] 0.6999799 0.5205237 0.8264029
>> test3 is [1] 0.3591798 0.1767392 0.2869383
>>
>> 2.  R4.0: Clicking the install button
>> Rcmd.exe INSTALL --no-multiarch --with-keep.source example-master
>> * installing to library 'C:/Program Files/R/R-devel/library'
>> * installing *source* package 'testPackage' ...
>> ** using staged installation
>> ** libs
>> test1 is [1] 0.2091070 0.5411138 0.1051517
>> The filename, directory name, or volume label syntax is incorrect.
>> test2 is
>> The filename, directory name, or volume label syntax is incorrect.
>> test3 is
>>
>> 3. R3.6:  devtools::load_all(".")
>> devtools::load_all(".")
>> Loading testPackage
>> Re-compiling testPackage
>> -  installing *source* package 'testPackage' ... (364ms)
>>    ** using staged installation
>>    ** libs
>>    test1 is [1] 0.93251741 0.03975758 0.57824150
>>    test2 is [1] 0.8681301 0.4801464 0.9112827
>>    test3 is [1] 0.430470791 0.008393394 0.341484128
>>    test1 is [1] 0.68865768 0.05354531 0.91665539
>>    test2 is [1] 0.19473846 0.60293655 0.09421961
>>    test3 is [1] 0.90653581 0.12456034 0.09526018
>>
>> 4. R4.0: devtools::load_all(".")
>> Loading testPackage
>> Re-compiling testPackage
>> ?  installing *source* package 'testPackage' ... (357ms)
>>    ** using staged installation
>>    ** libs
>>    test1 is [1] 0.00545376 0.30696231 0.68752312
>>    test2 is [1] 0.1059506 0.7506894 0.8607918
>>    test3 is [1] 0.5321226 0.6985332 0.7343680
>>    test1 is [1] 0.7722255 0.3881171 0.5611294
>>    test2 is [1] 0.5443175 0.8418503 0.3479382
>>    test3 is [1] 0.7400557 0.3322797 0.6818899
>>
>>
>> Cheers,
>> Jiefei
>>
>> On Tue, Mar 10, 2020 at 4:11 AM Tomas Kalibera <tomas.kalibera at gmail.com>
>> wrote:
>>
>>> Hi Jiefei,
>>>
>>> thanks for your report, but I don't understand from you current
>>> description what the problem is. Are you saying that "make" shipped with
>>> some recent Rtools is not accepting some forms of PATHs? But, which
>>> Rtools then, which version of make, how do you run it?
>>>
>>> Why are you referring to "R CMD INSTALL" when none of your examples use
>>> it? Is "R CMD INSTALL" necessary for reproducing the problem, cannot you
>>> just run "make" directly?
>>>
>>> Or are you reporting a bug inside R itself? (you are referring to
>>> specific svn revisions of R). But how could R be involved in this, is it
>>> in how it executes make?
>>>
>>> Please provide a minimal but complete reproducible example, please
>>> provide somehow test files that can be used.  Perhaps if you try to do a
>>> little bit of debugging on your end, it might help you to narrow down
>>> the problem to the point that it will be then easier to understand it.
>>> For example: if the problem is in "make", it should be possible to
>>> trigger it directly from the command line, then you could easily try
>>> with different versions of make and report which ones are the problem..
>>>
>>> Thanks
>>> Tomas
>>>
>>>
>>> On 3/10/20 8:22 AM, Wang Jiefei wrote:
>>> > Hi all,
>>> >
>>> > Here is a bug(or feature?) that exists at least from R 2020-02-24
>>> > r77852 to 2020-03-09 r77919 on Window. Consider this example makefile
>>> in a
>>> > package
>>> > ```
>>> >
>>> >
>>> >
>>> >
>>> >
>>> >
>>> > *test1=$(shell echo 'runif(3)'|R --vanilla --slave)test2=$(shell echo
>>> > 'runif(3)'|"C:/Program Files/R/R-devel/bin/R" --vanilla
>>> > --slave)test3=$(shell echo 'runif(3)'|"C:/PROGRA~1/R/R-devel/bin/R"
>>> > --vanilla --slave)$(info test1 is $(test1))$(info test2 is
>>> $(test2))$(info
>>> > test3 is $(test3))*
>>> > ```
>>> >
>>> > I have no problem running the file using GUN make or installing the
>>> package
>>> > on R 3.6, both give the same result.
>>> > ```
>>> > *C:\Rtools\mingw_64\bin\mingw32-make.exe  *
>>> >
>>> >
>>> >
>>> > *test1 is [1] 0.3427626 0.8027041 0.5611914test2 is [1] 0.9904205
>>> 0.3922129
>>> > 0.5970083test3 is [1] 0.3469528 0.1993838 0.8434841mingw32-make: *** No
>>> > targets.  Stop.*
>>> > *```*
>>> >
>>> > However, on the devel version of R, it cannot recognize both the full
>>> and
>>> > short path of R and gives an error
>>> > ```
>>> >
>>> >
>>> >
>>> >
>>> > *test1 is  [1] 0.42686376 0.84126831 0.09538047The filename, directory
>>> > name, or volume label syntax is incorrect.test2 isThe filename,
>>> directory
>>> > name, or volume label syntax is incorrect.test3 is*
>>> > ```
>>> >
>>> > I found this issue because my package needs to call R functions in the
>>> > makefile. The code is similar to:
>>> > ```
>>> > *  myvar = $(shell echo 'runif(3)'|"${R_HOME}/bin/R" --vanilla
>>> --slave)*
>>> > ```
>>> > Since *R_HOME *is set to *C:/PROGRA~1/R/R-devel/*, this will result in
>>> the
>>> > same error as I mentioned above. I do not know whether this is
>>> intentional.
>>> > If so, what is the correct way to call R function in a makefile?
>>> >
>>> > Best,
>>> > Jiefei
>>> >
>>> >       [[alternative HTML version deleted]]
>>> >
>>> > ______________________________________________
>>> > R-devel at r-project.org mailing list
>>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>>
>>>
>>>
>

	[[alternative HTML version deleted]]


From @zwj|08 @end|ng |rom gm@||@com  Wed Mar 11 16:33:20 2020
From: @zwj|08 @end|ng |rom gm@||@com (Wang Jiefei)
Date: Wed, 11 Mar 2020 11:33:20 -0400
Subject: [Rd] R CMD INSTALL cannot recognize full path on Windows
In-Reply-To: <82de2b77-6f98-09ed-f3c0-e4fef0dc7178@gmail.com>
References: <CAGiFhPM1C_J_LGUWVHc-jb8DpbVqt_c9ZwMjCafT0ZLozsbe0Q@mail.gmail.com>
 <b372a694-da0b-e16a-4798-7978c78b6bd5@gmail.com>
 <CAGiFhPOutqdxQ+is13-bFGx93f531O28zb20kPDsD1AdMn9_TA@mail.gmail.com>
 <CAGiFhPPWY64mPjett5aZ5EdRwAkP2TBJn42d9G4iCyLsq_3g+g@mail.gmail.com>
 <8b15a23e-7db0-b4f7-d5a4-327230e6fdbb@gmail.com>
 <CAGiFhPPS1Gq609kVOF8E1+Mk_L2i5UDmmsgCX4vAv6ekd=dWqQ@mail.gmail.com>
 <82de2b77-6f98-09ed-f3c0-e4fef0dc7178@gmail.com>
Message-ID: <CAGiFhPN_tT_cYeQbkFJW1ySaObOEwZ2ELHwr4w+rc8x_mLr_FA@mail.gmail.com>

Thanks a lot for your suggestions. I see what you mean. I have removed all
unnecessary files and dependences on https://github.com/Jiefei-Wang/example,
but still no luck. I've tried to install the package as a user, not admin,
but I got the same error. Also, I apologize for spamming the mail list. I
will keep my reply as neat as possible.

Martin has suggested checking the encoding of the file and locale in the
session info, so here is this missing information: The makefile is encoded
in UTF-8, and the locale is:

[1] LC_COLLATE=English_United States.1252
[2] LC_CTYPE=English_United States.1252
[3] LC_MONETARY=English_United States.1252
[4] LC_NUMERIC=C
[5] LC_TIME=English_United States.1252

That is where I am stuck, any help would be appreciated.

Best,
Jiefei



On Wed, Mar 11, 2020 at 9:56 AM Tomas Kalibera <tomas.kalibera at gmail.com>
wrote:

> On 3/11/20 2:26 PM, Wang Jiefei wrote:
>
> Thanks, Tomas. I took your suggestion and change the make file to
>
> test1:=$(shell $(R_HOME)/bin/R --slave -e 'runif(3)')
>
> all: testPackage.dll
>     echo "test1 is $(test1)"
>     echo "R_HOME is $(R_HOME)"
>
> However, R CMD INSTALL still gives me the same error:
>
> > R CMD INSTALL testPackage_1.0.tar.gz* installing to library 'C:/Program
> Files/R/R-devel/library'
> * installing *source* package 'testPackage' ...
> ** using staged installation
> ** libs
>
> *** arch - i386
> The filename, directory name, or volume label syntax is incorrect.
> c:/Rtools/mingw_32/bin/g++ -std=gnu++11  -I"C:/PROGRA~1/R/R-devel/include"
> -DNDEBUG  -I'C:/Program Files/R/R-devel/library/Rcpp/include'
> -I"C:/projects/BUILD/R-source-win32/extsoft/include"     -O2 -Wall
>  -mfpmath=sse -msse2 -c RcppExports.cpp -o RcppExports.o
> c:/Rtools/mingw_32/bin/g++ -std=gnu++11  -I"C:/PROGRA~1/R/R-devel/include"
> -DNDEBUG  -I'C:/Program Files/R/R-devel/library/Rcpp/include'
> -I"C:/projects/BUILD/R-source-win32/extsoft/include"     -O2 -Wall
>  -mfpmath=sse -msse2 -c example.cpp -o example.o
> c:/Rtools/mingw_32/bin/g++ -std=gnu++11 -shared -s -static-libgcc -o
> testPackage.dll tmp.def RcppExports.o example.o
> -LC:/projects/BUILD/R-source-win32/extsoft/lib/i386
> -LC:/projects/BUILD/R-source-win32/extsoft/lib
> -LC:/PROGRA~1/R/R-devel/bin/i386 -lR
> echo "test1 is "
> test1 is
> echo "R_HOME is C:/PROGRA~1/R/R-devel"
> installing to C:/Program
> Files/R/R-devel/library/00LOCK-testPackage/00new/testPackage/libs/i386
>
>
> I have no idea how to make the example even more minimal for there is
> literally nothing in the package now. Like you said if R just sets R_HOME
> and runs "make", I do not understand why it cannot find R in this case for
> R_HOME seems correct to me. I think there are some other things behind R
> CMD INSTALL but my poor knowledge does not allow me to see them...Any help
> will be appreciated.
>
> Please lets not spam the whole list with this any more - this is also why
> I didn't add R-devel to cc originally. The makefile may be minimal, but the
> example package is not - you have Rcpp dependency there, two C source
> files, some R Studio specific thing (an .Rproj file at least). Maybe it is
> not related, but if you want other to help you, it would be nice to spend
> some of your time reducing it anyway.
>
> That test1 is empty means that executing R has failed. You need to find
> out why.
>
> I see that you are installing into C:/Program Files/R/R-devel/library.
> Normally that directory should not be writeable. Are you running this as
> Administrator? In principle this could be related, but better to find out
> directly why executing R is failing.
>
> Best
> Tomas
>
>
>
>
> Best,
> Jiefei
>
>
> On Wed, Mar 11, 2020 at 8:57 AM Tomas Kalibera <tomas.kalibera at gmail.com>
> wrote:
>
>>
>> Thanks, Jiefei, unfortunately your example does not work on my system,
>> and also it is far from minimal. The error message you are getting is from
>> Windows and could be caused for example by accidental quoting of the path
>> using single quotes.
>>
>> Issues with RStudio or devtools would have to be discussed in their
>> mailing lists/with their authors, but my guess is that the problem is in
>> your local configuration, and after all you need it to work with the base R
>> CMD INSTALL anyway. There is not much wrong R could do here, it just sets
>> R_HOME and runs "make".
>>
>> For example this works for me, but some closer alternations of your code
>> work as well:
>>
>> test1 := $(shell $(R_HOME)/bin/R --slave -e 'runif(3)')
>> all:
>>         echo "test1 is $(test1)"
>>         echo "R_HOME is $(R_HOME)"
>>
>> I would recommend that you try to narrow down your example so that it is
>> really minimal. Use R_HOME, not hard-coded paths, as that is what you would
>> use in reality anyway. Print R_HOME and check it is valid. If the problem
>> persists, find out why it works when invoked from the command line but not
>> from R CMD INSTALL.
>>
>> Best
>> Tomas
>>
>> On 3/10/20 10:15 AM, Wang Jiefei wrote:
>>
>>   Oops, I think both of us forget to cite the r-devel channel.
>>
>> Best,
>> Jiefei
>>
>> On Tue, Mar 10, 2020 at 5:13 AM Wang Jiefei <szwjf08 at gmail.com> wrote:
>>
>>> Thanks for your quick response, Tomas.
>>>
>>> Yes, this is a path issue, I think the problem is related to R, not the
>>> Rtools make. I built an example package for reproducing the problem:
>>> https://github.com/Jiefei-Wang/example
>>>
>>> Here is the version of my R and Rtools:
>>> The release R version:
>>> R version 3.6.2 (2019-12-12)
>>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>>> Running under: Windows 10 x64 (build 18362)
>>>
>>> The devel R version:
>>> R Under development (unstable) (2020-03-09 r77919)
>>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>>> Running under: Windows 10 x64 (build 18362)
>>>
>>> Rtools version 3.5.0.4
>>>
>>> Things become interesting after I did more tests. I originally thought
>>> this might be only related to the devel R, but it seems like the released
>>> version is also affected. Here is a summary of my test results using the
>>> example package:
>>>
>>> 1. command-line Rtools make: Success
>>> 2. command-line R CMD INSTALL: Failed on both R3.6.2 and R4.0
>>> 3. Rstudio install button: Success on R3.6.2 but failed on R4.0
>>> 4. Rstudio running devtool::install: Success on both
>>>
>>> Now the problem becomes more intricate. I have no idea which one goes
>>> wrong. Here are the details of my test results, I hope it can be helpful:
>>>
>>> *Command line:*
>>> 1. "C:\Rtools\mingw_64\bin\mingw32-make.exe" -f
>>> example-master/src/Makevars
>>> test1 is [1] 0.2039269 0.1454402 0.1578401
>>> test2 is [1] 0.1919521 0.9257183 0.2130247
>>> test3 is [1] 0.06255174 0.27555363 0.72737111
>>> mingw32-make: *** No targets.  Stop.
>>>
>>> 2. "C:\Program Files\R\R-3.6.2\bin\R" CMD INSTALL testPackage_1.0.tar.gz
>>> *** arch - x64
>>> test1 is [1] 0.1584299 0.9338829 0.9528810
>>> The filename, directory name, or volume label syntax is incorrect.
>>> test2 is
>>> The filename, directory name, or volume label syntax is incorrect.
>>> test3 is
>>>
>>>   3. "C:\Program Files\R\R-devel\bin\R" CMD INSTALL
>>> testPackage_1.0.tar.gz
>>> *** arch - x64
>>> test1 is [1] 0.2668522 0.9246174 0.0184601
>>> The filename, directory name, or volume label syntax is incorrect.
>>> test2 is
>>> The filename, directory name, or volume label syntax is incorrect.
>>> test3 is
>>>
>>> *R studio:*
>>> 1. R3.6:  Clicking the install button
>>> ==> Rcmd.exe INSTALL --no-multiarch --with-keep.source example-master
>>> * installing to library 'C:/Users/wangj/Documents/R/win-library/3.6'
>>> * installing *source* package 'testPackage' ...
>>> ** using staged installation
>>> ** libs
>>> test1 is [1] 0.1583112 0.6631700 0.2265564
>>> test2 is [1] 0.6999799 0.5205237 0.8264029
>>> test3 is [1] 0.3591798 0.1767392 0.2869383
>>>
>>> 2.  R4.0: Clicking the install button
>>> Rcmd.exe INSTALL --no-multiarch --with-keep.source example-master
>>> * installing to library 'C:/Program Files/R/R-devel/library'
>>> * installing *source* package 'testPackage' ...
>>> ** using staged installation
>>> ** libs
>>> test1 is [1] 0.2091070 0.5411138 0.1051517
>>> The filename, directory name, or volume label syntax is incorrect.
>>> test2 is
>>> The filename, directory name, or volume label syntax is incorrect.
>>> test3 is
>>>
>>> 3. R3.6:  devtools::load_all(".")
>>> devtools::load_all(".")
>>> Loading testPackage
>>> Re-compiling testPackage
>>> -  installing *source* package 'testPackage' ... (364ms)
>>>    ** using staged installation
>>>    ** libs
>>>    test1 is [1] 0.93251741 0.03975758 0.57824150
>>>    test2 is [1] 0.8681301 0.4801464 0.9112827
>>>    test3 is [1] 0.430470791 0.008393394 0.341484128
>>>    test1 is [1] 0.68865768 0.05354531 0.91665539
>>>    test2 is [1] 0.19473846 0.60293655 0.09421961
>>>    test3 is [1] 0.90653581 0.12456034 0.09526018
>>>
>>> 4. R4.0: devtools::load_all(".")
>>> Loading testPackage
>>> Re-compiling testPackage
>>> ?  installing *source* package 'testPackage' ... (357ms)
>>>    ** using staged installation
>>>    ** libs
>>>    test1 is [1] 0.00545376 0.30696231 0.68752312
>>>    test2 is [1] 0.1059506 0.7506894 0.8607918
>>>    test3 is [1] 0.5321226 0.6985332 0.7343680
>>>    test1 is [1] 0.7722255 0.3881171 0.5611294
>>>    test2 is [1] 0.5443175 0.8418503 0.3479382
>>>    test3 is [1] 0.7400557 0.3322797 0.6818899
>>>
>>>
>>> Cheers,
>>> Jiefei
>>>
>>> On Tue, Mar 10, 2020 at 4:11 AM Tomas Kalibera <tomas.kalibera at gmail.com>
>>> wrote:
>>>
>>>> Hi Jiefei,
>>>>
>>>> thanks for your report, but I don't understand from you current
>>>> description what the problem is. Are you saying that "make" shipped
>>>> with
>>>> some recent Rtools is not accepting some forms of PATHs? But, which
>>>> Rtools then, which version of make, how do you run it?
>>>>
>>>> Why are you referring to "R CMD INSTALL" when none of your examples use
>>>> it? Is "R CMD INSTALL" necessary for reproducing the problem, cannot
>>>> you
>>>> just run "make" directly?
>>>>
>>>> Or are you reporting a bug inside R itself? (you are referring to
>>>> specific svn revisions of R). But how could R be involved in this, is
>>>> it
>>>> in how it executes make?
>>>>
>>>> Please provide a minimal but complete reproducible example, please
>>>> provide somehow test files that can be used.  Perhaps if you try to do
>>>> a
>>>> little bit of debugging on your end, it might help you to narrow down
>>>> the problem to the point that it will be then easier to understand it.
>>>> For example: if the problem is in "make", it should be possible to
>>>> trigger it directly from the command line, then you could easily try
>>>> with different versions of make and report which ones are the problem..
>>>>
>>>> Thanks
>>>> Tomas
>>>>
>>>>
>>>> On 3/10/20 8:22 AM, Wang Jiefei wrote:
>>>> > Hi all,
>>>> >
>>>> > Here is a bug(or feature?) that exists at least from R 2020-02-24
>>>> > r77852 to 2020-03-09 r77919 on Window. Consider this example makefile
>>>> in a
>>>> > package
>>>> > ```
>>>> >
>>>> >
>>>> >
>>>> >
>>>> >
>>>> >
>>>> > *test1=$(shell echo 'runif(3)'|R --vanilla --slave)test2=$(shell echo
>>>> > 'runif(3)'|"C:/Program Files/R/R-devel/bin/R" --vanilla
>>>> > --slave)test3=$(shell echo 'runif(3)'|"C:/PROGRA~1/R/R-devel/bin/R"
>>>> > --vanilla --slave)$(info test1 is $(test1))$(info test2 is
>>>> $(test2))$(info
>>>> > test3 is $(test3))*
>>>> > ```
>>>> >
>>>> > I have no problem running the file using GUN make or installing the
>>>> package
>>>> > on R 3.6, both give the same result.
>>>> > ```
>>>> > *C:\Rtools\mingw_64\bin\mingw32-make.exe  *
>>>> >
>>>> >
>>>> >
>>>> > *test1 is [1] 0.3427626 0.8027041 0.5611914test2 is [1] 0.9904205
>>>> 0.3922129
>>>> > 0.5970083test3 is [1] 0.3469528 0.1993838 0.8434841mingw32-make: ***
>>>> No
>>>> > targets.  Stop.*
>>>> > *```*
>>>> >
>>>> > However, on the devel version of R, it cannot recognize both the full
>>>> and
>>>> > short path of R and gives an error
>>>> > ```
>>>> >
>>>> >
>>>> >
>>>> >
>>>> > *test1 is  [1] 0.42686376 0.84126831 0.09538047The filename, directory
>>>> > name, or volume label syntax is incorrect.test2 isThe filename,
>>>> directory
>>>> > name, or volume label syntax is incorrect.test3 is*
>>>> > ```
>>>> >
>>>> > I found this issue because my package needs to call R functions in the
>>>> > makefile. The code is similar to:
>>>> > ```
>>>> > *  myvar = $(shell echo 'runif(3)'|"${R_HOME}/bin/R" --vanilla
>>>> --slave)*
>>>> > ```
>>>> > Since *R_HOME *is set to *C:/PROGRA~1/R/R-devel/*, this will result
>>>> in the
>>>> > same error as I mentioned above. I do not know whether this is
>>>> intentional.
>>>> > If so, what is the correct way to call R function in a makefile?
>>>> >
>>>> > Best,
>>>> > Jiefei
>>>> >
>>>> >       [[alternative HTML version deleted]]
>>>> >
>>>> > ______________________________________________
>>>> > R-devel at r-project.org mailing list
>>>> > https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>
>>>>
>>>>
>>
>

	[[alternative HTML version deleted]]


From hp@ge@ @end|ng |rom |redhutch@org  Wed Mar 11 20:04:12 2020
From: hp@ge@ @end|ng |rom |redhutch@org (=?UTF-8?B?SGVydsOpIFBhZ8Oocw==?=)
Date: Wed, 11 Mar 2020 12:04:12 -0700
Subject: [Rd] rounding change
In-Reply-To: <28fddd$dcg306@ironport10.mayo.edu>
References: <28fddd$dcg306@ironport10.mayo.edu>
Message-ID: <a9eda0a3-4cfc-5c77-5d9a-36e46a6157c1@fredhutch.org>

Thanks for the heads up. The new result for round(51/80, digits=3) is 
also consistent with sprintf("%.3f", 51/80), format(51/80, digits=3), 
print(51/80, digits=3), and with the sprintf() function in C. Which is 
somehow satisfying.

H.

On 3/5/20 05:54, Therneau, Terry M., Ph.D. via R-devel wrote:
> This is a small heads up for package maintainers.?? Under the more recent R-devel, R CMD
> check turned up some changes in the *.out files.?? The simple demonstration is to type
> "round(51/80, 3)", which gives .638 under the old and .637 under the new.?? (One of my
> coxph test cases has a concordance of exactly 51/80).
> 
> In this particular case 51/80 is exactly .63750000, but that value does not have an exact
> representation in base 2.? The line below would argue that the new version is correct, at
> least with respect to the internal representation.
> 
>   > print(51/80, digits = 20)
> [1] 0.63749999999999995559
> 
> This is not a bug or problem, it just means that whichever version I put into my
> survival/tests/book6.Rout.save file, one of R-devel or R-current will flag an issue.
> 
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Ddevel&d=DwIDaQ&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=ByODf3XxvkT0Ag-YiS72sOZMg3b9vKH-pDRcZARaGWQ&s=z5huvy_ZadTqpmI7_sfnFcohmR_I4LdQ3LmOjyEg6kw&e=
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319


From @|mon@urb@nek @end|ng |rom R-project@org  Wed Mar 11 23:13:04 2020
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Thu, 12 Mar 2020 11:13:04 +1300
Subject: [Rd] R CMD INSTALL cannot recognize full path on Windows
In-Reply-To: <CAGiFhPN_tT_cYeQbkFJW1ySaObOEwZ2ELHwr4w+rc8x_mLr_FA@mail.gmail.com>
References: <CAGiFhPM1C_J_LGUWVHc-jb8DpbVqt_c9ZwMjCafT0ZLozsbe0Q@mail.gmail.com>
 <b372a694-da0b-e16a-4798-7978c78b6bd5@gmail.com>
 <CAGiFhPOutqdxQ+is13-bFGx93f531O28zb20kPDsD1AdMn9_TA@mail.gmail.com>
 <CAGiFhPPWY64mPjett5aZ5EdRwAkP2TBJn42d9G4iCyLsq_3g+g@mail.gmail.com>
 <8b15a23e-7db0-b4f7-d5a4-327230e6fdbb@gmail.com>
 <CAGiFhPPS1Gq609kVOF8E1+Mk_L2i5UDmmsgCX4vAv6ekd=dWqQ@mail.gmail.com>
 <82de2b77-6f98-09ed-f3c0-e4fef0dc7178@gmail.com>
 <CAGiFhPN_tT_cYeQbkFJW1ySaObOEwZ2ELHwr4w+rc8x_mLr_FA@mail.gmail.com>
Message-ID: <B04693F5-C4CB-43A1-8B3E-9C60C1D387AE@R-project.org>

Jiefei,

you did not commit all files into the example package - your example has things like RcppExports.cpp as well as additional flags which are not in your GH project. I suspect the issue is with the extra flags you're adding - those don't come from R. Please make sure you can replicate the issue with the GH package you created.

Cheers,
Simon 


* installing *source* package 'testPackage' ...
** using staged installation
** libs

*** arch - i386
echo "test1 is [1] 0.1522111 0.2533619 0.6591809"
test1 is [1] 0.1522111 0.2533619 0.6591809
echo "R_HOME is C:/R/R-3.6.2"
R_HOME is C:/R/R-3.6.2
echo "Fake library" > testPackage.dll
installing to C:/R/R-3.6.2/library/00LOCK-testPackage/00new/testPackage/libs/i38
6

*** arch - x64
echo "test1 is [1] 0.9271811 0.8040735 0.4739104"
test1 is [1] 0.9271811 0.8040735 0.4739104
echo "R_HOME is C:/R/R-3.6.2"
R_HOME is C:/R/R-3.6.2
echo "Fake library" > testPackage.dll
installing to C:/R/R-3.6.2/library/00LOCK-testPackage/00new/testPackage/libs/x64

** help
No man pages found in package  'testPackage'
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
*** arch - i386
*** arch - x64
** testing if installed package can be loaded from final location
*** arch - i386
*** arch - x64
** testing if installed package keeps a record of temporary installation path
* DONE (testPackage)
Making 'packages.html' ... done

> On 12/03/2020, at 4:33 AM, Wang Jiefei <szwjf08 at gmail.com> wrote:
> 
> Thanks a lot for your suggestions. I see what you mean. I have removed all
> unnecessary files and dependences on https://github.com/Jiefei-Wang/example,
> but still no luck. I've tried to install the package as a user, not admin,
> but I got the same error. Also, I apologize for spamming the mail list. I
> will keep my reply as neat as possible.
> 
> Martin has suggested checking the encoding of the file and locale in the
> session info, so here is this missing information: The makefile is encoded
> in UTF-8, and the locale is:
> 
> [1] LC_COLLATE=English_United States.1252
> [2] LC_CTYPE=English_United States.1252
> [3] LC_MONETARY=English_United States.1252
> [4] LC_NUMERIC=C
> [5] LC_TIME=English_United States.1252
> 
> That is where I am stuck, any help would be appreciated.
> 
> Best,
> Jiefei
> 
> 
> 
> On Wed, Mar 11, 2020 at 9:56 AM Tomas Kalibera <tomas.kalibera at gmail.com>
> wrote:
> 
>> On 3/11/20 2:26 PM, Wang Jiefei wrote:
>> 
>> Thanks, Tomas. I took your suggestion and change the make file to
>> 
>> test1:=$(shell $(R_HOME)/bin/R --slave -e 'runif(3)')
>> 
>> all: testPackage.dll
>>    echo "test1 is $(test1)"
>>    echo "R_HOME is $(R_HOME)"
>> 
>> However, R CMD INSTALL still gives me the same error:
>> 
>>> R CMD INSTALL testPackage_1.0.tar.gz* installing to library 'C:/Program
>> Files/R/R-devel/library'
>> * installing *source* package 'testPackage' ...
>> ** using staged installation
>> ** libs
>> 
>> *** arch - i386
>> The filename, directory name, or volume label syntax is incorrect.
>> c:/Rtools/mingw_32/bin/g++ -std=gnu++11  -I"C:/PROGRA~1/R/R-devel/include"
>> -DNDEBUG  -I'C:/Program Files/R/R-devel/library/Rcpp/include'
>> -I"C:/projects/BUILD/R-source-win32/extsoft/include"     -O2 -Wall
>> -mfpmath=sse -msse2 -c RcppExports.cpp -o RcppExports.o
>> c:/Rtools/mingw_32/bin/g++ -std=gnu++11  -I"C:/PROGRA~1/R/R-devel/include"
>> -DNDEBUG  -I'C:/Program Files/R/R-devel/library/Rcpp/include'
>> -I"C:/projects/BUILD/R-source-win32/extsoft/include"     -O2 -Wall
>> -mfpmath=sse -msse2 -c example.cpp -o example.o
>> c:/Rtools/mingw_32/bin/g++ -std=gnu++11 -shared -s -static-libgcc -o
>> testPackage.dll tmp.def RcppExports.o example.o
>> -LC:/projects/BUILD/R-source-win32/extsoft/lib/i386
>> -LC:/projects/BUILD/R-source-win32/extsoft/lib
>> -LC:/PROGRA~1/R/R-devel/bin/i386 -lR
>> echo "test1 is "
>> test1 is
>> echo "R_HOME is C:/PROGRA~1/R/R-devel"
>> installing to C:/Program
>> Files/R/R-devel/library/00LOCK-testPackage/00new/testPackage/libs/i386
>> 
>> 
>> I have no idea how to make the example even more minimal for there is
>> literally nothing in the package now. Like you said if R just sets R_HOME
>> and runs "make", I do not understand why it cannot find R in this case for
>> R_HOME seems correct to me. I think there are some other things behind R
>> CMD INSTALL but my poor knowledge does not allow me to see them...Any help
>> will be appreciated.
>> 
>> Please lets not spam the whole list with this any more - this is also why
>> I didn't add R-devel to cc originally. The makefile may be minimal, but the
>> example package is not - you have Rcpp dependency there, two C source
>> files, some R Studio specific thing (an .Rproj file at least). Maybe it is
>> not related, but if you want other to help you, it would be nice to spend
>> some of your time reducing it anyway.
>> 
>> That test1 is empty means that executing R has failed. You need to find
>> out why.
>> 
>> I see that you are installing into C:/Program Files/R/R-devel/library.
>> Normally that directory should not be writeable. Are you running this as
>> Administrator? In principle this could be related, but better to find out
>> directly why executing R is failing.
>> 
>> Best
>> Tomas
>> 
>> 
>> 
>> 
>> Best,
>> Jiefei
>> 
>> 
>> On Wed, Mar 11, 2020 at 8:57 AM Tomas Kalibera <tomas.kalibera at gmail.com>
>> wrote:
>> 
>>> 
>>> Thanks, Jiefei, unfortunately your example does not work on my system,
>>> and also it is far from minimal. The error message you are getting is from
>>> Windows and could be caused for example by accidental quoting of the path
>>> using single quotes.
>>> 
>>> Issues with RStudio or devtools would have to be discussed in their
>>> mailing lists/with their authors, but my guess is that the problem is in
>>> your local configuration, and after all you need it to work with the base R
>>> CMD INSTALL anyway. There is not much wrong R could do here, it just sets
>>> R_HOME and runs "make".
>>> 
>>> For example this works for me, but some closer alternations of your code
>>> work as well:
>>> 
>>> test1 := $(shell $(R_HOME)/bin/R --slave -e 'runif(3)')
>>> all:
>>>        echo "test1 is $(test1)"
>>>        echo "R_HOME is $(R_HOME)"
>>> 
>>> I would recommend that you try to narrow down your example so that it is
>>> really minimal. Use R_HOME, not hard-coded paths, as that is what you would
>>> use in reality anyway. Print R_HOME and check it is valid. If the problem
>>> persists, find out why it works when invoked from the command line but not
>>> from R CMD INSTALL.
>>> 
>>> Best
>>> Tomas
>>> 
>>> On 3/10/20 10:15 AM, Wang Jiefei wrote:
>>> 
>>>  Oops, I think both of us forget to cite the r-devel channel.
>>> 
>>> Best,
>>> Jiefei
>>> 
>>> On Tue, Mar 10, 2020 at 5:13 AM Wang Jiefei <szwjf08 at gmail.com> wrote:
>>> 
>>>> Thanks for your quick response, Tomas.
>>>> 
>>>> Yes, this is a path issue, I think the problem is related to R, not the
>>>> Rtools make. I built an example package for reproducing the problem:
>>>> https://github.com/Jiefei-Wang/example
>>>> 
>>>> Here is the version of my R and Rtools:
>>>> The release R version:
>>>> R version 3.6.2 (2019-12-12)
>>>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>>>> Running under: Windows 10 x64 (build 18362)
>>>> 
>>>> The devel R version:
>>>> R Under development (unstable) (2020-03-09 r77919)
>>>> Platform: x86_64-w64-mingw32/x64 (64-bit)
>>>> Running under: Windows 10 x64 (build 18362)
>>>> 
>>>> Rtools version 3.5.0.4
>>>> 
>>>> Things become interesting after I did more tests. I originally thought
>>>> this might be only related to the devel R, but it seems like the released
>>>> version is also affected. Here is a summary of my test results using the
>>>> example package:
>>>> 
>>>> 1. command-line Rtools make: Success
>>>> 2. command-line R CMD INSTALL: Failed on both R3.6.2 and R4.0
>>>> 3. Rstudio install button: Success on R3.6.2 but failed on R4.0
>>>> 4. Rstudio running devtool::install: Success on both
>>>> 
>>>> Now the problem becomes more intricate. I have no idea which one goes
>>>> wrong. Here are the details of my test results, I hope it can be helpful:
>>>> 
>>>> *Command line:*
>>>> 1. "C:\Rtools\mingw_64\bin\mingw32-make.exe" -f
>>>> example-master/src/Makevars
>>>> test1 is [1] 0.2039269 0.1454402 0.1578401
>>>> test2 is [1] 0.1919521 0.9257183 0.2130247
>>>> test3 is [1] 0.06255174 0.27555363 0.72737111
>>>> mingw32-make: *** No targets.  Stop.
>>>> 
>>>> 2. "C:\Program Files\R\R-3.6.2\bin\R" CMD INSTALL testPackage_1.0.tar.gz
>>>> *** arch - x64
>>>> test1 is [1] 0.1584299 0.9338829 0.9528810
>>>> The filename, directory name, or volume label syntax is incorrect.
>>>> test2 is
>>>> The filename, directory name, or volume label syntax is incorrect.
>>>> test3 is
>>>> 
>>>>  3. "C:\Program Files\R\R-devel\bin\R" CMD INSTALL
>>>> testPackage_1.0.tar.gz
>>>> *** arch - x64
>>>> test1 is [1] 0.2668522 0.9246174 0.0184601
>>>> The filename, directory name, or volume label syntax is incorrect.
>>>> test2 is
>>>> The filename, directory name, or volume label syntax is incorrect.
>>>> test3 is
>>>> 
>>>> *R studio:*
>>>> 1. R3.6:  Clicking the install button
>>>> ==> Rcmd.exe INSTALL --no-multiarch --with-keep.source example-master
>>>> * installing to library 'C:/Users/wangj/Documents/R/win-library/3.6'
>>>> * installing *source* package 'testPackage' ...
>>>> ** using staged installation
>>>> ** libs
>>>> test1 is [1] 0.1583112 0.6631700 0.2265564
>>>> test2 is [1] 0.6999799 0.5205237 0.8264029
>>>> test3 is [1] 0.3591798 0.1767392 0.2869383
>>>> 
>>>> 2.  R4.0: Clicking the install button
>>>> Rcmd.exe INSTALL --no-multiarch --with-keep.source example-master
>>>> * installing to library 'C:/Program Files/R/R-devel/library'
>>>> * installing *source* package 'testPackage' ...
>>>> ** using staged installation
>>>> ** libs
>>>> test1 is [1] 0.2091070 0.5411138 0.1051517
>>>> The filename, directory name, or volume label syntax is incorrect.
>>>> test2 is
>>>> The filename, directory name, or volume label syntax is incorrect.
>>>> test3 is
>>>> 
>>>> 3. R3.6:  devtools::load_all(".")
>>>> devtools::load_all(".")
>>>> Loading testPackage
>>>> Re-compiling testPackage
>>>> -  installing *source* package 'testPackage' ... (364ms)
>>>>   ** using staged installation
>>>>   ** libs
>>>>   test1 is [1] 0.93251741 0.03975758 0.57824150
>>>>   test2 is [1] 0.8681301 0.4801464 0.9112827
>>>>   test3 is [1] 0.430470791 0.008393394 0.341484128
>>>>   test1 is [1] 0.68865768 0.05354531 0.91665539
>>>>   test2 is [1] 0.19473846 0.60293655 0.09421961
>>>>   test3 is [1] 0.90653581 0.12456034 0.09526018
>>>> 
>>>> 4. R4.0: devtools::load_all(".")
>>>> Loading testPackage
>>>> Re-compiling testPackage
>>>> ?  installing *source* package 'testPackage' ... (357ms)
>>>>   ** using staged installation
>>>>   ** libs
>>>>   test1 is [1] 0.00545376 0.30696231 0.68752312
>>>>   test2 is [1] 0.1059506 0.7506894 0.8607918
>>>>   test3 is [1] 0.5321226 0.6985332 0.7343680
>>>>   test1 is [1] 0.7722255 0.3881171 0.5611294
>>>>   test2 is [1] 0.5443175 0.8418503 0.3479382
>>>>   test3 is [1] 0.7400557 0.3322797 0.6818899
>>>> 
>>>> 
>>>> Cheers,
>>>> Jiefei
>>>> 
>>>> On Tue, Mar 10, 2020 at 4:11 AM Tomas Kalibera <tomas.kalibera at gmail.com>
>>>> wrote:
>>>> 
>>>>> Hi Jiefei,
>>>>> 
>>>>> thanks for your report, but I don't understand from you current
>>>>> description what the problem is. Are you saying that "make" shipped
>>>>> with
>>>>> some recent Rtools is not accepting some forms of PATHs? But, which
>>>>> Rtools then, which version of make, how do you run it?
>>>>> 
>>>>> Why are you referring to "R CMD INSTALL" when none of your examples use
>>>>> it? Is "R CMD INSTALL" necessary for reproducing the problem, cannot
>>>>> you
>>>>> just run "make" directly?
>>>>> 
>>>>> Or are you reporting a bug inside R itself? (you are referring to
>>>>> specific svn revisions of R). But how could R be involved in this, is
>>>>> it
>>>>> in how it executes make?
>>>>> 
>>>>> Please provide a minimal but complete reproducible example, please
>>>>> provide somehow test files that can be used.  Perhaps if you try to do
>>>>> a
>>>>> little bit of debugging on your end, it might help you to narrow down
>>>>> the problem to the point that it will be then easier to understand it.
>>>>> For example: if the problem is in "make", it should be possible to
>>>>> trigger it directly from the command line, then you could easily try
>>>>> with different versions of make and report which ones are the problem..
>>>>> 
>>>>> Thanks
>>>>> Tomas
>>>>> 
>>>>> 
>>>>> On 3/10/20 8:22 AM, Wang Jiefei wrote:
>>>>>> Hi all,
>>>>>> 
>>>>>> Here is a bug(or feature?) that exists at least from R 2020-02-24
>>>>>> r77852 to 2020-03-09 r77919 on Window. Consider this example makefile
>>>>> in a
>>>>>> package
>>>>>> ```
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> *test1=$(shell echo 'runif(3)'|R --vanilla --slave)test2=$(shell echo
>>>>>> 'runif(3)'|"C:/Program Files/R/R-devel/bin/R" --vanilla
>>>>>> --slave)test3=$(shell echo 'runif(3)'|"C:/PROGRA~1/R/R-devel/bin/R"
>>>>>> --vanilla --slave)$(info test1 is $(test1))$(info test2 is
>>>>> $(test2))$(info
>>>>>> test3 is $(test3))*
>>>>>> ```
>>>>>> 
>>>>>> I have no problem running the file using GUN make or installing the
>>>>> package
>>>>>> on R 3.6, both give the same result.
>>>>>> ```
>>>>>> *C:\Rtools\mingw_64\bin\mingw32-make.exe  *
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> *test1 is [1] 0.3427626 0.8027041 0.5611914test2 is [1] 0.9904205
>>>>> 0.3922129
>>>>>> 0.5970083test3 is [1] 0.3469528 0.1993838 0.8434841mingw32-make: ***
>>>>> No
>>>>>> targets.  Stop.*
>>>>>> *```*
>>>>>> 
>>>>>> However, on the devel version of R, it cannot recognize both the full
>>>>> and
>>>>>> short path of R and gives an error
>>>>>> ```
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> 
>>>>>> *test1 is  [1] 0.42686376 0.84126831 0.09538047The filename, directory
>>>>>> name, or volume label syntax is incorrect.test2 isThe filename,
>>>>> directory
>>>>>> name, or volume label syntax is incorrect.test3 is*
>>>>>> ```
>>>>>> 
>>>>>> I found this issue because my package needs to call R functions in the
>>>>>> makefile. The code is similar to:
>>>>>> ```
>>>>>> *  myvar = $(shell echo 'runif(3)'|"${R_HOME}/bin/R" --vanilla
>>>>> --slave)*
>>>>>> ```
>>>>>> Since *R_HOME *is set to *C:/PROGRA~1/R/R-devel/*, this will result
>>>>> in the
>>>>>> same error as I mentioned above. I do not know whether this is
>>>>> intentional.
>>>>>> If so, what is the correct way to call R function in a makefile?
>>>>>> 
>>>>>> Best,
>>>>>> Jiefei
>>>>>> 
>>>>>>      [[alternative HTML version deleted]]
>>>>>> 
>>>>>> ______________________________________________
>>>>>> R-devel at r-project.org mailing list
>>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
>>>>> 
>>>>> 
>>>>> 
>>> 
>> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
> 


From @zwj|08 @end|ng |rom gm@||@com  Thu Mar 12 05:09:51 2020
From: @zwj|08 @end|ng |rom gm@||@com (Wang Jiefei)
Date: Thu, 12 Mar 2020 00:09:51 -0400
Subject: [Rd] R CMD INSTALL cannot recognize full path on Windows
In-Reply-To: <B04693F5-C4CB-43A1-8B3E-9C60C1D387AE@R-project.org>
References: <CAGiFhPM1C_J_LGUWVHc-jb8DpbVqt_c9ZwMjCafT0ZLozsbe0Q@mail.gmail.com>
 <b372a694-da0b-e16a-4798-7978c78b6bd5@gmail.com>
 <CAGiFhPOutqdxQ+is13-bFGx93f531O28zb20kPDsD1AdMn9_TA@mail.gmail.com>
 <CAGiFhPPWY64mPjett5aZ5EdRwAkP2TBJn42d9G4iCyLsq_3g+g@mail.gmail.com>
 <8b15a23e-7db0-b4f7-d5a4-327230e6fdbb@gmail.com>
 <CAGiFhPPS1Gq609kVOF8E1+Mk_L2i5UDmmsgCX4vAv6ekd=dWqQ@mail.gmail.com>
 <82de2b77-6f98-09ed-f3c0-e4fef0dc7178@gmail.com>
 <CAGiFhPN_tT_cYeQbkFJW1ySaObOEwZ2ELHwr4w+rc8x_mLr_FA@mail.gmail.com>
 <B04693F5-C4CB-43A1-8B3E-9C60C1D387AE@R-project.org>
Message-ID: <CAGiFhPMmZUm0BvP=sY9E3aL-xtSqqEP6rpe+6hm1aOzeUFgb2Q@mail.gmail.com>

Thanks for your test result Simon, I really appreciate it. I borrowed a new
laptop and found the issue is only reproducible on my machine, so there is
something not in R or the package that causes this problem. I will
stop chattering and try to figure out where the problem is. Thanks again
for your time and help!

Cheers,
Jiefei

On Wed, Mar 11, 2020 at 6:22 PM Simon Urbanek <simon.urbanek at r-project.org>
wrote:

> Jiefei,
>
> you did not commit all files into the example package - your example has
> things like RcppExports.cpp as well as additional flags which are not in
> your GH project. I suspect the issue is with the extra flags you're adding
> - those don't come from R. Please make sure you can replicate the issue
> with the GH package you created.
>
> Cheers,
> Simon
>
>
> * installing *source* package 'testPackage' ...
> ** using staged installation
> ** libs
>
> *** arch - i386
> echo "test1 is [1] 0.1522111 0.2533619 0.6591809"
> test1 is [1] 0.1522111 0.2533619 0.6591809
> echo "R_HOME is C:/R/R-3.6.2"
> R_HOME is C:/R/R-3.6.2
> echo "Fake library" > testPackage.dll
> installing to
> C:/R/R-3.6.2/library/00LOCK-testPackage/00new/testPackage/libs/i38
> 6
>
> *** arch - x64
> echo "test1 is [1] 0.9271811 0.8040735 0.4739104"
> test1 is [1] 0.9271811 0.8040735 0.4739104
> echo "R_HOME is C:/R/R-3.6.2"
> R_HOME is C:/R/R-3.6.2
> echo "Fake library" > testPackage.dll
> installing to
> C:/R/R-3.6.2/library/00LOCK-testPackage/00new/testPackage/libs/x64
>
> ** help
> No man pages found in package  'testPackage'
> *** installing help indices
> ** building package indices
> ** testing if installed package can be loaded from temporary location
> *** arch - i386
> *** arch - x64
> ** testing if installed package can be loaded from final location
> *** arch - i386
> *** arch - x64
> ** testing if installed package keeps a record of temporary installation
> path
> * DONE (testPackage)
> Making 'packages.html' ... done
>
> > On 12/03/2020, at 4:33 AM, Wang Jiefei <szwjf08 at gmail.com> wrote:
> >
> > Thanks a lot for your suggestions. I see what you mean. I have removed
> all
> > unnecessary files and dependences on
> https://github.com/Jiefei-Wang/example,
> > but still no luck. I've tried to install the package as a user, not
> admin,
> > but I got the same error. Also, I apologize for spamming the mail list. I
> > will keep my reply as neat as possible.
> >
> > Martin has suggested checking the encoding of the file and locale in the
> > session info, so here is this missing information: The makefile is
> encoded
> > in UTF-8, and the locale is:
> >
> > [1] LC_COLLATE=English_United States.1252
> > [2] LC_CTYPE=English_United States.1252
> > [3] LC_MONETARY=English_United States.1252
> > [4] LC_NUMERIC=C
> > [5] LC_TIME=English_United States.1252
> >
> > That is where I am stuck, any help would be appreciated.
> >
> > Best,
> > Jiefei
> >
> >
> >
> > On Wed, Mar 11, 2020 at 9:56 AM Tomas Kalibera <tomas.kalibera at gmail.com
> >
> > wrote:
> >
> >> On 3/11/20 2:26 PM, Wang Jiefei wrote:
> >>
> >> Thanks, Tomas. I took your suggestion and change the make file to
> >>
> >> test1:=$(shell $(R_HOME)/bin/R --slave -e 'runif(3)')
> >>
> >> all: testPackage.dll
> >>    echo "test1 is $(test1)"
> >>    echo "R_HOME is $(R_HOME)"
> >>
> >> However, R CMD INSTALL still gives me the same error:
> >>
> >>> R CMD INSTALL testPackage_1.0.tar.gz* installing to library 'C:/Program
> >> Files/R/R-devel/library'
> >> * installing *source* package 'testPackage' ...
> >> ** using staged installation
> >> ** libs
> >>
> >> *** arch - i386
> >> The filename, directory name, or volume label syntax is incorrect.
> >> c:/Rtools/mingw_32/bin/g++ -std=gnu++11
> -I"C:/PROGRA~1/R/R-devel/include"
> >> -DNDEBUG  -I'C:/Program Files/R/R-devel/library/Rcpp/include'
> >> -I"C:/projects/BUILD/R-source-win32/extsoft/include"     -O2 -Wall
> >> -mfpmath=sse -msse2 -c RcppExports.cpp -o RcppExports.o
> >> c:/Rtools/mingw_32/bin/g++ -std=gnu++11
> -I"C:/PROGRA~1/R/R-devel/include"
> >> -DNDEBUG  -I'C:/Program Files/R/R-devel/library/Rcpp/include'
> >> -I"C:/projects/BUILD/R-source-win32/extsoft/include"     -O2 -Wall
> >> -mfpmath=sse -msse2 -c example.cpp -o example.o
> >> c:/Rtools/mingw_32/bin/g++ -std=gnu++11 -shared -s -static-libgcc -o
> >> testPackage.dll tmp.def RcppExports.o example.o
> >> -LC:/projects/BUILD/R-source-win32/extsoft/lib/i386
> >> -LC:/projects/BUILD/R-source-win32/extsoft/lib
> >> -LC:/PROGRA~1/R/R-devel/bin/i386 -lR
> >> echo "test1 is "
> >> test1 is
> >> echo "R_HOME is C:/PROGRA~1/R/R-devel"
> >> installing to C:/Program
> >> Files/R/R-devel/library/00LOCK-testPackage/00new/testPackage/libs/i386
> >>
> >>
> >> I have no idea how to make the example even more minimal for there is
> >> literally nothing in the package now. Like you said if R just sets
> R_HOME
> >> and runs "make", I do not understand why it cannot find R in this case
> for
> >> R_HOME seems correct to me. I think there are some other things behind R
> >> CMD INSTALL but my poor knowledge does not allow me to see them...Any
> help
> >> will be appreciated.
> >>
> >> Please lets not spam the whole list with this any more - this is also
> why
> >> I didn't add R-devel to cc originally. The makefile may be minimal, but
> the
> >> example package is not - you have Rcpp dependency there, two C source
> >> files, some R Studio specific thing (an .Rproj file at least). Maybe it
> is
> >> not related, but if you want other to help you, it would be nice to
> spend
> >> some of your time reducing it anyway.
> >>
> >> That test1 is empty means that executing R has failed. You need to find
> >> out why.
> >>
> >> I see that you are installing into C:/Program Files/R/R-devel/library.
> >> Normally that directory should not be writeable. Are you running this as
> >> Administrator? In principle this could be related, but better to find
> out
> >> directly why executing R is failing.
> >>
> >> Best
> >> Tomas
> >>
> >>
> >>
> >>
> >> Best,
> >> Jiefei
> >>
> >>
> >> On Wed, Mar 11, 2020 at 8:57 AM Tomas Kalibera <
> tomas.kalibera at gmail.com>
> >> wrote:
> >>
> >>>
> >>> Thanks, Jiefei, unfortunately your example does not work on my system,
> >>> and also it is far from minimal. The error message you are getting is
> from
> >>> Windows and could be caused for example by accidental quoting of the
> path
> >>> using single quotes.
> >>>
> >>> Issues with RStudio or devtools would have to be discussed in their
> >>> mailing lists/with their authors, but my guess is that the problem is
> in
> >>> your local configuration, and after all you need it to work with the
> base R
> >>> CMD INSTALL anyway. There is not much wrong R could do here, it just
> sets
> >>> R_HOME and runs "make".
> >>>
> >>> For example this works for me, but some closer alternations of your
> code
> >>> work as well:
> >>>
> >>> test1 := $(shell $(R_HOME)/bin/R --slave -e 'runif(3)')
> >>> all:
> >>>        echo "test1 is $(test1)"
> >>>        echo "R_HOME is $(R_HOME)"
> >>>
> >>> I would recommend that you try to narrow down your example so that it
> is
> >>> really minimal. Use R_HOME, not hard-coded paths, as that is what you
> would
> >>> use in reality anyway. Print R_HOME and check it is valid. If the
> problem
> >>> persists, find out why it works when invoked from the command line but
> not
> >>> from R CMD INSTALL.
> >>>
> >>> Best
> >>> Tomas
> >>>
> >>> On 3/10/20 10:15 AM, Wang Jiefei wrote:
> >>>
> >>>  Oops, I think both of us forget to cite the r-devel channel.
> >>>
> >>> Best,
> >>> Jiefei
> >>>
> >>> On Tue, Mar 10, 2020 at 5:13 AM Wang Jiefei <szwjf08 at gmail.com> wrote:
> >>>
> >>>> Thanks for your quick response, Tomas.
> >>>>
> >>>> Yes, this is a path issue, I think the problem is related to R, not
> the
> >>>> Rtools make. I built an example package for reproducing the problem:
> >>>> https://github.com/Jiefei-Wang/example
> >>>>
> >>>> Here is the version of my R and Rtools:
> >>>> The release R version:
> >>>> R version 3.6.2 (2019-12-12)
> >>>> Platform: x86_64-w64-mingw32/x64 (64-bit)
> >>>> Running under: Windows 10 x64 (build 18362)
> >>>>
> >>>> The devel R version:
> >>>> R Under development (unstable) (2020-03-09 r77919)
> >>>> Platform: x86_64-w64-mingw32/x64 (64-bit)
> >>>> Running under: Windows 10 x64 (build 18362)
> >>>>
> >>>> Rtools version 3.5.0.4
> >>>>
> >>>> Things become interesting after I did more tests. I originally thought
> >>>> this might be only related to the devel R, but it seems like the
> released
> >>>> version is also affected. Here is a summary of my test results using
> the
> >>>> example package:
> >>>>
> >>>> 1. command-line Rtools make: Success
> >>>> 2. command-line R CMD INSTALL: Failed on both R3.6.2 and R4.0
> >>>> 3. Rstudio install button: Success on R3.6.2 but failed on R4.0
> >>>> 4. Rstudio running devtool::install: Success on both
> >>>>
> >>>> Now the problem becomes more intricate. I have no idea which one goes
> >>>> wrong. Here are the details of my test results, I hope it can be
> helpful:
> >>>>
> >>>> *Command line:*
> >>>> 1. "C:\Rtools\mingw_64\bin\mingw32-make.exe" -f
> >>>> example-master/src/Makevars
> >>>> test1 is [1] 0.2039269 0.1454402 0.1578401
> >>>> test2 is [1] 0.1919521 0.9257183 0.2130247
> >>>> test3 is [1] 0.06255174 0.27555363 0.72737111
> >>>> mingw32-make: *** No targets.  Stop.
> >>>>
> >>>> 2. "C:\Program Files\R\R-3.6.2\bin\R" CMD INSTALL
> testPackage_1.0.tar.gz
> >>>> *** arch - x64
> >>>> test1 is [1] 0.1584299 0.9338829 0.9528810
> >>>> The filename, directory name, or volume label syntax is incorrect.
> >>>> test2 is
> >>>> The filename, directory name, or volume label syntax is incorrect.
> >>>> test3 is
> >>>>
> >>>>  3. "C:\Program Files\R\R-devel\bin\R" CMD INSTALL
> >>>> testPackage_1.0.tar.gz
> >>>> *** arch - x64
> >>>> test1 is [1] 0.2668522 0.9246174 0.0184601
> >>>> The filename, directory name, or volume label syntax is incorrect.
> >>>> test2 is
> >>>> The filename, directory name, or volume label syntax is incorrect.
> >>>> test3 is
> >>>>
> >>>> *R studio:*
> >>>> 1. R3.6:  Clicking the install button
> >>>> ==> Rcmd.exe INSTALL --no-multiarch --with-keep.source example-master
> >>>> * installing to library 'C:/Users/wangj/Documents/R/win-library/3.6'
> >>>> * installing *source* package 'testPackage' ...
> >>>> ** using staged installation
> >>>> ** libs
> >>>> test1 is [1] 0.1583112 0.6631700 0.2265564
> >>>> test2 is [1] 0.6999799 0.5205237 0.8264029
> >>>> test3 is [1] 0.3591798 0.1767392 0.2869383
> >>>>
> >>>> 2.  R4.0: Clicking the install button
> >>>> Rcmd.exe INSTALL --no-multiarch --with-keep.source example-master
> >>>> * installing to library 'C:/Program Files/R/R-devel/library'
> >>>> * installing *source* package 'testPackage' ...
> >>>> ** using staged installation
> >>>> ** libs
> >>>> test1 is [1] 0.2091070 0.5411138 0.1051517
> >>>> The filename, directory name, or volume label syntax is incorrect.
> >>>> test2 is
> >>>> The filename, directory name, or volume label syntax is incorrect.
> >>>> test3 is
> >>>>
> >>>> 3. R3.6:  devtools::load_all(".")
> >>>> devtools::load_all(".")
> >>>> Loading testPackage
> >>>> Re-compiling testPackage
> >>>> -  installing *source* package 'testPackage' ... (364ms)
> >>>>   ** using staged installation
> >>>>   ** libs
> >>>>   test1 is [1] 0.93251741 0.03975758 0.57824150
> >>>>   test2 is [1] 0.8681301 0.4801464 0.9112827
> >>>>   test3 is [1] 0.430470791 0.008393394 0.341484128
> >>>>   test1 is [1] 0.68865768 0.05354531 0.91665539
> >>>>   test2 is [1] 0.19473846 0.60293655 0.09421961
> >>>>   test3 is [1] 0.90653581 0.12456034 0.09526018
> >>>>
> >>>> 4. R4.0: devtools::load_all(".")
> >>>> Loading testPackage
> >>>> Re-compiling testPackage
> >>>> ?  installing *source* package 'testPackage' ... (357ms)
> >>>>   ** using staged installation
> >>>>   ** libs
> >>>>   test1 is [1] 0.00545376 0.30696231 0.68752312
> >>>>   test2 is [1] 0.1059506 0.7506894 0.8607918
> >>>>   test3 is [1] 0.5321226 0.6985332 0.7343680
> >>>>   test1 is [1] 0.7722255 0.3881171 0.5611294
> >>>>   test2 is [1] 0.5443175 0.8418503 0.3479382
> >>>>   test3 is [1] 0.7400557 0.3322797 0.6818899
> >>>>
> >>>>
> >>>> Cheers,
> >>>> Jiefei
> >>>>
> >>>> On Tue, Mar 10, 2020 at 4:11 AM Tomas Kalibera <
> tomas.kalibera at gmail.com>
> >>>> wrote:
> >>>>
> >>>>> Hi Jiefei,
> >>>>>
> >>>>> thanks for your report, but I don't understand from you current
> >>>>> description what the problem is. Are you saying that "make" shipped
> >>>>> with
> >>>>> some recent Rtools is not accepting some forms of PATHs? But, which
> >>>>> Rtools then, which version of make, how do you run it?
> >>>>>
> >>>>> Why are you referring to "R CMD INSTALL" when none of your examples
> use
> >>>>> it? Is "R CMD INSTALL" necessary for reproducing the problem, cannot
> >>>>> you
> >>>>> just run "make" directly?
> >>>>>
> >>>>> Or are you reporting a bug inside R itself? (you are referring to
> >>>>> specific svn revisions of R). But how could R be involved in this, is
> >>>>> it
> >>>>> in how it executes make?
> >>>>>
> >>>>> Please provide a minimal but complete reproducible example, please
> >>>>> provide somehow test files that can be used.  Perhaps if you try to
> do
> >>>>> a
> >>>>> little bit of debugging on your end, it might help you to narrow down
> >>>>> the problem to the point that it will be then easier to understand
> it.
> >>>>> For example: if the problem is in "make", it should be possible to
> >>>>> trigger it directly from the command line, then you could easily try
> >>>>> with different versions of make and report which ones are the
> problem..
> >>>>>
> >>>>> Thanks
> >>>>> Tomas
> >>>>>
> >>>>>
> >>>>> On 3/10/20 8:22 AM, Wang Jiefei wrote:
> >>>>>> Hi all,
> >>>>>>
> >>>>>> Here is a bug(or feature?) that exists at least from R 2020-02-24
> >>>>>> r77852 to 2020-03-09 r77919 on Window. Consider this example
> makefile
> >>>>> in a
> >>>>>> package
> >>>>>> ```
> >>>>>>
> >>>>>>
> >>>>>>
> >>>>>>
> >>>>>>
> >>>>>>
> >>>>>> *test1=$(shell echo 'runif(3)'|R --vanilla --slave)test2=$(shell
> echo
> >>>>>> 'runif(3)'|"C:/Program Files/R/R-devel/bin/R" --vanilla
> >>>>>> --slave)test3=$(shell echo 'runif(3)'|"C:/PROGRA~1/R/R-devel/bin/R"
> >>>>>> --vanilla --slave)$(info test1 is $(test1))$(info test2 is
> >>>>> $(test2))$(info
> >>>>>> test3 is $(test3))*
> >>>>>> ```
> >>>>>>
> >>>>>> I have no problem running the file using GUN make or installing the
> >>>>> package
> >>>>>> on R 3.6, both give the same result.
> >>>>>> ```
> >>>>>> *C:\Rtools\mingw_64\bin\mingw32-make.exe  *
> >>>>>>
> >>>>>>
> >>>>>>
> >>>>>> *test1 is [1] 0.3427626 0.8027041 0.5611914test2 is [1] 0.9904205
> >>>>> 0.3922129
> >>>>>> 0.5970083test3 is [1] 0.3469528 0.1993838 0.8434841mingw32-make: ***
> >>>>> No
> >>>>>> targets.  Stop.*
> >>>>>> *```*
> >>>>>>
> >>>>>> However, on the devel version of R, it cannot recognize both the
> full
> >>>>> and
> >>>>>> short path of R and gives an error
> >>>>>> ```
> >>>>>>
> >>>>>>
> >>>>>>
> >>>>>>
> >>>>>> *test1 is  [1] 0.42686376 0.84126831 0.09538047The filename,
> directory
> >>>>>> name, or volume label syntax is incorrect.test2 isThe filename,
> >>>>> directory
> >>>>>> name, or volume label syntax is incorrect.test3 is*
> >>>>>> ```
> >>>>>>
> >>>>>> I found this issue because my package needs to call R functions in
> the
> >>>>>> makefile. The code is similar to:
> >>>>>> ```
> >>>>>> *  myvar = $(shell echo 'runif(3)'|"${R_HOME}/bin/R" --vanilla
> >>>>> --slave)*
> >>>>>> ```
> >>>>>> Since *R_HOME *is set to *C:/PROGRA~1/R/R-devel/*, this will result
> >>>>> in the
> >>>>>> same error as I mentioned above. I do not know whether this is
> >>>>> intentional.
> >>>>>> If so, what is the correct way to call R function in a makefile?
> >>>>>>
> >>>>>> Best,
> >>>>>> Jiefei
> >>>>>>
> >>>>>>      [[alternative HTML version deleted]]
> >>>>>>
> >>>>>> ______________________________________________
> >>>>>> R-devel at r-project.org mailing list
> >>>>>> https://stat.ethz.ch/mailman/listinfo/r-devel
> >>>>>
> >>>>>
> >>>>>
> >>>
> >>
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
> >
>
>

	[[alternative HTML version deleted]]


From toth@dene@ @end|ng |rom kogentum@hu  Thu Mar 12 10:06:43 2020
From: toth@dene@ @end|ng |rom kogentum@hu (=?UTF-8?B?RMOpbmVzIFTDs3Ro?=)
Date: Thu, 12 Mar 2020 10:06:43 +0100
Subject: [Rd] support of `substitute(...())`
Message-ID: <5268fdf5-664f-36ad-3111-d269b8da3d74@kogentum.hu>

Dear R Core Team,

I learnt approx. two years ago in this mailing list that one can use the 
following "trick" to get a (dotted pair)list of the ellipsis arguments 
inside a function:

`substitute(...())`

Now my problem is that I can not find any occurrence of this call within 
the R source - the most frequent solution there is 
`substitute(list(...))[-1L] `

I would like to know if:
1) substitute(...()) is a trick or a feature in the language;
2) it will be supported in the future;
3) when (in which R version) it was introduced.

A hint on where to look for the machinery in the R source would be also 
appreciated.

Regards,
Denes


From pd@me@ @end|ng |rom cb@@dk  Thu Mar 12 13:30:35 2020
From: pd@me@ @end|ng |rom cb@@dk (Peter Dalgaard)
Date: Thu, 12 Mar 2020 12:30:35 +0000
Subject: [Rd] R 4.0.0 scheduled for April 24
Message-ID: <68E2CE45-82CF-4766-9363-6023DF0B5BE4@cbs.dk>

Full schedule is available on developer.r-project.org.

Notice that Copenhagen Business School, like all Danish educational institutions, is physically locked down for two weeks due to COVID-19. The schedule is automated, but there may be irregularities with the nightly builds, if things act up and I can't get to the machine.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel


From wdun|@p @end|ng |rom t|bco@com  Thu Mar 12 16:06:05 2020
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Thu, 12 Mar 2020 08:06:05 -0700
Subject: [Rd] support of `substitute(...())`
In-Reply-To: <5268fdf5-664f-36ad-3111-d269b8da3d74@kogentum.hu>
References: <5268fdf5-664f-36ad-3111-d269b8da3d74@kogentum.hu>
Message-ID: <CAF8bMcZHhmeuc3onZOj+8KQQ04yt0AmzfRA0JSGogC3fjY58zg@mail.gmail.com>

Note that substitute(...()) and substitute(someFunc(...))[-1] give slightly
different results, the former a pairlist and the latter a call.
  > str((function(...)substitute(...()))(stop(1),stop(2),stop(3)))
  Dotted pair list of 3
   $ : language stop(1)
   $ : language stop(2)
   $ : language stop(3)
  >
str((function(...)substitute(someFunc(...))[-1])(stop(1),stop(2),stop(3)))
   language stop(1)(stop(2), stop(3))

The ...() idiom has been around for a long time, but more recently
(slightly after R-3.4.0?) the ...elt(n) and ...length() functions were
introduced so you don't have to use it much.  I don't see a ...names()
function that would give the names of the ... arguments -
names(substitute(...())).

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Thu, Mar 12, 2020 at 2:09 AM D?nes T?th <toth.denes at kogentum.hu> wrote:

> Dear R Core Team,
>
> I learnt approx. two years ago in this mailing list that one can use the
> following "trick" to get a (dotted pair)list of the ellipsis arguments
> inside a function:
>
> `substitute(...())`
>
> Now my problem is that I can not find any occurrence of this call within
> the R source - the most frequent solution there is
> `substitute(list(...))[-1L] `
>
> I would like to know if:
> 1) substitute(...()) is a trick or a feature in the language;
> 2) it will be supported in the future;
> 3) when (in which R version) it was introduced.
>
> A hint on where to look for the machinery in the R source would be also
> appreciated.
>
> Regards,
> Denes
>
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel
>

	[[alternative HTML version deleted]]


From toth@dene@ @end|ng |rom kogentum@hu  Thu Mar 12 16:22:09 2020
From: toth@dene@ @end|ng |rom kogentum@hu (=?UTF-8?B?RMOpbmVzIFTDs3Ro?=)
Date: Thu, 12 Mar 2020 16:22:09 +0100
Subject: [Rd] support of `substitute(...())`
In-Reply-To: <CAF8bMcZHhmeuc3onZOj+8KQQ04yt0AmzfRA0JSGogC3fjY58zg@mail.gmail.com>
References: <5268fdf5-664f-36ad-3111-d269b8da3d74@kogentum.hu>
 <CAF8bMcZHhmeuc3onZOj+8KQQ04yt0AmzfRA0JSGogC3fjY58zg@mail.gmail.com>
Message-ID: <992362cf-e696-c164-d036-68ddab39eb34@kogentum.hu>


On 3/12/20 4:06 PM, William Dunlap wrote:
> Note that substitute(...()) and substitute(someFunc(...))[-1] give 
> slightly different results, the former a pairlist and the latter a call.
>  ? > str((function(...)substitute(...()))(stop(1),stop(2),stop(3)))
>  ? Dotted pair list of 3
>  ? ?$ : language stop(1)
>  ? ?$ : language stop(2)
>  ? ?$ : language stop(3)
>  ? > 
> str((function(...)substitute(someFunc(...))[-1])(stop(1),stop(2),stop(3)))
>  ? ?language stop(1)(stop(2), stop(3))

Yes, I am aware of this difference. In my use cases, the ...() form 
gives the result that I prefer (a pairlist).

> 
> The ...() idiom has been around for a long time, but more recently 
> (slightly after R-3.4.0?) the ...elt(n) and ...length() functions were 
> introduced so you don't have to use it much.  

Yes, I know both.

> I don't see a ...names() 
> function that would give the names of the ... arguments - 
> names(substitute(...())).

Exactly, this is a frequent use case. Occasionally I use it in other 
cases as well where I deliberately do not want to evaluate the arguments 
passed as dots.

What I am most interested in is whether this is a 'trick' or a legal use 
of a (rather unadvertised) feature of the language.

> 
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com <http://tibco.com>
> 
> 
> On Thu, Mar 12, 2020 at 2:09 AM D?nes T?th <toth.denes at kogentum.hu 
> <mailto:toth.denes at kogentum.hu>> wrote:
> 
>     Dear R Core Team,
> 
>     I learnt approx. two years ago in this mailing list that one can use
>     the
>     following "trick" to get a (dotted pair)list of the ellipsis arguments
>     inside a function:
> 
>     `substitute(...())`
> 
>     Now my problem is that I can not find any occurrence of this call
>     within
>     the R source - the most frequent solution there is
>     `substitute(list(...))[-1L] `
> 
>     I would like to know if:
>     1) substitute(...()) is a trick or a feature in the language;
>     2) it will be supported in the future;
>     3) when (in which R version) it was introduced.
> 
>     A hint on where to look for the machinery in the R source would be also
>     appreciated.
> 
>     Regards,
>     Denes
> 
>     ______________________________________________
>     R-devel at r-project.org <mailto:R-devel at r-project.org> mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-devel
>


